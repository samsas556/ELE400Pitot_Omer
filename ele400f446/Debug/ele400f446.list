
ele400f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080060c8  080060c8  000160c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08006388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  200001dc  08006564  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200002a0  08006564  000202a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b45e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000197f  00000000  00000000  0002b66a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009e0  00000000  00000000  0002cff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000930  00000000  00000000  0002d9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000048c5  00000000  00000000  0002e300  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003519  00000000  00000000  00032bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000360de  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000032c0  00000000  00000000  0003615c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060b0 	.word	0x080060b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080060b0 	.word	0x080060b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b97a 	b.w	8000eec <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9e08      	ldr	r6, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d151      	bne.n	8000cc4 <__udivmoddi4+0xb4>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0xf2>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0c20 	rsb	ip, lr, #32
 8000c34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c4c:	0c25      	lsrs	r5, r4, #16
 8000c4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c52:	fa1f f987 	uxth.w	r9, r7
 8000c56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c5e:	fb08 f309 	mul.w	r3, r8, r9
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x6c>
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c6c:	f080 8123 	bcs.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	f240 8120 	bls.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	1aed      	subs	r5, r5, r3
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb00 f909 	mul.w	r9, r0, r9
 8000c90:	45a1      	cmp	r9, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x98>
 8000c94:	19e4      	adds	r4, r4, r7
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 810a 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8107 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	eba4 0409 	sub.w	r4, r4, r9
 8000cac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d061      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6034      	str	r4, [r6, #0]
 8000cbe:	6073      	str	r3, [r6, #4]
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0xc8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d054      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	fab3 f183 	clz	r1, r3
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	f040 808e 	bne.w	8000dfe <__udivmoddi4+0x1ee>
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xdc>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80fa 	bhi.w	8000ee0 <__udivmoddi4+0x2d0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	46ac      	mov	ip, r5
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d03f      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b912      	cbnz	r2, 8000d0a <__udivmoddi4+0xfa>
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d0a:	fab7 fe87 	clz	lr, r7
 8000d0e:	f1be 0f00 	cmp.w	lr, #0
 8000d12:	d134      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d14:	1beb      	subs	r3, r5, r7
 8000d16:	0c3a      	lsrs	r2, r7, #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d22:	0c25      	lsrs	r5, r4, #16
 8000d24:	fb02 3318 	mls	r3, r2, r8, r3
 8000d28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d2c:	fb0c f308 	mul.w	r3, ip, r8
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19ed      	adds	r5, r5, r7
 8000d36:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	f200 80d1 	bhi.w	8000ee4 <__udivmoddi4+0x2d4>
 8000d42:	4680      	mov	r8, r0
 8000d44:	1aed      	subs	r5, r5, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d54:	fb0c fc00 	mul.w	ip, ip, r0
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d74:	e79d      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0420 	rsb	r4, lr, #32
 8000d82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d8e:	0c3a      	lsrs	r2, r7, #16
 8000d90:	fa25 f404 	lsr.w	r4, r5, r4
 8000d94:	ea48 0803 	orr.w	r8, r8, r3
 8000d98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000da0:	fb02 4411 	mls	r4, r2, r1, r4
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dac:	fb01 f30c 	mul.w	r3, r1, ip
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1bc>
 8000db8:	19ed      	adds	r5, r5, r7
 8000dba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000dbe:	f080 808a 	bcs.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	f240 8087 	bls.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	1aeb      	subs	r3, r5, r3
 8000dce:	fa1f f588 	uxth.w	r5, r8
 8000dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dde:	fb00 f30c 	mul.w	r3, r0, ip
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1e6>
 8000de6:	19ed      	adds	r5, r5, r7
 8000de8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dec:	d26f      	bcs.n	8000ece <__udivmoddi4+0x2be>
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	d96d      	bls.n	8000ece <__udivmoddi4+0x2be>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443d      	add	r5, r7
 8000df6:	1aeb      	subs	r3, r5, r3
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	e78f      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	fa22 f807 	lsr.w	r8, r2, r7
 8000e06:	408b      	lsls	r3, r1
 8000e08:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0c:	ea48 0303 	orr.w	r3, r8, r3
 8000e10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e2a:	fa1f f883 	uxth.w	r8, r3
 8000e2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e32:	fb09 f408 	mul.w	r4, r9, r8
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x244>
 8000e42:	18ed      	adds	r5, r5, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e48:	d243      	bcs.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4a:	42ac      	cmp	r4, r5
 8000e4c:	d941      	bls.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e52:	441d      	add	r5, r3
 8000e54:	1b2d      	subs	r5, r5, r4
 8000e56:	fa1f fe8e 	uxth.w	lr, lr
 8000e5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e66:	fb00 f808 	mul.w	r8, r0, r8
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x26e>
 8000e6e:	18e4      	adds	r4, r4, r3
 8000e70:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e74:	d229      	bcs.n	8000eca <__udivmoddi4+0x2ba>
 8000e76:	45a0      	cmp	r8, r4
 8000e78:	d927      	bls.n	8000eca <__udivmoddi4+0x2ba>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	441c      	add	r4, r3
 8000e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e82:	eba4 0408 	sub.w	r4, r4, r8
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	454c      	cmp	r4, r9
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	464d      	mov	r5, r9
 8000e90:	d315      	bcc.n	8000ebe <__udivmoddi4+0x2ae>
 8000e92:	d012      	beq.n	8000eba <__udivmoddi4+0x2aa>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x29c>
 8000e96:	ebba 030e 	subs.w	r3, sl, lr
 8000e9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	6037      	str	r7, [r6, #0]
 8000eaa:	6074      	str	r4, [r6, #4]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e6f8      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e6e0      	b.n	8000c7c <__udivmoddi4+0x6c>
 8000eba:	45c2      	cmp	sl, r8
 8000ebc:	d2ea      	bcs.n	8000e94 <__udivmoddi4+0x284>
 8000ebe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	e7e4      	b.n	8000e94 <__udivmoddi4+0x284>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e7d7      	b.n	8000e7e <__udivmoddi4+0x26e>
 8000ece:	4640      	mov	r0, r8
 8000ed0:	e791      	b.n	8000df6 <__udivmoddi4+0x1e6>
 8000ed2:	4681      	mov	r9, r0
 8000ed4:	e7be      	b.n	8000e54 <__udivmoddi4+0x244>
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	e778      	b.n	8000dcc <__udivmoddi4+0x1bc>
 8000eda:	3802      	subs	r0, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	e745      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xe6>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	443d      	add	r5, r7
 8000eea:	e72b      	b.n	8000d44 <__udivmoddi4+0x134>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b08f      	sub	sp, #60	; 0x3c
 8000ef4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef6:	f000 fbbd 	bl	8001674 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000efa:	f000 f865 	bl	8000fc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000efe:	f000 f929 	bl	8001154 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000f02:	f000 f8cf 	bl	80010a4 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8000f06:	f000 f8fb 	bl	8001100 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Infinite loop */
	char *msg = "debut de programme\n\r";
 8000f0a:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <main+0xc0>)
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30


	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f10:	f7ff f97e 	bl	8000210 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f1e:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <main+0xc4>)
 8000f20:	f002 fbe7 	bl	80036f2 <HAL_UART_Transmit>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_StatusTypeDef ret = !HAL_OK;
 8000f24:	2301      	movs	r3, #1
 8000f26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		while(ret != HAL_OK){
 8000f2a:	e005      	b.n	8000f38 <main+0x48>

			ret = init_pitot(&hi2c2);
 8000f2c:	4822      	ldr	r0, [pc, #136]	; (8000fb8 <main+0xc8>)
 8000f2e:	f000 f988 	bl	8001242 <init_pitot>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		while(ret != HAL_OK){
 8000f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f5      	bne.n	8000f2c <main+0x3c>

		}
		/* USER CODE END WHILE */
		HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8000f40:	2120      	movs	r1, #32
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <main+0xcc>)
 8000f44:	f000 feb9 	bl	8001cba <HAL_GPIO_TogglePin>
		HAL_Delay (100);   /* Insert delay 100 ms */
 8000f48:	2064      	movs	r0, #100	; 0x64
 8000f4a:	f000 fc05 	bl	8001758 <HAL_Delay>

		double pression;
		double temp;

		read_pitot(&hi2c2,&pression,&temp);
 8000f4e:	f107 0220 	add.w	r2, r7, #32
 8000f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4817      	ldr	r0, [pc, #92]	; (8000fb8 <main+0xc8>)
 8000f5a:	f000 f989 	bl	8001270 <read_pitot>

		char string[30];

		sprintf(string, "temp %.4lf \n\r", temp);
 8000f5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f62:	4638      	mov	r0, r7
 8000f64:	461a      	mov	r2, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	4915      	ldr	r1, [pc, #84]	; (8000fc0 <main+0xd0>)
 8000f6a:	f003 fcab 	bl	80048c4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff f94d 	bl	8000210 <strlen>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <main+0xc4>)
 8000f82:	f002 fbb6 	bl	80036f2 <HAL_UART_Transmit>

		sprintf(string, "pres %.4lf \n\r", pression);
 8000f86:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <main+0xd4>)
 8000f92:	f003 fc97 	bl	80048c4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8000f96:	463b      	mov	r3, r7
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff f939 	bl	8000210 <strlen>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4639      	mov	r1, r7
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <main+0xc4>)
 8000faa:	f002 fba2 	bl	80036f2 <HAL_UART_Transmit>
	{
 8000fae:	e7b9      	b.n	8000f24 <main+0x34>
 8000fb0:	080060c8 	.word	0x080060c8
 8000fb4:	20000258 	.word	0x20000258
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	080060e0 	.word	0x080060e0
 8000fc4:	080060f0 	.word	0x080060f0

08000fc8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	; 0x50
 8000fcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	2234      	movs	r2, #52	; 0x34
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 f800 	bl	8003fdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4a2a      	ldr	r2, [pc, #168]	; (800109c <SystemClock_Config+0xd4>)
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <SystemClock_Config+0xd4>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <SystemClock_Config+0xd4>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <SystemClock_Config+0xd8>)
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <SystemClock_Config+0xd8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <SystemClock_Config+0xd8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	2302      	movs	r3, #2
 800102a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800103c:	2310      	movs	r3, #16
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001040:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001044:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800104a:	2302      	movs	r3, #2
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800104e:	2302      	movs	r3, #2
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4618      	mov	r0, r3
 8001058:	f002 f8a4 	bl	80031a4 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001062:	f000 f8e7 	bl	8001234 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2302      	movs	r3, #2
 800106c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2102      	movs	r1, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fdbe 	bl	8002c04 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xca>
	{
		Error_Handler();
 800108e:	f000 f8d1 	bl	8001234 <Error_Handler>
	}
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C2_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C2_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C2_Init+0x50>)
 80010e2:	f000 fe05 	bl	8001cf0 <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80010ec:	f000 f8a2 	bl	8001234 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000204 	.word	0x20000204
 80010f8:	40005800 	.word	0x40005800
 80010fc:	000186a0 	.word	0x000186a0

08001100 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <MX_USART2_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_USART2_UART_Init+0x4c>)
 8001138:	f002 fa8e 	bl	8003658 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001142:	f000 f877 	bl	8001234 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000258 	.word	0x20000258
 8001150:	40004400 	.word	0x40004400

08001154 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_GPIO_Init+0xd0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4a26      	ldr	r2, [pc, #152]	; (8001224 <MX_GPIO_Init+0xd0>)
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_GPIO_Init+0xd0>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_GPIO_Init+0xd0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_GPIO_Init+0xd0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, eoc_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2130      	movs	r1, #48	; 0x30
 80011de:	4812      	ldr	r0, [pc, #72]	; (8001228 <MX_GPIO_Init+0xd4>)
 80011e0:	f000 fd52 	bl	8001c88 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_GPIO_Init+0xd8>)
 80011ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_GPIO_Init+0xdc>)
 80011fa:	f000 fbb3 	bl	8001964 <HAL_GPIO_Init>

	/*Configure GPIO pins : eoc_Pin LD2_Pin */
	GPIO_InitStruct.Pin = eoc_Pin|LD2_Pin;
 80011fe:	2330      	movs	r3, #48	; 0x30
 8001200:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <MX_GPIO_Init+0xd4>)
 8001216:	f000 fba5 	bl	8001964 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	10210000 	.word	0x10210000
 8001230:	40020800 	.word	0x40020800

08001234 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <init_pitot>:
 */
#include "../Inc/pitot.h"
#include "math.h"


HAL_StatusTypeDef  init_pitot(I2C_HandleTypeDef* hi2c){
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af02      	add	r7, sp, #8
 8001248:	6078      	str	r0, [r7, #4]

	uint8_t commande[1];
	commande[0] = START_AVERAGE8;//ou un autre mode changer si nessesaire
 800124a:	23ae      	movs	r3, #174	; 0xae
 800124c:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c,(uint16_t)ADDR_PITOT<<1,commande,1,HAL_MAX_DELAY);
 800124e:	f107 020c 	add.w	r2, r7, #12
 8001252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2152      	movs	r1, #82	; 0x52
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fe7f 	bl	8001f60 <HAL_I2C_Master_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <read_pitot>:

int read_pitot(I2C_HandleTypeDef* hi2c, double* pression, double* temperature){
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b092      	sub	sp, #72	; 0x48
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]

	uint8_t buf[7];
	HAL_StatusTypeDef ret;
	uint8_t status1;
	uint8_t status2;
	int success = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(ret != HAL_OK){

		//code d'erreur

	}else{*/
		ret = HAL_I2C_Master_Receive(hi2c,(uint16_t)(ADDR_PITOT<<1)+1,buf,1,HAL_MAX_DELAY);
 8001280:	f107 0210 	add.w	r2, r7, #16
 8001284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	2153      	movs	r1, #83	; 0x53
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 ff64 	bl	800215c <HAL_I2C_Master_Receive>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if(ret != HAL_OK){
 800129a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 808a 	bne.w	80013b8 <read_pitot+0x148>

			//code d'erreur

		}else{
			status1 = buf[0];
 80012a4:	7c3b      	ldrb	r3, [r7, #16]
 80012a6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			ret = HAL_I2C_Master_Receive(hi2c,(uint16_t)(ADDR_PITOT<<1)+1,buf,7,HAL_MAX_DELAY);
 80012aa:	f107 0210 	add.w	r2, r7, #16
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2307      	movs	r3, #7
 80012b6:	2153      	movs	r1, #83	; 0x53
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 ff4f 	bl	800215c <HAL_I2C_Master_Receive>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			if(ret != HAL_OK){
 80012c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d175      	bne.n	80013b8 <read_pitot+0x148>

				//code d'erreur

			}else{
				status2 = buf[0];
 80012cc:	7c3b      	ldrb	r3, [r7, #16]
 80012ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				uint32_t pressionbrut = (uint32_t)(buf[1]<<16|buf[2]<<8|buf[3]);
 80012d2:	7c7b      	ldrb	r3, [r7, #17]
 80012d4:	041a      	lsls	r2, r3, #16
 80012d6:	7cbb      	ldrb	r3, [r7, #18]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	4313      	orrs	r3, r2
 80012dc:	7cfa      	ldrb	r2, [r7, #19]
 80012de:	4313      	orrs	r3, r2
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
				uint32_t temperaturebrut = (uint32_t)(buf[4]<<16|buf[5]<<8|buf[6]);
 80012e2:	7d3b      	ldrb	r3, [r7, #20]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	7d7b      	ldrb	r3, [r7, #21]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4313      	orrs	r3, r2
 80012ec:	7dba      	ldrb	r2, [r7, #22]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30

				uint32_t nbBits = pow(2,24);
 80012f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				double divisionPression = ((pressionbrut - (0.1 * nbBits))/nbBits);
 80012f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012fa:	f7ff f923 	bl	8000544 <__aeabi_ui2d>
 80012fe:	4604      	mov	r4, r0
 8001300:	460d      	mov	r5, r1
 8001302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001304:	f7ff f91e 	bl	8000544 <__aeabi_ui2d>
 8001308:	a333      	add	r3, pc, #204	; (adr r3, 80013d8 <read_pitot+0x168>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f98f 	bl	8000630 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ffd5 	bl	80002c8 <__aeabi_dsub>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4625      	mov	r5, r4
 8001324:	461c      	mov	r4, r3
 8001326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001328:	f7ff f90c 	bl	8000544 <__aeabi_ui2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4620      	mov	r0, r4
 8001332:	4629      	mov	r1, r5
 8001334:	f7ff faa6 	bl	8000884 <__aeabi_ddiv>
 8001338:	4603      	mov	r3, r0
 800133a:	460c      	mov	r4, r1
 800133c:	e9c7 3408 	strd	r3, r4, [r7, #32]
				double divisionTemp = ((temperaturebrut * 125.0)/nbBits);
 8001340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001342:	f7ff f8ff 	bl	8000544 <__aeabi_ui2d>
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <read_pitot+0x158>)
 800134c:	f7ff f970 	bl	8000630 <__aeabi_dmul>
 8001350:	4603      	mov	r3, r0
 8001352:	460c      	mov	r4, r1
 8001354:	4625      	mov	r5, r4
 8001356:	461c      	mov	r4, r3
 8001358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800135a:	f7ff f8f3 	bl	8000544 <__aeabi_ui2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7ff fa8d 	bl	8000884 <__aeabi_ddiv>
 800136a:	4603      	mov	r3, r0
 800136c:	460c      	mov	r4, r1
 800136e:	e9c7 3406 	strd	r3, r4, [r7, #24]

				*pression = 1.25 * divisionPression * 10.0;
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <read_pitot+0x15c>)
 8001378:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800137c:	f7ff f958 	bl	8000630 <__aeabi_dmul>
 8001380:	4603      	mov	r3, r0
 8001382:	460c      	mov	r4, r1
 8001384:	4618      	mov	r0, r3
 8001386:	4621      	mov	r1, r4
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <read_pitot+0x160>)
 800138e:	f7ff f94f 	bl	8000630 <__aeabi_dmul>
 8001392:	4603      	mov	r3, r0
 8001394:	460c      	mov	r4, r1
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	e882 0018 	stmia.w	r2, {r3, r4}
				*temperature = divisionTemp-40.0;
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <read_pitot+0x164>)
 80013a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013a6:	f7fe ff8f 	bl	80002c8 <__aeabi_dsub>
 80013aa:	4603      	mov	r3, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	e882 0018 	stmia.w	r2, {r3, r4}
				success=1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
	//}

	return success;
 80013b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3740      	adds	r7, #64	; 0x40
 80013be:	46bd      	mov	sp, r7
 80013c0:	bdb0      	pop	{r4, r5, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	405f4000 	.word	0x405f4000
 80013cc:	3ff40000 	.word	0x3ff40000
 80013d0:	40240000 	.word	0x40240000
 80013d4:	40440000 	.word	0x40440000
 80013d8:	9999999a 	.word	0x9999999a
 80013dc:	3fb99999 	.word	0x3fb99999

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_MspInit+0x4c>)
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_MspInit+0x4c>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4a09      	ldr	r2, [pc, #36]	; (800142c <HAL_MspInit+0x4c>)
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_MspInit+0x4c>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a29      	ldr	r2, [pc, #164]	; (80014f4 <HAL_I2C_MspInit+0xc4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d14b      	bne.n	80014ea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4a28      	ldr	r2, [pc, #160]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 8001458:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800148a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001490:	2312      	movs	r3, #18
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001494:	2301      	movs	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800149c:	2304      	movs	r3, #4
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4815      	ldr	r0, [pc, #84]	; (80014fc <HAL_I2C_MspInit+0xcc>)
 80014a8:	f000 fa5c 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b2:	2312      	movs	r3, #18
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014be:	2304      	movs	r3, #4
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <HAL_I2C_MspInit+0xd0>)
 80014ca:	f000 fa4b 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_I2C_MspInit+0xc8>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40005800 	.word	0x40005800
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12b      	bne.n	800157e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4a18      	ldr	r2, [pc, #96]	; (800158c <HAL_UART_MspInit+0x88>)
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_UART_MspInit+0x88>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_UART_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_UART_MspInit+0x88>)
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_UART_MspInit+0x88>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_UART_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800155e:	230c      	movs	r3, #12
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	2307      	movs	r3, #7
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_UART_MspInit+0x8c>)
 800157a:	f000 f9f3 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	; 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40004400 	.word	0x40004400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f896 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x50>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x16>
		heap_end = &end;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <_sbrk+0x50>)
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <_sbrk+0x54>)
 8001604:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <_sbrk+0x50>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <_sbrk+0x50>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	466a      	mov	r2, sp
 8001616:	4293      	cmp	r3, r2
 8001618:	d907      	bls.n	800162a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800161a:	f002 fcb5 	bl	8003f88 <__errno>
 800161e:	4602      	mov	r2, r0
 8001620:	230c      	movs	r3, #12
 8001622:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001628:	e006      	b.n	8001638 <_sbrk+0x48>
	}

	heap_end += incr;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <_sbrk+0x50>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <_sbrk+0x50>)
 8001634:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200001f8 	.word	0x200001f8
 8001644:	200002a0 	.word	0x200002a0

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4a08      	ldr	r2, [pc, #32]	; (8001670 <SystemInit+0x28>)
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <SystemInit+0x28>)
 8001650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SystemInit+0x28>)
 800165e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001662:	609a      	str	r2, [r3, #8]
#endif
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f92d 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fe9a 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f937 	bl	800194a <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f4:	f000 f90d 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000000 	.word	0x20000000
 8001710:	20000008 	.word	0x20000008
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	20000298 	.word	0x20000298

08001740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000298 	.word	0x20000298

08001758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f7ff ffee 	bl	8001740 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001770:	d005      	beq.n	800177e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <HAL_Delay+0x40>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	bf00      	nop
 8001780:	f7ff ffde 	bl	8001740 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	429a      	cmp	r2, r3
 800178e:	d3f7      	bcc.n	8001780 <HAL_Delay+0x28>
  {
  }
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000008 	.word	0x20000008

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	490d      	ldr	r1, [pc, #52]	; (800184c <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	4909      	ldr	r1, [pc, #36]	; (8001850 <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	2201      	movs	r2, #1
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	401a      	ands	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189a:	2101      	movs	r1, #1
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	1e59      	subs	r1, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018dc:	f7ff ff90 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff49 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff5e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffb0 	bl	80018b8 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e165      	b.n	8001c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8154 	bne.w	8001c46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d00b      	beq.n	80019be <HAL_GPIO_Init+0x5a>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b2:	2b11      	cmp	r3, #17
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d130      	bne.n	8001a20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0xfc>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b12      	cmp	r3, #18
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80ae 	beq.w	8001c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4a5c      	ldr	r2, [pc, #368]	; (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001af0:	4b5b      	ldr	r3, [pc, #364]	; (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a57      	ldr	r2, [pc, #348]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4e      	ldr	r2, [pc, #312]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4d      	ldr	r2, [pc, #308]	; (8001c6c <HAL_GPIO_Init+0x308>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x216>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4c      	ldr	r2, [pc, #304]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x212>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4b      	ldr	r2, [pc, #300]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x20e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x314>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x20a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <HAL_GPIO_Init+0x318>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_GPIO_Init+0x31c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x202>
 8001b62:	2306      	movs	r3, #6
 8001b64:	e00c      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b66:	2307      	movs	r3, #7
 8001b68:	e00a      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	e008      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b72:	2303      	movs	r3, #3
 8001b74:	e004      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_GPIO_Init+0x21c>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	f002 0203 	and.w	r2, r2, #3
 8001b86:	0092      	lsls	r2, r2, #2
 8001b88:	4093      	lsls	r3, r2
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b90:	4934      	ldr	r1, [pc, #208]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3302      	adds	r3, #2
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc2:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bec:	4a25      	ldr	r2, [pc, #148]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c16:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c40:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b0f      	cmp	r3, #15
 8001c50:	f67f ae96 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c54:	bf00      	nop
 8001c56:	3724      	adds	r7, #36	; 0x24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40020800 	.word	0x40020800
 8001c74:	40020c00 	.word	0x40020c00
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40013c00 	.word	0x40013c00

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	401a      	ands	r2, r3
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d104      	bne.n	8001cde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	041a      	lsls	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e11f      	b.n	8001f42 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fb8a 	bl	8001430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2224      	movs	r2, #36	; 0x24
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f022 0201 	bic.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d54:	f001 f848 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a7b      	ldr	r2, [pc, #492]	; (8001f4c <HAL_I2C_Init+0x25c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d807      	bhi.n	8001d74 <HAL_I2C_Init+0x84>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a7a      	ldr	r2, [pc, #488]	; (8001f50 <HAL_I2C_Init+0x260>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	bf94      	ite	ls
 8001d6c:	2301      	movls	r3, #1
 8001d6e:	2300      	movhi	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e006      	b.n	8001d82 <HAL_I2C_Init+0x92>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <HAL_I2C_Init+0x264>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	bf94      	ite	ls
 8001d7c:	2301      	movls	r3, #1
 8001d7e:	2300      	movhi	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0db      	b.n	8001f42 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_I2C_Init+0x268>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0c9b      	lsrs	r3, r3, #18
 8001d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	6852      	ldr	r2, [r2, #4]
 8001da0:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4863      	ldr	r0, [pc, #396]	; (8001f4c <HAL_I2C_Init+0x25c>)
 8001dbe:	4283      	cmp	r3, r0
 8001dc0:	d802      	bhi.n	8001dc8 <HAL_I2C_Init+0xd8>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	e009      	b.n	8001ddc <HAL_I2C_Init+0xec>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	4862      	ldr	r0, [pc, #392]	; (8001f5c <HAL_I2C_Init+0x26c>)
 8001dd4:	fba0 0303 	umull	r0, r3, r0, r3
 8001dd8:	099b      	lsrs	r3, r3, #6
 8001dda:	3301      	adds	r3, #1
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4955      	ldr	r1, [pc, #340]	; (8001f4c <HAL_I2C_Init+0x25c>)
 8001df8:	428b      	cmp	r3, r1
 8001dfa:	d80d      	bhi.n	8001e18 <HAL_I2C_Init+0x128>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1e59      	subs	r1, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	bf38      	it	cc
 8001e14:	2304      	movcc	r3, #4
 8001e16:	e04f      	b.n	8001eb8 <HAL_I2C_Init+0x1c8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d111      	bne.n	8001e44 <HAL_I2C_Init+0x154>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e5c      	subs	r4, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	440b      	add	r3, r1
 8001e2e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e012      	b.n	8001e6a <HAL_I2C_Init+0x17a>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e5c      	subs	r4, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Init+0x182>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e022      	b.n	8001eb8 <HAL_I2C_Init+0x1c8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10e      	bne.n	8001e98 <HAL_I2C_Init+0x1a8>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1e5c      	subs	r4, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	440b      	add	r3, r1
 8001e88:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e96:	e00f      	b.n	8001eb8 <HAL_I2C_Init+0x1c8>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1e5c      	subs	r4, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	0099      	lsls	r1, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	fbb4 f3f3 	udiv	r3, r4, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	69d0      	ldr	r0, [r2, #28]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6a12      	ldr	r2, [r2, #32]
 8001ed2:	4302      	orrs	r2, r0
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ee6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	6908      	ldr	r0, [r1, #16]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68c9      	ldr	r1, [r1, #12]
 8001ef2:	4301      	orrs	r1, r0
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6950      	ldr	r0, [r2, #20]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6992      	ldr	r2, [r2, #24]
 8001f0e:	4302      	orrs	r2, r0
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	000186a0 	.word	0x000186a0
 8001f50:	001e847f 	.word	0x001e847f
 8001f54:	003d08ff 	.word	0x003d08ff
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	10624dd3 	.word	0x10624dd3

08001f60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	817b      	strh	r3, [r7, #10]
 8001f70:	4613      	mov	r3, r2
 8001f72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff fbe4 	bl	8001740 <HAL_GetTick>
 8001f78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	f040 80e0 	bne.w	8002148 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2319      	movs	r3, #25
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4970      	ldr	r1, [pc, #448]	; (8002154 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fc58 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0d3      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_I2C_Master_Transmit+0x50>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0cc      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d007      	beq.n	8001fd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	893a      	ldrh	r2, [r7, #8]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_I2C_Master_Transmit+0x1f8>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002018:	8979      	ldrh	r1, [r7, #10]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	6a3a      	ldr	r2, [r7, #32]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fac2 	bl	80025a8 <I2C_MasterRequestWrite>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e08d      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002044:	e066      	b.n	8002114 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fcd2 	bl	80029f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x188>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6a39      	ldr	r1, [r7, #32]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fcc2 	bl	8002a76 <I2C_WaitOnBTFFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d107      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e01a      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d194      	bne.n	8002046 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000

0800215c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	461a      	mov	r2, r3
 8002168:	460b      	mov	r3, r1
 800216a:	817b      	strh	r3, [r7, #10]
 800216c:	4613      	mov	r3, r2
 800216e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002170:	f7ff fae6 	bl	8001740 <HAL_GetTick>
 8002174:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b20      	cmp	r3, #32
 8002180:	f040 820b 	bne.w	800259a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2319      	movs	r3, #25
 800218a:	2201      	movs	r2, #1
 800218c:	497c      	ldr	r1, [pc, #496]	; (8002380 <HAL_I2C_Master_Receive+0x224>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fb5a 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	e1fe      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_I2C_Master_Receive+0x50>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e1f7      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d007      	beq.n	80021d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2222      	movs	r2, #34	; 0x22
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2210      	movs	r2, #16
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	893a      	ldrh	r2, [r7, #8]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4a5c      	ldr	r2, [pc, #368]	; (8002384 <HAL_I2C_Master_Receive+0x228>)
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002214:	8979      	ldrh	r1, [r7, #10]
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fa46 	bl	80026ac <I2C_MasterRequestRead>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1b8      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d113      	bne.n	800225a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	623b      	str	r3, [r7, #32]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e18c      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d11b      	bne.n	800229a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	61fb      	str	r3, [r7, #28]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	e16c      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d11b      	bne.n	80022da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	e14c      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002300:	e138      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b03      	cmp	r3, #3
 8002308:	f200 80f1 	bhi.w	80024ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b01      	cmp	r3, #1
 8002312:	d123      	bne.n	800235c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fbed 	bl	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e139      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	6912      	ldr	r2, [r2, #16]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235a:	e10b      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d14e      	bne.n	8002402 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	2200      	movs	r2, #0
 800236c:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_I2C_Master_Receive+0x22c>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa6a 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e10e      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000
 8002388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	6912      	ldr	r2, [r2, #16]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	6912      	ldr	r2, [r2, #16]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002400:	e0b8      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2200      	movs	r2, #0
 800240a:	4966      	ldr	r1, [pc, #408]	; (80025a4 <HAL_I2C_Master_Receive+0x448>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa1b 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	6912      	ldr	r2, [r2, #16]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <HAL_I2C_Master_Receive+0x448>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f9ed 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e091      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	6912      	ldr	r2, [r2, #16]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6912      	ldr	r2, [r2, #16]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e042      	b.n	8002574 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fb00 	bl	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04c      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	6912      	ldr	r2, [r2, #16]
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d118      	bne.n	8002574 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	6912      	ldr	r2, [r2, #16]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aec2 	bne.w	8002302 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	00010004 	.word	0x00010004

080025a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d006      	beq.n	80025d2 <I2C_MasterRequestWrite+0x2a>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d003      	beq.n	80025d2 <I2C_MasterRequestWrite+0x2a>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d0:	d108      	bne.n	80025e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e00b      	b.n	80025fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d107      	bne.n	80025fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f91d 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002622:	d103      	bne.n	800262c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e034      	b.n	800269a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002638:	d107      	bne.n	800264a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	897a      	ldrh	r2, [r7, #10]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	e01b      	b.n	8002682 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	897a      	ldrh	r2, [r7, #10]
 8002650:	11d2      	asrs	r2, r2, #7
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f002 0206 	and.w	r2, r2, #6
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f062 020f 	orn	r2, r2, #15
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	490f      	ldr	r1, [pc, #60]	; (80026a4 <I2C_MasterRequestWrite+0xfc>)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f944 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e010      	b.n	800269a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	897a      	ldrh	r2, [r7, #10]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <I2C_MasterRequestWrite+0x100>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f934 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	00010008 	.word	0x00010008
 80026a8:	00010002 	.word	0x00010002

080026ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	460b      	mov	r3, r1
 80026ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d006      	beq.n	80026e6 <I2C_MasterRequestRead+0x3a>
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d003      	beq.n	80026e6 <I2C_MasterRequestRead+0x3a>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e00b      	b.n	8002710 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d107      	bne.n	8002710 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f893 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002736:	d103      	bne.n	8002740 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e079      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800274c:	d108      	bne.n	8002760 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	897a      	ldrh	r2, [r7, #10]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	e05f      	b.n	8002820 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	897a      	ldrh	r2, [r7, #10]
 8002766:	11d2      	asrs	r2, r2, #7
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f002 0206 	and.w	r2, r2, #6
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f062 020f 	orn	r2, r2, #15
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4930      	ldr	r1, [pc, #192]	; (8002840 <I2C_MasterRequestRead+0x194>)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f8b9 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e054      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	897a      	ldrh	r2, [r7, #10]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4929      	ldr	r1, [pc, #164]	; (8002844 <I2C_MasterRequestRead+0x198>)
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f8a9 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e044      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	6812      	ldr	r2, [r2, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f831 	bl	8002848 <I2C_WaitOnFlagUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d103      	bne.n	8002804 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002802:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e017      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	897a      	ldrh	r2, [r7, #10]
 800280e:	11d2      	asrs	r2, r2, #7
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	f002 0206 	and.w	r2, r2, #6
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f062 020e 	orn	r2, r2, #14
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <I2C_MasterRequestRead+0x198>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f865 	bl	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010008 	.word	0x00010008
 8002844:	00010002 	.word	0x00010002

08002848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002858:	e025      	b.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002860:	d021      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe ff6d 	bl	8001740 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d802      	bhi.n	8002878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e023      	b.n	80028ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10d      	bne.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	e00c      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4013      	ands	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf0c      	ite	eq
 80028de:	2301      	moveq	r3, #1
 80028e0:	2300      	movne	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d0b6      	beq.n	800285a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002904:	e051      	b.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d123      	bne.n	800295e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002924:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800292e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f043 0204 	orr.w	r2, r3, #4
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e046      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002964:	d021      	beq.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fe feeb 	bl	8001740 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	429a      	cmp	r2, r3
 8002974:	d802      	bhi.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e020      	b.n	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10c      	bne.n	80029ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	e00b      	b.n	80029e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d18d      	bne.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a00:	e02d      	b.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8ce 	bl	8002ba4 <I2C_IsAcknowledgeFailed>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e02d      	b.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a18:	d021      	beq.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fe fe91 	bl	8001740 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	1ad2      	subs	r2, r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d802      	bhi.n	8002a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e007      	b.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d1ca      	bne.n	8002a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a82:	e02d      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f88d 	bl	8002ba4 <I2C_IsAcknowledgeFailed>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e02d      	b.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9a:	d021      	beq.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a9c:	f7fe fe50 	bl	8001740 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	1ad2      	subs	r2, r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d802      	bhi.n	8002ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d116      	bne.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d1ca      	bne.n	8002a84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b04:	e042      	b.n	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d119      	bne.n	8002b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0210 	mvn.w	r2, #16
 8002b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e029      	b.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fdfa 	bl	8001740 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad2      	subs	r2, r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d802      	bhi.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d116      	bne.n	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e007      	b.n	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d1b5      	bne.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bba:	d11b      	bne.n	8002bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0cc      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c18:	4b68      	ldr	r3, [pc, #416]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 020f 	and.w	r2, r3, #15
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20c      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4a59      	ldr	r2, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4950      	ldr	r1, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d044      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d119      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d107      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e067      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ce2:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 0203 	bic.w	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fd24 	bl	8001740 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe fd20 	bl	8001740 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e04f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 020c 	and.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d1eb      	bne.n	8002cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b25      	ldr	r3, [pc, #148]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d90c      	bls.n	8002d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4919      	ldr	r1, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d76:	4912      	ldr	r1, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f855 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4601      	mov	r1, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1c8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fc84 	bl	80016b8 <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08006100 	.word	0x08006100
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4601      	mov	r1, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	08006110 	.word	0x08006110

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4601      	mov	r1, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4a03      	ldr	r2, [pc, #12]	; (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	08006110 	.word	0x08006110

08002e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e3c:	b0a1      	sub	sp, #132	; 0x84
 8002e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e54:	4ba0      	ldr	r3, [pc, #640]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f200 8193 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x350>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_RCC_GetSysClockFreq+0x30>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08003189 	.word	0x08003189
 8002e70:	08003189 	.word	0x08003189
 8002e74:	08003189 	.word	0x08003189
 8002e78:	08002ea3 	.word	0x08002ea3
 8002e7c:	08003189 	.word	0x08003189
 8002e80:	08003189 	.word	0x08003189
 8002e84:	08003189 	.word	0x08003189
 8002e88:	08002ea9 	.word	0x08002ea9
 8002e8c:	08003189 	.word	0x08003189
 8002e90:	08003189 	.word	0x08003189
 8002e94:	08003189 	.word	0x08003189
 8002e98:	08003025 	.word	0x08003025
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_GetSysClockFreq+0x2a4>)
 8002e9e:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8002ea0:	e175      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea2:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8002ea4:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8002ea6:	e172      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ea8:	4b8b      	ldr	r3, [pc, #556]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb0:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb2:	4b89      	ldr	r3, [pc, #548]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d056      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebe:	4b86      	ldr	r3, [pc, #536]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	f04f 0400 	mov.w	r4, #0
 8002ec8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	ea01 0103 	and.w	r1, r1, r3
 8002ed4:	ea02 0204 	and.w	r2, r2, r4
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4614      	mov	r4, r2
 8002edc:	0160      	lsls	r0, r4, #5
 8002ede:	6678      	str	r0, [r7, #100]	; 0x64
 8002ee0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002ee2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002ee6:	6678      	str	r0, [r7, #100]	; 0x64
 8002ee8:	015b      	lsls	r3, r3, #5
 8002eea:	663b      	str	r3, [r7, #96]	; 0x60
 8002eec:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002ef0:	1a5b      	subs	r3, r3, r1
 8002ef2:	eb64 0402 	sbc.w	r4, r4, r2
 8002ef6:	01a0      	lsls	r0, r4, #6
 8002ef8:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002efa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002efc:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8002f00:	65f8      	str	r0, [r7, #92]	; 0x5c
 8002f02:	0198      	lsls	r0, r3, #6
 8002f04:	65b8      	str	r0, [r7, #88]	; 0x58
 8002f06:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8002f0a:	1aed      	subs	r5, r5, r3
 8002f0c:	eb66 0604 	sbc.w	r6, r6, r4
 8002f10:	4633      	mov	r3, r6
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	657b      	str	r3, [r7, #84]	; 0x54
 8002f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f18:	4628      	mov	r0, r5
 8002f1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f20:	462b      	mov	r3, r5
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	653b      	str	r3, [r7, #80]	; 0x50
 8002f26:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4626      	mov	r6, r4
 8002f2e:	186b      	adds	r3, r5, r1
 8002f30:	eb46 0402 	adc.w	r4, r6, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	4621      	mov	r1, r4
 8002f38:	460b      	mov	r3, r1
 8002f3a:	025b      	lsls	r3, r3, #9
 8002f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f40:	4602      	mov	r2, r0
 8002f42:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f48:	4603      	mov	r3, r0
 8002f4a:	025b      	lsls	r3, r3, #9
 8002f4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f4e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002f52:	4618      	mov	r0, r3
 8002f54:	4621      	mov	r1, r4
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	f04f 0400 	mov.w	r4, #0
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4623      	mov	r3, r4
 8002f60:	f7fd fe3e 	bl	8000be0 <__aeabi_uldivmod>
 8002f64:	4603      	mov	r3, r0
 8002f66:	460c      	mov	r4, r1
 8002f68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f6a:	e04d      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6c:	4b5a      	ldr	r3, [pc, #360]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	099b      	lsrs	r3, r3, #6
 8002f72:	f04f 0400 	mov.w	r4, #0
 8002f76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	ea01 0103 	and.w	r1, r1, r3
 8002f82:	ea02 0204 	and.w	r2, r2, r4
 8002f86:	460b      	mov	r3, r1
 8002f88:	4614      	mov	r4, r2
 8002f8a:	0160      	lsls	r0, r4, #5
 8002f8c:	6478      	str	r0, [r7, #68]	; 0x44
 8002f8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002f90:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002f94:	6478      	str	r0, [r7, #68]	; 0x44
 8002f96:	015b      	lsls	r3, r3, #5
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
 8002f9a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f9e:	1a5b      	subs	r3, r3, r1
 8002fa0:	eb64 0402 	sbc.w	r4, r4, r2
 8002fa4:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8002fa8:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8002fac:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8002fb0:	ebba 0a03 	subs.w	sl, sl, r3
 8002fb4:	eb6b 0b04 	sbc.w	fp, fp, r4
 8002fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fcc:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8002fd0:	eb1a 0a01 	adds.w	sl, sl, r1
 8002fd4:	eb4b 0b02 	adc.w	fp, fp, r2
 8002fd8:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe0:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe6:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff0:	4650      	mov	r0, sl
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff6:	f04f 0400 	mov.w	r4, #0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	f7fd fdef 	bl	8000be0 <__aeabi_uldivmod>
 8003002:	4603      	mov	r3, r0
 8003004:	460c      	mov	r4, r1
 8003006:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	3301      	adds	r3, #1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8003018:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800301a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8003022:	e0b4      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302c:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302e:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d054      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	099b      	lsrs	r3, r3, #6
 8003040:	f04f 0400 	mov.w	r4, #0
 8003044:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	ea01 0103 	and.w	r1, r1, r3
 8003050:	ea02 0204 	and.w	r2, r2, r4
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	0160      	lsls	r0, r4, #5
 800305a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800305c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800305e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003062:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
 8003068:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800306c:	1a5b      	subs	r3, r3, r1
 800306e:	eb64 0402 	sbc.w	r4, r4, r2
 8003072:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003076:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800307a:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800307e:	ebb8 0803 	subs.w	r8, r8, r3
 8003082:	eb69 0904 	sbc.w	r9, r9, r4
 8003086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
 8003094:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800309e:	eb18 0801 	adds.w	r8, r8, r1
 80030a2:	eb49 0902 	adc.w	r9, r9, r2
 80030a6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80030be:	4640      	mov	r0, r8
 80030c0:	4649      	mov	r1, r9
 80030c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	461a      	mov	r2, r3
 80030ca:	4623      	mov	r3, r4
 80030cc:	f7fd fd88 	bl	8000be0 <__aeabi_uldivmod>
 80030d0:	4603      	mov	r3, r0
 80030d2:	460c      	mov	r4, r1
 80030d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030d6:	e04b      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x338>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	00f42400 	.word	0x00f42400
 80030e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <HAL_RCC_GetSysClockFreq+0x364>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	ea01 0103 	and.w	r1, r1, r3
 80030fa:	ea02 0204 	and.w	r2, r2, r4
 80030fe:	460b      	mov	r3, r1
 8003100:	4614      	mov	r4, r2
 8003102:	0160      	lsls	r0, r4, #5
 8003104:	6178      	str	r0, [r7, #20]
 8003106:	6978      	ldr	r0, [r7, #20]
 8003108:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800310c:	6178      	str	r0, [r7, #20]
 800310e:	015b      	lsls	r3, r3, #5
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003116:	1a5b      	subs	r3, r3, r1
 8003118:	eb64 0402 	sbc.w	r4, r4, r2
 800311c:	01a6      	lsls	r6, r4, #6
 800311e:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003122:	019d      	lsls	r5, r3, #6
 8003124:	1aed      	subs	r5, r5, r3
 8003126:	eb66 0604 	sbc.w	r6, r6, r4
 800312a:	00f3      	lsls	r3, r6, #3
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	00eb      	lsls	r3, r5, #3
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800313e:	186d      	adds	r5, r5, r1
 8003140:	eb46 0602 	adc.w	r6, r6, r2
 8003144:	02b3      	lsls	r3, r6, #10
 8003146:	607b      	str	r3, [r7, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 800314e:	607b      	str	r3, [r7, #4]
 8003150:	02ab      	lsls	r3, r5, #10
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003158:	4628      	mov	r0, r5
 800315a:	4631      	mov	r1, r6
 800315c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315e:	f04f 0400 	mov.w	r4, #0
 8003162:	461a      	mov	r2, r3
 8003164:	4623      	mov	r3, r4
 8003166:	f7fd fd3b 	bl	8000be0 <__aeabi_uldivmod>
 800316a:	4603      	mov	r3, r0
 800316c:	460c      	mov	r4, r1
 800316e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCC_GetSysClockFreq+0x364>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	0f1b      	lsrs	r3, r3, #28
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 800317c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x368>)
 800318a:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003190:	4618      	mov	r0, r3
 8003192:	3784      	adds	r7, #132	; 0x84
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400

080031a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8083 	beq.w	80032c4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031be:	4b95      	ldr	r3, [pc, #596]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d019      	beq.n	80031fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ca:	4b92      	ldr	r3, [pc, #584]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d106      	bne.n	80031e4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031d6:	4b8f      	ldr	r3, [pc, #572]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e2:	d00c      	beq.n	80031fe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e4:	4b8b      	ldr	r3, [pc, #556]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d112      	bne.n	8003216 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f0:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d10b      	bne.n	8003216 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031fe:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d05b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x11e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d157      	bne.n	80032c2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e216      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321e:	d106      	bne.n	800322e <HAL_RCC_OscConfig+0x8a>
 8003220:	4a7c      	ldr	r2, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003222:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	e01d      	b.n	800326a <HAL_RCC_OscConfig+0xc6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0xae>
 8003238:	4a76      	ldr	r2, [pc, #472]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800323a:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4a73      	ldr	r2, [pc, #460]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003246:	4b73      	ldr	r3, [pc, #460]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0xc6>
 8003252:	4a70      	ldr	r2, [pc, #448]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003254:	4b6f      	ldr	r3, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4a6d      	ldr	r2, [pc, #436]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003260:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d013      	beq.n	800329a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fa65 	bl	8001740 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327a:	f7fe fa61 	bl	8001740 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1db      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0xd6>
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fa51 	bl	8001740 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a2:	f7fe fa4d 	bl	8001740 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1c7      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b4:	4b57      	ldr	r3, [pc, #348]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0xfe>
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d06f      	beq.n	80033b0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d017      	beq.n	800330c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032dc:	4b4d      	ldr	r3, [pc, #308]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032e8:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00b      	beq.n	800330c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f4:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d11c      	bne.n	800333a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003300:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330c:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_OscConfig+0x180>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e18f      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	493b      	ldr	r1, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003338:	e03a      	b.n	80033b0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe f9fa 	bl	8001740 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003350:	f7fe f9f6 	bl	8001740 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e170      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4929      	ldr	r1, [pc, #164]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]
 8003382:	e015      	b.n	80033b0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCC_OscConfig+0x274>)
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe f9d9 	bl	8001740 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003392:	f7fe f9d5 	bl	8001740 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e14f      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d037      	beq.n	800342c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_RCC_OscConfig+0x278>)
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe f9b9 	bl	8001740 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fe f9b5 	bl	8001740 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e12f      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_OscConfig+0x270>)
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x22e>
 80033f0:	e01c      	b.n	800342c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f2:	4b0a      	ldr	r3, [pc, #40]	; (800341c <HAL_RCC_OscConfig+0x278>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe f9a2 	bl	8001740 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fe:	e00f      	b.n	8003420 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe f99e 	bl	8001740 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d908      	bls.n	8003420 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e118      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800
 8003418:	42470000 	.word	0x42470000
 800341c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b8a      	ldr	r3, [pc, #552]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e9      	bne.n	8003400 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8097 	beq.w	8003568 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b83      	ldr	r3, [pc, #524]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4a7f      	ldr	r2, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003450:	4b7e      	ldr	r3, [pc, #504]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b7c      	ldr	r3, [pc, #496]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b79      	ldr	r3, [pc, #484]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4a76      	ldr	r2, [pc, #472]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 8003478:	4b75      	ldr	r3, [pc, #468]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fe f95d 	bl	8001740 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe f959 	bl	8001740 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0d3      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b6c      	ldr	r3, [pc, #432]	; (8003650 <HAL_RCC_OscConfig+0x4ac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x31a>
 80034b0:	4a66      	ldr	r2, [pc, #408]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034b2:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	e01c      	b.n	80034f8 <HAL_RCC_OscConfig+0x354>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x33c>
 80034c6:	4a61      	ldr	r2, [pc, #388]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034c8:	4b60      	ldr	r3, [pc, #384]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	4a5e      	ldr	r2, [pc, #376]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034d4:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0x354>
 80034e0:	4a5a      	ldr	r2, [pc, #360]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034e2:	4b5a      	ldr	r3, [pc, #360]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034ee:	4b57      	ldr	r3, [pc, #348]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe f91e 	bl	8001740 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fe f91a 	bl	8001740 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e092      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	4b4b      	ldr	r3, [pc, #300]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ee      	beq.n	8003508 <HAL_RCC_OscConfig+0x364>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe f908 	bl	8001740 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe f904 	bl	8001740 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e07c      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ee      	bne.n	8003534 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4a3b      	ldr	r2, [pc, #236]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d068      	beq.n	8003642 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d060      	beq.n	800363e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d145      	bne.n	8003610 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe f8d9 	bl	8001740 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe f8d5 	bl	8001740 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e04f      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b0:	4926      	ldr	r1, [pc, #152]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	3b01      	subs	r3, #1
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	071b      	lsls	r3, r3, #28
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f8aa 	bl	8001740 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe f8a6 	bl	8001740 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e020      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x44c>
 800360e:	e018      	b.n	8003642 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x4b0>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fe f893 	bl	8001740 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe f88f 	bl	8001740 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e009      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x4a8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x47a>
 800363c:	e001      	b.n	8003642 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	40007000 	.word	0x40007000
 8003654:	42470060 	.word	0x42470060

08003658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e03f      	b.n	80036ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd ff40 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	68d2      	ldr	r2, [r2, #12]
 8003696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f90b 	bl	80038b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	6912      	ldr	r2, [r2, #16]
 80036ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6952      	ldr	r2, [r2, #20]
 80036bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	68d2      	ldr	r2, [r2, #12]
 80036cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b088      	sub	sp, #32
 80036f6:	af02      	add	r7, sp, #8
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	f040 8082 	bne.w	8003818 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_UART_Transmit+0x2e>
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e07a      	b.n	800381a <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_UART_Transmit+0x40>
 800372e:	2302      	movs	r3, #2
 8003730:	e073      	b.n	800381a <HAL_UART_Transmit+0x128>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2221      	movs	r2, #33	; 0x21
 8003744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003748:	f7fd fffa 	bl	8001740 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003762:	e041      	b.n	80037e8 <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d121      	bne.n	80037c0 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	2180      	movs	r1, #128	; 0x80
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f84b 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e041      	b.n	800381a <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	8812      	ldrh	r2, [r2, #0]
 80037a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3302      	adds	r3, #2
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	e017      	b.n	80037e8 <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3301      	adds	r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	e013      	b.n	80037e8 <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f829 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e01f      	b.n	800381a <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1c59      	adds	r1, r3, #1
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1b8      	bne.n	8003764 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2140      	movs	r1, #64	; 0x40
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f810 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e006      	b.n	800381a <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003832:	e02c      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800383a:	d028      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0x30>
 8003842:	f7fd ff7d 	bl	8001740 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	429a      	cmp	r2, r3
 8003850:	d91d      	bls.n	800388e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	68d2      	ldr	r2, [r2, #12]
 800385c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003860:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	6952      	ldr	r2, [r2, #20]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e00f      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	401a      	ands	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0c3      	beq.n	8003834 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	b0a3      	sub	sp, #140	; 0x8c
 80038be:	af00      	add	r7, sp, #0
 80038c0:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038c4:	6819      	ldr	r1, [r3, #0]
 80038c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 80038f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8003900:	f022 020c 	bic.w	r2, r2, #12
 8003904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003908:	4313      	orrs	r3, r2
 800390a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800390c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392a:	f040 8171 	bne.w	8003c10 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800392e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4ab4      	ldr	r2, [pc, #720]	; (8003c04 <UART_SetConfig+0x34c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d005      	beq.n	8003944 <UART_SetConfig+0x8c>
 8003938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4ab2      	ldr	r2, [pc, #712]	; (8003c08 <UART_SetConfig+0x350>)
 800393e:	4293      	cmp	r3, r2
 8003940:	f040 80b1 	bne.w	8003aa6 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7ff fa64 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8003948:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800394c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800394e:	681d      	ldr	r5, [r3, #0]
 8003950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003954:	4619      	mov	r1, r3
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	460b      	mov	r3, r1
 800395c:	4614      	mov	r4, r2
 800395e:	18db      	adds	r3, r3, r3
 8003960:	eb44 0404 	adc.w	r4, r4, r4
 8003964:	185b      	adds	r3, r3, r1
 8003966:	eb44 0402 	adc.w	r4, r4, r2
 800396a:	00e0      	lsls	r0, r4, #3
 800396c:	6478      	str	r0, [r7, #68]	; 0x44
 800396e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003970:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003974:	6478      	str	r0, [r7, #68]	; 0x44
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
 800397a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800397e:	eb13 0801 	adds.w	r8, r3, r1
 8003982:	eb44 0902 	adc.w	r9, r4, r2
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f04f 0400 	mov.w	r4, #0
 8003992:	18db      	adds	r3, r3, r3
 8003994:	eb44 0404 	adc.w	r4, r4, r4
 8003998:	461a      	mov	r2, r3
 800399a:	4623      	mov	r3, r4
 800399c:	f7fd f920 	bl	8000be0 <__aeabi_uldivmod>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b99      	ldr	r3, [pc, #612]	; (8003c0c <UART_SetConfig+0x354>)
 80039a8:	fba3 2302 	umull	r2, r3, r3, r2
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	011e      	lsls	r6, r3, #4
 80039b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4614      	mov	r4, r2
 80039be:	18db      	adds	r3, r3, r3
 80039c0:	eb44 0404 	adc.w	r4, r4, r4
 80039c4:	185b      	adds	r3, r3, r1
 80039c6:	eb44 0402 	adc.w	r4, r4, r2
 80039ca:	00e0      	lsls	r0, r4, #3
 80039cc:	63f8      	str	r0, [r7, #60]	; 0x3c
 80039ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80039d0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80039d4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80039de:	eb13 0801 	adds.w	r8, r3, r1
 80039e2:	eb44 0902 	adc.w	r9, r4, r2
 80039e6:	4640      	mov	r0, r8
 80039e8:	4649      	mov	r1, r9
 80039ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f04f 0400 	mov.w	r4, #0
 80039f2:	18db      	adds	r3, r3, r3
 80039f4:	eb44 0404 	adc.w	r4, r4, r4
 80039f8:	461a      	mov	r2, r3
 80039fa:	4623      	mov	r3, r4
 80039fc:	f7fd f8f0 	bl	8000be0 <__aeabi_uldivmod>
 8003a00:	4603      	mov	r3, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b81      	ldr	r3, [pc, #516]	; (8003c0c <UART_SetConfig+0x354>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a7c      	ldr	r2, [pc, #496]	; (8003c0c <UART_SetConfig+0x354>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a28:	441e      	add	r6, r3
 8003a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4614      	mov	r4, r2
 8003a38:	18db      	adds	r3, r3, r3
 8003a3a:	eb44 0404 	adc.w	r4, r4, r4
 8003a3e:	185b      	adds	r3, r3, r1
 8003a40:	eb44 0402 	adc.w	r4, r4, r2
 8003a44:	00e0      	lsls	r0, r4, #3
 8003a46:	6378      	str	r0, [r7, #52]	; 0x34
 8003a48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a4a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003a4e:	6378      	str	r0, [r7, #52]	; 0x34
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003a58:	eb13 0801 	adds.w	r8, r3, r1
 8003a5c:	eb44 0902 	adc.w	r9, r4, r2
 8003a60:	4640      	mov	r0, r8
 8003a62:	4649      	mov	r1, r9
 8003a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f04f 0400 	mov.w	r4, #0
 8003a6c:	18db      	adds	r3, r3, r3
 8003a6e:	eb44 0404 	adc.w	r4, r4, r4
 8003a72:	461a      	mov	r2, r3
 8003a74:	4623      	mov	r3, r4
 8003a76:	f7fd f8b3 	bl	8000be0 <__aeabi_uldivmod>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <UART_SetConfig+0x354>)
 8003a82:	fba3 1302 	umull	r1, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2164      	movs	r1, #100	; 0x64
 8003a8a:	fb01 f303 	mul.w	r3, r1, r3
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	3332      	adds	r3, #50	; 0x32
 8003a94:	4a5d      	ldr	r2, [pc, #372]	; (8003c0c <UART_SetConfig+0x354>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4433      	add	r3, r6
 8003aa2:	60ab      	str	r3, [r5, #8]
 8003aa4:	e240      	b.n	8003f28 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7ff f99f 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	673a      	str	r2, [r7, #112]	; 0x70
 8003ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	18db      	adds	r3, r3, r3
 8003ac4:	eb44 0404 	adc.w	r4, r4, r4
 8003ac8:	185b      	adds	r3, r3, r1
 8003aca:	eb44 0402 	adc.w	r4, r4, r2
 8003ace:	00e0      	lsls	r0, r4, #3
 8003ad0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ad4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003ad8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003ae2:	185d      	adds	r5, r3, r1
 8003ae4:	eb44 0602 	adc.w	r6, r4, r2
 8003ae8:	4628      	mov	r0, r5
 8003aea:	4631      	mov	r1, r6
 8003aec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f04f 0400 	mov.w	r4, #0
 8003af4:	18db      	adds	r3, r3, r3
 8003af6:	eb44 0404 	adc.w	r4, r4, r4
 8003afa:	461a      	mov	r2, r3
 8003afc:	4623      	mov	r3, r4
 8003afe:	f7fd f86f 	bl	8000be0 <__aeabi_uldivmod>
 8003b02:	4603      	mov	r3, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <UART_SetConfig+0x354>)
 8003b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	011e      	lsls	r6, r3, #4
 8003b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b16:	4619      	mov	r1, r3
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	18db      	adds	r3, r3, r3
 8003b22:	eb44 0404 	adc.w	r4, r4, r4
 8003b26:	185b      	adds	r3, r3, r1
 8003b28:	eb44 0402 	adc.w	r4, r4, r2
 8003b2c:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003b30:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003b34:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003b38:	4653      	mov	r3, sl
 8003b3a:	465c      	mov	r4, fp
 8003b3c:	eb13 0a01 	adds.w	sl, r3, r1
 8003b40:	eb44 0b02 	adc.w	fp, r4, r2
 8003b44:	4650      	mov	r0, sl
 8003b46:	4659      	mov	r1, fp
 8003b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	18db      	adds	r3, r3, r3
 8003b52:	eb44 0404 	adc.w	r4, r4, r4
 8003b56:	461a      	mov	r2, r3
 8003b58:	4623      	mov	r3, r4
 8003b5a:	f7fd f841 	bl	8000be0 <__aeabi_uldivmod>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <UART_SetConfig+0x354>)
 8003b66:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2164      	movs	r1, #100	; 0x64
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	3332      	adds	r3, #50	; 0x32
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <UART_SetConfig+0x354>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b86:	441e      	add	r6, r3
 8003b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4614      	mov	r4, r2
 8003b96:	18db      	adds	r3, r3, r3
 8003b98:	eb44 0404 	adc.w	r4, r4, r4
 8003b9c:	185b      	adds	r3, r3, r1
 8003b9e:	eb44 0402 	adc.w	r4, r4, r2
 8003ba2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003ba6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003baa:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003bae:	4643      	mov	r3, r8
 8003bb0:	464c      	mov	r4, r9
 8003bb2:	eb13 0801 	adds.w	r8, r3, r1
 8003bb6:	eb44 0902 	adc.w	r9, r4, r2
 8003bba:	4640      	mov	r0, r8
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f04f 0400 	mov.w	r4, #0
 8003bc6:	18db      	adds	r3, r3, r3
 8003bc8:	eb44 0404 	adc.w	r4, r4, r4
 8003bcc:	461a      	mov	r2, r3
 8003bce:	4623      	mov	r3, r4
 8003bd0:	f7fd f806 	bl	8000be0 <__aeabi_uldivmod>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <UART_SetConfig+0x354>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <UART_SetConfig+0x354>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	4433      	add	r3, r6
 8003bfc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003bfe:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c00:	e192      	b.n	8003f28 <UART_SetConfig+0x670>
 8003c02:	bf00      	nop
 8003c04:	40011000 	.word	0x40011000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4bc1      	ldr	r3, [pc, #772]	; (8003f1c <UART_SetConfig+0x664>)
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d005      	beq.n	8003c26 <UART_SetConfig+0x36e>
 8003c1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4bc0      	ldr	r3, [pc, #768]	; (8003f20 <UART_SetConfig+0x668>)
 8003c20:	429a      	cmp	r2, r3
 8003c22:	f040 80bf 	bne.w	8003da4 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c26:	f7ff f8f3 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8003c2a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c30:	681e      	ldr	r6, [r3, #0]
 8003c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c36:	4619      	mov	r1, r3
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4614      	mov	r4, r2
 8003c40:	18db      	adds	r3, r3, r3
 8003c42:	eb44 0404 	adc.w	r4, r4, r4
 8003c46:	185b      	adds	r3, r3, r1
 8003c48:	eb44 0402 	adc.w	r4, r4, r2
 8003c4c:	00e0      	lsls	r0, r4, #3
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c52:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c60:	eb13 0801 	adds.w	r8, r3, r1
 8003c64:	eb44 0902 	adc.w	r9, r4, r2
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f04f 0400 	mov.w	r4, #0
 8003c74:	00a2      	lsls	r2, r4, #2
 8003c76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c7a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003c7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c88:	f7fc ffaa 	bl	8000be0 <__aeabi_uldivmod>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	461a      	mov	r2, r3
 8003c92:	4ba4      	ldr	r3, [pc, #656]	; (8003f24 <UART_SetConfig+0x66c>)
 8003c94:	fba3 2302 	umull	r2, r3, r3, r2
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	011d      	lsls	r5, r3, #4
 8003c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	18db      	adds	r3, r3, r3
 8003cac:	eb44 0404 	adc.w	r4, r4, r4
 8003cb0:	185b      	adds	r3, r3, r1
 8003cb2:	eb44 0402 	adc.w	r4, r4, r2
 8003cb6:	00e0      	lsls	r0, r4, #3
 8003cb8:	61f8      	str	r0, [r7, #28]
 8003cba:	69f8      	ldr	r0, [r7, #28]
 8003cbc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003cc0:	61f8      	str	r0, [r7, #28]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003cca:	eb13 0801 	adds.w	r8, r3, r1
 8003cce:	eb44 0902 	adc.w	r9, r4, r2
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	00a2      	lsls	r2, r4, #2
 8003ce0:	657a      	str	r2, [r7, #84]	; 0x54
 8003ce2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ce4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003ce8:	657a      	str	r2, [r7, #84]	; 0x54
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	653b      	str	r3, [r7, #80]	; 0x50
 8003cee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cf2:	f7fc ff75 	bl	8000be0 <__aeabi_uldivmod>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <UART_SetConfig+0x66c>)
 8003cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2164      	movs	r1, #100	; 0x64
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	; 0x32
 8003d10:	4a84      	ldr	r2, [pc, #528]	; (8003f24 <UART_SetConfig+0x66c>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	441d      	add	r5, r3
 8003d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d22:	4619      	mov	r1, r3
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	18db      	adds	r3, r3, r3
 8003d2e:	eb44 0404 	adc.w	r4, r4, r4
 8003d32:	185b      	adds	r3, r3, r1
 8003d34:	eb44 0402 	adc.w	r4, r4, r2
 8003d38:	00e0      	lsls	r0, r4, #3
 8003d3a:	6178      	str	r0, [r7, #20]
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003d42:	6178      	str	r0, [r7, #20]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d4c:	eb13 0801 	adds.w	r8, r3, r1
 8003d50:	eb44 0902 	adc.w	r9, r4, r2
 8003d54:	4640      	mov	r0, r8
 8003d56:	4649      	mov	r1, r9
 8003d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	00a2      	lsls	r2, r4, #2
 8003d62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d66:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003d6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d74:	f7fc ff34 	bl	8000be0 <__aeabi_uldivmod>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b69      	ldr	r3, [pc, #420]	; (8003f24 <UART_SetConfig+0x66c>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	3332      	adds	r3, #50	; 0x32
 8003d92:	4a64      	ldr	r2, [pc, #400]	; (8003f24 <UART_SetConfig+0x66c>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	442b      	add	r3, r5
 8003da0:	60b3      	str	r3, [r6, #8]
 8003da2:	e0c1      	b.n	8003f28 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7ff f820 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003da8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003db6:	4619      	mov	r1, r3
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4614      	mov	r4, r2
 8003dc0:	18db      	adds	r3, r3, r3
 8003dc2:	eb44 0404 	adc.w	r4, r4, r4
 8003dc6:	185b      	adds	r3, r3, r1
 8003dc8:	eb44 0402 	adc.w	r4, r4, r2
 8003dcc:	00e6      	lsls	r6, r4, #3
 8003dce:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003dd2:	00dd      	lsls	r5, r3, #3
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	4634      	mov	r4, r6
 8003dd8:	185d      	adds	r5, r3, r1
 8003dda:	eb44 0602 	adc.w	r6, r4, r2
 8003dde:	4628      	mov	r0, r5
 8003de0:	4631      	mov	r1, r6
 8003de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f04f 0400 	mov.w	r4, #0
 8003dea:	00a5      	lsls	r5, r4, #2
 8003dec:	677d      	str	r5, [r7, #116]	; 0x74
 8003dee:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8003df0:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003df4:	677d      	str	r5, [r7, #116]	; 0x74
 8003df6:	009c      	lsls	r4, r3, #2
 8003df8:	673c      	str	r4, [r7, #112]	; 0x70
 8003dfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003dfe:	f7fc feef 	bl	8000be0 <__aeabi_uldivmod>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b46      	ldr	r3, [pc, #280]	; (8003f24 <UART_SetConfig+0x66c>)
 8003e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	011d      	lsls	r5, r3, #4
 8003e12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e16:	4619      	mov	r1, r3
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4614      	mov	r4, r2
 8003e20:	18db      	adds	r3, r3, r3
 8003e22:	eb44 0404 	adc.w	r4, r4, r4
 8003e26:	185b      	adds	r3, r3, r1
 8003e28:	eb44 0402 	adc.w	r4, r4, r2
 8003e2c:	00e0      	lsls	r0, r4, #3
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	00d8      	lsls	r0, r3, #3
 8003e3a:	60b8      	str	r0, [r7, #8]
 8003e3c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003e40:	eb13 0801 	adds.w	r8, r3, r1
 8003e44:	eb44 0902 	adc.w	r9, r4, r2
 8003e48:	4640      	mov	r0, r8
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f04f 0400 	mov.w	r4, #0
 8003e54:	00a6      	lsls	r6, r4, #2
 8003e56:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003e58:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8003e5a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003e5e:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003e60:	009c      	lsls	r4, r3, #2
 8003e62:	66bc      	str	r4, [r7, #104]	; 0x68
 8003e64:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003e68:	f7fc feba 	bl	8000be0 <__aeabi_uldivmod>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	461a      	mov	r2, r3
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <UART_SetConfig+0x66c>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	3332      	adds	r3, #50	; 0x32
 8003e86:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <UART_SetConfig+0x66c>)
 8003e88:	fba2 1303 	umull	r1, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e92:	441d      	add	r5, r3
 8003e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	18db      	adds	r3, r3, r3
 8003ea4:	eb44 0404 	adc.w	r4, r4, r4
 8003ea8:	185b      	adds	r3, r3, r1
 8003eaa:	eb44 0402 	adc.w	r4, r4, r2
 8003eae:	00e0      	lsls	r0, r4, #3
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	00d8      	lsls	r0, r3, #3
 8003ebc:	6038      	str	r0, [r7, #0]
 8003ebe:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003ec2:	eb13 0801 	adds.w	r8, r3, r1
 8003ec6:	eb44 0902 	adc.w	r9, r4, r2
 8003eca:	4640      	mov	r0, r8
 8003ecc:	4649      	mov	r1, r9
 8003ece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f04f 0400 	mov.w	r4, #0
 8003ed6:	00a6      	lsls	r6, r4, #2
 8003ed8:	667e      	str	r6, [r7, #100]	; 0x64
 8003eda:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8003edc:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003ee0:	667e      	str	r6, [r7, #100]	; 0x64
 8003ee2:	009c      	lsls	r4, r3, #2
 8003ee4:	663c      	str	r4, [r7, #96]	; 0x60
 8003ee6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003eea:	f7fc fe79 	bl	8000be0 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <UART_SetConfig+0x66c>)
 8003ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2164      	movs	r1, #100	; 0x64
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <UART_SetConfig+0x66c>)
 8003f0a:	fba2 1303 	umull	r1, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	442b      	add	r3, r5
 8003f16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f18:	6093      	str	r3, [r2, #8]
}
 8003f1a:	e005      	b.n	8003f28 <UART_SetConfig+0x670>
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40011400 	.word	0x40011400
 8003f24:	51eb851f 	.word	0x51eb851f
 8003f28:	bf00      	nop
 8003f2a:	378c      	adds	r7, #140	; 0x8c
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f32:	bf00      	nop

08003f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f3a:	e003      	b.n	8003f44 <LoopCopyDataInit>

08003f3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f42:	3104      	adds	r1, #4

08003f44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f44:	480b      	ldr	r0, [pc, #44]	; (8003f74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f4c:	d3f6      	bcc.n	8003f3c <CopyDataInit>
  ldr  r2, =_sbss
 8003f4e:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f50:	e002      	b.n	8003f58 <LoopFillZerobss>

08003f52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f54:	f842 3b04 	str.w	r3, [r2], #4

08003f58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f5c:	d3f9      	bcc.n	8003f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f5e:	f7fd fb73 	bl	8001648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f62:	f000 f817 	bl	8003f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f66:	f7fc ffc3 	bl	8000ef0 <main>
  bx  lr    
 8003f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003f70:	08006388 	.word	0x08006388
  ldr  r0, =_sdata
 8003f74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f78:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003f7c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003f80:	200002a0 	.word	0x200002a0

08003f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f84:	e7fe      	b.n	8003f84 <ADC_IRQHandler>
	...

08003f88 <__errno>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <__errno+0x8>)
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <__libc_init_array>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4e0d      	ldr	r6, [pc, #52]	; (8003fcc <__libc_init_array+0x38>)
 8003f98:	4c0d      	ldr	r4, [pc, #52]	; (8003fd0 <__libc_init_array+0x3c>)
 8003f9a:	1ba4      	subs	r4, r4, r6
 8003f9c:	10a4      	asrs	r4, r4, #2
 8003f9e:	2500      	movs	r5, #0
 8003fa0:	42a5      	cmp	r5, r4
 8003fa2:	d109      	bne.n	8003fb8 <__libc_init_array+0x24>
 8003fa4:	4e0b      	ldr	r6, [pc, #44]	; (8003fd4 <__libc_init_array+0x40>)
 8003fa6:	4c0c      	ldr	r4, [pc, #48]	; (8003fd8 <__libc_init_array+0x44>)
 8003fa8:	f002 f882 	bl	80060b0 <_init>
 8003fac:	1ba4      	subs	r4, r4, r6
 8003fae:	10a4      	asrs	r4, r4, #2
 8003fb0:	2500      	movs	r5, #0
 8003fb2:	42a5      	cmp	r5, r4
 8003fb4:	d105      	bne.n	8003fc2 <__libc_init_array+0x2e>
 8003fb6:	bd70      	pop	{r4, r5, r6, pc}
 8003fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fbc:	4798      	blx	r3
 8003fbe:	3501      	adds	r5, #1
 8003fc0:	e7ee      	b.n	8003fa0 <__libc_init_array+0xc>
 8003fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fc6:	4798      	blx	r3
 8003fc8:	3501      	adds	r5, #1
 8003fca:	e7f2      	b.n	8003fb2 <__libc_init_array+0x1e>
 8003fcc:	08006380 	.word	0x08006380
 8003fd0:	08006380 	.word	0x08006380
 8003fd4:	08006380 	.word	0x08006380
 8003fd8:	08006384 	.word	0x08006384

08003fdc <memset>:
 8003fdc:	4402      	add	r2, r0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d100      	bne.n	8003fe6 <memset+0xa>
 8003fe4:	4770      	bx	lr
 8003fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fea:	e7f9      	b.n	8003fe0 <memset+0x4>

08003fec <__cvt>:
 8003fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	ec55 4b10 	vmov	r4, r5, d0
 8003ff4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003ff6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ffa:	2d00      	cmp	r5, #0
 8003ffc:	460e      	mov	r6, r1
 8003ffe:	4691      	mov	r9, r2
 8004000:	4619      	mov	r1, r3
 8004002:	bfb8      	it	lt
 8004004:	4622      	movlt	r2, r4
 8004006:	462b      	mov	r3, r5
 8004008:	f027 0720 	bic.w	r7, r7, #32
 800400c:	bfbb      	ittet	lt
 800400e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004012:	461d      	movlt	r5, r3
 8004014:	2300      	movge	r3, #0
 8004016:	232d      	movlt	r3, #45	; 0x2d
 8004018:	bfb8      	it	lt
 800401a:	4614      	movlt	r4, r2
 800401c:	2f46      	cmp	r7, #70	; 0x46
 800401e:	700b      	strb	r3, [r1, #0]
 8004020:	d004      	beq.n	800402c <__cvt+0x40>
 8004022:	2f45      	cmp	r7, #69	; 0x45
 8004024:	d100      	bne.n	8004028 <__cvt+0x3c>
 8004026:	3601      	adds	r6, #1
 8004028:	2102      	movs	r1, #2
 800402a:	e000      	b.n	800402e <__cvt+0x42>
 800402c:	2103      	movs	r1, #3
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	ab02      	add	r3, sp, #8
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4632      	mov	r2, r6
 8004038:	4653      	mov	r3, sl
 800403a:	ec45 4b10 	vmov	d0, r4, r5
 800403e:	f000 fcf3 	bl	8004a28 <_dtoa_r>
 8004042:	2f47      	cmp	r7, #71	; 0x47
 8004044:	4680      	mov	r8, r0
 8004046:	d102      	bne.n	800404e <__cvt+0x62>
 8004048:	f019 0f01 	tst.w	r9, #1
 800404c:	d026      	beq.n	800409c <__cvt+0xb0>
 800404e:	2f46      	cmp	r7, #70	; 0x46
 8004050:	eb08 0906 	add.w	r9, r8, r6
 8004054:	d111      	bne.n	800407a <__cvt+0x8e>
 8004056:	f898 3000 	ldrb.w	r3, [r8]
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d10a      	bne.n	8004074 <__cvt+0x88>
 800405e:	2200      	movs	r2, #0
 8004060:	2300      	movs	r3, #0
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc fd4b 	bl	8000b00 <__aeabi_dcmpeq>
 800406a:	b918      	cbnz	r0, 8004074 <__cvt+0x88>
 800406c:	f1c6 0601 	rsb	r6, r6, #1
 8004070:	f8ca 6000 	str.w	r6, [sl]
 8004074:	f8da 3000 	ldr.w	r3, [sl]
 8004078:	4499      	add	r9, r3
 800407a:	2200      	movs	r2, #0
 800407c:	2300      	movs	r3, #0
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f7fc fd3d 	bl	8000b00 <__aeabi_dcmpeq>
 8004086:	b938      	cbnz	r0, 8004098 <__cvt+0xac>
 8004088:	2230      	movs	r2, #48	; 0x30
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	4599      	cmp	r9, r3
 800408e:	d905      	bls.n	800409c <__cvt+0xb0>
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	9103      	str	r1, [sp, #12]
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e7f8      	b.n	800408a <__cvt+0x9e>
 8004098:	f8cd 900c 	str.w	r9, [sp, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040a0:	eba3 0308 	sub.w	r3, r3, r8
 80040a4:	4640      	mov	r0, r8
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	b004      	add	sp, #16
 80040aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080040ae <__exponent>:
 80040ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b0:	4603      	mov	r3, r0
 80040b2:	2900      	cmp	r1, #0
 80040b4:	bfb8      	it	lt
 80040b6:	4249      	neglt	r1, r1
 80040b8:	f803 2b02 	strb.w	r2, [r3], #2
 80040bc:	bfb4      	ite	lt
 80040be:	222d      	movlt	r2, #45	; 0x2d
 80040c0:	222b      	movge	r2, #43	; 0x2b
 80040c2:	2909      	cmp	r1, #9
 80040c4:	7042      	strb	r2, [r0, #1]
 80040c6:	dd20      	ble.n	800410a <__exponent+0x5c>
 80040c8:	f10d 0207 	add.w	r2, sp, #7
 80040cc:	4617      	mov	r7, r2
 80040ce:	260a      	movs	r6, #10
 80040d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80040d4:	fb06 1115 	mls	r1, r6, r5, r1
 80040d8:	3130      	adds	r1, #48	; 0x30
 80040da:	2d09      	cmp	r5, #9
 80040dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80040e0:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80040e4:	4629      	mov	r1, r5
 80040e6:	dc09      	bgt.n	80040fc <__exponent+0x4e>
 80040e8:	3130      	adds	r1, #48	; 0x30
 80040ea:	3a02      	subs	r2, #2
 80040ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040f0:	42ba      	cmp	r2, r7
 80040f2:	461c      	mov	r4, r3
 80040f4:	d304      	bcc.n	8004100 <__exponent+0x52>
 80040f6:	1a20      	subs	r0, r4, r0
 80040f8:	b003      	add	sp, #12
 80040fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040fc:	4622      	mov	r2, r4
 80040fe:	e7e7      	b.n	80040d0 <__exponent+0x22>
 8004100:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004104:	f803 1b01 	strb.w	r1, [r3], #1
 8004108:	e7f2      	b.n	80040f0 <__exponent+0x42>
 800410a:	2230      	movs	r2, #48	; 0x30
 800410c:	461c      	mov	r4, r3
 800410e:	4411      	add	r1, r2
 8004110:	f804 2b02 	strb.w	r2, [r4], #2
 8004114:	7059      	strb	r1, [r3, #1]
 8004116:	e7ee      	b.n	80040f6 <__exponent+0x48>

08004118 <_printf_float>:
 8004118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411c:	b08d      	sub	sp, #52	; 0x34
 800411e:	460c      	mov	r4, r1
 8004120:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004124:	4616      	mov	r6, r2
 8004126:	461f      	mov	r7, r3
 8004128:	4605      	mov	r5, r0
 800412a:	f001 fa4b 	bl	80055c4 <_localeconv_r>
 800412e:	6803      	ldr	r3, [r0, #0]
 8004130:	9304      	str	r3, [sp, #16]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc f86c 	bl	8000210 <strlen>
 8004138:	2300      	movs	r3, #0
 800413a:	930a      	str	r3, [sp, #40]	; 0x28
 800413c:	f8d8 3000 	ldr.w	r3, [r8]
 8004140:	9005      	str	r0, [sp, #20]
 8004142:	3307      	adds	r3, #7
 8004144:	f023 0307 	bic.w	r3, r3, #7
 8004148:	f103 0208 	add.w	r2, r3, #8
 800414c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004150:	f8d4 b000 	ldr.w	fp, [r4]
 8004154:	f8c8 2000 	str.w	r2, [r8]
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004160:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004164:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004168:	9307      	str	r3, [sp, #28]
 800416a:	f8cd 8018 	str.w	r8, [sp, #24]
 800416e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004172:	4ba5      	ldr	r3, [pc, #660]	; (8004408 <_printf_float+0x2f0>)
 8004174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004178:	f7fc fcf4 	bl	8000b64 <__aeabi_dcmpun>
 800417c:	2800      	cmp	r0, #0
 800417e:	f040 81fb 	bne.w	8004578 <_printf_float+0x460>
 8004182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004186:	4ba0      	ldr	r3, [pc, #640]	; (8004408 <_printf_float+0x2f0>)
 8004188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800418c:	f7fc fccc 	bl	8000b28 <__aeabi_dcmple>
 8004190:	2800      	cmp	r0, #0
 8004192:	f040 81f1 	bne.w	8004578 <_printf_float+0x460>
 8004196:	2200      	movs	r2, #0
 8004198:	2300      	movs	r3, #0
 800419a:	4640      	mov	r0, r8
 800419c:	4649      	mov	r1, r9
 800419e:	f7fc fcb9 	bl	8000b14 <__aeabi_dcmplt>
 80041a2:	b110      	cbz	r0, 80041aa <_printf_float+0x92>
 80041a4:	232d      	movs	r3, #45	; 0x2d
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	4b98      	ldr	r3, [pc, #608]	; (800440c <_printf_float+0x2f4>)
 80041ac:	4a98      	ldr	r2, [pc, #608]	; (8004410 <_printf_float+0x2f8>)
 80041ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80041b2:	bf8c      	ite	hi
 80041b4:	4690      	movhi	r8, r2
 80041b6:	4698      	movls	r8, r3
 80041b8:	2303      	movs	r3, #3
 80041ba:	f02b 0204 	bic.w	r2, fp, #4
 80041be:	6123      	str	r3, [r4, #16]
 80041c0:	6022      	str	r2, [r4, #0]
 80041c2:	f04f 0900 	mov.w	r9, #0
 80041c6:	9700      	str	r7, [sp, #0]
 80041c8:	4633      	mov	r3, r6
 80041ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80041cc:	4621      	mov	r1, r4
 80041ce:	4628      	mov	r0, r5
 80041d0:	f000 f9e2 	bl	8004598 <_printf_common>
 80041d4:	3001      	adds	r0, #1
 80041d6:	f040 8093 	bne.w	8004300 <_printf_float+0x1e8>
 80041da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041de:	b00d      	add	sp, #52	; 0x34
 80041e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e4:	6861      	ldr	r1, [r4, #4]
 80041e6:	1c4b      	adds	r3, r1, #1
 80041e8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80041ec:	d13f      	bne.n	800426e <_printf_float+0x156>
 80041ee:	2306      	movs	r3, #6
 80041f0:	6063      	str	r3, [r4, #4]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9303      	str	r3, [sp, #12]
 80041f6:	ab0a      	add	r3, sp, #40	; 0x28
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	ab09      	add	r3, sp, #36	; 0x24
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	ec49 8b10 	vmov	d0, r8, r9
 8004202:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004206:	6022      	str	r2, [r4, #0]
 8004208:	f8cd a004 	str.w	sl, [sp, #4]
 800420c:	6861      	ldr	r1, [r4, #4]
 800420e:	4628      	mov	r0, r5
 8004210:	f7ff feec 	bl	8003fec <__cvt>
 8004214:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004218:	2b47      	cmp	r3, #71	; 0x47
 800421a:	4680      	mov	r8, r0
 800421c:	d109      	bne.n	8004232 <_printf_float+0x11a>
 800421e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004220:	1cd8      	adds	r0, r3, #3
 8004222:	db02      	blt.n	800422a <_printf_float+0x112>
 8004224:	6862      	ldr	r2, [r4, #4]
 8004226:	4293      	cmp	r3, r2
 8004228:	dd57      	ble.n	80042da <_printf_float+0x1c2>
 800422a:	f1aa 0a02 	sub.w	sl, sl, #2
 800422e:	fa5f fa8a 	uxtb.w	sl, sl
 8004232:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004236:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004238:	d834      	bhi.n	80042a4 <_printf_float+0x18c>
 800423a:	3901      	subs	r1, #1
 800423c:	4652      	mov	r2, sl
 800423e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004242:	9109      	str	r1, [sp, #36]	; 0x24
 8004244:	f7ff ff33 	bl	80040ae <__exponent>
 8004248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800424a:	1883      	adds	r3, r0, r2
 800424c:	2a01      	cmp	r2, #1
 800424e:	4681      	mov	r9, r0
 8004250:	6123      	str	r3, [r4, #16]
 8004252:	dc02      	bgt.n	800425a <_printf_float+0x142>
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	07d1      	lsls	r1, r2, #31
 8004258:	d501      	bpl.n	800425e <_printf_float+0x146>
 800425a:	3301      	adds	r3, #1
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0af      	beq.n	80041c6 <_printf_float+0xae>
 8004266:	232d      	movs	r3, #45	; 0x2d
 8004268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426c:	e7ab      	b.n	80041c6 <_printf_float+0xae>
 800426e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004272:	d002      	beq.n	800427a <_printf_float+0x162>
 8004274:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004278:	d1bb      	bne.n	80041f2 <_printf_float+0xda>
 800427a:	b189      	cbz	r1, 80042a0 <_printf_float+0x188>
 800427c:	2300      	movs	r3, #0
 800427e:	9303      	str	r3, [sp, #12]
 8004280:	ab0a      	add	r3, sp, #40	; 0x28
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	ab09      	add	r3, sp, #36	; 0x24
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	ec49 8b10 	vmov	d0, r8, r9
 800428c:	6022      	str	r2, [r4, #0]
 800428e:	f8cd a004 	str.w	sl, [sp, #4]
 8004292:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004296:	4628      	mov	r0, r5
 8004298:	f7ff fea8 	bl	8003fec <__cvt>
 800429c:	4680      	mov	r8, r0
 800429e:	e7be      	b.n	800421e <_printf_float+0x106>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e7a5      	b.n	80041f0 <_printf_float+0xd8>
 80042a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80042a8:	d119      	bne.n	80042de <_printf_float+0x1c6>
 80042aa:	2900      	cmp	r1, #0
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	dd0c      	ble.n	80042ca <_printf_float+0x1b2>
 80042b0:	6121      	str	r1, [r4, #16]
 80042b2:	b913      	cbnz	r3, 80042ba <_printf_float+0x1a2>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	07d2      	lsls	r2, r2, #31
 80042b8:	d502      	bpl.n	80042c0 <_printf_float+0x1a8>
 80042ba:	3301      	adds	r3, #1
 80042bc:	440b      	add	r3, r1
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c2:	65a3      	str	r3, [r4, #88]	; 0x58
 80042c4:	f04f 0900 	mov.w	r9, #0
 80042c8:	e7c9      	b.n	800425e <_printf_float+0x146>
 80042ca:	b913      	cbnz	r3, 80042d2 <_printf_float+0x1ba>
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	07d0      	lsls	r0, r2, #31
 80042d0:	d501      	bpl.n	80042d6 <_printf_float+0x1be>
 80042d2:	3302      	adds	r3, #2
 80042d4:	e7f3      	b.n	80042be <_printf_float+0x1a6>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7f1      	b.n	80042be <_printf_float+0x1a6>
 80042da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80042de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042e2:	4293      	cmp	r3, r2
 80042e4:	db05      	blt.n	80042f2 <_printf_float+0x1da>
 80042e6:	6822      	ldr	r2, [r4, #0]
 80042e8:	6123      	str	r3, [r4, #16]
 80042ea:	07d1      	lsls	r1, r2, #31
 80042ec:	d5e8      	bpl.n	80042c0 <_printf_float+0x1a8>
 80042ee:	3301      	adds	r3, #1
 80042f0:	e7e5      	b.n	80042be <_printf_float+0x1a6>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bfd4      	ite	le
 80042f6:	f1c3 0302 	rsble	r3, r3, #2
 80042fa:	2301      	movgt	r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	e7de      	b.n	80042be <_printf_float+0x1a6>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	055a      	lsls	r2, r3, #21
 8004304:	d407      	bmi.n	8004316 <_printf_float+0x1fe>
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	4642      	mov	r2, r8
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	d12b      	bne.n	800436c <_printf_float+0x254>
 8004314:	e761      	b.n	80041da <_printf_float+0xc2>
 8004316:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800431a:	f240 80e2 	bls.w	80044e2 <_printf_float+0x3ca>
 800431e:	2200      	movs	r2, #0
 8004320:	2300      	movs	r3, #0
 8004322:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004326:	f7fc fbeb 	bl	8000b00 <__aeabi_dcmpeq>
 800432a:	2800      	cmp	r0, #0
 800432c:	d03c      	beq.n	80043a8 <_printf_float+0x290>
 800432e:	2301      	movs	r3, #1
 8004330:	4a38      	ldr	r2, [pc, #224]	; (8004414 <_printf_float+0x2fc>)
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f af4e 	beq.w	80041da <_printf_float+0xc2>
 800433e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004342:	429a      	cmp	r2, r3
 8004344:	db02      	blt.n	800434c <_printf_float+0x234>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	07d8      	lsls	r0, r3, #31
 800434a:	d50f      	bpl.n	800436c <_printf_float+0x254>
 800434c:	9b05      	ldr	r3, [sp, #20]
 800434e:	9a04      	ldr	r2, [sp, #16]
 8004350:	4631      	mov	r1, r6
 8004352:	4628      	mov	r0, r5
 8004354:	47b8      	blx	r7
 8004356:	3001      	adds	r0, #1
 8004358:	f43f af3f 	beq.w	80041da <_printf_float+0xc2>
 800435c:	f04f 0800 	mov.w	r8, #0
 8004360:	f104 091a 	add.w	r9, r4, #26
 8004364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	4598      	cmp	r8, r3
 800436a:	db12      	blt.n	8004392 <_printf_float+0x27a>
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	079b      	lsls	r3, r3, #30
 8004370:	d509      	bpl.n	8004386 <_printf_float+0x26e>
 8004372:	f04f 0800 	mov.w	r8, #0
 8004376:	f104 0919 	add.w	r9, r4, #25
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	4598      	cmp	r8, r3
 8004382:	f2c0 80ee 	blt.w	8004562 <_printf_float+0x44a>
 8004386:	68e0      	ldr	r0, [r4, #12]
 8004388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800438a:	4298      	cmp	r0, r3
 800438c:	bfb8      	it	lt
 800438e:	4618      	movlt	r0, r3
 8004390:	e725      	b.n	80041de <_printf_float+0xc6>
 8004392:	2301      	movs	r3, #1
 8004394:	464a      	mov	r2, r9
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f af1c 	beq.w	80041da <_printf_float+0xc2>
 80043a2:	f108 0801 	add.w	r8, r8, #1
 80043a6:	e7dd      	b.n	8004364 <_printf_float+0x24c>
 80043a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dc34      	bgt.n	8004418 <_printf_float+0x300>
 80043ae:	2301      	movs	r3, #1
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <_printf_float+0x2fc>)
 80043b2:	4631      	mov	r1, r6
 80043b4:	4628      	mov	r0, r5
 80043b6:	47b8      	blx	r7
 80043b8:	3001      	adds	r0, #1
 80043ba:	f43f af0e 	beq.w	80041da <_printf_float+0xc2>
 80043be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c0:	b923      	cbnz	r3, 80043cc <_printf_float+0x2b4>
 80043c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c4:	b913      	cbnz	r3, 80043cc <_printf_float+0x2b4>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07d9      	lsls	r1, r3, #31
 80043ca:	d5cf      	bpl.n	800436c <_printf_float+0x254>
 80043cc:	9b05      	ldr	r3, [sp, #20]
 80043ce:	9a04      	ldr	r2, [sp, #16]
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f aeff 	beq.w	80041da <_printf_float+0xc2>
 80043dc:	f04f 0900 	mov.w	r9, #0
 80043e0:	f104 0a1a 	add.w	sl, r4, #26
 80043e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e6:	425b      	negs	r3, r3
 80043e8:	4599      	cmp	r9, r3
 80043ea:	db01      	blt.n	80043f0 <_printf_float+0x2d8>
 80043ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043ee:	e78b      	b.n	8004308 <_printf_float+0x1f0>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4652      	mov	r2, sl
 80043f4:	4631      	mov	r1, r6
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	f43f aeed 	beq.w	80041da <_printf_float+0xc2>
 8004400:	f109 0901 	add.w	r9, r9, #1
 8004404:	e7ee      	b.n	80043e4 <_printf_float+0x2cc>
 8004406:	bf00      	nop
 8004408:	7fefffff 	.word	0x7fefffff
 800440c:	08006118 	.word	0x08006118
 8004410:	0800611c 	.word	0x0800611c
 8004414:	08006128 	.word	0x08006128
 8004418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800441a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800441c:	429a      	cmp	r2, r3
 800441e:	bfa8      	it	ge
 8004420:	461a      	movge	r2, r3
 8004422:	2a00      	cmp	r2, #0
 8004424:	4691      	mov	r9, r2
 8004426:	dc38      	bgt.n	800449a <_printf_float+0x382>
 8004428:	f104 031a 	add.w	r3, r4, #26
 800442c:	f04f 0b00 	mov.w	fp, #0
 8004430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004434:	9306      	str	r3, [sp, #24]
 8004436:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800443a:	ebaa 0309 	sub.w	r3, sl, r9
 800443e:	459b      	cmp	fp, r3
 8004440:	db33      	blt.n	80044aa <_printf_float+0x392>
 8004442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004446:	429a      	cmp	r2, r3
 8004448:	db3a      	blt.n	80044c0 <_printf_float+0x3a8>
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	07da      	lsls	r2, r3, #31
 800444e:	d437      	bmi.n	80044c0 <_printf_float+0x3a8>
 8004450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004452:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004454:	eba3 020a 	sub.w	r2, r3, sl
 8004458:	eba3 0901 	sub.w	r9, r3, r1
 800445c:	4591      	cmp	r9, r2
 800445e:	bfa8      	it	ge
 8004460:	4691      	movge	r9, r2
 8004462:	f1b9 0f00 	cmp.w	r9, #0
 8004466:	dc33      	bgt.n	80044d0 <_printf_float+0x3b8>
 8004468:	f04f 0800 	mov.w	r8, #0
 800446c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004470:	f104 0a1a 	add.w	sl, r4, #26
 8004474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	eba3 0309 	sub.w	r3, r3, r9
 800447e:	4598      	cmp	r8, r3
 8004480:	f6bf af74 	bge.w	800436c <_printf_float+0x254>
 8004484:	2301      	movs	r3, #1
 8004486:	4652      	mov	r2, sl
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f aea3 	beq.w	80041da <_printf_float+0xc2>
 8004494:	f108 0801 	add.w	r8, r8, #1
 8004498:	e7ec      	b.n	8004474 <_printf_float+0x35c>
 800449a:	4613      	mov	r3, r2
 800449c:	4631      	mov	r1, r6
 800449e:	4642      	mov	r2, r8
 80044a0:	4628      	mov	r0, r5
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1bf      	bne.n	8004428 <_printf_float+0x310>
 80044a8:	e697      	b.n	80041da <_printf_float+0xc2>
 80044aa:	2301      	movs	r3, #1
 80044ac:	9a06      	ldr	r2, [sp, #24]
 80044ae:	4631      	mov	r1, r6
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	f43f ae90 	beq.w	80041da <_printf_float+0xc2>
 80044ba:	f10b 0b01 	add.w	fp, fp, #1
 80044be:	e7ba      	b.n	8004436 <_printf_float+0x31e>
 80044c0:	9b05      	ldr	r3, [sp, #20]
 80044c2:	9a04      	ldr	r2, [sp, #16]
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	d1c0      	bne.n	8004450 <_printf_float+0x338>
 80044ce:	e684      	b.n	80041da <_printf_float+0xc2>
 80044d0:	464b      	mov	r3, r9
 80044d2:	eb08 020a 	add.w	r2, r8, sl
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	d1c3      	bne.n	8004468 <_printf_float+0x350>
 80044e0:	e67b      	b.n	80041da <_printf_float+0xc2>
 80044e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044e4:	2a01      	cmp	r2, #1
 80044e6:	dc01      	bgt.n	80044ec <_printf_float+0x3d4>
 80044e8:	07db      	lsls	r3, r3, #31
 80044ea:	d537      	bpl.n	800455c <_printf_float+0x444>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4642      	mov	r2, r8
 80044f0:	4631      	mov	r1, r6
 80044f2:	4628      	mov	r0, r5
 80044f4:	47b8      	blx	r7
 80044f6:	3001      	adds	r0, #1
 80044f8:	f43f ae6f 	beq.w	80041da <_printf_float+0xc2>
 80044fc:	9b05      	ldr	r3, [sp, #20]
 80044fe:	9a04      	ldr	r2, [sp, #16]
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	47b8      	blx	r7
 8004506:	3001      	adds	r0, #1
 8004508:	f43f ae67 	beq.w	80041da <_printf_float+0xc2>
 800450c:	2200      	movs	r2, #0
 800450e:	2300      	movs	r3, #0
 8004510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004514:	f7fc faf4 	bl	8000b00 <__aeabi_dcmpeq>
 8004518:	b158      	cbz	r0, 8004532 <_printf_float+0x41a>
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	f104 0a1a 	add.w	sl, r4, #26
 8004522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	4598      	cmp	r8, r3
 8004528:	db0d      	blt.n	8004546 <_printf_float+0x42e>
 800452a:	464b      	mov	r3, r9
 800452c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004530:	e6eb      	b.n	800430a <_printf_float+0x1f2>
 8004532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004534:	f108 0201 	add.w	r2, r8, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	d1f2      	bne.n	800452a <_printf_float+0x412>
 8004544:	e649      	b.n	80041da <_printf_float+0xc2>
 8004546:	2301      	movs	r3, #1
 8004548:	4652      	mov	r2, sl
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae42 	beq.w	80041da <_printf_float+0xc2>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	e7e2      	b.n	8004522 <_printf_float+0x40a>
 800455c:	2301      	movs	r3, #1
 800455e:	4642      	mov	r2, r8
 8004560:	e7eb      	b.n	800453a <_printf_float+0x422>
 8004562:	2301      	movs	r3, #1
 8004564:	464a      	mov	r2, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae34 	beq.w	80041da <_printf_float+0xc2>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	e700      	b.n	800437a <_printf_float+0x262>
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	4640      	mov	r0, r8
 800457e:	4649      	mov	r1, r9
 8004580:	f7fc faf0 	bl	8000b64 <__aeabi_dcmpun>
 8004584:	2800      	cmp	r0, #0
 8004586:	f43f ae2d 	beq.w	80041e4 <_printf_float+0xcc>
 800458a:	4b01      	ldr	r3, [pc, #4]	; (8004590 <_printf_float+0x478>)
 800458c:	4a01      	ldr	r2, [pc, #4]	; (8004594 <_printf_float+0x47c>)
 800458e:	e60e      	b.n	80041ae <_printf_float+0x96>
 8004590:	08006120 	.word	0x08006120
 8004594:	08006124 	.word	0x08006124

08004598 <_printf_common>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	4691      	mov	r9, r2
 800459e:	461f      	mov	r7, r3
 80045a0:	688a      	ldr	r2, [r1, #8]
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bfb8      	it	lt
 80045ac:	4613      	movlt	r3, r2
 80045ae:	f8c9 3000 	str.w	r3, [r9]
 80045b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b6:	4606      	mov	r6, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	b112      	cbz	r2, 80045c2 <_printf_common+0x2a>
 80045bc:	3301      	adds	r3, #1
 80045be:	f8c9 3000 	str.w	r3, [r9]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045cc:	3302      	addmi	r3, #2
 80045ce:	f8c9 3000 	strmi.w	r3, [r9]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	f015 0506 	ands.w	r5, r5, #6
 80045d8:	d107      	bne.n	80045ea <_printf_common+0x52>
 80045da:	f104 0a19 	add.w	sl, r4, #25
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	f8d9 2000 	ldr.w	r2, [r9]
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	429d      	cmp	r5, r3
 80045e8:	db29      	blt.n	800463e <_printf_common+0xa6>
 80045ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	3300      	adds	r3, #0
 80045f2:	bf18      	it	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	0692      	lsls	r2, r2, #26
 80045f8:	d42e      	bmi.n	8004658 <_printf_common+0xc0>
 80045fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045fe:	4639      	mov	r1, r7
 8004600:	4630      	mov	r0, r6
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d021      	beq.n	800464c <_printf_common+0xb4>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	68e5      	ldr	r5, [r4, #12]
 800460c:	f8d9 2000 	ldr.w	r2, [r9]
 8004610:	f003 0306 	and.w	r3, r3, #6
 8004614:	2b04      	cmp	r3, #4
 8004616:	bf08      	it	eq
 8004618:	1aad      	subeq	r5, r5, r2
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	bf0c      	ite	eq
 8004620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004624:	2500      	movne	r5, #0
 8004626:	4293      	cmp	r3, r2
 8004628:	bfc4      	itt	gt
 800462a:	1a9b      	subgt	r3, r3, r2
 800462c:	18ed      	addgt	r5, r5, r3
 800462e:	f04f 0900 	mov.w	r9, #0
 8004632:	341a      	adds	r4, #26
 8004634:	454d      	cmp	r5, r9
 8004636:	d11b      	bne.n	8004670 <_printf_common+0xd8>
 8004638:	2000      	movs	r0, #0
 800463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463e:	2301      	movs	r3, #1
 8004640:	4652      	mov	r2, sl
 8004642:	4639      	mov	r1, r7
 8004644:	4630      	mov	r0, r6
 8004646:	47c0      	blx	r8
 8004648:	3001      	adds	r0, #1
 800464a:	d103      	bne.n	8004654 <_printf_common+0xbc>
 800464c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	3501      	adds	r5, #1
 8004656:	e7c2      	b.n	80045de <_printf_common+0x46>
 8004658:	18e1      	adds	r1, r4, r3
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	2030      	movs	r0, #48	; 0x30
 800465e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004662:	4422      	add	r2, r4
 8004664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800466c:	3302      	adds	r3, #2
 800466e:	e7c4      	b.n	80045fa <_printf_common+0x62>
 8004670:	2301      	movs	r3, #1
 8004672:	4622      	mov	r2, r4
 8004674:	4639      	mov	r1, r7
 8004676:	4630      	mov	r0, r6
 8004678:	47c0      	blx	r8
 800467a:	3001      	adds	r0, #1
 800467c:	d0e6      	beq.n	800464c <_printf_common+0xb4>
 800467e:	f109 0901 	add.w	r9, r9, #1
 8004682:	e7d7      	b.n	8004634 <_printf_common+0x9c>

08004684 <_printf_i>:
 8004684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004688:	4617      	mov	r7, r2
 800468a:	7e0a      	ldrb	r2, [r1, #24]
 800468c:	b085      	sub	sp, #20
 800468e:	2a6e      	cmp	r2, #110	; 0x6e
 8004690:	4698      	mov	r8, r3
 8004692:	4606      	mov	r6, r0
 8004694:	460c      	mov	r4, r1
 8004696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004698:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800469c:	f000 80bc 	beq.w	8004818 <_printf_i+0x194>
 80046a0:	d81a      	bhi.n	80046d8 <_printf_i+0x54>
 80046a2:	2a63      	cmp	r2, #99	; 0x63
 80046a4:	d02e      	beq.n	8004704 <_printf_i+0x80>
 80046a6:	d80a      	bhi.n	80046be <_printf_i+0x3a>
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	f000 80c8 	beq.w	800483e <_printf_i+0x1ba>
 80046ae:	2a58      	cmp	r2, #88	; 0x58
 80046b0:	f000 808a 	beq.w	80047c8 <_printf_i+0x144>
 80046b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80046bc:	e02a      	b.n	8004714 <_printf_i+0x90>
 80046be:	2a64      	cmp	r2, #100	; 0x64
 80046c0:	d001      	beq.n	80046c6 <_printf_i+0x42>
 80046c2:	2a69      	cmp	r2, #105	; 0x69
 80046c4:	d1f6      	bne.n	80046b4 <_printf_i+0x30>
 80046c6:	6821      	ldr	r1, [r4, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046ce:	d023      	beq.n	8004718 <_printf_i+0x94>
 80046d0:	1d11      	adds	r1, r2, #4
 80046d2:	6019      	str	r1, [r3, #0]
 80046d4:	6813      	ldr	r3, [r2, #0]
 80046d6:	e027      	b.n	8004728 <_printf_i+0xa4>
 80046d8:	2a73      	cmp	r2, #115	; 0x73
 80046da:	f000 80b4 	beq.w	8004846 <_printf_i+0x1c2>
 80046de:	d808      	bhi.n	80046f2 <_printf_i+0x6e>
 80046e0:	2a6f      	cmp	r2, #111	; 0x6f
 80046e2:	d02a      	beq.n	800473a <_printf_i+0xb6>
 80046e4:	2a70      	cmp	r2, #112	; 0x70
 80046e6:	d1e5      	bne.n	80046b4 <_printf_i+0x30>
 80046e8:	680a      	ldr	r2, [r1, #0]
 80046ea:	f042 0220 	orr.w	r2, r2, #32
 80046ee:	600a      	str	r2, [r1, #0]
 80046f0:	e003      	b.n	80046fa <_printf_i+0x76>
 80046f2:	2a75      	cmp	r2, #117	; 0x75
 80046f4:	d021      	beq.n	800473a <_printf_i+0xb6>
 80046f6:	2a78      	cmp	r2, #120	; 0x78
 80046f8:	d1dc      	bne.n	80046b4 <_printf_i+0x30>
 80046fa:	2278      	movs	r2, #120	; 0x78
 80046fc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004700:	496e      	ldr	r1, [pc, #440]	; (80048bc <_printf_i+0x238>)
 8004702:	e064      	b.n	80047ce <_printf_i+0x14a>
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800470a:	1d11      	adds	r1, r2, #4
 800470c:	6019      	str	r1, [r3, #0]
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004714:	2301      	movs	r3, #1
 8004716:	e0a3      	b.n	8004860 <_printf_i+0x1dc>
 8004718:	f011 0f40 	tst.w	r1, #64	; 0x40
 800471c:	f102 0104 	add.w	r1, r2, #4
 8004720:	6019      	str	r1, [r3, #0]
 8004722:	d0d7      	beq.n	80046d4 <_printf_i+0x50>
 8004724:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004728:	2b00      	cmp	r3, #0
 800472a:	da03      	bge.n	8004734 <_printf_i+0xb0>
 800472c:	222d      	movs	r2, #45	; 0x2d
 800472e:	425b      	negs	r3, r3
 8004730:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004734:	4962      	ldr	r1, [pc, #392]	; (80048c0 <_printf_i+0x23c>)
 8004736:	220a      	movs	r2, #10
 8004738:	e017      	b.n	800476a <_printf_i+0xe6>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004742:	d003      	beq.n	800474c <_printf_i+0xc8>
 8004744:	1d08      	adds	r0, r1, #4
 8004746:	6018      	str	r0, [r3, #0]
 8004748:	680b      	ldr	r3, [r1, #0]
 800474a:	e006      	b.n	800475a <_printf_i+0xd6>
 800474c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004750:	f101 0004 	add.w	r0, r1, #4
 8004754:	6018      	str	r0, [r3, #0]
 8004756:	d0f7      	beq.n	8004748 <_printf_i+0xc4>
 8004758:	880b      	ldrh	r3, [r1, #0]
 800475a:	4959      	ldr	r1, [pc, #356]	; (80048c0 <_printf_i+0x23c>)
 800475c:	2a6f      	cmp	r2, #111	; 0x6f
 800475e:	bf14      	ite	ne
 8004760:	220a      	movne	r2, #10
 8004762:	2208      	moveq	r2, #8
 8004764:	2000      	movs	r0, #0
 8004766:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800476a:	6865      	ldr	r5, [r4, #4]
 800476c:	60a5      	str	r5, [r4, #8]
 800476e:	2d00      	cmp	r5, #0
 8004770:	f2c0 809c 	blt.w	80048ac <_printf_i+0x228>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	f020 0004 	bic.w	r0, r0, #4
 800477a:	6020      	str	r0, [r4, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d13f      	bne.n	8004800 <_printf_i+0x17c>
 8004780:	2d00      	cmp	r5, #0
 8004782:	f040 8095 	bne.w	80048b0 <_printf_i+0x22c>
 8004786:	4675      	mov	r5, lr
 8004788:	2a08      	cmp	r2, #8
 800478a:	d10b      	bne.n	80047a4 <_printf_i+0x120>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	07da      	lsls	r2, r3, #31
 8004790:	d508      	bpl.n	80047a4 <_printf_i+0x120>
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	6862      	ldr	r2, [r4, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	bfde      	ittt	le
 800479a:	2330      	movle	r3, #48	; 0x30
 800479c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047a4:	ebae 0305 	sub.w	r3, lr, r5
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	f8cd 8000 	str.w	r8, [sp]
 80047ae:	463b      	mov	r3, r7
 80047b0:	aa03      	add	r2, sp, #12
 80047b2:	4621      	mov	r1, r4
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7ff feef 	bl	8004598 <_printf_common>
 80047ba:	3001      	adds	r0, #1
 80047bc:	d155      	bne.n	800486a <_printf_i+0x1e6>
 80047be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c2:	b005      	add	sp, #20
 80047c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80047cc:	493c      	ldr	r1, [pc, #240]	; (80048c0 <_printf_i+0x23c>)
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047d6:	f100 0504 	add.w	r5, r0, #4
 80047da:	601d      	str	r5, [r3, #0]
 80047dc:	d001      	beq.n	80047e2 <_printf_i+0x15e>
 80047de:	6803      	ldr	r3, [r0, #0]
 80047e0:	e002      	b.n	80047e8 <_printf_i+0x164>
 80047e2:	0655      	lsls	r5, r2, #25
 80047e4:	d5fb      	bpl.n	80047de <_printf_i+0x15a>
 80047e6:	8803      	ldrh	r3, [r0, #0]
 80047e8:	07d0      	lsls	r0, r2, #31
 80047ea:	bf44      	itt	mi
 80047ec:	f042 0220 	orrmi.w	r2, r2, #32
 80047f0:	6022      	strmi	r2, [r4, #0]
 80047f2:	b91b      	cbnz	r3, 80047fc <_printf_i+0x178>
 80047f4:	6822      	ldr	r2, [r4, #0]
 80047f6:	f022 0220 	bic.w	r2, r2, #32
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	2210      	movs	r2, #16
 80047fe:	e7b1      	b.n	8004764 <_printf_i+0xe0>
 8004800:	4675      	mov	r5, lr
 8004802:	fbb3 f0f2 	udiv	r0, r3, r2
 8004806:	fb02 3310 	mls	r3, r2, r0, r3
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004810:	4603      	mov	r3, r0
 8004812:	2800      	cmp	r0, #0
 8004814:	d1f5      	bne.n	8004802 <_printf_i+0x17e>
 8004816:	e7b7      	b.n	8004788 <_printf_i+0x104>
 8004818:	6808      	ldr	r0, [r1, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	6949      	ldr	r1, [r1, #20]
 800481e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004822:	d004      	beq.n	800482e <_printf_i+0x1aa>
 8004824:	1d10      	adds	r0, r2, #4
 8004826:	6018      	str	r0, [r3, #0]
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	6019      	str	r1, [r3, #0]
 800482c:	e007      	b.n	800483e <_printf_i+0x1ba>
 800482e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004832:	f102 0004 	add.w	r0, r2, #4
 8004836:	6018      	str	r0, [r3, #0]
 8004838:	6813      	ldr	r3, [r2, #0]
 800483a:	d0f6      	beq.n	800482a <_printf_i+0x1a6>
 800483c:	8019      	strh	r1, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	6123      	str	r3, [r4, #16]
 8004842:	4675      	mov	r5, lr
 8004844:	e7b1      	b.n	80047aa <_printf_i+0x126>
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	1d11      	adds	r1, r2, #4
 800484a:	6019      	str	r1, [r3, #0]
 800484c:	6815      	ldr	r5, [r2, #0]
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	2100      	movs	r1, #0
 8004852:	4628      	mov	r0, r5
 8004854:	f7fb fce4 	bl	8000220 <memchr>
 8004858:	b108      	cbz	r0, 800485e <_printf_i+0x1da>
 800485a:	1b40      	subs	r0, r0, r5
 800485c:	6060      	str	r0, [r4, #4]
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	6123      	str	r3, [r4, #16]
 8004862:	2300      	movs	r3, #0
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004868:	e79f      	b.n	80047aa <_printf_i+0x126>
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	462a      	mov	r2, r5
 800486e:	4639      	mov	r1, r7
 8004870:	4630      	mov	r0, r6
 8004872:	47c0      	blx	r8
 8004874:	3001      	adds	r0, #1
 8004876:	d0a2      	beq.n	80047be <_printf_i+0x13a>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	079b      	lsls	r3, r3, #30
 800487c:	d507      	bpl.n	800488e <_printf_i+0x20a>
 800487e:	2500      	movs	r5, #0
 8004880:	f104 0919 	add.w	r9, r4, #25
 8004884:	68e3      	ldr	r3, [r4, #12]
 8004886:	9a03      	ldr	r2, [sp, #12]
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	429d      	cmp	r5, r3
 800488c:	db05      	blt.n	800489a <_printf_i+0x216>
 800488e:	68e0      	ldr	r0, [r4, #12]
 8004890:	9b03      	ldr	r3, [sp, #12]
 8004892:	4298      	cmp	r0, r3
 8004894:	bfb8      	it	lt
 8004896:	4618      	movlt	r0, r3
 8004898:	e793      	b.n	80047c2 <_printf_i+0x13e>
 800489a:	2301      	movs	r3, #1
 800489c:	464a      	mov	r2, r9
 800489e:	4639      	mov	r1, r7
 80048a0:	4630      	mov	r0, r6
 80048a2:	47c0      	blx	r8
 80048a4:	3001      	adds	r0, #1
 80048a6:	d08a      	beq.n	80047be <_printf_i+0x13a>
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7eb      	b.n	8004884 <_printf_i+0x200>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1a7      	bne.n	8004800 <_printf_i+0x17c>
 80048b0:	780b      	ldrb	r3, [r1, #0]
 80048b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ba:	e765      	b.n	8004788 <_printf_i+0x104>
 80048bc:	0800613b 	.word	0x0800613b
 80048c0:	0800612a 	.word	0x0800612a

080048c4 <siprintf>:
 80048c4:	b40e      	push	{r1, r2, r3}
 80048c6:	b500      	push	{lr}
 80048c8:	b09c      	sub	sp, #112	; 0x70
 80048ca:	f44f 7102 	mov.w	r1, #520	; 0x208
 80048ce:	ab1d      	add	r3, sp, #116	; 0x74
 80048d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	9006      	str	r0, [sp, #24]
 80048d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048dc:	480a      	ldr	r0, [pc, #40]	; (8004908 <siprintf+0x44>)
 80048de:	9104      	str	r1, [sp, #16]
 80048e0:	9107      	str	r1, [sp, #28]
 80048e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80048e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ea:	f8ad 1016 	strh.w	r1, [sp, #22]
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	a902      	add	r1, sp, #8
 80048f4:	f001 fa6e 	bl	8005dd4 <_svfiprintf_r>
 80048f8:	9b02      	ldr	r3, [sp, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	b01c      	add	sp, #112	; 0x70
 8004900:	f85d eb04 	ldr.w	lr, [sp], #4
 8004904:	b003      	add	sp, #12
 8004906:	4770      	bx	lr
 8004908:	2000000c 	.word	0x2000000c

0800490c <quorem>:
 800490c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	6903      	ldr	r3, [r0, #16]
 8004912:	690c      	ldr	r4, [r1, #16]
 8004914:	429c      	cmp	r4, r3
 8004916:	4680      	mov	r8, r0
 8004918:	f300 8082 	bgt.w	8004a20 <quorem+0x114>
 800491c:	3c01      	subs	r4, #1
 800491e:	f101 0714 	add.w	r7, r1, #20
 8004922:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004926:	f100 0614 	add.w	r6, r0, #20
 800492a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800492e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004932:	eb06 030e 	add.w	r3, r6, lr
 8004936:	3501      	adds	r5, #1
 8004938:	eb07 090e 	add.w	r9, r7, lr
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004942:	b395      	cbz	r5, 80049aa <quorem+0x9e>
 8004944:	f04f 0a00 	mov.w	sl, #0
 8004948:	4638      	mov	r0, r7
 800494a:	46b4      	mov	ip, r6
 800494c:	46d3      	mov	fp, sl
 800494e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004952:	b293      	uxth	r3, r2
 8004954:	fb05 a303 	mla	r3, r5, r3, sl
 8004958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800495c:	b29b      	uxth	r3, r3
 800495e:	ebab 0303 	sub.w	r3, fp, r3
 8004962:	0c12      	lsrs	r2, r2, #16
 8004964:	f8bc b000 	ldrh.w	fp, [ip]
 8004968:	fb05 a202 	mla	r2, r5, r2, sl
 800496c:	fa13 f38b 	uxtah	r3, r3, fp
 8004970:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004974:	fa1f fb82 	uxth.w	fp, r2
 8004978:	f8dc 2000 	ldr.w	r2, [ip]
 800497c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800498a:	4581      	cmp	r9, r0
 800498c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004990:	f84c 3b04 	str.w	r3, [ip], #4
 8004994:	d2db      	bcs.n	800494e <quorem+0x42>
 8004996:	f856 300e 	ldr.w	r3, [r6, lr]
 800499a:	b933      	cbnz	r3, 80049aa <quorem+0x9e>
 800499c:	9b01      	ldr	r3, [sp, #4]
 800499e:	3b04      	subs	r3, #4
 80049a0:	429e      	cmp	r6, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	d330      	bcc.n	8004a08 <quorem+0xfc>
 80049a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80049aa:	4640      	mov	r0, r8
 80049ac:	f001 f835 	bl	8005a1a <__mcmp>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	db25      	blt.n	8004a00 <quorem+0xf4>
 80049b4:	3501      	adds	r5, #1
 80049b6:	4630      	mov	r0, r6
 80049b8:	f04f 0e00 	mov.w	lr, #0
 80049bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80049c0:	f8d0 c000 	ldr.w	ip, [r0]
 80049c4:	b293      	uxth	r3, r2
 80049c6:	ebae 0303 	sub.w	r3, lr, r3
 80049ca:	0c12      	lsrs	r2, r2, #16
 80049cc:	fa13 f38c 	uxtah	r3, r3, ip
 80049d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80049d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049d8:	b29b      	uxth	r3, r3
 80049da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049de:	45b9      	cmp	r9, r7
 80049e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80049e4:	f840 3b04 	str.w	r3, [r0], #4
 80049e8:	d2e8      	bcs.n	80049bc <quorem+0xb0>
 80049ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80049ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80049f2:	b92a      	cbnz	r2, 8004a00 <quorem+0xf4>
 80049f4:	3b04      	subs	r3, #4
 80049f6:	429e      	cmp	r6, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	d30b      	bcc.n	8004a14 <quorem+0x108>
 80049fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a00:	4628      	mov	r0, r5
 8004a02:	b003      	add	sp, #12
 8004a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	2a00      	cmp	r2, #0
 8004a0e:	d1ca      	bne.n	80049a6 <quorem+0x9a>
 8004a10:	3c01      	subs	r4, #1
 8004a12:	e7c5      	b.n	80049a0 <quorem+0x94>
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	3b04      	subs	r3, #4
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	d1ef      	bne.n	80049fc <quorem+0xf0>
 8004a1c:	3c01      	subs	r4, #1
 8004a1e:	e7ea      	b.n	80049f6 <quorem+0xea>
 8004a20:	2000      	movs	r0, #0
 8004a22:	e7ee      	b.n	8004a02 <quorem+0xf6>
 8004a24:	0000      	movs	r0, r0
	...

08004a28 <_dtoa_r>:
 8004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a2c:	ec57 6b10 	vmov	r6, r7, d0
 8004a30:	b097      	sub	sp, #92	; 0x5c
 8004a32:	e9cd 6700 	strd	r6, r7, [sp]
 8004a36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a38:	9107      	str	r1, [sp, #28]
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004a3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a40:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004a42:	b93e      	cbnz	r6, 8004a54 <_dtoa_r+0x2c>
 8004a44:	2010      	movs	r0, #16
 8004a46:	f000 fdcb 	bl	80055e0 <malloc>
 8004a4a:	6260      	str	r0, [r4, #36]	; 0x24
 8004a4c:	6046      	str	r6, [r0, #4]
 8004a4e:	6086      	str	r6, [r0, #8]
 8004a50:	6006      	str	r6, [r0, #0]
 8004a52:	60c6      	str	r6, [r0, #12]
 8004a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a56:	6819      	ldr	r1, [r3, #0]
 8004a58:	b151      	cbz	r1, 8004a70 <_dtoa_r+0x48>
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	604a      	str	r2, [r1, #4]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4093      	lsls	r3, r2
 8004a62:	608b      	str	r3, [r1, #8]
 8004a64:	4620      	mov	r0, r4
 8004a66:	f000 fe02 	bl	800566e <_Bfree>
 8004a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	9b01      	ldr	r3, [sp, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bfbf      	itttt	lt
 8004a76:	2301      	movlt	r3, #1
 8004a78:	602b      	strlt	r3, [r5, #0]
 8004a7a:	9b01      	ldrlt	r3, [sp, #4]
 8004a7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a80:	bfb2      	itee	lt
 8004a82:	9301      	strlt	r3, [sp, #4]
 8004a84:	2300      	movge	r3, #0
 8004a86:	602b      	strge	r3, [r5, #0]
 8004a88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004a8c:	4ba8      	ldr	r3, [pc, #672]	; (8004d30 <_dtoa_r+0x308>)
 8004a8e:	ea33 0308 	bics.w	r3, r3, r8
 8004a92:	d11b      	bne.n	8004acc <_dtoa_r+0xa4>
 8004a94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	9b00      	ldr	r3, [sp, #0]
 8004a9e:	b923      	cbnz	r3, 8004aaa <_dtoa_r+0x82>
 8004aa0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f000 8578 	beq.w	800559a <_dtoa_r+0xb72>
 8004aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004aac:	b953      	cbnz	r3, 8004ac4 <_dtoa_r+0x9c>
 8004aae:	4ba1      	ldr	r3, [pc, #644]	; (8004d34 <_dtoa_r+0x30c>)
 8004ab0:	e021      	b.n	8004af6 <_dtoa_r+0xce>
 8004ab2:	4ba1      	ldr	r3, [pc, #644]	; (8004d38 <_dtoa_r+0x310>)
 8004ab4:	9302      	str	r3, [sp, #8]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	9802      	ldr	r0, [sp, #8]
 8004abe:	b017      	add	sp, #92	; 0x5c
 8004ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac4:	4b9b      	ldr	r3, [pc, #620]	; (8004d34 <_dtoa_r+0x30c>)
 8004ac6:	9302      	str	r3, [sp, #8]
 8004ac8:	3303      	adds	r3, #3
 8004aca:	e7f5      	b.n	8004ab8 <_dtoa_r+0x90>
 8004acc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f7fc f812 	bl	8000b00 <__aeabi_dcmpeq>
 8004adc:	4681      	mov	r9, r0
 8004ade:	b160      	cbz	r0, 8004afa <_dtoa_r+0xd2>
 8004ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8553 	beq.w	8005594 <_dtoa_r+0xb6c>
 8004aee:	4b93      	ldr	r3, [pc, #588]	; (8004d3c <_dtoa_r+0x314>)
 8004af0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	9302      	str	r3, [sp, #8]
 8004af8:	e7e0      	b.n	8004abc <_dtoa_r+0x94>
 8004afa:	aa14      	add	r2, sp, #80	; 0x50
 8004afc:	a915      	add	r1, sp, #84	; 0x54
 8004afe:	ec47 6b10 	vmov	d0, r6, r7
 8004b02:	4620      	mov	r0, r4
 8004b04:	f001 f801 	bl	8005b0a <__d2b>
 8004b08:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b0c:	4682      	mov	sl, r0
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	d07e      	beq.n	8004c10 <_dtoa_r+0x1e8>
 8004b12:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b16:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b20:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b24:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004b28:	2200      	movs	r2, #0
 8004b2a:	4b85      	ldr	r3, [pc, #532]	; (8004d40 <_dtoa_r+0x318>)
 8004b2c:	f7fb fbcc 	bl	80002c8 <__aeabi_dsub>
 8004b30:	a379      	add	r3, pc, #484	; (adr r3, 8004d18 <_dtoa_r+0x2f0>)
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fd7b 	bl	8000630 <__aeabi_dmul>
 8004b3a:	a379      	add	r3, pc, #484	; (adr r3, 8004d20 <_dtoa_r+0x2f8>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f7fb fbc4 	bl	80002cc <__adddf3>
 8004b44:	4606      	mov	r6, r0
 8004b46:	4628      	mov	r0, r5
 8004b48:	460f      	mov	r7, r1
 8004b4a:	f7fb fd0b 	bl	8000564 <__aeabi_i2d>
 8004b4e:	a376      	add	r3, pc, #472	; (adr r3, 8004d28 <_dtoa_r+0x300>)
 8004b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b54:	f7fb fd6c 	bl	8000630 <__aeabi_dmul>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	4639      	mov	r1, r7
 8004b60:	f7fb fbb4 	bl	80002cc <__adddf3>
 8004b64:	4606      	mov	r6, r0
 8004b66:	460f      	mov	r7, r1
 8004b68:	f7fc f812 	bl	8000b90 <__aeabi_d2iz>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4683      	mov	fp, r0
 8004b70:	2300      	movs	r3, #0
 8004b72:	4630      	mov	r0, r6
 8004b74:	4639      	mov	r1, r7
 8004b76:	f7fb ffcd 	bl	8000b14 <__aeabi_dcmplt>
 8004b7a:	b158      	cbz	r0, 8004b94 <_dtoa_r+0x16c>
 8004b7c:	4658      	mov	r0, fp
 8004b7e:	f7fb fcf1 	bl	8000564 <__aeabi_i2d>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4630      	mov	r0, r6
 8004b88:	4639      	mov	r1, r7
 8004b8a:	f7fb ffb9 	bl	8000b00 <__aeabi_dcmpeq>
 8004b8e:	b908      	cbnz	r0, 8004b94 <_dtoa_r+0x16c>
 8004b90:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004b94:	f1bb 0f16 	cmp.w	fp, #22
 8004b98:	d859      	bhi.n	8004c4e <_dtoa_r+0x226>
 8004b9a:	496a      	ldr	r1, [pc, #424]	; (8004d44 <_dtoa_r+0x31c>)
 8004b9c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ba8:	f7fb ffd2 	bl	8000b50 <__aeabi_dcmpgt>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d050      	beq.n	8004c52 <_dtoa_r+0x22a>
 8004bb0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8004bb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bba:	1b5d      	subs	r5, r3, r5
 8004bbc:	1e6b      	subs	r3, r5, #1
 8004bbe:	9306      	str	r3, [sp, #24]
 8004bc0:	bf45      	ittet	mi
 8004bc2:	f1c5 0301 	rsbmi	r3, r5, #1
 8004bc6:	9305      	strmi	r3, [sp, #20]
 8004bc8:	2300      	movpl	r3, #0
 8004bca:	2300      	movmi	r3, #0
 8004bcc:	bf4c      	ite	mi
 8004bce:	9306      	strmi	r3, [sp, #24]
 8004bd0:	9305      	strpl	r3, [sp, #20]
 8004bd2:	f1bb 0f00 	cmp.w	fp, #0
 8004bd6:	db3e      	blt.n	8004c56 <_dtoa_r+0x22e>
 8004bd8:	9b06      	ldr	r3, [sp, #24]
 8004bda:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004bde:	445b      	add	r3, fp
 8004be0:	9306      	str	r3, [sp, #24]
 8004be2:	2300      	movs	r3, #0
 8004be4:	9308      	str	r3, [sp, #32]
 8004be6:	9b07      	ldr	r3, [sp, #28]
 8004be8:	2b09      	cmp	r3, #9
 8004bea:	f200 80af 	bhi.w	8004d4c <_dtoa_r+0x324>
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	bfc4      	itt	gt
 8004bf2:	3b04      	subgt	r3, #4
 8004bf4:	9307      	strgt	r3, [sp, #28]
 8004bf6:	9b07      	ldr	r3, [sp, #28]
 8004bf8:	f1a3 0302 	sub.w	r3, r3, #2
 8004bfc:	bfcc      	ite	gt
 8004bfe:	2600      	movgt	r6, #0
 8004c00:	2601      	movle	r6, #1
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	f200 80ae 	bhi.w	8004d64 <_dtoa_r+0x33c>
 8004c08:	e8df f003 	tbb	[pc, r3]
 8004c0c:	772f8482 	.word	0x772f8482
 8004c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c12:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004c14:	441d      	add	r5, r3
 8004c16:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	dd11      	ble.n	8004c42 <_dtoa_r+0x21a>
 8004c1e:	9a00      	ldr	r2, [sp, #0]
 8004c20:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004c24:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004c28:	fa22 f000 	lsr.w	r0, r2, r0
 8004c2c:	fa08 f303 	lsl.w	r3, r8, r3
 8004c30:	4318      	orrs	r0, r3
 8004c32:	f7fb fc87 	bl	8000544 <__aeabi_ui2d>
 8004c36:	2301      	movs	r3, #1
 8004c38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c3c:	3d01      	subs	r5, #1
 8004c3e:	9312      	str	r3, [sp, #72]	; 0x48
 8004c40:	e772      	b.n	8004b28 <_dtoa_r+0x100>
 8004c42:	f1c3 0020 	rsb	r0, r3, #32
 8004c46:	9b00      	ldr	r3, [sp, #0]
 8004c48:	fa03 f000 	lsl.w	r0, r3, r0
 8004c4c:	e7f1      	b.n	8004c32 <_dtoa_r+0x20a>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e7b1      	b.n	8004bb6 <_dtoa_r+0x18e>
 8004c52:	900e      	str	r0, [sp, #56]	; 0x38
 8004c54:	e7b0      	b.n	8004bb8 <_dtoa_r+0x190>
 8004c56:	9b05      	ldr	r3, [sp, #20]
 8004c58:	eba3 030b 	sub.w	r3, r3, fp
 8004c5c:	9305      	str	r3, [sp, #20]
 8004c5e:	f1cb 0300 	rsb	r3, fp, #0
 8004c62:	9308      	str	r3, [sp, #32]
 8004c64:	2300      	movs	r3, #0
 8004c66:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c68:	e7bd      	b.n	8004be6 <_dtoa_r+0x1be>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	dd7a      	ble.n	8004d6a <_dtoa_r+0x342>
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	9303      	str	r3, [sp, #12]
 8004c78:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	606a      	str	r2, [r5, #4]
 8004c7e:	2104      	movs	r1, #4
 8004c80:	f101 0214 	add.w	r2, r1, #20
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d975      	bls.n	8004d74 <_dtoa_r+0x34c>
 8004c88:	6869      	ldr	r1, [r5, #4]
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 fcbb 	bl	8005606 <_Balloc>
 8004c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c92:	6028      	str	r0, [r5, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9302      	str	r3, [sp, #8]
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	2b0e      	cmp	r3, #14
 8004c9c:	f200 80e5 	bhi.w	8004e6a <_dtoa_r+0x442>
 8004ca0:	2e00      	cmp	r6, #0
 8004ca2:	f000 80e2 	beq.w	8004e6a <_dtoa_r+0x442>
 8004ca6:	ed9d 7b00 	vldr	d7, [sp]
 8004caa:	f1bb 0f00 	cmp.w	fp, #0
 8004cae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004cb2:	dd74      	ble.n	8004d9e <_dtoa_r+0x376>
 8004cb4:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <_dtoa_r+0x31c>)
 8004cb6:	f00b 030f 	and.w	r3, fp, #15
 8004cba:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004cbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cc2:	06f0      	lsls	r0, r6, #27
 8004cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cc8:	d559      	bpl.n	8004d7e <_dtoa_r+0x356>
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <_dtoa_r+0x320>)
 8004ccc:	ec51 0b17 	vmov	r0, r1, d7
 8004cd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004cd4:	f7fb fdd6 	bl	8000884 <__aeabi_ddiv>
 8004cd8:	e9cd 0100 	strd	r0, r1, [sp]
 8004cdc:	f006 060f 	and.w	r6, r6, #15
 8004ce0:	2503      	movs	r5, #3
 8004ce2:	4f19      	ldr	r7, [pc, #100]	; (8004d48 <_dtoa_r+0x320>)
 8004ce4:	2e00      	cmp	r6, #0
 8004ce6:	d14c      	bne.n	8004d82 <_dtoa_r+0x35a>
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf0:	f7fb fdc8 	bl	8000884 <__aeabi_ddiv>
 8004cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8004cf8:	e06a      	b.n	8004dd0 <_dtoa_r+0x3a8>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d00:	445b      	add	r3, fp
 8004d02:	9304      	str	r3, [sp, #16]
 8004d04:	3301      	adds	r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	9303      	str	r3, [sp, #12]
 8004d0a:	bfb8      	it	lt
 8004d0c:	2301      	movlt	r3, #1
 8004d0e:	e7b3      	b.n	8004c78 <_dtoa_r+0x250>
 8004d10:	2300      	movs	r3, #0
 8004d12:	e7ab      	b.n	8004c6c <_dtoa_r+0x244>
 8004d14:	2300      	movs	r3, #0
 8004d16:	e7f1      	b.n	8004cfc <_dtoa_r+0x2d4>
 8004d18:	636f4361 	.word	0x636f4361
 8004d1c:	3fd287a7 	.word	0x3fd287a7
 8004d20:	8b60c8b3 	.word	0x8b60c8b3
 8004d24:	3fc68a28 	.word	0x3fc68a28
 8004d28:	509f79fb 	.word	0x509f79fb
 8004d2c:	3fd34413 	.word	0x3fd34413
 8004d30:	7ff00000 	.word	0x7ff00000
 8004d34:	08006155 	.word	0x08006155
 8004d38:	0800614c 	.word	0x0800614c
 8004d3c:	08006129 	.word	0x08006129
 8004d40:	3ff80000 	.word	0x3ff80000
 8004d44:	08006188 	.word	0x08006188
 8004d48:	08006160 	.word	0x08006160
 8004d4c:	2601      	movs	r6, #1
 8004d4e:	2300      	movs	r3, #0
 8004d50:	9307      	str	r3, [sp, #28]
 8004d52:	9609      	str	r6, [sp, #36]	; 0x24
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	9303      	str	r3, [sp, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2312      	movs	r3, #18
 8004d60:	920a      	str	r2, [sp, #40]	; 0x28
 8004d62:	e789      	b.n	8004c78 <_dtoa_r+0x250>
 8004d64:	2301      	movs	r3, #1
 8004d66:	9309      	str	r3, [sp, #36]	; 0x24
 8004d68:	e7f4      	b.n	8004d54 <_dtoa_r+0x32c>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	9303      	str	r3, [sp, #12]
 8004d70:	461a      	mov	r2, r3
 8004d72:	e7f5      	b.n	8004d60 <_dtoa_r+0x338>
 8004d74:	686a      	ldr	r2, [r5, #4]
 8004d76:	3201      	adds	r2, #1
 8004d78:	606a      	str	r2, [r5, #4]
 8004d7a:	0049      	lsls	r1, r1, #1
 8004d7c:	e780      	b.n	8004c80 <_dtoa_r+0x258>
 8004d7e:	2502      	movs	r5, #2
 8004d80:	e7af      	b.n	8004ce2 <_dtoa_r+0x2ba>
 8004d82:	07f1      	lsls	r1, r6, #31
 8004d84:	d508      	bpl.n	8004d98 <_dtoa_r+0x370>
 8004d86:	4640      	mov	r0, r8
 8004d88:	4649      	mov	r1, r9
 8004d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d8e:	f7fb fc4f 	bl	8000630 <__aeabi_dmul>
 8004d92:	3501      	adds	r5, #1
 8004d94:	4680      	mov	r8, r0
 8004d96:	4689      	mov	r9, r1
 8004d98:	1076      	asrs	r6, r6, #1
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	e7a2      	b.n	8004ce4 <_dtoa_r+0x2bc>
 8004d9e:	f000 809d 	beq.w	8004edc <_dtoa_r+0x4b4>
 8004da2:	f1cb 0600 	rsb	r6, fp, #0
 8004da6:	4b9f      	ldr	r3, [pc, #636]	; (8005024 <_dtoa_r+0x5fc>)
 8004da8:	4f9f      	ldr	r7, [pc, #636]	; (8005028 <_dtoa_r+0x600>)
 8004daa:	f006 020f 	and.w	r2, r6, #15
 8004dae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dba:	f7fb fc39 	bl	8000630 <__aeabi_dmul>
 8004dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8004dc2:	1136      	asrs	r6, r6, #4
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2502      	movs	r5, #2
 8004dc8:	2e00      	cmp	r6, #0
 8004dca:	d17c      	bne.n	8004ec6 <_dtoa_r+0x49e>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d191      	bne.n	8004cf4 <_dtoa_r+0x2cc>
 8004dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8084 	beq.w	8004ee0 <_dtoa_r+0x4b8>
 8004dd8:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4b93      	ldr	r3, [pc, #588]	; (800502c <_dtoa_r+0x604>)
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb fe96 	bl	8000b14 <__aeabi_dcmplt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d079      	beq.n	8004ee0 <_dtoa_r+0x4b8>
 8004dec:	9b03      	ldr	r3, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d076      	beq.n	8004ee0 <_dtoa_r+0x4b8>
 8004df2:	9b04      	ldr	r3, [sp, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dd34      	ble.n	8004e62 <_dtoa_r+0x43a>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4b8d      	ldr	r3, [pc, #564]	; (8005030 <_dtoa_r+0x608>)
 8004dfc:	4640      	mov	r0, r8
 8004dfe:	4649      	mov	r1, r9
 8004e00:	f7fb fc16 	bl	8000630 <__aeabi_dmul>
 8004e04:	e9cd 0100 	strd	r0, r1, [sp]
 8004e08:	9e04      	ldr	r6, [sp, #16]
 8004e0a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004e0e:	3501      	adds	r5, #1
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7fb fba7 	bl	8000564 <__aeabi_i2d>
 8004e16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e1a:	f7fb fc09 	bl	8000630 <__aeabi_dmul>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4b84      	ldr	r3, [pc, #528]	; (8005034 <_dtoa_r+0x60c>)
 8004e22:	f7fb fa53 	bl	80002cc <__adddf3>
 8004e26:	4680      	mov	r8, r0
 8004e28:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004e2c:	2e00      	cmp	r6, #0
 8004e2e:	d15a      	bne.n	8004ee6 <_dtoa_r+0x4be>
 8004e30:	2200      	movs	r2, #0
 8004e32:	4b81      	ldr	r3, [pc, #516]	; (8005038 <_dtoa_r+0x610>)
 8004e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e38:	f7fb fa46 	bl	80002c8 <__aeabi_dsub>
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	464b      	mov	r3, r9
 8004e40:	e9cd 0100 	strd	r0, r1, [sp]
 8004e44:	f7fb fe84 	bl	8000b50 <__aeabi_dcmpgt>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	f040 829b 	bne.w	8005384 <_dtoa_r+0x95c>
 8004e4e:	4642      	mov	r2, r8
 8004e50:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e58:	f7fb fe5c 	bl	8000b14 <__aeabi_dcmplt>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	f040 828f 	bne.w	8005380 <_dtoa_r+0x958>
 8004e62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e66:	e9cd 2300 	strd	r2, r3, [sp]
 8004e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f2c0 8150 	blt.w	8005112 <_dtoa_r+0x6ea>
 8004e72:	f1bb 0f0e 	cmp.w	fp, #14
 8004e76:	f300 814c 	bgt.w	8005112 <_dtoa_r+0x6ea>
 8004e7a:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <_dtoa_r+0x5fc>)
 8004e7c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f280 80da 	bge.w	8005040 <_dtoa_r+0x618>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f300 80d6 	bgt.w	8005040 <_dtoa_r+0x618>
 8004e94:	f040 8273 	bne.w	800537e <_dtoa_r+0x956>
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4b67      	ldr	r3, [pc, #412]	; (8005038 <_dtoa_r+0x610>)
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	f7fb fbc6 	bl	8000630 <__aeabi_dmul>
 8004ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ea8:	f7fb fe48 	bl	8000b3c <__aeabi_dcmpge>
 8004eac:	9e03      	ldr	r6, [sp, #12]
 8004eae:	4637      	mov	r7, r6
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	f040 824a 	bne.w	800534a <_dtoa_r+0x922>
 8004eb6:	9b02      	ldr	r3, [sp, #8]
 8004eb8:	9a02      	ldr	r2, [sp, #8]
 8004eba:	1c5d      	adds	r5, r3, #1
 8004ebc:	2331      	movs	r3, #49	; 0x31
 8004ebe:	7013      	strb	r3, [r2, #0]
 8004ec0:	f10b 0b01 	add.w	fp, fp, #1
 8004ec4:	e245      	b.n	8005352 <_dtoa_r+0x92a>
 8004ec6:	07f2      	lsls	r2, r6, #31
 8004ec8:	d505      	bpl.n	8004ed6 <_dtoa_r+0x4ae>
 8004eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ece:	f7fb fbaf 	bl	8000630 <__aeabi_dmul>
 8004ed2:	3501      	adds	r5, #1
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	1076      	asrs	r6, r6, #1
 8004ed8:	3708      	adds	r7, #8
 8004eda:	e775      	b.n	8004dc8 <_dtoa_r+0x3a0>
 8004edc:	2502      	movs	r5, #2
 8004ede:	e777      	b.n	8004dd0 <_dtoa_r+0x3a8>
 8004ee0:	465f      	mov	r7, fp
 8004ee2:	9e03      	ldr	r6, [sp, #12]
 8004ee4:	e794      	b.n	8004e10 <_dtoa_r+0x3e8>
 8004ee6:	9a02      	ldr	r2, [sp, #8]
 8004ee8:	4b4e      	ldr	r3, [pc, #312]	; (8005024 <_dtoa_r+0x5fc>)
 8004eea:	4432      	add	r2, r6
 8004eec:	9213      	str	r2, [sp, #76]	; 0x4c
 8004eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef0:	1e71      	subs	r1, r6, #1
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d048      	beq.n	8004f88 <_dtoa_r+0x560>
 8004ef6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	2000      	movs	r0, #0
 8004f00:	494e      	ldr	r1, [pc, #312]	; (800503c <_dtoa_r+0x614>)
 8004f02:	f7fb fcbf 	bl	8000884 <__aeabi_ddiv>
 8004f06:	4642      	mov	r2, r8
 8004f08:	464b      	mov	r3, r9
 8004f0a:	f7fb f9dd 	bl	80002c8 <__aeabi_dsub>
 8004f0e:	9d02      	ldr	r5, [sp, #8]
 8004f10:	4680      	mov	r8, r0
 8004f12:	4689      	mov	r9, r1
 8004f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f18:	f7fb fe3a 	bl	8000b90 <__aeabi_d2iz>
 8004f1c:	4606      	mov	r6, r0
 8004f1e:	f7fb fb21 	bl	8000564 <__aeabi_i2d>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f2a:	f7fb f9cd 	bl	80002c8 <__aeabi_dsub>
 8004f2e:	3630      	adds	r6, #48	; 0x30
 8004f30:	f805 6b01 	strb.w	r6, [r5], #1
 8004f34:	4642      	mov	r2, r8
 8004f36:	464b      	mov	r3, r9
 8004f38:	e9cd 0100 	strd	r0, r1, [sp]
 8004f3c:	f7fb fdea 	bl	8000b14 <__aeabi_dcmplt>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d165      	bne.n	8005010 <_dtoa_r+0x5e8>
 8004f44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f48:	2000      	movs	r0, #0
 8004f4a:	4938      	ldr	r1, [pc, #224]	; (800502c <_dtoa_r+0x604>)
 8004f4c:	f7fb f9bc 	bl	80002c8 <__aeabi_dsub>
 8004f50:	4642      	mov	r2, r8
 8004f52:	464b      	mov	r3, r9
 8004f54:	f7fb fdde 	bl	8000b14 <__aeabi_dcmplt>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	f040 80ba 	bne.w	80050d2 <_dtoa_r+0x6aa>
 8004f5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f60:	429d      	cmp	r5, r3
 8004f62:	f43f af7e 	beq.w	8004e62 <_dtoa_r+0x43a>
 8004f66:	2200      	movs	r2, #0
 8004f68:	4b31      	ldr	r3, [pc, #196]	; (8005030 <_dtoa_r+0x608>)
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	f7fb fb5f 	bl	8000630 <__aeabi_dmul>
 8004f72:	2200      	movs	r2, #0
 8004f74:	4680      	mov	r8, r0
 8004f76:	4689      	mov	r9, r1
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <_dtoa_r+0x608>)
 8004f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f7e:	f7fb fb57 	bl	8000630 <__aeabi_dmul>
 8004f82:	e9cd 0100 	strd	r0, r1, [sp]
 8004f86:	e7c5      	b.n	8004f14 <_dtoa_r+0x4ec>
 8004f88:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f94:	f7fb fb4c 	bl	8000630 <__aeabi_dmul>
 8004f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f9c:	9d02      	ldr	r5, [sp, #8]
 8004f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa2:	f7fb fdf5 	bl	8000b90 <__aeabi_d2iz>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	f7fb fadc 	bl	8000564 <__aeabi_i2d>
 8004fac:	3630      	adds	r6, #48	; 0x30
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fb6:	f7fb f987 	bl	80002c8 <__aeabi_dsub>
 8004fba:	f805 6b01 	strb.w	r6, [r5], #1
 8004fbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	4680      	mov	r8, r0
 8004fc4:	4689      	mov	r9, r1
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	d125      	bne.n	8005018 <_dtoa_r+0x5f0>
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <_dtoa_r+0x614>)
 8004fce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fd2:	f7fb f97b 	bl	80002cc <__adddf3>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4640      	mov	r0, r8
 8004fdc:	4649      	mov	r1, r9
 8004fde:	f7fb fdb7 	bl	8000b50 <__aeabi_dcmpgt>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d175      	bne.n	80050d2 <_dtoa_r+0x6aa>
 8004fe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fea:	2000      	movs	r0, #0
 8004fec:	4913      	ldr	r1, [pc, #76]	; (800503c <_dtoa_r+0x614>)
 8004fee:	f7fb f96b 	bl	80002c8 <__aeabi_dsub>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	f7fb fd8b 	bl	8000b14 <__aeabi_dcmplt>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f43f af2f 	beq.w	8004e62 <_dtoa_r+0x43a>
 8005004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800500e:	d001      	beq.n	8005014 <_dtoa_r+0x5ec>
 8005010:	46bb      	mov	fp, r7
 8005012:	e04d      	b.n	80050b0 <_dtoa_r+0x688>
 8005014:	4615      	mov	r5, r2
 8005016:	e7f5      	b.n	8005004 <_dtoa_r+0x5dc>
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <_dtoa_r+0x608>)
 800501a:	f7fb fb09 	bl	8000630 <__aeabi_dmul>
 800501e:	e9cd 0100 	strd	r0, r1, [sp]
 8005022:	e7bc      	b.n	8004f9e <_dtoa_r+0x576>
 8005024:	08006188 	.word	0x08006188
 8005028:	08006160 	.word	0x08006160
 800502c:	3ff00000 	.word	0x3ff00000
 8005030:	40240000 	.word	0x40240000
 8005034:	401c0000 	.word	0x401c0000
 8005038:	40140000 	.word	0x40140000
 800503c:	3fe00000 	.word	0x3fe00000
 8005040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005044:	9d02      	ldr	r5, [sp, #8]
 8005046:	4642      	mov	r2, r8
 8005048:	464b      	mov	r3, r9
 800504a:	4630      	mov	r0, r6
 800504c:	4639      	mov	r1, r7
 800504e:	f7fb fc19 	bl	8000884 <__aeabi_ddiv>
 8005052:	f7fb fd9d 	bl	8000b90 <__aeabi_d2iz>
 8005056:	9000      	str	r0, [sp, #0]
 8005058:	f7fb fa84 	bl	8000564 <__aeabi_i2d>
 800505c:	4642      	mov	r2, r8
 800505e:	464b      	mov	r3, r9
 8005060:	f7fb fae6 	bl	8000630 <__aeabi_dmul>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb f92c 	bl	80002c8 <__aeabi_dsub>
 8005070:	9e00      	ldr	r6, [sp, #0]
 8005072:	9f03      	ldr	r7, [sp, #12]
 8005074:	3630      	adds	r6, #48	; 0x30
 8005076:	f805 6b01 	strb.w	r6, [r5], #1
 800507a:	9e02      	ldr	r6, [sp, #8]
 800507c:	1bae      	subs	r6, r5, r6
 800507e:	42b7      	cmp	r7, r6
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	d138      	bne.n	80050f8 <_dtoa_r+0x6d0>
 8005086:	f7fb f921 	bl	80002cc <__adddf3>
 800508a:	4606      	mov	r6, r0
 800508c:	460f      	mov	r7, r1
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb fd3d 	bl	8000b14 <__aeabi_dcmplt>
 800509a:	b9c8      	cbnz	r0, 80050d0 <_dtoa_r+0x6a8>
 800509c:	4632      	mov	r2, r6
 800509e:	463b      	mov	r3, r7
 80050a0:	4640      	mov	r0, r8
 80050a2:	4649      	mov	r1, r9
 80050a4:	f7fb fd2c 	bl	8000b00 <__aeabi_dcmpeq>
 80050a8:	b110      	cbz	r0, 80050b0 <_dtoa_r+0x688>
 80050aa:	9b00      	ldr	r3, [sp, #0]
 80050ac:	07db      	lsls	r3, r3, #31
 80050ae:	d40f      	bmi.n	80050d0 <_dtoa_r+0x6a8>
 80050b0:	4651      	mov	r1, sl
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 fadb 	bl	800566e <_Bfree>
 80050b8:	2300      	movs	r3, #0
 80050ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050bc:	702b      	strb	r3, [r5, #0]
 80050be:	f10b 0301 	add.w	r3, fp, #1
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f43f acf8 	beq.w	8004abc <_dtoa_r+0x94>
 80050cc:	601d      	str	r5, [r3, #0]
 80050ce:	e4f5      	b.n	8004abc <_dtoa_r+0x94>
 80050d0:	465f      	mov	r7, fp
 80050d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80050d6:	2a39      	cmp	r2, #57	; 0x39
 80050d8:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80050dc:	d106      	bne.n	80050ec <_dtoa_r+0x6c4>
 80050de:	9a02      	ldr	r2, [sp, #8]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d107      	bne.n	80050f4 <_dtoa_r+0x6cc>
 80050e4:	2330      	movs	r3, #48	; 0x30
 80050e6:	7013      	strb	r3, [r2, #0]
 80050e8:	3701      	adds	r7, #1
 80050ea:	4613      	mov	r3, r2
 80050ec:	781a      	ldrb	r2, [r3, #0]
 80050ee:	3201      	adds	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	e78d      	b.n	8005010 <_dtoa_r+0x5e8>
 80050f4:	461d      	mov	r5, r3
 80050f6:	e7ec      	b.n	80050d2 <_dtoa_r+0x6aa>
 80050f8:	2200      	movs	r2, #0
 80050fa:	4ba4      	ldr	r3, [pc, #656]	; (800538c <_dtoa_r+0x964>)
 80050fc:	f7fb fa98 	bl	8000630 <__aeabi_dmul>
 8005100:	2200      	movs	r2, #0
 8005102:	2300      	movs	r3, #0
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	f7fb fcfa 	bl	8000b00 <__aeabi_dcmpeq>
 800510c:	2800      	cmp	r0, #0
 800510e:	d09a      	beq.n	8005046 <_dtoa_r+0x61e>
 8005110:	e7ce      	b.n	80050b0 <_dtoa_r+0x688>
 8005112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005114:	2a00      	cmp	r2, #0
 8005116:	f000 80cd 	beq.w	80052b4 <_dtoa_r+0x88c>
 800511a:	9a07      	ldr	r2, [sp, #28]
 800511c:	2a01      	cmp	r2, #1
 800511e:	f300 80af 	bgt.w	8005280 <_dtoa_r+0x858>
 8005122:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005124:	2a00      	cmp	r2, #0
 8005126:	f000 80a7 	beq.w	8005278 <_dtoa_r+0x850>
 800512a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800512e:	9e08      	ldr	r6, [sp, #32]
 8005130:	9d05      	ldr	r5, [sp, #20]
 8005132:	9a05      	ldr	r2, [sp, #20]
 8005134:	441a      	add	r2, r3
 8005136:	9205      	str	r2, [sp, #20]
 8005138:	9a06      	ldr	r2, [sp, #24]
 800513a:	2101      	movs	r1, #1
 800513c:	441a      	add	r2, r3
 800513e:	4620      	mov	r0, r4
 8005140:	9206      	str	r2, [sp, #24]
 8005142:	f000 fb34 	bl	80057ae <__i2b>
 8005146:	4607      	mov	r7, r0
 8005148:	2d00      	cmp	r5, #0
 800514a:	dd0c      	ble.n	8005166 <_dtoa_r+0x73e>
 800514c:	9b06      	ldr	r3, [sp, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dd09      	ble.n	8005166 <_dtoa_r+0x73e>
 8005152:	42ab      	cmp	r3, r5
 8005154:	9a05      	ldr	r2, [sp, #20]
 8005156:	bfa8      	it	ge
 8005158:	462b      	movge	r3, r5
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	9205      	str	r2, [sp, #20]
 800515e:	9a06      	ldr	r2, [sp, #24]
 8005160:	1aed      	subs	r5, r5, r3
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	9306      	str	r3, [sp, #24]
 8005166:	9b08      	ldr	r3, [sp, #32]
 8005168:	b1f3      	cbz	r3, 80051a8 <_dtoa_r+0x780>
 800516a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80a5 	beq.w	80052bc <_dtoa_r+0x894>
 8005172:	2e00      	cmp	r6, #0
 8005174:	dd10      	ble.n	8005198 <_dtoa_r+0x770>
 8005176:	4639      	mov	r1, r7
 8005178:	4632      	mov	r2, r6
 800517a:	4620      	mov	r0, r4
 800517c:	f000 fbae 	bl	80058dc <__pow5mult>
 8005180:	4652      	mov	r2, sl
 8005182:	4601      	mov	r1, r0
 8005184:	4607      	mov	r7, r0
 8005186:	4620      	mov	r0, r4
 8005188:	f000 fb1a 	bl	80057c0 <__multiply>
 800518c:	4651      	mov	r1, sl
 800518e:	4680      	mov	r8, r0
 8005190:	4620      	mov	r0, r4
 8005192:	f000 fa6c 	bl	800566e <_Bfree>
 8005196:	46c2      	mov	sl, r8
 8005198:	9b08      	ldr	r3, [sp, #32]
 800519a:	1b9a      	subs	r2, r3, r6
 800519c:	d004      	beq.n	80051a8 <_dtoa_r+0x780>
 800519e:	4651      	mov	r1, sl
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 fb9b 	bl	80058dc <__pow5mult>
 80051a6:	4682      	mov	sl, r0
 80051a8:	2101      	movs	r1, #1
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 faff 	bl	80057ae <__i2b>
 80051b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	4606      	mov	r6, r0
 80051b6:	f340 8083 	ble.w	80052c0 <_dtoa_r+0x898>
 80051ba:	461a      	mov	r2, r3
 80051bc:	4601      	mov	r1, r0
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 fb8c 	bl	80058dc <__pow5mult>
 80051c4:	9b07      	ldr	r3, [sp, #28]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	4606      	mov	r6, r0
 80051ca:	dd7c      	ble.n	80052c6 <_dtoa_r+0x89e>
 80051cc:	f04f 0800 	mov.w	r8, #0
 80051d0:	6933      	ldr	r3, [r6, #16]
 80051d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80051d6:	6918      	ldr	r0, [r3, #16]
 80051d8:	f000 fa9b 	bl	8005712 <__hi0bits>
 80051dc:	f1c0 0020 	rsb	r0, r0, #32
 80051e0:	9b06      	ldr	r3, [sp, #24]
 80051e2:	4418      	add	r0, r3
 80051e4:	f010 001f 	ands.w	r0, r0, #31
 80051e8:	f000 8096 	beq.w	8005318 <_dtoa_r+0x8f0>
 80051ec:	f1c0 0320 	rsb	r3, r0, #32
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	f340 8087 	ble.w	8005304 <_dtoa_r+0x8dc>
 80051f6:	9b05      	ldr	r3, [sp, #20]
 80051f8:	f1c0 001c 	rsb	r0, r0, #28
 80051fc:	4403      	add	r3, r0
 80051fe:	9305      	str	r3, [sp, #20]
 8005200:	9b06      	ldr	r3, [sp, #24]
 8005202:	4405      	add	r5, r0
 8005204:	4403      	add	r3, r0
 8005206:	9306      	str	r3, [sp, #24]
 8005208:	9b05      	ldr	r3, [sp, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dd05      	ble.n	800521a <_dtoa_r+0x7f2>
 800520e:	4651      	mov	r1, sl
 8005210:	461a      	mov	r2, r3
 8005212:	4620      	mov	r0, r4
 8005214:	f000 fbb0 	bl	8005978 <__lshift>
 8005218:	4682      	mov	sl, r0
 800521a:	9b06      	ldr	r3, [sp, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	dd05      	ble.n	800522c <_dtoa_r+0x804>
 8005220:	4631      	mov	r1, r6
 8005222:	461a      	mov	r2, r3
 8005224:	4620      	mov	r0, r4
 8005226:	f000 fba7 	bl	8005978 <__lshift>
 800522a:	4606      	mov	r6, r0
 800522c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800522e:	2b00      	cmp	r3, #0
 8005230:	d074      	beq.n	800531c <_dtoa_r+0x8f4>
 8005232:	4631      	mov	r1, r6
 8005234:	4650      	mov	r0, sl
 8005236:	f000 fbf0 	bl	8005a1a <__mcmp>
 800523a:	2800      	cmp	r0, #0
 800523c:	da6e      	bge.n	800531c <_dtoa_r+0x8f4>
 800523e:	2300      	movs	r3, #0
 8005240:	4651      	mov	r1, sl
 8005242:	220a      	movs	r2, #10
 8005244:	4620      	mov	r0, r4
 8005246:	f000 fa29 	bl	800569c <__multadd>
 800524a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005250:	4682      	mov	sl, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 81a8 	beq.w	80055a8 <_dtoa_r+0xb80>
 8005258:	2300      	movs	r3, #0
 800525a:	4639      	mov	r1, r7
 800525c:	220a      	movs	r2, #10
 800525e:	4620      	mov	r0, r4
 8005260:	f000 fa1c 	bl	800569c <__multadd>
 8005264:	9b04      	ldr	r3, [sp, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	4607      	mov	r7, r0
 800526a:	f300 80c8 	bgt.w	80053fe <_dtoa_r+0x9d6>
 800526e:	9b07      	ldr	r3, [sp, #28]
 8005270:	2b02      	cmp	r3, #2
 8005272:	f340 80c4 	ble.w	80053fe <_dtoa_r+0x9d6>
 8005276:	e059      	b.n	800532c <_dtoa_r+0x904>
 8005278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800527a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800527e:	e756      	b.n	800512e <_dtoa_r+0x706>
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	1e5e      	subs	r6, r3, #1
 8005284:	9b08      	ldr	r3, [sp, #32]
 8005286:	42b3      	cmp	r3, r6
 8005288:	bfbf      	itttt	lt
 800528a:	9b08      	ldrlt	r3, [sp, #32]
 800528c:	9608      	strlt	r6, [sp, #32]
 800528e:	1af2      	sublt	r2, r6, r3
 8005290:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005292:	bfb6      	itet	lt
 8005294:	189b      	addlt	r3, r3, r2
 8005296:	1b9e      	subge	r6, r3, r6
 8005298:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	bfb8      	it	lt
 800529e:	2600      	movlt	r6, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bfb9      	ittee	lt
 80052a4:	9b05      	ldrlt	r3, [sp, #20]
 80052a6:	9a03      	ldrlt	r2, [sp, #12]
 80052a8:	9d05      	ldrge	r5, [sp, #20]
 80052aa:	9b03      	ldrge	r3, [sp, #12]
 80052ac:	bfbc      	itt	lt
 80052ae:	1a9d      	sublt	r5, r3, r2
 80052b0:	2300      	movlt	r3, #0
 80052b2:	e73e      	b.n	8005132 <_dtoa_r+0x70a>
 80052b4:	9e08      	ldr	r6, [sp, #32]
 80052b6:	9d05      	ldr	r5, [sp, #20]
 80052b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80052ba:	e745      	b.n	8005148 <_dtoa_r+0x720>
 80052bc:	9a08      	ldr	r2, [sp, #32]
 80052be:	e76e      	b.n	800519e <_dtoa_r+0x776>
 80052c0:	9b07      	ldr	r3, [sp, #28]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	dc19      	bgt.n	80052fa <_dtoa_r+0x8d2>
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	b9bb      	cbnz	r3, 80052fa <_dtoa_r+0x8d2>
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d0:	b99b      	cbnz	r3, 80052fa <_dtoa_r+0x8d2>
 80052d2:	9b01      	ldr	r3, [sp, #4]
 80052d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d8:	0d1b      	lsrs	r3, r3, #20
 80052da:	051b      	lsls	r3, r3, #20
 80052dc:	b183      	cbz	r3, 8005300 <_dtoa_r+0x8d8>
 80052de:	9b05      	ldr	r3, [sp, #20]
 80052e0:	3301      	adds	r3, #1
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	9b06      	ldr	r3, [sp, #24]
 80052e6:	3301      	adds	r3, #1
 80052e8:	9306      	str	r3, [sp, #24]
 80052ea:	f04f 0801 	mov.w	r8, #1
 80052ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f47f af6d 	bne.w	80051d0 <_dtoa_r+0x7a8>
 80052f6:	2001      	movs	r0, #1
 80052f8:	e772      	b.n	80051e0 <_dtoa_r+0x7b8>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	e7f6      	b.n	80052ee <_dtoa_r+0x8c6>
 8005300:	4698      	mov	r8, r3
 8005302:	e7f4      	b.n	80052ee <_dtoa_r+0x8c6>
 8005304:	d080      	beq.n	8005208 <_dtoa_r+0x7e0>
 8005306:	9a05      	ldr	r2, [sp, #20]
 8005308:	331c      	adds	r3, #28
 800530a:	441a      	add	r2, r3
 800530c:	9205      	str	r2, [sp, #20]
 800530e:	9a06      	ldr	r2, [sp, #24]
 8005310:	441a      	add	r2, r3
 8005312:	441d      	add	r5, r3
 8005314:	4613      	mov	r3, r2
 8005316:	e776      	b.n	8005206 <_dtoa_r+0x7de>
 8005318:	4603      	mov	r3, r0
 800531a:	e7f4      	b.n	8005306 <_dtoa_r+0x8de>
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	dc36      	bgt.n	8005390 <_dtoa_r+0x968>
 8005322:	9b07      	ldr	r3, [sp, #28]
 8005324:	2b02      	cmp	r3, #2
 8005326:	dd33      	ble.n	8005390 <_dtoa_r+0x968>
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	b963      	cbnz	r3, 800534a <_dtoa_r+0x922>
 8005330:	4631      	mov	r1, r6
 8005332:	2205      	movs	r2, #5
 8005334:	4620      	mov	r0, r4
 8005336:	f000 f9b1 	bl	800569c <__multadd>
 800533a:	4601      	mov	r1, r0
 800533c:	4606      	mov	r6, r0
 800533e:	4650      	mov	r0, sl
 8005340:	f000 fb6b 	bl	8005a1a <__mcmp>
 8005344:	2800      	cmp	r0, #0
 8005346:	f73f adb6 	bgt.w	8004eb6 <_dtoa_r+0x48e>
 800534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534c:	9d02      	ldr	r5, [sp, #8]
 800534e:	ea6f 0b03 	mvn.w	fp, r3
 8005352:	2300      	movs	r3, #0
 8005354:	9303      	str	r3, [sp, #12]
 8005356:	4631      	mov	r1, r6
 8005358:	4620      	mov	r0, r4
 800535a:	f000 f988 	bl	800566e <_Bfree>
 800535e:	2f00      	cmp	r7, #0
 8005360:	f43f aea6 	beq.w	80050b0 <_dtoa_r+0x688>
 8005364:	9b03      	ldr	r3, [sp, #12]
 8005366:	b12b      	cbz	r3, 8005374 <_dtoa_r+0x94c>
 8005368:	42bb      	cmp	r3, r7
 800536a:	d003      	beq.n	8005374 <_dtoa_r+0x94c>
 800536c:	4619      	mov	r1, r3
 800536e:	4620      	mov	r0, r4
 8005370:	f000 f97d 	bl	800566e <_Bfree>
 8005374:	4639      	mov	r1, r7
 8005376:	4620      	mov	r0, r4
 8005378:	f000 f979 	bl	800566e <_Bfree>
 800537c:	e698      	b.n	80050b0 <_dtoa_r+0x688>
 800537e:	2600      	movs	r6, #0
 8005380:	4637      	mov	r7, r6
 8005382:	e7e2      	b.n	800534a <_dtoa_r+0x922>
 8005384:	46bb      	mov	fp, r7
 8005386:	4637      	mov	r7, r6
 8005388:	e595      	b.n	8004eb6 <_dtoa_r+0x48e>
 800538a:	bf00      	nop
 800538c:	40240000 	.word	0x40240000
 8005390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005392:	bb93      	cbnz	r3, 80053fa <_dtoa_r+0x9d2>
 8005394:	9b03      	ldr	r3, [sp, #12]
 8005396:	9304      	str	r3, [sp, #16]
 8005398:	9d02      	ldr	r5, [sp, #8]
 800539a:	4631      	mov	r1, r6
 800539c:	4650      	mov	r0, sl
 800539e:	f7ff fab5 	bl	800490c <quorem>
 80053a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80053a6:	f805 9b01 	strb.w	r9, [r5], #1
 80053aa:	9b02      	ldr	r3, [sp, #8]
 80053ac:	9a04      	ldr	r2, [sp, #16]
 80053ae:	1aeb      	subs	r3, r5, r3
 80053b0:	429a      	cmp	r2, r3
 80053b2:	f300 80dc 	bgt.w	800556e <_dtoa_r+0xb46>
 80053b6:	9b02      	ldr	r3, [sp, #8]
 80053b8:	2a01      	cmp	r2, #1
 80053ba:	bfac      	ite	ge
 80053bc:	189b      	addge	r3, r3, r2
 80053be:	3301      	addlt	r3, #1
 80053c0:	4698      	mov	r8, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	9303      	str	r3, [sp, #12]
 80053c6:	4651      	mov	r1, sl
 80053c8:	2201      	movs	r2, #1
 80053ca:	4620      	mov	r0, r4
 80053cc:	f000 fad4 	bl	8005978 <__lshift>
 80053d0:	4631      	mov	r1, r6
 80053d2:	4682      	mov	sl, r0
 80053d4:	f000 fb21 	bl	8005a1a <__mcmp>
 80053d8:	2800      	cmp	r0, #0
 80053da:	f300 808d 	bgt.w	80054f8 <_dtoa_r+0xad0>
 80053de:	d103      	bne.n	80053e8 <_dtoa_r+0x9c0>
 80053e0:	f019 0f01 	tst.w	r9, #1
 80053e4:	f040 8088 	bne.w	80054f8 <_dtoa_r+0xad0>
 80053e8:	4645      	mov	r5, r8
 80053ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053ee:	2b30      	cmp	r3, #48	; 0x30
 80053f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80053f4:	d1af      	bne.n	8005356 <_dtoa_r+0x92e>
 80053f6:	4615      	mov	r5, r2
 80053f8:	e7f7      	b.n	80053ea <_dtoa_r+0x9c2>
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	9304      	str	r3, [sp, #16]
 80053fe:	2d00      	cmp	r5, #0
 8005400:	dd05      	ble.n	800540e <_dtoa_r+0x9e6>
 8005402:	4639      	mov	r1, r7
 8005404:	462a      	mov	r2, r5
 8005406:	4620      	mov	r0, r4
 8005408:	f000 fab6 	bl	8005978 <__lshift>
 800540c:	4607      	mov	r7, r0
 800540e:	f1b8 0f00 	cmp.w	r8, #0
 8005412:	d04c      	beq.n	80054ae <_dtoa_r+0xa86>
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4620      	mov	r0, r4
 8005418:	f000 f8f5 	bl	8005606 <_Balloc>
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	3202      	adds	r2, #2
 8005420:	4605      	mov	r5, r0
 8005422:	0092      	lsls	r2, r2, #2
 8005424:	f107 010c 	add.w	r1, r7, #12
 8005428:	300c      	adds	r0, #12
 800542a:	f000 f8e1 	bl	80055f0 <memcpy>
 800542e:	2201      	movs	r2, #1
 8005430:	4629      	mov	r1, r5
 8005432:	4620      	mov	r0, r4
 8005434:	f000 faa0 	bl	8005978 <__lshift>
 8005438:	9b00      	ldr	r3, [sp, #0]
 800543a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800543e:	9703      	str	r7, [sp, #12]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	4607      	mov	r7, r0
 8005446:	9305      	str	r3, [sp, #20]
 8005448:	4631      	mov	r1, r6
 800544a:	4650      	mov	r0, sl
 800544c:	f7ff fa5e 	bl	800490c <quorem>
 8005450:	9903      	ldr	r1, [sp, #12]
 8005452:	4605      	mov	r5, r0
 8005454:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005458:	4650      	mov	r0, sl
 800545a:	f000 fade 	bl	8005a1a <__mcmp>
 800545e:	463a      	mov	r2, r7
 8005460:	9000      	str	r0, [sp, #0]
 8005462:	4631      	mov	r1, r6
 8005464:	4620      	mov	r0, r4
 8005466:	f000 faf2 	bl	8005a4e <__mdiff>
 800546a:	68c3      	ldr	r3, [r0, #12]
 800546c:	4602      	mov	r2, r0
 800546e:	bb03      	cbnz	r3, 80054b2 <_dtoa_r+0xa8a>
 8005470:	4601      	mov	r1, r0
 8005472:	9006      	str	r0, [sp, #24]
 8005474:	4650      	mov	r0, sl
 8005476:	f000 fad0 	bl	8005a1a <__mcmp>
 800547a:	9a06      	ldr	r2, [sp, #24]
 800547c:	4603      	mov	r3, r0
 800547e:	4611      	mov	r1, r2
 8005480:	4620      	mov	r0, r4
 8005482:	9306      	str	r3, [sp, #24]
 8005484:	f000 f8f3 	bl	800566e <_Bfree>
 8005488:	9b06      	ldr	r3, [sp, #24]
 800548a:	b9a3      	cbnz	r3, 80054b6 <_dtoa_r+0xa8e>
 800548c:	9a07      	ldr	r2, [sp, #28]
 800548e:	b992      	cbnz	r2, 80054b6 <_dtoa_r+0xa8e>
 8005490:	9a05      	ldr	r2, [sp, #20]
 8005492:	b982      	cbnz	r2, 80054b6 <_dtoa_r+0xa8e>
 8005494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005498:	d029      	beq.n	80054ee <_dtoa_r+0xac6>
 800549a:	9b00      	ldr	r3, [sp, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dd01      	ble.n	80054a4 <_dtoa_r+0xa7c>
 80054a0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80054a4:	f108 0501 	add.w	r5, r8, #1
 80054a8:	f888 9000 	strb.w	r9, [r8]
 80054ac:	e753      	b.n	8005356 <_dtoa_r+0x92e>
 80054ae:	4638      	mov	r0, r7
 80054b0:	e7c2      	b.n	8005438 <_dtoa_r+0xa10>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e7e3      	b.n	800547e <_dtoa_r+0xa56>
 80054b6:	9a00      	ldr	r2, [sp, #0]
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	db04      	blt.n	80054c6 <_dtoa_r+0xa9e>
 80054bc:	d125      	bne.n	800550a <_dtoa_r+0xae2>
 80054be:	9a07      	ldr	r2, [sp, #28]
 80054c0:	bb1a      	cbnz	r2, 800550a <_dtoa_r+0xae2>
 80054c2:	9a05      	ldr	r2, [sp, #20]
 80054c4:	bb0a      	cbnz	r2, 800550a <_dtoa_r+0xae2>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	ddec      	ble.n	80054a4 <_dtoa_r+0xa7c>
 80054ca:	4651      	mov	r1, sl
 80054cc:	2201      	movs	r2, #1
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 fa52 	bl	8005978 <__lshift>
 80054d4:	4631      	mov	r1, r6
 80054d6:	4682      	mov	sl, r0
 80054d8:	f000 fa9f 	bl	8005a1a <__mcmp>
 80054dc:	2800      	cmp	r0, #0
 80054de:	dc03      	bgt.n	80054e8 <_dtoa_r+0xac0>
 80054e0:	d1e0      	bne.n	80054a4 <_dtoa_r+0xa7c>
 80054e2:	f019 0f01 	tst.w	r9, #1
 80054e6:	d0dd      	beq.n	80054a4 <_dtoa_r+0xa7c>
 80054e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80054ec:	d1d8      	bne.n	80054a0 <_dtoa_r+0xa78>
 80054ee:	2339      	movs	r3, #57	; 0x39
 80054f0:	f888 3000 	strb.w	r3, [r8]
 80054f4:	f108 0801 	add.w	r8, r8, #1
 80054f8:	4645      	mov	r5, r8
 80054fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054fe:	2b39      	cmp	r3, #57	; 0x39
 8005500:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005504:	d03b      	beq.n	800557e <_dtoa_r+0xb56>
 8005506:	3301      	adds	r3, #1
 8005508:	e040      	b.n	800558c <_dtoa_r+0xb64>
 800550a:	2b00      	cmp	r3, #0
 800550c:	f108 0501 	add.w	r5, r8, #1
 8005510:	dd05      	ble.n	800551e <_dtoa_r+0xaf6>
 8005512:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005516:	d0ea      	beq.n	80054ee <_dtoa_r+0xac6>
 8005518:	f109 0901 	add.w	r9, r9, #1
 800551c:	e7c4      	b.n	80054a8 <_dtoa_r+0xa80>
 800551e:	9b02      	ldr	r3, [sp, #8]
 8005520:	9a04      	ldr	r2, [sp, #16]
 8005522:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005526:	1aeb      	subs	r3, r5, r3
 8005528:	4293      	cmp	r3, r2
 800552a:	46a8      	mov	r8, r5
 800552c:	f43f af4b 	beq.w	80053c6 <_dtoa_r+0x99e>
 8005530:	4651      	mov	r1, sl
 8005532:	2300      	movs	r3, #0
 8005534:	220a      	movs	r2, #10
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f8b0 	bl	800569c <__multadd>
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	9903      	ldr	r1, [sp, #12]
 8005540:	42bb      	cmp	r3, r7
 8005542:	4682      	mov	sl, r0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	f04f 020a 	mov.w	r2, #10
 800554c:	4620      	mov	r0, r4
 800554e:	d104      	bne.n	800555a <_dtoa_r+0xb32>
 8005550:	f000 f8a4 	bl	800569c <__multadd>
 8005554:	9003      	str	r0, [sp, #12]
 8005556:	4607      	mov	r7, r0
 8005558:	e776      	b.n	8005448 <_dtoa_r+0xa20>
 800555a:	f000 f89f 	bl	800569c <__multadd>
 800555e:	2300      	movs	r3, #0
 8005560:	9003      	str	r0, [sp, #12]
 8005562:	220a      	movs	r2, #10
 8005564:	4639      	mov	r1, r7
 8005566:	4620      	mov	r0, r4
 8005568:	f000 f898 	bl	800569c <__multadd>
 800556c:	e7f3      	b.n	8005556 <_dtoa_r+0xb2e>
 800556e:	4651      	mov	r1, sl
 8005570:	2300      	movs	r3, #0
 8005572:	220a      	movs	r2, #10
 8005574:	4620      	mov	r0, r4
 8005576:	f000 f891 	bl	800569c <__multadd>
 800557a:	4682      	mov	sl, r0
 800557c:	e70d      	b.n	800539a <_dtoa_r+0x972>
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	4293      	cmp	r3, r2
 8005582:	d105      	bne.n	8005590 <_dtoa_r+0xb68>
 8005584:	9a02      	ldr	r2, [sp, #8]
 8005586:	f10b 0b01 	add.w	fp, fp, #1
 800558a:	2331      	movs	r3, #49	; 0x31
 800558c:	7013      	strb	r3, [r2, #0]
 800558e:	e6e2      	b.n	8005356 <_dtoa_r+0x92e>
 8005590:	4615      	mov	r5, r2
 8005592:	e7b2      	b.n	80054fa <_dtoa_r+0xad2>
 8005594:	4b09      	ldr	r3, [pc, #36]	; (80055bc <_dtoa_r+0xb94>)
 8005596:	f7ff baae 	b.w	8004af6 <_dtoa_r+0xce>
 800559a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800559c:	2b00      	cmp	r3, #0
 800559e:	f47f aa88 	bne.w	8004ab2 <_dtoa_r+0x8a>
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <_dtoa_r+0xb98>)
 80055a4:	f7ff baa7 	b.w	8004af6 <_dtoa_r+0xce>
 80055a8:	9b04      	ldr	r3, [sp, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f73f aef4 	bgt.w	8005398 <_dtoa_r+0x970>
 80055b0:	9b07      	ldr	r3, [sp, #28]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	f77f aef0 	ble.w	8005398 <_dtoa_r+0x970>
 80055b8:	e6b8      	b.n	800532c <_dtoa_r+0x904>
 80055ba:	bf00      	nop
 80055bc:	08006128 	.word	0x08006128
 80055c0:	0800614c 	.word	0x0800614c

080055c4 <_localeconv_r>:
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <_localeconv_r+0x14>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6a18      	ldr	r0, [r3, #32]
 80055ca:	4b04      	ldr	r3, [pc, #16]	; (80055dc <_localeconv_r+0x18>)
 80055cc:	2800      	cmp	r0, #0
 80055ce:	bf08      	it	eq
 80055d0:	4618      	moveq	r0, r3
 80055d2:	30f0      	adds	r0, #240	; 0xf0
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	2000000c 	.word	0x2000000c
 80055dc:	20000070 	.word	0x20000070

080055e0 <malloc>:
 80055e0:	4b02      	ldr	r3, [pc, #8]	; (80055ec <malloc+0xc>)
 80055e2:	4601      	mov	r1, r0
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f000 bb3b 	b.w	8005c60 <_malloc_r>
 80055ea:	bf00      	nop
 80055ec:	2000000c 	.word	0x2000000c

080055f0 <memcpy>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	1e43      	subs	r3, r0, #1
 80055f4:	440a      	add	r2, r1
 80055f6:	4291      	cmp	r1, r2
 80055f8:	d100      	bne.n	80055fc <memcpy+0xc>
 80055fa:	bd10      	pop	{r4, pc}
 80055fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005604:	e7f7      	b.n	80055f6 <memcpy+0x6>

08005606 <_Balloc>:
 8005606:	b570      	push	{r4, r5, r6, lr}
 8005608:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800560a:	4604      	mov	r4, r0
 800560c:	460e      	mov	r6, r1
 800560e:	b93d      	cbnz	r5, 8005620 <_Balloc+0x1a>
 8005610:	2010      	movs	r0, #16
 8005612:	f7ff ffe5 	bl	80055e0 <malloc>
 8005616:	6260      	str	r0, [r4, #36]	; 0x24
 8005618:	6045      	str	r5, [r0, #4]
 800561a:	6085      	str	r5, [r0, #8]
 800561c:	6005      	str	r5, [r0, #0]
 800561e:	60c5      	str	r5, [r0, #12]
 8005620:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005622:	68eb      	ldr	r3, [r5, #12]
 8005624:	b183      	cbz	r3, 8005648 <_Balloc+0x42>
 8005626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800562e:	b9b8      	cbnz	r0, 8005660 <_Balloc+0x5a>
 8005630:	2101      	movs	r1, #1
 8005632:	fa01 f506 	lsl.w	r5, r1, r6
 8005636:	1d6a      	adds	r2, r5, #5
 8005638:	0092      	lsls	r2, r2, #2
 800563a:	4620      	mov	r0, r4
 800563c:	f000 fab4 	bl	8005ba8 <_calloc_r>
 8005640:	b160      	cbz	r0, 800565c <_Balloc+0x56>
 8005642:	6046      	str	r6, [r0, #4]
 8005644:	6085      	str	r5, [r0, #8]
 8005646:	e00e      	b.n	8005666 <_Balloc+0x60>
 8005648:	2221      	movs	r2, #33	; 0x21
 800564a:	2104      	movs	r1, #4
 800564c:	4620      	mov	r0, r4
 800564e:	f000 faab 	bl	8005ba8 <_calloc_r>
 8005652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005654:	60e8      	str	r0, [r5, #12]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e4      	bne.n	8005626 <_Balloc+0x20>
 800565c:	2000      	movs	r0, #0
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	6802      	ldr	r2, [r0, #0]
 8005662:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005666:	2300      	movs	r3, #0
 8005668:	6103      	str	r3, [r0, #16]
 800566a:	60c3      	str	r3, [r0, #12]
 800566c:	bd70      	pop	{r4, r5, r6, pc}

0800566e <_Bfree>:
 800566e:	b570      	push	{r4, r5, r6, lr}
 8005670:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005672:	4606      	mov	r6, r0
 8005674:	460d      	mov	r5, r1
 8005676:	b93c      	cbnz	r4, 8005688 <_Bfree+0x1a>
 8005678:	2010      	movs	r0, #16
 800567a:	f7ff ffb1 	bl	80055e0 <malloc>
 800567e:	6270      	str	r0, [r6, #36]	; 0x24
 8005680:	6044      	str	r4, [r0, #4]
 8005682:	6084      	str	r4, [r0, #8]
 8005684:	6004      	str	r4, [r0, #0]
 8005686:	60c4      	str	r4, [r0, #12]
 8005688:	b13d      	cbz	r5, 800569a <_Bfree+0x2c>
 800568a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800568c:	686a      	ldr	r2, [r5, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005694:	6029      	str	r1, [r5, #0]
 8005696:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800569a:	bd70      	pop	{r4, r5, r6, pc}

0800569c <__multadd>:
 800569c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a0:	690d      	ldr	r5, [r1, #16]
 80056a2:	461f      	mov	r7, r3
 80056a4:	4606      	mov	r6, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	f101 0e14 	add.w	lr, r1, #20
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8de 0000 	ldr.w	r0, [lr]
 80056b2:	b281      	uxth	r1, r0
 80056b4:	fb02 7101 	mla	r1, r2, r1, r7
 80056b8:	0c0f      	lsrs	r7, r1, #16
 80056ba:	0c00      	lsrs	r0, r0, #16
 80056bc:	fb02 7000 	mla	r0, r2, r0, r7
 80056c0:	b289      	uxth	r1, r1
 80056c2:	3301      	adds	r3, #1
 80056c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80056c8:	429d      	cmp	r5, r3
 80056ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80056ce:	f84e 1b04 	str.w	r1, [lr], #4
 80056d2:	dcec      	bgt.n	80056ae <__multadd+0x12>
 80056d4:	b1d7      	cbz	r7, 800570c <__multadd+0x70>
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	429d      	cmp	r5, r3
 80056da:	db12      	blt.n	8005702 <__multadd+0x66>
 80056dc:	6861      	ldr	r1, [r4, #4]
 80056de:	4630      	mov	r0, r6
 80056e0:	3101      	adds	r1, #1
 80056e2:	f7ff ff90 	bl	8005606 <_Balloc>
 80056e6:	6922      	ldr	r2, [r4, #16]
 80056e8:	3202      	adds	r2, #2
 80056ea:	f104 010c 	add.w	r1, r4, #12
 80056ee:	4680      	mov	r8, r0
 80056f0:	0092      	lsls	r2, r2, #2
 80056f2:	300c      	adds	r0, #12
 80056f4:	f7ff ff7c 	bl	80055f0 <memcpy>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7ff ffb7 	bl	800566e <_Bfree>
 8005700:	4644      	mov	r4, r8
 8005702:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005706:	3501      	adds	r5, #1
 8005708:	615f      	str	r7, [r3, #20]
 800570a:	6125      	str	r5, [r4, #16]
 800570c:	4620      	mov	r0, r4
 800570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005712 <__hi0bits>:
 8005712:	0c02      	lsrs	r2, r0, #16
 8005714:	0412      	lsls	r2, r2, #16
 8005716:	4603      	mov	r3, r0
 8005718:	b9b2      	cbnz	r2, 8005748 <__hi0bits+0x36>
 800571a:	0403      	lsls	r3, r0, #16
 800571c:	2010      	movs	r0, #16
 800571e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005722:	bf04      	itt	eq
 8005724:	021b      	lsleq	r3, r3, #8
 8005726:	3008      	addeq	r0, #8
 8005728:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800572c:	bf04      	itt	eq
 800572e:	011b      	lsleq	r3, r3, #4
 8005730:	3004      	addeq	r0, #4
 8005732:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005736:	bf04      	itt	eq
 8005738:	009b      	lsleq	r3, r3, #2
 800573a:	3002      	addeq	r0, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	db06      	blt.n	800574e <__hi0bits+0x3c>
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	d503      	bpl.n	800574c <__hi0bits+0x3a>
 8005744:	3001      	adds	r0, #1
 8005746:	4770      	bx	lr
 8005748:	2000      	movs	r0, #0
 800574a:	e7e8      	b.n	800571e <__hi0bits+0xc>
 800574c:	2020      	movs	r0, #32
 800574e:	4770      	bx	lr

08005750 <__lo0bits>:
 8005750:	6803      	ldr	r3, [r0, #0]
 8005752:	f013 0207 	ands.w	r2, r3, #7
 8005756:	4601      	mov	r1, r0
 8005758:	d00b      	beq.n	8005772 <__lo0bits+0x22>
 800575a:	07da      	lsls	r2, r3, #31
 800575c:	d423      	bmi.n	80057a6 <__lo0bits+0x56>
 800575e:	0798      	lsls	r0, r3, #30
 8005760:	bf49      	itett	mi
 8005762:	085b      	lsrmi	r3, r3, #1
 8005764:	089b      	lsrpl	r3, r3, #2
 8005766:	2001      	movmi	r0, #1
 8005768:	600b      	strmi	r3, [r1, #0]
 800576a:	bf5c      	itt	pl
 800576c:	600b      	strpl	r3, [r1, #0]
 800576e:	2002      	movpl	r0, #2
 8005770:	4770      	bx	lr
 8005772:	b298      	uxth	r0, r3
 8005774:	b9a8      	cbnz	r0, 80057a2 <__lo0bits+0x52>
 8005776:	0c1b      	lsrs	r3, r3, #16
 8005778:	2010      	movs	r0, #16
 800577a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800577e:	bf04      	itt	eq
 8005780:	0a1b      	lsreq	r3, r3, #8
 8005782:	3008      	addeq	r0, #8
 8005784:	071a      	lsls	r2, r3, #28
 8005786:	bf04      	itt	eq
 8005788:	091b      	lsreq	r3, r3, #4
 800578a:	3004      	addeq	r0, #4
 800578c:	079a      	lsls	r2, r3, #30
 800578e:	bf04      	itt	eq
 8005790:	089b      	lsreq	r3, r3, #2
 8005792:	3002      	addeq	r0, #2
 8005794:	07da      	lsls	r2, r3, #31
 8005796:	d402      	bmi.n	800579e <__lo0bits+0x4e>
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	d006      	beq.n	80057aa <__lo0bits+0x5a>
 800579c:	3001      	adds	r0, #1
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	4770      	bx	lr
 80057a2:	4610      	mov	r0, r2
 80057a4:	e7e9      	b.n	800577a <__lo0bits+0x2a>
 80057a6:	2000      	movs	r0, #0
 80057a8:	4770      	bx	lr
 80057aa:	2020      	movs	r0, #32
 80057ac:	4770      	bx	lr

080057ae <__i2b>:
 80057ae:	b510      	push	{r4, lr}
 80057b0:	460c      	mov	r4, r1
 80057b2:	2101      	movs	r1, #1
 80057b4:	f7ff ff27 	bl	8005606 <_Balloc>
 80057b8:	2201      	movs	r2, #1
 80057ba:	6144      	str	r4, [r0, #20]
 80057bc:	6102      	str	r2, [r0, #16]
 80057be:	bd10      	pop	{r4, pc}

080057c0 <__multiply>:
 80057c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	4614      	mov	r4, r2
 80057c6:	690a      	ldr	r2, [r1, #16]
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	bfb8      	it	lt
 80057ce:	460b      	movlt	r3, r1
 80057d0:	4689      	mov	r9, r1
 80057d2:	bfbc      	itt	lt
 80057d4:	46a1      	movlt	r9, r4
 80057d6:	461c      	movlt	r4, r3
 80057d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80057e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80057e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057e8:	eb07 060a 	add.w	r6, r7, sl
 80057ec:	429e      	cmp	r6, r3
 80057ee:	bfc8      	it	gt
 80057f0:	3101      	addgt	r1, #1
 80057f2:	f7ff ff08 	bl	8005606 <_Balloc>
 80057f6:	f100 0514 	add.w	r5, r0, #20
 80057fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057fe:	462b      	mov	r3, r5
 8005800:	2200      	movs	r2, #0
 8005802:	4543      	cmp	r3, r8
 8005804:	d316      	bcc.n	8005834 <__multiply+0x74>
 8005806:	f104 0214 	add.w	r2, r4, #20
 800580a:	f109 0114 	add.w	r1, r9, #20
 800580e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005812:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	9c01      	ldr	r4, [sp, #4]
 800581a:	4294      	cmp	r4, r2
 800581c:	4613      	mov	r3, r2
 800581e:	d80c      	bhi.n	800583a <__multiply+0x7a>
 8005820:	2e00      	cmp	r6, #0
 8005822:	dd03      	ble.n	800582c <__multiply+0x6c>
 8005824:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005828:	2b00      	cmp	r3, #0
 800582a:	d054      	beq.n	80058d6 <__multiply+0x116>
 800582c:	6106      	str	r6, [r0, #16]
 800582e:	b003      	add	sp, #12
 8005830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005834:	f843 2b04 	str.w	r2, [r3], #4
 8005838:	e7e3      	b.n	8005802 <__multiply+0x42>
 800583a:	f8b3 a000 	ldrh.w	sl, [r3]
 800583e:	3204      	adds	r2, #4
 8005840:	f1ba 0f00 	cmp.w	sl, #0
 8005844:	d020      	beq.n	8005888 <__multiply+0xc8>
 8005846:	46ae      	mov	lr, r5
 8005848:	4689      	mov	r9, r1
 800584a:	f04f 0c00 	mov.w	ip, #0
 800584e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005852:	f8be b000 	ldrh.w	fp, [lr]
 8005856:	b2a3      	uxth	r3, r4
 8005858:	fb0a b303 	mla	r3, sl, r3, fp
 800585c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005860:	f8de 4000 	ldr.w	r4, [lr]
 8005864:	4463      	add	r3, ip
 8005866:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800586a:	fb0a c40b 	mla	r4, sl, fp, ip
 800586e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005878:	454f      	cmp	r7, r9
 800587a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800587e:	f84e 3b04 	str.w	r3, [lr], #4
 8005882:	d8e4      	bhi.n	800584e <__multiply+0x8e>
 8005884:	f8ce c000 	str.w	ip, [lr]
 8005888:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800588c:	f1b9 0f00 	cmp.w	r9, #0
 8005890:	d01f      	beq.n	80058d2 <__multiply+0x112>
 8005892:	682b      	ldr	r3, [r5, #0]
 8005894:	46ae      	mov	lr, r5
 8005896:	468c      	mov	ip, r1
 8005898:	f04f 0a00 	mov.w	sl, #0
 800589c:	f8bc 4000 	ldrh.w	r4, [ip]
 80058a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80058a4:	fb09 b404 	mla	r4, r9, r4, fp
 80058a8:	44a2      	add	sl, r4
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80058b0:	f84e 3b04 	str.w	r3, [lr], #4
 80058b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058b8:	f8be 4000 	ldrh.w	r4, [lr]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	fb09 4303 	mla	r3, r9, r3, r4
 80058c2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80058c6:	4567      	cmp	r7, ip
 80058c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058cc:	d8e6      	bhi.n	800589c <__multiply+0xdc>
 80058ce:	f8ce 3000 	str.w	r3, [lr]
 80058d2:	3504      	adds	r5, #4
 80058d4:	e7a0      	b.n	8005818 <__multiply+0x58>
 80058d6:	3e01      	subs	r6, #1
 80058d8:	e7a2      	b.n	8005820 <__multiply+0x60>
	...

080058dc <__pow5mult>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	4615      	mov	r5, r2
 80058e2:	f012 0203 	ands.w	r2, r2, #3
 80058e6:	4606      	mov	r6, r0
 80058e8:	460f      	mov	r7, r1
 80058ea:	d007      	beq.n	80058fc <__pow5mult+0x20>
 80058ec:	3a01      	subs	r2, #1
 80058ee:	4c21      	ldr	r4, [pc, #132]	; (8005974 <__pow5mult+0x98>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058f6:	f7ff fed1 	bl	800569c <__multadd>
 80058fa:	4607      	mov	r7, r0
 80058fc:	10ad      	asrs	r5, r5, #2
 80058fe:	d035      	beq.n	800596c <__pow5mult+0x90>
 8005900:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005902:	b93c      	cbnz	r4, 8005914 <__pow5mult+0x38>
 8005904:	2010      	movs	r0, #16
 8005906:	f7ff fe6b 	bl	80055e0 <malloc>
 800590a:	6270      	str	r0, [r6, #36]	; 0x24
 800590c:	6044      	str	r4, [r0, #4]
 800590e:	6084      	str	r4, [r0, #8]
 8005910:	6004      	str	r4, [r0, #0]
 8005912:	60c4      	str	r4, [r0, #12]
 8005914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800591c:	b94c      	cbnz	r4, 8005932 <__pow5mult+0x56>
 800591e:	f240 2171 	movw	r1, #625	; 0x271
 8005922:	4630      	mov	r0, r6
 8005924:	f7ff ff43 	bl	80057ae <__i2b>
 8005928:	2300      	movs	r3, #0
 800592a:	f8c8 0008 	str.w	r0, [r8, #8]
 800592e:	4604      	mov	r4, r0
 8005930:	6003      	str	r3, [r0, #0]
 8005932:	f04f 0800 	mov.w	r8, #0
 8005936:	07eb      	lsls	r3, r5, #31
 8005938:	d50a      	bpl.n	8005950 <__pow5mult+0x74>
 800593a:	4639      	mov	r1, r7
 800593c:	4622      	mov	r2, r4
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff ff3e 	bl	80057c0 <__multiply>
 8005944:	4639      	mov	r1, r7
 8005946:	4681      	mov	r9, r0
 8005948:	4630      	mov	r0, r6
 800594a:	f7ff fe90 	bl	800566e <_Bfree>
 800594e:	464f      	mov	r7, r9
 8005950:	106d      	asrs	r5, r5, #1
 8005952:	d00b      	beq.n	800596c <__pow5mult+0x90>
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	b938      	cbnz	r0, 8005968 <__pow5mult+0x8c>
 8005958:	4622      	mov	r2, r4
 800595a:	4621      	mov	r1, r4
 800595c:	4630      	mov	r0, r6
 800595e:	f7ff ff2f 	bl	80057c0 <__multiply>
 8005962:	6020      	str	r0, [r4, #0]
 8005964:	f8c0 8000 	str.w	r8, [r0]
 8005968:	4604      	mov	r4, r0
 800596a:	e7e4      	b.n	8005936 <__pow5mult+0x5a>
 800596c:	4638      	mov	r0, r7
 800596e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005972:	bf00      	nop
 8005974:	08006250 	.word	0x08006250

08005978 <__lshift>:
 8005978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	460c      	mov	r4, r1
 800597e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	6849      	ldr	r1, [r1, #4]
 8005986:	eb0a 0903 	add.w	r9, sl, r3
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	4607      	mov	r7, r0
 800598e:	4616      	mov	r6, r2
 8005990:	f109 0501 	add.w	r5, r9, #1
 8005994:	42ab      	cmp	r3, r5
 8005996:	db31      	blt.n	80059fc <__lshift+0x84>
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff fe34 	bl	8005606 <_Balloc>
 800599e:	2200      	movs	r2, #0
 80059a0:	4680      	mov	r8, r0
 80059a2:	f100 0314 	add.w	r3, r0, #20
 80059a6:	4611      	mov	r1, r2
 80059a8:	4552      	cmp	r2, sl
 80059aa:	db2a      	blt.n	8005a02 <__lshift+0x8a>
 80059ac:	6920      	ldr	r0, [r4, #16]
 80059ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059b2:	f104 0114 	add.w	r1, r4, #20
 80059b6:	f016 021f 	ands.w	r2, r6, #31
 80059ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80059be:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80059c2:	d022      	beq.n	8005a0a <__lshift+0x92>
 80059c4:	f1c2 0c20 	rsb	ip, r2, #32
 80059c8:	2000      	movs	r0, #0
 80059ca:	680e      	ldr	r6, [r1, #0]
 80059cc:	4096      	lsls	r6, r2
 80059ce:	4330      	orrs	r0, r6
 80059d0:	f843 0b04 	str.w	r0, [r3], #4
 80059d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80059d8:	458e      	cmp	lr, r1
 80059da:	fa20 f00c 	lsr.w	r0, r0, ip
 80059de:	d8f4      	bhi.n	80059ca <__lshift+0x52>
 80059e0:	6018      	str	r0, [r3, #0]
 80059e2:	b108      	cbz	r0, 80059e8 <__lshift+0x70>
 80059e4:	f109 0502 	add.w	r5, r9, #2
 80059e8:	3d01      	subs	r5, #1
 80059ea:	4638      	mov	r0, r7
 80059ec:	f8c8 5010 	str.w	r5, [r8, #16]
 80059f0:	4621      	mov	r1, r4
 80059f2:	f7ff fe3c 	bl	800566e <_Bfree>
 80059f6:	4640      	mov	r0, r8
 80059f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059fc:	3101      	adds	r1, #1
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	e7c8      	b.n	8005994 <__lshift+0x1c>
 8005a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005a06:	3201      	adds	r2, #1
 8005a08:	e7ce      	b.n	80059a8 <__lshift+0x30>
 8005a0a:	3b04      	subs	r3, #4
 8005a0c:	f851 2b04 	ldr.w	r2, [r1], #4
 8005a10:	f843 2f04 	str.w	r2, [r3, #4]!
 8005a14:	458e      	cmp	lr, r1
 8005a16:	d8f9      	bhi.n	8005a0c <__lshift+0x94>
 8005a18:	e7e6      	b.n	80059e8 <__lshift+0x70>

08005a1a <__mcmp>:
 8005a1a:	6903      	ldr	r3, [r0, #16]
 8005a1c:	690a      	ldr	r2, [r1, #16]
 8005a1e:	1a9b      	subs	r3, r3, r2
 8005a20:	b530      	push	{r4, r5, lr}
 8005a22:	d10c      	bne.n	8005a3e <__mcmp+0x24>
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	3014      	adds	r0, #20
 8005a28:	3114      	adds	r1, #20
 8005a2a:	1884      	adds	r4, r0, r2
 8005a2c:	4411      	add	r1, r2
 8005a2e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a32:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a36:	4295      	cmp	r5, r2
 8005a38:	d003      	beq.n	8005a42 <__mcmp+0x28>
 8005a3a:	d305      	bcc.n	8005a48 <__mcmp+0x2e>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	bd30      	pop	{r4, r5, pc}
 8005a42:	42a0      	cmp	r0, r4
 8005a44:	d3f3      	bcc.n	8005a2e <__mcmp+0x14>
 8005a46:	e7fa      	b.n	8005a3e <__mcmp+0x24>
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a4c:	e7f7      	b.n	8005a3e <__mcmp+0x24>

08005a4e <__mdiff>:
 8005a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a52:	460d      	mov	r5, r1
 8005a54:	4607      	mov	r7, r0
 8005a56:	4611      	mov	r1, r2
 8005a58:	4628      	mov	r0, r5
 8005a5a:	4614      	mov	r4, r2
 8005a5c:	f7ff ffdd 	bl	8005a1a <__mcmp>
 8005a60:	1e06      	subs	r6, r0, #0
 8005a62:	d108      	bne.n	8005a76 <__mdiff+0x28>
 8005a64:	4631      	mov	r1, r6
 8005a66:	4638      	mov	r0, r7
 8005a68:	f7ff fdcd 	bl	8005606 <_Balloc>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	6103      	str	r3, [r0, #16]
 8005a70:	6146      	str	r6, [r0, #20]
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	bfa4      	itt	ge
 8005a78:	4623      	movge	r3, r4
 8005a7a:	462c      	movge	r4, r5
 8005a7c:	4638      	mov	r0, r7
 8005a7e:	6861      	ldr	r1, [r4, #4]
 8005a80:	bfa6      	itte	ge
 8005a82:	461d      	movge	r5, r3
 8005a84:	2600      	movge	r6, #0
 8005a86:	2601      	movlt	r6, #1
 8005a88:	f7ff fdbd 	bl	8005606 <_Balloc>
 8005a8c:	692b      	ldr	r3, [r5, #16]
 8005a8e:	60c6      	str	r6, [r0, #12]
 8005a90:	6926      	ldr	r6, [r4, #16]
 8005a92:	f105 0914 	add.w	r9, r5, #20
 8005a96:	f104 0214 	add.w	r2, r4, #20
 8005a9a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005a9e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005aa2:	f100 0514 	add.w	r5, r0, #20
 8005aa6:	f04f 0c00 	mov.w	ip, #0
 8005aaa:	f852 ab04 	ldr.w	sl, [r2], #4
 8005aae:	f859 4b04 	ldr.w	r4, [r9], #4
 8005ab2:	fa1c f18a 	uxtah	r1, ip, sl
 8005ab6:	b2a3      	uxth	r3, r4
 8005ab8:	1ac9      	subs	r1, r1, r3
 8005aba:	0c23      	lsrs	r3, r4, #16
 8005abc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005ac0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005ac4:	b289      	uxth	r1, r1
 8005ac6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005aca:	45c8      	cmp	r8, r9
 8005acc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ad0:	4696      	mov	lr, r2
 8005ad2:	f845 3b04 	str.w	r3, [r5], #4
 8005ad6:	d8e8      	bhi.n	8005aaa <__mdiff+0x5c>
 8005ad8:	45be      	cmp	lr, r7
 8005ada:	d305      	bcc.n	8005ae8 <__mdiff+0x9a>
 8005adc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ae0:	b18b      	cbz	r3, 8005b06 <__mdiff+0xb8>
 8005ae2:	6106      	str	r6, [r0, #16]
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005aec:	fa1c f381 	uxtah	r3, ip, r1
 8005af0:	141a      	asrs	r2, r3, #16
 8005af2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005afc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b00:	f845 3b04 	str.w	r3, [r5], #4
 8005b04:	e7e8      	b.n	8005ad8 <__mdiff+0x8a>
 8005b06:	3e01      	subs	r6, #1
 8005b08:	e7e8      	b.n	8005adc <__mdiff+0x8e>

08005b0a <__d2b>:
 8005b0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b0e:	460e      	mov	r6, r1
 8005b10:	2101      	movs	r1, #1
 8005b12:	ec59 8b10 	vmov	r8, r9, d0
 8005b16:	4615      	mov	r5, r2
 8005b18:	f7ff fd75 	bl	8005606 <_Balloc>
 8005b1c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b20:	4607      	mov	r7, r0
 8005b22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b26:	bb34      	cbnz	r4, 8005b76 <__d2b+0x6c>
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f1b8 0f00 	cmp.w	r8, #0
 8005b2e:	d027      	beq.n	8005b80 <__d2b+0x76>
 8005b30:	a802      	add	r0, sp, #8
 8005b32:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005b36:	f7ff fe0b 	bl	8005750 <__lo0bits>
 8005b3a:	9900      	ldr	r1, [sp, #0]
 8005b3c:	b1f0      	cbz	r0, 8005b7c <__d2b+0x72>
 8005b3e:	9a01      	ldr	r2, [sp, #4]
 8005b40:	f1c0 0320 	rsb	r3, r0, #32
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	40c2      	lsrs	r2, r0
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	9201      	str	r2, [sp, #4]
 8005b50:	9b01      	ldr	r3, [sp, #4]
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bf14      	ite	ne
 8005b58:	2102      	movne	r1, #2
 8005b5a:	2101      	moveq	r1, #1
 8005b5c:	6139      	str	r1, [r7, #16]
 8005b5e:	b1c4      	cbz	r4, 8005b92 <__d2b+0x88>
 8005b60:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005b64:	4404      	add	r4, r0
 8005b66:	6034      	str	r4, [r6, #0]
 8005b68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b6c:	6028      	str	r0, [r5, #0]
 8005b6e:	4638      	mov	r0, r7
 8005b70:	b003      	add	sp, #12
 8005b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7a:	e7d5      	b.n	8005b28 <__d2b+0x1e>
 8005b7c:	6179      	str	r1, [r7, #20]
 8005b7e:	e7e7      	b.n	8005b50 <__d2b+0x46>
 8005b80:	a801      	add	r0, sp, #4
 8005b82:	f7ff fde5 	bl	8005750 <__lo0bits>
 8005b86:	9b01      	ldr	r3, [sp, #4]
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	6139      	str	r1, [r7, #16]
 8005b8e:	3020      	adds	r0, #32
 8005b90:	e7e5      	b.n	8005b5e <__d2b+0x54>
 8005b92:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005b96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b9a:	6030      	str	r0, [r6, #0]
 8005b9c:	6918      	ldr	r0, [r3, #16]
 8005b9e:	f7ff fdb8 	bl	8005712 <__hi0bits>
 8005ba2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ba6:	e7e1      	b.n	8005b6c <__d2b+0x62>

08005ba8 <_calloc_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	fb02 f401 	mul.w	r4, r2, r1
 8005bae:	4621      	mov	r1, r4
 8005bb0:	f000 f856 	bl	8005c60 <_malloc_r>
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	b118      	cbz	r0, 8005bc0 <_calloc_r+0x18>
 8005bb8:	4622      	mov	r2, r4
 8005bba:	2100      	movs	r1, #0
 8005bbc:	f7fe fa0e 	bl	8003fdc <memset>
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}

08005bc4 <_free_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	2900      	cmp	r1, #0
 8005bca:	d045      	beq.n	8005c58 <_free_r+0x94>
 8005bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bd0:	1f0c      	subs	r4, r1, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bfb8      	it	lt
 8005bd6:	18e4      	addlt	r4, r4, r3
 8005bd8:	f000 fa2c 	bl	8006034 <__malloc_lock>
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <_free_r+0x98>)
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	4610      	mov	r0, r2
 8005be2:	b933      	cbnz	r3, 8005bf2 <_free_r+0x2e>
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	6014      	str	r4, [r2, #0]
 8005be8:	4628      	mov	r0, r5
 8005bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bee:	f000 ba22 	b.w	8006036 <__malloc_unlock>
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	d90c      	bls.n	8005c10 <_free_r+0x4c>
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	1862      	adds	r2, r4, r1
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	bf04      	itt	eq
 8005bfe:	681a      	ldreq	r2, [r3, #0]
 8005c00:	685b      	ldreq	r3, [r3, #4]
 8005c02:	6063      	str	r3, [r4, #4]
 8005c04:	bf04      	itt	eq
 8005c06:	1852      	addeq	r2, r2, r1
 8005c08:	6022      	streq	r2, [r4, #0]
 8005c0a:	6004      	str	r4, [r0, #0]
 8005c0c:	e7ec      	b.n	8005be8 <_free_r+0x24>
 8005c0e:	4613      	mov	r3, r2
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	b10a      	cbz	r2, 8005c18 <_free_r+0x54>
 8005c14:	42a2      	cmp	r2, r4
 8005c16:	d9fa      	bls.n	8005c0e <_free_r+0x4a>
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	1858      	adds	r0, r3, r1
 8005c1c:	42a0      	cmp	r0, r4
 8005c1e:	d10b      	bne.n	8005c38 <_free_r+0x74>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	4401      	add	r1, r0
 8005c24:	1858      	adds	r0, r3, r1
 8005c26:	4282      	cmp	r2, r0
 8005c28:	6019      	str	r1, [r3, #0]
 8005c2a:	d1dd      	bne.n	8005be8 <_free_r+0x24>
 8005c2c:	6810      	ldr	r0, [r2, #0]
 8005c2e:	6852      	ldr	r2, [r2, #4]
 8005c30:	605a      	str	r2, [r3, #4]
 8005c32:	4401      	add	r1, r0
 8005c34:	6019      	str	r1, [r3, #0]
 8005c36:	e7d7      	b.n	8005be8 <_free_r+0x24>
 8005c38:	d902      	bls.n	8005c40 <_free_r+0x7c>
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	e7d3      	b.n	8005be8 <_free_r+0x24>
 8005c40:	6820      	ldr	r0, [r4, #0]
 8005c42:	1821      	adds	r1, r4, r0
 8005c44:	428a      	cmp	r2, r1
 8005c46:	bf04      	itt	eq
 8005c48:	6811      	ldreq	r1, [r2, #0]
 8005c4a:	6852      	ldreq	r2, [r2, #4]
 8005c4c:	6062      	str	r2, [r4, #4]
 8005c4e:	bf04      	itt	eq
 8005c50:	1809      	addeq	r1, r1, r0
 8005c52:	6021      	streq	r1, [r4, #0]
 8005c54:	605c      	str	r4, [r3, #4]
 8005c56:	e7c7      	b.n	8005be8 <_free_r+0x24>
 8005c58:	bd38      	pop	{r3, r4, r5, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200001fc 	.word	0x200001fc

08005c60 <_malloc_r>:
 8005c60:	b570      	push	{r4, r5, r6, lr}
 8005c62:	1ccd      	adds	r5, r1, #3
 8005c64:	f025 0503 	bic.w	r5, r5, #3
 8005c68:	3508      	adds	r5, #8
 8005c6a:	2d0c      	cmp	r5, #12
 8005c6c:	bf38      	it	cc
 8005c6e:	250c      	movcc	r5, #12
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	4606      	mov	r6, r0
 8005c74:	db01      	blt.n	8005c7a <_malloc_r+0x1a>
 8005c76:	42a9      	cmp	r1, r5
 8005c78:	d903      	bls.n	8005c82 <_malloc_r+0x22>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	2000      	movs	r0, #0
 8005c80:	bd70      	pop	{r4, r5, r6, pc}
 8005c82:	f000 f9d7 	bl	8006034 <__malloc_lock>
 8005c86:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <_malloc_r+0xb4>)
 8005c88:	6814      	ldr	r4, [r2, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	b991      	cbnz	r1, 8005cb4 <_malloc_r+0x54>
 8005c8e:	4c22      	ldr	r4, [pc, #136]	; (8005d18 <_malloc_r+0xb8>)
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	b91b      	cbnz	r3, 8005c9c <_malloc_r+0x3c>
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 f991 	bl	8005fbc <_sbrk_r>
 8005c9a:	6020      	str	r0, [r4, #0]
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	f000 f98c 	bl	8005fbc <_sbrk_r>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d126      	bne.n	8005cf6 <_malloc_r+0x96>
 8005ca8:	230c      	movs	r3, #12
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	4630      	mov	r0, r6
 8005cae:	f000 f9c2 	bl	8006036 <__malloc_unlock>
 8005cb2:	e7e4      	b.n	8005c7e <_malloc_r+0x1e>
 8005cb4:	680b      	ldr	r3, [r1, #0]
 8005cb6:	1b5b      	subs	r3, r3, r5
 8005cb8:	d41a      	bmi.n	8005cf0 <_malloc_r+0x90>
 8005cba:	2b0b      	cmp	r3, #11
 8005cbc:	d90f      	bls.n	8005cde <_malloc_r+0x7e>
 8005cbe:	600b      	str	r3, [r1, #0]
 8005cc0:	50cd      	str	r5, [r1, r3]
 8005cc2:	18cc      	adds	r4, r1, r3
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f000 f9b6 	bl	8006036 <__malloc_unlock>
 8005cca:	f104 000b 	add.w	r0, r4, #11
 8005cce:	1d23      	adds	r3, r4, #4
 8005cd0:	f020 0007 	bic.w	r0, r0, #7
 8005cd4:	1ac3      	subs	r3, r0, r3
 8005cd6:	d01b      	beq.n	8005d10 <_malloc_r+0xb0>
 8005cd8:	425a      	negs	r2, r3
 8005cda:	50e2      	str	r2, [r4, r3]
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	428c      	cmp	r4, r1
 8005ce0:	bf0d      	iteet	eq
 8005ce2:	6863      	ldreq	r3, [r4, #4]
 8005ce4:	684b      	ldrne	r3, [r1, #4]
 8005ce6:	6063      	strne	r3, [r4, #4]
 8005ce8:	6013      	streq	r3, [r2, #0]
 8005cea:	bf18      	it	ne
 8005cec:	460c      	movne	r4, r1
 8005cee:	e7e9      	b.n	8005cc4 <_malloc_r+0x64>
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6849      	ldr	r1, [r1, #4]
 8005cf4:	e7ca      	b.n	8005c8c <_malloc_r+0x2c>
 8005cf6:	1cc4      	adds	r4, r0, #3
 8005cf8:	f024 0403 	bic.w	r4, r4, #3
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d005      	beq.n	8005d0c <_malloc_r+0xac>
 8005d00:	1a21      	subs	r1, r4, r0
 8005d02:	4630      	mov	r0, r6
 8005d04:	f000 f95a 	bl	8005fbc <_sbrk_r>
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d0cd      	beq.n	8005ca8 <_malloc_r+0x48>
 8005d0c:	6025      	str	r5, [r4, #0]
 8005d0e:	e7d9      	b.n	8005cc4 <_malloc_r+0x64>
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
 8005d12:	bf00      	nop
 8005d14:	200001fc 	.word	0x200001fc
 8005d18:	20000200 	.word	0x20000200

08005d1c <__ssputs_r>:
 8005d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	688e      	ldr	r6, [r1, #8]
 8005d22:	429e      	cmp	r6, r3
 8005d24:	4682      	mov	sl, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	4691      	mov	r9, r2
 8005d2a:	4698      	mov	r8, r3
 8005d2c:	d835      	bhi.n	8005d9a <__ssputs_r+0x7e>
 8005d2e:	898a      	ldrh	r2, [r1, #12]
 8005d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d34:	d031      	beq.n	8005d9a <__ssputs_r+0x7e>
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	6909      	ldr	r1, [r1, #16]
 8005d3a:	1a6f      	subs	r7, r5, r1
 8005d3c:	6965      	ldr	r5, [r4, #20]
 8005d3e:	2302      	movs	r3, #2
 8005d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d44:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d48:	f108 0301 	add.w	r3, r8, #1
 8005d4c:	443b      	add	r3, r7
 8005d4e:	429d      	cmp	r5, r3
 8005d50:	bf38      	it	cc
 8005d52:	461d      	movcc	r5, r3
 8005d54:	0553      	lsls	r3, r2, #21
 8005d56:	d531      	bpl.n	8005dbc <__ssputs_r+0xa0>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7ff ff81 	bl	8005c60 <_malloc_r>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	b950      	cbnz	r0, 8005d78 <__ssputs_r+0x5c>
 8005d62:	230c      	movs	r3, #12
 8005d64:	f8ca 3000 	str.w	r3, [sl]
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6e:	81a3      	strh	r3, [r4, #12]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d78:	463a      	mov	r2, r7
 8005d7a:	6921      	ldr	r1, [r4, #16]
 8005d7c:	f7ff fc38 	bl	80055f0 <memcpy>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	6126      	str	r6, [r4, #16]
 8005d8e:	6165      	str	r5, [r4, #20]
 8005d90:	443e      	add	r6, r7
 8005d92:	1bed      	subs	r5, r5, r7
 8005d94:	6026      	str	r6, [r4, #0]
 8005d96:	60a5      	str	r5, [r4, #8]
 8005d98:	4646      	mov	r6, r8
 8005d9a:	4546      	cmp	r6, r8
 8005d9c:	bf28      	it	cs
 8005d9e:	4646      	movcs	r6, r8
 8005da0:	4632      	mov	r2, r6
 8005da2:	4649      	mov	r1, r9
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	f000 f92b 	bl	8006000 <memmove>
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	1b9b      	subs	r3, r3, r6
 8005dae:	60a3      	str	r3, [r4, #8]
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	441e      	add	r6, r3
 8005db4:	6026      	str	r6, [r4, #0]
 8005db6:	2000      	movs	r0, #0
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	462a      	mov	r2, r5
 8005dbe:	f000 f93b 	bl	8006038 <_realloc_r>
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1e1      	bne.n	8005d8c <__ssputs_r+0x70>
 8005dc8:	6921      	ldr	r1, [r4, #16]
 8005dca:	4650      	mov	r0, sl
 8005dcc:	f7ff fefa 	bl	8005bc4 <_free_r>
 8005dd0:	e7c7      	b.n	8005d62 <__ssputs_r+0x46>
	...

08005dd4 <_svfiprintf_r>:
 8005dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	b09d      	sub	sp, #116	; 0x74
 8005dda:	4680      	mov	r8, r0
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	898b      	ldrh	r3, [r1, #12]
 8005de0:	061c      	lsls	r4, r3, #24
 8005de2:	460d      	mov	r5, r1
 8005de4:	4616      	mov	r6, r2
 8005de6:	d50f      	bpl.n	8005e08 <_svfiprintf_r+0x34>
 8005de8:	690b      	ldr	r3, [r1, #16]
 8005dea:	b96b      	cbnz	r3, 8005e08 <_svfiprintf_r+0x34>
 8005dec:	2140      	movs	r1, #64	; 0x40
 8005dee:	f7ff ff37 	bl	8005c60 <_malloc_r>
 8005df2:	6028      	str	r0, [r5, #0]
 8005df4:	6128      	str	r0, [r5, #16]
 8005df6:	b928      	cbnz	r0, 8005e04 <_svfiprintf_r+0x30>
 8005df8:	230c      	movs	r3, #12
 8005dfa:	f8c8 3000 	str.w	r3, [r8]
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e02:	e0c5      	b.n	8005f90 <_svfiprintf_r+0x1bc>
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	616b      	str	r3, [r5, #20]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e12:	2330      	movs	r3, #48	; 0x30
 8005e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e18:	f04f 0b01 	mov.w	fp, #1
 8005e1c:	4637      	mov	r7, r6
 8005e1e:	463c      	mov	r4, r7
 8005e20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d13c      	bne.n	8005ea2 <_svfiprintf_r+0xce>
 8005e28:	ebb7 0a06 	subs.w	sl, r7, r6
 8005e2c:	d00b      	beq.n	8005e46 <_svfiprintf_r+0x72>
 8005e2e:	4653      	mov	r3, sl
 8005e30:	4632      	mov	r2, r6
 8005e32:	4629      	mov	r1, r5
 8005e34:	4640      	mov	r0, r8
 8005e36:	f7ff ff71 	bl	8005d1c <__ssputs_r>
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	f000 80a3 	beq.w	8005f86 <_svfiprintf_r+0x1b2>
 8005e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e42:	4453      	add	r3, sl
 8005e44:	9309      	str	r3, [sp, #36]	; 0x24
 8005e46:	783b      	ldrb	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 809c 	beq.w	8005f86 <_svfiprintf_r+0x1b2>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	9205      	str	r2, [sp, #20]
 8005e5a:	9306      	str	r3, [sp, #24]
 8005e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e60:	931a      	str	r3, [sp, #104]	; 0x68
 8005e62:	2205      	movs	r2, #5
 8005e64:	7821      	ldrb	r1, [r4, #0]
 8005e66:	4850      	ldr	r0, [pc, #320]	; (8005fa8 <_svfiprintf_r+0x1d4>)
 8005e68:	f7fa f9da 	bl	8000220 <memchr>
 8005e6c:	1c67      	adds	r7, r4, #1
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	b9d8      	cbnz	r0, 8005eaa <_svfiprintf_r+0xd6>
 8005e72:	06d9      	lsls	r1, r3, #27
 8005e74:	bf44      	itt	mi
 8005e76:	2220      	movmi	r2, #32
 8005e78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e7c:	071a      	lsls	r2, r3, #28
 8005e7e:	bf44      	itt	mi
 8005e80:	222b      	movmi	r2, #43	; 0x2b
 8005e82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e86:	7822      	ldrb	r2, [r4, #0]
 8005e88:	2a2a      	cmp	r2, #42	; 0x2a
 8005e8a:	d016      	beq.n	8005eba <_svfiprintf_r+0xe6>
 8005e8c:	9a07      	ldr	r2, [sp, #28]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	200a      	movs	r0, #10
 8005e92:	4627      	mov	r7, r4
 8005e94:	3401      	adds	r4, #1
 8005e96:	783b      	ldrb	r3, [r7, #0]
 8005e98:	3b30      	subs	r3, #48	; 0x30
 8005e9a:	2b09      	cmp	r3, #9
 8005e9c:	d951      	bls.n	8005f42 <_svfiprintf_r+0x16e>
 8005e9e:	b1c9      	cbz	r1, 8005ed4 <_svfiprintf_r+0x100>
 8005ea0:	e011      	b.n	8005ec6 <_svfiprintf_r+0xf2>
 8005ea2:	2b25      	cmp	r3, #37	; 0x25
 8005ea4:	d0c0      	beq.n	8005e28 <_svfiprintf_r+0x54>
 8005ea6:	4627      	mov	r7, r4
 8005ea8:	e7b9      	b.n	8005e1e <_svfiprintf_r+0x4a>
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <_svfiprintf_r+0x1d4>)
 8005eac:	1a80      	subs	r0, r0, r2
 8005eae:	fa0b f000 	lsl.w	r0, fp, r0
 8005eb2:	4318      	orrs	r0, r3
 8005eb4:	9004      	str	r0, [sp, #16]
 8005eb6:	463c      	mov	r4, r7
 8005eb8:	e7d3      	b.n	8005e62 <_svfiprintf_r+0x8e>
 8005eba:	9a03      	ldr	r2, [sp, #12]
 8005ebc:	1d11      	adds	r1, r2, #4
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	9103      	str	r1, [sp, #12]
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	db01      	blt.n	8005eca <_svfiprintf_r+0xf6>
 8005ec6:	9207      	str	r2, [sp, #28]
 8005ec8:	e004      	b.n	8005ed4 <_svfiprintf_r+0x100>
 8005eca:	4252      	negs	r2, r2
 8005ecc:	f043 0302 	orr.w	r3, r3, #2
 8005ed0:	9207      	str	r2, [sp, #28]
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	783b      	ldrb	r3, [r7, #0]
 8005ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ed8:	d10e      	bne.n	8005ef8 <_svfiprintf_r+0x124>
 8005eda:	787b      	ldrb	r3, [r7, #1]
 8005edc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ede:	f107 0101 	add.w	r1, r7, #1
 8005ee2:	d132      	bne.n	8005f4a <_svfiprintf_r+0x176>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	9203      	str	r2, [sp, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bfb8      	it	lt
 8005ef0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ef4:	3702      	adds	r7, #2
 8005ef6:	9305      	str	r3, [sp, #20]
 8005ef8:	4c2c      	ldr	r4, [pc, #176]	; (8005fac <_svfiprintf_r+0x1d8>)
 8005efa:	7839      	ldrb	r1, [r7, #0]
 8005efc:	2203      	movs	r2, #3
 8005efe:	4620      	mov	r0, r4
 8005f00:	f7fa f98e 	bl	8000220 <memchr>
 8005f04:	b138      	cbz	r0, 8005f16 <_svfiprintf_r+0x142>
 8005f06:	2340      	movs	r3, #64	; 0x40
 8005f08:	1b00      	subs	r0, r0, r4
 8005f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	4303      	orrs	r3, r0
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	3701      	adds	r7, #1
 8005f16:	7839      	ldrb	r1, [r7, #0]
 8005f18:	4825      	ldr	r0, [pc, #148]	; (8005fb0 <_svfiprintf_r+0x1dc>)
 8005f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f1e:	2206      	movs	r2, #6
 8005f20:	1c7e      	adds	r6, r7, #1
 8005f22:	f7fa f97d 	bl	8000220 <memchr>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d035      	beq.n	8005f96 <_svfiprintf_r+0x1c2>
 8005f2a:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <_svfiprintf_r+0x1e0>)
 8005f2c:	b9fb      	cbnz	r3, 8005f6e <_svfiprintf_r+0x19a>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	3307      	adds	r3, #7
 8005f32:	f023 0307 	bic.w	r3, r3, #7
 8005f36:	3308      	adds	r3, #8
 8005f38:	9303      	str	r3, [sp, #12]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	444b      	add	r3, r9
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	e76c      	b.n	8005e1c <_svfiprintf_r+0x48>
 8005f42:	fb00 3202 	mla	r2, r0, r2, r3
 8005f46:	2101      	movs	r1, #1
 8005f48:	e7a3      	b.n	8005e92 <_svfiprintf_r+0xbe>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	240a      	movs	r4, #10
 8005f52:	460f      	mov	r7, r1
 8005f54:	3101      	adds	r1, #1
 8005f56:	783a      	ldrb	r2, [r7, #0]
 8005f58:	3a30      	subs	r2, #48	; 0x30
 8005f5a:	2a09      	cmp	r2, #9
 8005f5c:	d903      	bls.n	8005f66 <_svfiprintf_r+0x192>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0ca      	beq.n	8005ef8 <_svfiprintf_r+0x124>
 8005f62:	9005      	str	r0, [sp, #20]
 8005f64:	e7c8      	b.n	8005ef8 <_svfiprintf_r+0x124>
 8005f66:	fb04 2000 	mla	r0, r4, r0, r2
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e7f1      	b.n	8005f52 <_svfiprintf_r+0x17e>
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	462a      	mov	r2, r5
 8005f74:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <_svfiprintf_r+0x1e4>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	4640      	mov	r0, r8
 8005f7a:	f7fe f8cd 	bl	8004118 <_printf_float>
 8005f7e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005f82:	4681      	mov	r9, r0
 8005f84:	d1d9      	bne.n	8005f3a <_svfiprintf_r+0x166>
 8005f86:	89ab      	ldrh	r3, [r5, #12]
 8005f88:	065b      	lsls	r3, r3, #25
 8005f8a:	f53f af38 	bmi.w	8005dfe <_svfiprintf_r+0x2a>
 8005f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f90:	b01d      	add	sp, #116	; 0x74
 8005f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f96:	ab03      	add	r3, sp, #12
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	462a      	mov	r2, r5
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <_svfiprintf_r+0x1e4>)
 8005f9e:	a904      	add	r1, sp, #16
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	f7fe fb6f 	bl	8004684 <_printf_i>
 8005fa6:	e7ea      	b.n	8005f7e <_svfiprintf_r+0x1aa>
 8005fa8:	0800625c 	.word	0x0800625c
 8005fac:	08006262 	.word	0x08006262
 8005fb0:	08006266 	.word	0x08006266
 8005fb4:	08004119 	.word	0x08004119
 8005fb8:	08005d1d 	.word	0x08005d1d

08005fbc <_sbrk_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4c06      	ldr	r4, [pc, #24]	; (8005fd8 <_sbrk_r+0x1c>)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	f7fb fb12 	bl	80015f0 <_sbrk>
 8005fcc:	1c43      	adds	r3, r0, #1
 8005fce:	d102      	bne.n	8005fd6 <_sbrk_r+0x1a>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	b103      	cbz	r3, 8005fd6 <_sbrk_r+0x1a>
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	2000029c 	.word	0x2000029c

08005fdc <__ascii_mbtowc>:
 8005fdc:	b082      	sub	sp, #8
 8005fde:	b901      	cbnz	r1, 8005fe2 <__ascii_mbtowc+0x6>
 8005fe0:	a901      	add	r1, sp, #4
 8005fe2:	b142      	cbz	r2, 8005ff6 <__ascii_mbtowc+0x1a>
 8005fe4:	b14b      	cbz	r3, 8005ffa <__ascii_mbtowc+0x1e>
 8005fe6:	7813      	ldrb	r3, [r2, #0]
 8005fe8:	600b      	str	r3, [r1, #0]
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	1c10      	adds	r0, r2, #0
 8005fee:	bf18      	it	ne
 8005ff0:	2001      	movne	r0, #1
 8005ff2:	b002      	add	sp, #8
 8005ff4:	4770      	bx	lr
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	e7fb      	b.n	8005ff2 <__ascii_mbtowc+0x16>
 8005ffa:	f06f 0001 	mvn.w	r0, #1
 8005ffe:	e7f8      	b.n	8005ff2 <__ascii_mbtowc+0x16>

08006000 <memmove>:
 8006000:	4288      	cmp	r0, r1
 8006002:	b510      	push	{r4, lr}
 8006004:	eb01 0302 	add.w	r3, r1, r2
 8006008:	d803      	bhi.n	8006012 <memmove+0x12>
 800600a:	1e42      	subs	r2, r0, #1
 800600c:	4299      	cmp	r1, r3
 800600e:	d10c      	bne.n	800602a <memmove+0x2a>
 8006010:	bd10      	pop	{r4, pc}
 8006012:	4298      	cmp	r0, r3
 8006014:	d2f9      	bcs.n	800600a <memmove+0xa>
 8006016:	1881      	adds	r1, r0, r2
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	42d3      	cmn	r3, r2
 800601c:	d100      	bne.n	8006020 <memmove+0x20>
 800601e:	bd10      	pop	{r4, pc}
 8006020:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006024:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006028:	e7f7      	b.n	800601a <memmove+0x1a>
 800602a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800602e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006032:	e7eb      	b.n	800600c <memmove+0xc>

08006034 <__malloc_lock>:
 8006034:	4770      	bx	lr

08006036 <__malloc_unlock>:
 8006036:	4770      	bx	lr

08006038 <_realloc_r>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	4607      	mov	r7, r0
 800603c:	4614      	mov	r4, r2
 800603e:	460e      	mov	r6, r1
 8006040:	b921      	cbnz	r1, 800604c <_realloc_r+0x14>
 8006042:	4611      	mov	r1, r2
 8006044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006048:	f7ff be0a 	b.w	8005c60 <_malloc_r>
 800604c:	b922      	cbnz	r2, 8006058 <_realloc_r+0x20>
 800604e:	f7ff fdb9 	bl	8005bc4 <_free_r>
 8006052:	4625      	mov	r5, r4
 8006054:	4628      	mov	r0, r5
 8006056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006058:	f000 f821 	bl	800609e <_malloc_usable_size_r>
 800605c:	4284      	cmp	r4, r0
 800605e:	d90f      	bls.n	8006080 <_realloc_r+0x48>
 8006060:	4621      	mov	r1, r4
 8006062:	4638      	mov	r0, r7
 8006064:	f7ff fdfc 	bl	8005c60 <_malloc_r>
 8006068:	4605      	mov	r5, r0
 800606a:	2800      	cmp	r0, #0
 800606c:	d0f2      	beq.n	8006054 <_realloc_r+0x1c>
 800606e:	4631      	mov	r1, r6
 8006070:	4622      	mov	r2, r4
 8006072:	f7ff fabd 	bl	80055f0 <memcpy>
 8006076:	4631      	mov	r1, r6
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff fda3 	bl	8005bc4 <_free_r>
 800607e:	e7e9      	b.n	8006054 <_realloc_r+0x1c>
 8006080:	4635      	mov	r5, r6
 8006082:	e7e7      	b.n	8006054 <_realloc_r+0x1c>

08006084 <__ascii_wctomb>:
 8006084:	b149      	cbz	r1, 800609a <__ascii_wctomb+0x16>
 8006086:	2aff      	cmp	r2, #255	; 0xff
 8006088:	bf85      	ittet	hi
 800608a:	238a      	movhi	r3, #138	; 0x8a
 800608c:	6003      	strhi	r3, [r0, #0]
 800608e:	700a      	strbls	r2, [r1, #0]
 8006090:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006094:	bf98      	it	ls
 8006096:	2001      	movls	r0, #1
 8006098:	4770      	bx	lr
 800609a:	4608      	mov	r0, r1
 800609c:	4770      	bx	lr

0800609e <_malloc_usable_size_r>:
 800609e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80060a2:	2800      	cmp	r0, #0
 80060a4:	f1a0 0004 	sub.w	r0, r0, #4
 80060a8:	bfbc      	itt	lt
 80060aa:	580b      	ldrlt	r3, [r1, r0]
 80060ac:	18c0      	addlt	r0, r0, r3
 80060ae:	4770      	bx	lr

080060b0 <_init>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr

080060bc <_fini>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	bf00      	nop
 80060c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c2:	bc08      	pop	{r3}
 80060c4:	469e      	mov	lr, r3
 80060c6:	4770      	bx	lr
