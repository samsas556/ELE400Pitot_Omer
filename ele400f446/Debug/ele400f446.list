
ele400f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002738  08002738  00012738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  2000000c  08002754  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c0  08002754  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008c73  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001473  00000000  00000000  00028caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000908  00000000  00000000  0002a128  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000878  00000000  00000000  0002aa30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000426b  00000000  00000000  0002b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002dff  00000000  00000000  0002f513  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032312  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002580  00000000  00000000  00032390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080026f4 	.word	0x080026f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080026f4 	.word	0x080026f4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b97a 	b.w	8000520 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	468c      	mov	ip, r1
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	9e08      	ldr	r6, [sp, #32]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d151      	bne.n	80002f8 <__udivmoddi4+0xb4>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d96d      	bls.n	8000336 <__udivmoddi4+0xf2>
 800025a:	fab2 fe82 	clz	lr, r2
 800025e:	f1be 0f00 	cmp.w	lr, #0
 8000262:	d00b      	beq.n	800027c <__udivmoddi4+0x38>
 8000264:	f1ce 0c20 	rsb	ip, lr, #32
 8000268:	fa01 f50e 	lsl.w	r5, r1, lr
 800026c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000270:	fa02 f70e 	lsl.w	r7, r2, lr
 8000274:	ea4c 0c05 	orr.w	ip, ip, r5
 8000278:	fa00 f40e 	lsl.w	r4, r0, lr
 800027c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000280:	0c25      	lsrs	r5, r4, #16
 8000282:	fbbc f8fa 	udiv	r8, ip, sl
 8000286:	fa1f f987 	uxth.w	r9, r7
 800028a:	fb0a cc18 	mls	ip, sl, r8, ip
 800028e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000292:	fb08 f309 	mul.w	r3, r8, r9
 8000296:	42ab      	cmp	r3, r5
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x6c>
 800029a:	19ed      	adds	r5, r5, r7
 800029c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002a0:	f080 8123 	bcs.w	80004ea <__udivmoddi4+0x2a6>
 80002a4:	42ab      	cmp	r3, r5
 80002a6:	f240 8120 	bls.w	80004ea <__udivmoddi4+0x2a6>
 80002aa:	f1a8 0802 	sub.w	r8, r8, #2
 80002ae:	443d      	add	r5, r7
 80002b0:	1aed      	subs	r5, r5, r3
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	fb00 f909 	mul.w	r9, r0, r9
 80002c4:	45a1      	cmp	r9, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x98>
 80002c8:	19e4      	adds	r4, r4, r7
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ce:	f080 810a 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80002d2:	45a1      	cmp	r9, r4
 80002d4:	f240 8107 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	eba4 0409 	sub.w	r4, r4, r9
 80002e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d061      	beq.n	80003ae <__udivmoddi4+0x16a>
 80002ea:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ee:	2300      	movs	r3, #0
 80002f0:	6034      	str	r4, [r6, #0]
 80002f2:	6073      	str	r3, [r6, #4]
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0xc8>
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d054      	beq.n	80003aa <__udivmoddi4+0x166>
 8000300:	2100      	movs	r1, #0
 8000302:	e886 0021 	stmia.w	r6, {r0, r5}
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	f040 808e 	bne.w	8000432 <__udivmoddi4+0x1ee>
 8000316:	42ab      	cmp	r3, r5
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xdc>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2d0>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb65 0503 	sbc.w	r5, r5, r3
 8000326:	2001      	movs	r0, #1
 8000328:	46ac      	mov	ip, r5
 800032a:	2e00      	cmp	r6, #0
 800032c:	d03f      	beq.n	80003ae <__udivmoddi4+0x16a>
 800032e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	b912      	cbnz	r2, 800033e <__udivmoddi4+0xfa>
 8000338:	2701      	movs	r7, #1
 800033a:	fbb7 f7f2 	udiv	r7, r7, r2
 800033e:	fab7 fe87 	clz	lr, r7
 8000342:	f1be 0f00 	cmp.w	lr, #0
 8000346:	d134      	bne.n	80003b2 <__udivmoddi4+0x16e>
 8000348:	1beb      	subs	r3, r5, r7
 800034a:	0c3a      	lsrs	r2, r7, #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb3 f8f2 	udiv	r8, r3, r2
 8000356:	0c25      	lsrs	r5, r4, #16
 8000358:	fb02 3318 	mls	r3, r2, r8, r3
 800035c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000360:	fb0c f308 	mul.w	r3, ip, r8
 8000364:	42ab      	cmp	r3, r5
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x134>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x132>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f200 80d1 	bhi.w	8000518 <__udivmoddi4+0x2d4>
 8000376:	4680      	mov	r8, r0
 8000378:	1aed      	subs	r5, r5, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000380:	fb02 5510 	mls	r5, r2, r0, r5
 8000384:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000388:	fb0c fc00 	mul.w	ip, ip, r0
 800038c:	45a4      	cmp	ip, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x15c>
 8000390:	19e4      	adds	r4, r4, r7
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x15a>
 8000398:	45a4      	cmp	ip, r4
 800039a:	f200 80b8 	bhi.w	800050e <__udivmoddi4+0x2ca>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	e79d      	b.n	80002e6 <__udivmoddi4+0xa2>
 80003aa:	4631      	mov	r1, r6
 80003ac:	4630      	mov	r0, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	f1ce 0420 	rsb	r4, lr, #32
 80003b6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80003be:	fa20 f804 	lsr.w	r8, r0, r4
 80003c2:	0c3a      	lsrs	r2, r7, #16
 80003c4:	fa25 f404 	lsr.w	r4, r5, r4
 80003c8:	ea48 0803 	orr.w	r8, r8, r3
 80003cc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d4:	fb02 4411 	mls	r4, r2, r1, r4
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e0:	fb01 f30c 	mul.w	r3, r1, ip
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1bc>
 80003ec:	19ed      	adds	r5, r5, r7
 80003ee:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003f2:	f080 808a 	bcs.w	800050a <__udivmoddi4+0x2c6>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	f240 8087 	bls.w	800050a <__udivmoddi4+0x2c6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	443d      	add	r5, r7
 8000400:	1aeb      	subs	r3, r5, r3
 8000402:	fa1f f588 	uxth.w	r5, r8
 8000406:	fbb3 f0f2 	udiv	r0, r3, r2
 800040a:	fb02 3310 	mls	r3, r2, r0, r3
 800040e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000412:	fb00 f30c 	mul.w	r3, r0, ip
 8000416:	42ab      	cmp	r3, r5
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1e6>
 800041a:	19ed      	adds	r5, r5, r7
 800041c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000420:	d26f      	bcs.n	8000502 <__udivmoddi4+0x2be>
 8000422:	42ab      	cmp	r3, r5
 8000424:	d96d      	bls.n	8000502 <__udivmoddi4+0x2be>
 8000426:	3802      	subs	r0, #2
 8000428:	443d      	add	r5, r7
 800042a:	1aeb      	subs	r3, r5, r3
 800042c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000430:	e78f      	b.n	8000352 <__udivmoddi4+0x10e>
 8000432:	f1c1 0720 	rsb	r7, r1, #32
 8000436:	fa22 f807 	lsr.w	r8, r2, r7
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 f401 	lsl.w	r4, r5, r1
 8000440:	ea48 0303 	orr.w	r3, r8, r3
 8000444:	fa20 fe07 	lsr.w	lr, r0, r7
 8000448:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800044c:	40fd      	lsrs	r5, r7
 800044e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000452:	fbb5 f9fc 	udiv	r9, r5, ip
 8000456:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800045a:	fb0c 5519 	mls	r5, ip, r9, r5
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000466:	fb09 f408 	mul.w	r4, r9, r8
 800046a:	42ac      	cmp	r4, r5
 800046c:	fa02 f201 	lsl.w	r2, r2, r1
 8000470:	fa00 fa01 	lsl.w	sl, r0, r1
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x244>
 8000476:	18ed      	adds	r5, r5, r3
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800047c:	d243      	bcs.n	8000506 <__udivmoddi4+0x2c2>
 800047e:	42ac      	cmp	r4, r5
 8000480:	d941      	bls.n	8000506 <__udivmoddi4+0x2c2>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	441d      	add	r5, r3
 8000488:	1b2d      	subs	r5, r5, r4
 800048a:	fa1f fe8e 	uxth.w	lr, lr
 800048e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000492:	fb0c 5510 	mls	r5, ip, r0, r5
 8000496:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x26e>
 80004a2:	18e4      	adds	r4, r4, r3
 80004a4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004a8:	d229      	bcs.n	80004fe <__udivmoddi4+0x2ba>
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d927      	bls.n	80004fe <__udivmoddi4+0x2ba>
 80004ae:	3802      	subs	r0, #2
 80004b0:	441c      	add	r4, r3
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba4 0408 	sub.w	r4, r4, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	464d      	mov	r5, r9
 80004c4:	d315      	bcc.n	80004f2 <__udivmoddi4+0x2ae>
 80004c6:	d012      	beq.n	80004ee <__udivmoddi4+0x2aa>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x29c>
 80004ca:	ebba 030e 	subs.w	r3, sl, lr
 80004ce:	eb64 0405 	sbc.w	r4, r4, r5
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431f      	orrs	r7, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	6037      	str	r7, [r6, #0]
 80004de:	6074      	str	r4, [r6, #4]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6f8      	b.n	80002dc <__udivmoddi4+0x98>
 80004ea:	4690      	mov	r8, r2
 80004ec:	e6e0      	b.n	80002b0 <__udivmoddi4+0x6c>
 80004ee:	45c2      	cmp	sl, r8
 80004f0:	d2ea      	bcs.n	80004c8 <__udivmoddi4+0x284>
 80004f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f6:	eb69 0503 	sbc.w	r5, r9, r3
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7e4      	b.n	80004c8 <__udivmoddi4+0x284>
 80004fe:	4628      	mov	r0, r5
 8000500:	e7d7      	b.n	80004b2 <__udivmoddi4+0x26e>
 8000502:	4640      	mov	r0, r8
 8000504:	e791      	b.n	800042a <__udivmoddi4+0x1e6>
 8000506:	4681      	mov	r9, r0
 8000508:	e7be      	b.n	8000488 <__udivmoddi4+0x244>
 800050a:	4601      	mov	r1, r0
 800050c:	e778      	b.n	8000400 <__udivmoddi4+0x1bc>
 800050e:	3802      	subs	r0, #2
 8000510:	443c      	add	r4, r7
 8000512:	e745      	b.n	80003a0 <__udivmoddi4+0x15c>
 8000514:	4608      	mov	r0, r1
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xe6>
 8000518:	f1a8 0802 	sub.w	r8, r8, #2
 800051c:	443d      	add	r5, r7
 800051e:	e72b      	b.n	8000378 <__udivmoddi4+0x134>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa7f 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f821 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8e5 	bl	8000700 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000536:	f000 f88b 	bl	8000650 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f8b7 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  char *msg = "Hello Nucleo Fun!\n\r";
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <main+0x44>)
 8000540:	607b      	str	r3, [r7, #4]

    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff fe5e 	bl	8000204 <strlen>
 8000548:	4603      	mov	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <main+0x48>)
 8000554:	f001 fc57 	bl	8001e06 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8000558:	2120      	movs	r1, #32
 800055a:	4805      	ldr	r0, [pc, #20]	; (8000570 <main+0x4c>)
 800055c:	f000 fd89 	bl	8001072 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);   /* Insert delay 100 ms */
 8000560:	2064      	movs	r0, #100	; 0x64
 8000562:	f000 fad5 	bl	8000b10 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, LD2_Pin);
 8000566:	e7f7      	b.n	8000558 <main+0x34>
 8000568:	0800270c 	.word	0x0800270c
 800056c:	2000007c 	.word	0x2000007c
 8000570:	40020000 	.word	0x40020000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	; 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f8ae 	bl	80026e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <SystemClock_Config+0xd4>)
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <SystemClock_Config+0xd4>)
 80005a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <SystemClock_Config+0xd4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4a24      	ldr	r2, [pc, #144]	; (800064c <SystemClock_Config+0xd8>)
 80005ba:	4b24      	ldr	r3, [pc, #144]	; (800064c <SystemClock_Config+0xd8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <SystemClock_Config+0xd8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4618      	mov	r0, r3
 8000604:	f001 f958 	bl	80018b8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800060e:	f000 f8e7 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fe72 	bl	8001318 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800063a:	f000 f8d1 	bl	80007e0 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C2_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C2_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C2_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C2_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C2_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C2_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C2_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C2_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C2_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C2_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C2_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C2_Init+0x50>)
 800068e:	f000 fd0b 	bl	80010a8 <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f8a2 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40005800 	.word	0x40005800
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fb42 	bl	8001d6c <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f877 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4a2d      	ldr	r2, [pc, #180]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4a26      	ldr	r2, [pc, #152]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000754:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_GPIO_Init+0xd0>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2130      	movs	r1, #48	; 0x30
 800078a:	4812      	ldr	r0, [pc, #72]	; (80007d4 <MX_GPIO_Init+0xd4>)
 800078c:	f000 fc58 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_GPIO_Init+0xdc>)
 80007a6:	f000 fab9 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|LD2_Pin;
 80007aa:	2330      	movs	r3, #48	; 0x30
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0xd4>)
 80007c2:	f000 faab 	bl	8000d1c <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	10210000 	.word	0x10210000
 80007dc:	40020800 	.word	0x40020800

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x4c>)
 80007fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_MspInit+0x4c>)
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a29      	ldr	r2, [pc, #164]	; (8000904 <HAL_I2C_MspInit+0xc4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d14b      	bne.n	80008fa <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 8000868:	4b27      	ldr	r3, [pc, #156]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4a21      	ldr	r2, [pc, #132]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008ac:	2304      	movs	r3, #4
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <HAL_I2C_MspInit+0xcc>)
 80008b8:	f000 fa30 	bl	8000d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c2:	2312      	movs	r3, #18
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80008ce:	2304      	movs	r3, #4
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <HAL_I2C_MspInit+0xd0>)
 80008da:	f000 fa1f 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4a09      	ldr	r2, [pc, #36]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_I2C_MspInit+0xc8>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40005800 	.word	0x40005800
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40020800 	.word	0x40020800

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <HAL_UART_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12b      	bne.n	800098e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_UART_MspInit+0x88>)
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <HAL_UART_MspInit+0x88>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4a11      	ldr	r2, [pc, #68]	; (800099c <HAL_UART_MspInit+0x88>)
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_UART_MspInit+0x88>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096e:	230c      	movs	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_UART_MspInit+0x8c>)
 800098a:	f000 f9c7 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f86a 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <SystemInit+0x28>)
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <SystemInit+0x28>)
 8000a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SystemInit+0x28>)
 8000a16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f92d 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fec6 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f937 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f000 f90d 	bl	8000cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200000bc 	.word	0x200000bc

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	200000bc 	.word	0x200000bc

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_Delay+0x40>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f7      	bcc.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000008 	.word	0x20000008

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	490d      	ldr	r1, [pc, #52]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	4909      	ldr	r1, [pc, #36]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	2201      	movs	r2, #1
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c52:	2101      	movs	r1, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	1e59      	subs	r1, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	f7ff ff90 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff49 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff90 	bl	8000c0c <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5f 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb0 	bl	8000c70 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	e165      	b.n	8001004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d38:	2201      	movs	r2, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8154 	bne.w	8000ffe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d00b      	beq.n	8000d76 <HAL_GPIO_Init+0x5a>
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6a:	2b11      	cmp	r3, #17
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0xfc>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b12      	cmp	r3, #18
 8000e16:	d123      	bne.n	8000e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	69b9      	ldr	r1, [r7, #24]
 8000e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 80ae 	beq.w	8000ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4a5c      	ldr	r2, [pc, #368]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000ea8:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b59      	ldr	r3, [pc, #356]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ebe:	4a57      	ldr	r2, [pc, #348]	; (800101c <HAL_GPIO_Init+0x300>)
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	; (8001020 <HAL_GPIO_Init+0x304>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_GPIO_Init+0x310>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <HAL_GPIO_Init+0x314>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x20a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a49      	ldr	r2, [pc, #292]	; (8001034 <HAL_GPIO_Init+0x318>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x206>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_GPIO_Init+0x31c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x202>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x21c>
 8000f36:	2300      	movs	r3, #0
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	4934      	ldr	r1, [pc, #208]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b24      	ldr	r3, [pc, #144]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_GPIO_Init+0x320>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3301      	adds	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	f67f ae96 	bls.w	8000d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800100c:	bf00      	nop
 800100e:	3724      	adds	r7, #36	; 0x24
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40023800 	.word	0x40023800
 800101c:	40013800 	.word	0x40013800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40020800 	.word	0x40020800
 800102c:	40020c00 	.word	0x40020c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40021400 	.word	0x40021400
 8001038:	40021800 	.word	0x40021800
 800103c:	40013c00 	.word	0x40013c00

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	619a      	str	r2, [r3, #24]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	401a      	ands	r2, r3
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	429a      	cmp	r2, r3
 800108a:	d104      	bne.n	8001096 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	041a      	lsls	r2, r3, #16
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e11f      	b.n	80012fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fbb6 	bl	8000840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2224      	movs	r2, #36	; 0x24
 80010d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	6812      	ldr	r2, [r2, #0]
 80010f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800110a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800110c:	f000 f9f6 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 8001110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a7b      	ldr	r2, [pc, #492]	; (8001304 <HAL_I2C_Init+0x25c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d807      	bhi.n	800112c <HAL_I2C_Init+0x84>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a7a      	ldr	r2, [pc, #488]	; (8001308 <HAL_I2C_Init+0x260>)
 8001120:	4293      	cmp	r3, r2
 8001122:	bf94      	ite	ls
 8001124:	2301      	movls	r3, #1
 8001126:	2300      	movhi	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	e006      	b.n	800113a <HAL_I2C_Init+0x92>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4a77      	ldr	r2, [pc, #476]	; (800130c <HAL_I2C_Init+0x264>)
 8001130:	4293      	cmp	r3, r2
 8001132:	bf94      	ite	ls
 8001134:	2301      	movls	r3, #1
 8001136:	2300      	movhi	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0db      	b.n	80012fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4a72      	ldr	r2, [pc, #456]	; (8001310 <HAL_I2C_Init+0x268>)
 8001146:	fba2 2303 	umull	r2, r3, r2, r3
 800114a:	0c9b      	lsrs	r3, r3, #18
 800114c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	6852      	ldr	r2, [r2, #4]
 8001158:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	430a      	orrs	r2, r1
 8001160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4863      	ldr	r0, [pc, #396]	; (8001304 <HAL_I2C_Init+0x25c>)
 8001176:	4283      	cmp	r3, r0
 8001178:	d802      	bhi.n	8001180 <HAL_I2C_Init+0xd8>
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	e009      	b.n	8001194 <HAL_I2C_Init+0xec>
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001186:	fb00 f303 	mul.w	r3, r0, r3
 800118a:	4862      	ldr	r0, [pc, #392]	; (8001314 <HAL_I2C_Init+0x26c>)
 800118c:	fba0 0303 	umull	r0, r3, r0, r3
 8001190:	099b      	lsrs	r3, r3, #6
 8001192:	3301      	adds	r3, #1
 8001194:	430b      	orrs	r3, r1
 8001196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4955      	ldr	r1, [pc, #340]	; (8001304 <HAL_I2C_Init+0x25c>)
 80011b0:	428b      	cmp	r3, r1
 80011b2:	d80d      	bhi.n	80011d0 <HAL_I2C_Init+0x128>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1e59      	subs	r1, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	bf38      	it	cc
 80011cc:	2304      	movcc	r3, #4
 80011ce:	e04f      	b.n	8001270 <HAL_I2C_Init+0x1c8>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d111      	bne.n	80011fc <HAL_I2C_Init+0x154>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1e5c      	subs	r4, r3, #1
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6859      	ldr	r1, [r3, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	440b      	add	r3, r1
 80011e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf0c      	ite	eq
 80011f4:	2301      	moveq	r3, #1
 80011f6:	2300      	movne	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	e012      	b.n	8001222 <HAL_I2C_Init+0x17a>
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	1e5c      	subs	r4, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	0099      	lsls	r1, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001218:	2b00      	cmp	r3, #0
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_Init+0x182>
 8001226:	2301      	movs	r3, #1
 8001228:	e022      	b.n	8001270 <HAL_I2C_Init+0x1c8>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10e      	bne.n	8001250 <HAL_I2C_Init+0x1a8>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1e5c      	subs	r4, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6859      	ldr	r1, [r3, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	440b      	add	r3, r1
 8001240:	fbb4 f3f3 	udiv	r3, r4, r3
 8001244:	3301      	adds	r3, #1
 8001246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	e00f      	b.n	8001270 <HAL_I2C_Init+0x1c8>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	1e5c      	subs	r4, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6859      	ldr	r1, [r3, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	0099      	lsls	r1, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	fbb4 f3f3 	udiv	r3, r4, r3
 8001266:	3301      	adds	r3, #1
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001270:	4313      	orrs	r3, r2
 8001272:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	6812      	ldr	r2, [r2, #0]
 800127e:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	69d0      	ldr	r0, [r2, #28]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6a12      	ldr	r2, [r2, #32]
 800128a:	4302      	orrs	r2, r0
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800129e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	6908      	ldr	r0, [r1, #16]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	68c9      	ldr	r1, [r1, #12]
 80012aa:	4301      	orrs	r1, r0
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	68d2      	ldr	r2, [r2, #12]
 80012ba:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6950      	ldr	r0, [r2, #20]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6992      	ldr	r2, [r2, #24]
 80012c6:	4302      	orrs	r2, r0
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	000186a0 	.word	0x000186a0
 8001308:	001e847f 	.word	0x001e847f
 800130c:	003d08ff 	.word	0x003d08ff
 8001310:	431bde83 	.word	0x431bde83
 8001314:	10624dd3 	.word	0x10624dd3

08001318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0cc      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 020f 	and.w	r2, r3, #15
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d20c      	bcs.n	8001354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001342:	4b63      	ldr	r3, [pc, #396]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 020f 	and.w	r2, r3, #15
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0b8      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d005      	beq.n	8001378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136c:	4a59      	ldr	r2, [pc, #356]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800136e:	4b59      	ldr	r3, [pc, #356]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800138e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4950      	ldr	r1, [pc, #320]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4313      	orrs	r3, r2
 80013a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d044      	beq.n	8001438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d119      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d003      	beq.n	80013d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e067      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f023 0203 	bic.w	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001408:	f7ff fb76 	bl	8000af8 <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140e:	e00a      	b.n	8001426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001410:	f7ff fb72 	bl	8000af8 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	f241 3288 	movw	r2, #5000	; 0x1388
 800141e:	4293      	cmp	r3, r2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e04f      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 020c 	and.w	r2, r3, #12
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	429a      	cmp	r2, r3
 8001436:	d1eb      	bne.n	8001410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 020f 	and.w	r2, r3, #15
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d90c      	bls.n	8001460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 020f 	and.w	r2, r3, #15
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e032      	b.n	80014c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4919      	ldr	r1, [pc, #100]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148a:	4912      	ldr	r1, [pc, #72]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800149e:	f000 f855 	bl	800154c <HAL_RCC_GetSysClockFreq>
 80014a2:	4601      	mov	r1, r0
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	fa21 f303 	lsr.w	r3, r1, r3
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_ClockConfig+0x1c8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fad6 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00
 80014d4:	40023800 	.word	0x40023800
 80014d8:	08002720 	.word	0x08002720
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000004 	.word	0x20000004

080014e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001500:	f7ff fff0 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 8001504:	4601      	mov	r1, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0a9b      	lsrs	r3, r3, #10
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	08002730 	.word	0x08002730

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001528:	f7ff ffdc 	bl	80014e4 <HAL_RCC_GetHCLKFreq>
 800152c:	4601      	mov	r1, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	0b5b      	lsrs	r3, r3, #13
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	08002730 	.word	0x08002730

0800154c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001550:	b0a1      	sub	sp, #132	; 0x84
 8001552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001568:	4ba0      	ldr	r3, [pc, #640]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b0c      	cmp	r3, #12
 8001572:	f200 8193 	bhi.w	800189c <HAL_RCC_GetSysClockFreq+0x350>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_RCC_GetSysClockFreq+0x30>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015b1 	.word	0x080015b1
 8001580:	0800189d 	.word	0x0800189d
 8001584:	0800189d 	.word	0x0800189d
 8001588:	0800189d 	.word	0x0800189d
 800158c:	080015b7 	.word	0x080015b7
 8001590:	0800189d 	.word	0x0800189d
 8001594:	0800189d 	.word	0x0800189d
 8001598:	0800189d 	.word	0x0800189d
 800159c:	080015bd 	.word	0x080015bd
 80015a0:	0800189d 	.word	0x0800189d
 80015a4:	0800189d 	.word	0x0800189d
 80015a8:	0800189d 	.word	0x0800189d
 80015ac:	08001739 	.word	0x08001739
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4b8f      	ldr	r3, [pc, #572]	; (80017f0 <HAL_RCC_GetSysClockFreq+0x2a4>)
 80015b2:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 80015b4:	e175      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b6:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x2a8>)
 80015b8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80015ba:	e172      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015bc:	4b8b      	ldr	r3, [pc, #556]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015c4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c6:	4b89      	ldr	r3, [pc, #548]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d056      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4b86      	ldr	r3, [pc, #536]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	099b      	lsrs	r3, r3, #6
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	ea01 0103 	and.w	r1, r1, r3
 80015e8:	ea02 0204 	and.w	r2, r2, r4
 80015ec:	460b      	mov	r3, r1
 80015ee:	4614      	mov	r4, r2
 80015f0:	0160      	lsls	r0, r4, #5
 80015f2:	6678      	str	r0, [r7, #100]	; 0x64
 80015f4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80015f6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80015fa:	6678      	str	r0, [r7, #100]	; 0x64
 80015fc:	015b      	lsls	r3, r3, #5
 80015fe:	663b      	str	r3, [r7, #96]	; 0x60
 8001600:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001604:	1a5b      	subs	r3, r3, r1
 8001606:	eb64 0402 	sbc.w	r4, r4, r2
 800160a:	01a0      	lsls	r0, r4, #6
 800160c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800160e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001610:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8001614:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001616:	0198      	lsls	r0, r3, #6
 8001618:	65b8      	str	r0, [r7, #88]	; 0x58
 800161a:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 800161e:	1aed      	subs	r5, r5, r3
 8001620:	eb66 0604 	sbc.w	r6, r6, r4
 8001624:	4633      	mov	r3, r6
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	657b      	str	r3, [r7, #84]	; 0x54
 800162a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162c:	4628      	mov	r0, r5
 800162e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001632:	657b      	str	r3, [r7, #84]	; 0x54
 8001634:	462b      	mov	r3, r5
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	653b      	str	r3, [r7, #80]	; 0x50
 800163a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800163e:	461d      	mov	r5, r3
 8001640:	4626      	mov	r6, r4
 8001642:	186b      	adds	r3, r5, r1
 8001644:	eb46 0402 	adc.w	r4, r6, r2
 8001648:	4618      	mov	r0, r3
 800164a:	4621      	mov	r1, r4
 800164c:	460b      	mov	r3, r1
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001654:	4602      	mov	r2, r0
 8001656:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 800165a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800165c:	4603      	mov	r3, r0
 800165e:	025b      	lsls	r3, r3, #9
 8001660:	64bb      	str	r3, [r7, #72]	; 0x48
 8001662:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001666:	4618      	mov	r0, r3
 8001668:	4621      	mov	r1, r4
 800166a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800166c:	f04f 0400 	mov.w	r4, #0
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	f7fe fdce 	bl	8000214 <__aeabi_uldivmod>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800167e:	e04d      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001680:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	099b      	lsrs	r3, r3, #6
 8001686:	f04f 0400 	mov.w	r4, #0
 800168a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	ea01 0103 	and.w	r1, r1, r3
 8001696:	ea02 0204 	and.w	r2, r2, r4
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	0160      	lsls	r0, r4, #5
 80016a0:	6478      	str	r0, [r7, #68]	; 0x44
 80016a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80016a4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016a8:	6478      	str	r0, [r7, #68]	; 0x44
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	643b      	str	r3, [r7, #64]	; 0x40
 80016ae:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016b2:	1a5b      	subs	r3, r3, r1
 80016b4:	eb64 0402 	sbc.w	r4, r4, r2
 80016b8:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 80016bc:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 80016c0:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 80016c4:	ebba 0a03 	subs.w	sl, sl, r3
 80016c8:	eb6b 0b04 	sbc.w	fp, fp, r4
 80016cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80016d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016da:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
 80016e0:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80016e4:	eb1a 0a01 	adds.w	sl, sl, r1
 80016e8:	eb4b 0b02 	adc.w	fp, fp, r2
 80016ec:	ea4f 238b 	mov.w	r3, fp, lsl #10
 80016f0:	637b      	str	r3, [r7, #52]	; 0x34
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
 80016fa:	ea4f 238a 	mov.w	r3, sl, lsl #10
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001700:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001704:	4650      	mov	r0, sl
 8001706:	4659      	mov	r1, fp
 8001708:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800170a:	f04f 0400 	mov.w	r4, #0
 800170e:	461a      	mov	r2, r3
 8001710:	4623      	mov	r3, r4
 8001712:	f7fe fd7f 	bl	8000214 <__aeabi_uldivmod>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	3301      	adds	r3, #1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 800172c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800172e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001736:	e0b4      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001740:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d054      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	099b      	lsrs	r3, r3, #6
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	f240 11ff 	movw	r1, #511	; 0x1ff
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	ea01 0103 	and.w	r1, r1, r3
 8001764:	ea02 0204 	and.w	r2, r2, r4
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	0160      	lsls	r0, r4, #5
 800176e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001772:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001776:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001778:	015b      	lsls	r3, r3, #5
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
 800177c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	eb64 0402 	sbc.w	r4, r4, r2
 8001786:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800178a:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800178e:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001792:	ebb8 0803 	subs.w	r8, r8, r3
 8001796:	eb69 0904 	sbc.w	r9, r9, r4
 800179a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
 80017a8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80017ac:	623b      	str	r3, [r7, #32]
 80017ae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017b2:	eb18 0801 	adds.w	r8, r8, r1
 80017b6:	eb49 0902 	adc.w	r9, r9, r2
 80017ba:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80017cc:	61bb      	str	r3, [r7, #24]
 80017ce:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017d2:	4640      	mov	r0, r8
 80017d4:	4649      	mov	r1, r9
 80017d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	461a      	mov	r2, r3
 80017de:	4623      	mov	r3, r4
 80017e0:	f7fe fd18 	bl	8000214 <__aeabi_uldivmod>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ea:	e04b      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x338>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	00f42400 	.word	0x00f42400
 80017f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	099b      	lsrs	r3, r3, #6
 80017fe:	f04f 0400 	mov.w	r4, #0
 8001802:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	ea01 0103 	and.w	r1, r1, r3
 800180e:	ea02 0204 	and.w	r2, r2, r4
 8001812:	460b      	mov	r3, r1
 8001814:	4614      	mov	r4, r2
 8001816:	0160      	lsls	r0, r4, #5
 8001818:	6178      	str	r0, [r7, #20]
 800181a:	6978      	ldr	r0, [r7, #20]
 800181c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001820:	6178      	str	r0, [r7, #20]
 8001822:	015b      	lsls	r3, r3, #5
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800182a:	1a5b      	subs	r3, r3, r1
 800182c:	eb64 0402 	sbc.w	r4, r4, r2
 8001830:	01a6      	lsls	r6, r4, #6
 8001832:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001836:	019d      	lsls	r5, r3, #6
 8001838:	1aed      	subs	r5, r5, r3
 800183a:	eb66 0604 	sbc.w	r6, r6, r4
 800183e:	00f3      	lsls	r3, r6, #3
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	00eb      	lsls	r3, r5, #3
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001852:	186d      	adds	r5, r5, r1
 8001854:	eb46 0602 	adc.w	r6, r6, r2
 8001858:	02b3      	lsls	r3, r6, #10
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	02ab      	lsls	r3, r5, #10
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	e897 0060 	ldmia.w	r7, {r5, r6}
 800186c:	4628      	mov	r0, r5
 800186e:	4631      	mov	r1, r6
 8001870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001872:	f04f 0400 	mov.w	r4, #0
 8001876:	461a      	mov	r2, r3
 8001878:	4623      	mov	r3, r4
 800187a:	f7fe fccb 	bl	8000214 <__aeabi_uldivmod>
 800187e:	4603      	mov	r3, r0
 8001880:	460c      	mov	r4, r1
 8001882:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x364>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0f1b      	lsrs	r3, r3, #28
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001890:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800189a:	e002      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x368>)
 800189e:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80018a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3784      	adds	r7, #132	; 0x84
 80018a8:	46bd      	mov	sp, r7
 80018aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400

080018b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8083 	beq.w	80019d8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018d2:	4b95      	ldr	r3, [pc, #596]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d019      	beq.n	8001912 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018de:	4b92      	ldr	r3, [pc, #584]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018ea:	4b8f      	ldr	r3, [pc, #572]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018f6:	d00c      	beq.n	8001912 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f8:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001904:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001910:	d10b      	bne.n	800192a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d05b      	beq.n	80019d6 <HAL_RCC_OscConfig+0x11e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d157      	bne.n	80019d6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e216      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x8a>
 8001934:	4a7c      	ldr	r2, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e01d      	b.n	800197e <HAL_RCC_OscConfig+0xc6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194a:	d10c      	bne.n	8001966 <HAL_RCC_OscConfig+0xae>
 800194c:	4a76      	ldr	r2, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4a73      	ldr	r2, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800195a:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0xc6>
 8001966:	4a70      	ldr	r2, [pc, #448]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001968:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4a6d      	ldr	r2, [pc, #436]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001974:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d013      	beq.n	80019ae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f8b7 	bl	8000af8 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198e:	f7ff f8b3 	bl	8000af8 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b64      	cmp	r3, #100	; 0x64
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1db      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0xd6>
 80019ac:	e014      	b.n	80019d8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f8a3 	bl	8000af8 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b6:	f7ff f89f 	bl	8000af8 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1c7      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c8:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0xfe>
 80019d4:	e000      	b.n	80019d8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d06f      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d017      	beq.n	8001a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d105      	bne.n	8001a08 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a08:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d11c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a14:	4b44      	ldr	r3, [pc, #272]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d116      	bne.n	8001a4e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_OscConfig+0x180>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e18f      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4c:	e03a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d020      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f84c 	bl	8000af8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff f848 	bl	8000af8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e170      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4929      	ldr	r1, [pc, #164]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
 8001a96:	e015      	b.n	8001ac4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f82b 	bl	8000af8 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f827 	bl	8000af8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e14f      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d037      	beq.n	8001b40 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d016      	beq.n	8001b06 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_RCC_OscConfig+0x278>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f80b 	bl	8000af8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f807 	bl	8000af8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e12f      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x22e>
 8001b04:	e01c      	b.n	8001b40 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_RCC_OscConfig+0x278>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7fe fff4 	bl	8000af8 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b12:	e00f      	b.n	8001b34 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b14:	f7fe fff0 	bl	8000af8 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d908      	bls.n	8001b34 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e118      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	42470000 	.word	0x42470000
 8001b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	4b8a      	ldr	r3, [pc, #552]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e9      	bne.n	8001b14 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8097 	beq.w	8001c7c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b52:	4b83      	ldr	r3, [pc, #524]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4a7f      	ldr	r2, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001b64:	4b7e      	ldr	r3, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8a:	4a76      	ldr	r2, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7fe ffaf 	bl	8000af8 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7fe ffab 	bl	8000af8 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0d3      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x31a>
 8001bc4:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x354>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x33c>
 8001bda:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bdc:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6713      	str	r3, [r2, #112]	; 0x70
 8001be6:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001be8:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0x354>
 8001bf4:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f023 0304 	bic.w	r3, r3, #4
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d015      	beq.n	8001c40 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7fe ff70 	bl	8000af8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7fe ff6c 	bl	8000af8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e092      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0ee      	beq.n	8001c1c <HAL_RCC_OscConfig+0x364>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7fe ff5a 	bl	8000af8 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c48:	f7fe ff56 	bl	8000af8 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e07c      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ee      	bne.n	8001c48 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d068      	beq.n	8001d56 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d060      	beq.n	8001d52 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d145      	bne.n	8001d24 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ff2b 	bl	8000af8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7fe ff27 	bl	8000af8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e04f      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc4:	4926      	ldr	r1, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	071b      	lsls	r3, r3, #28
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fefc 	bl	8000af8 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fef8 	bl	8000af8 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e020      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x44c>
 8001d22:	e018      	b.n	8001d56 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fee5 	bl	8000af8 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fee1 	bl	8000af8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e009      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x4a8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x47a>
 8001d50:	e001      	b.n	8001d56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42470060 	.word	0x42470060

08001d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e03f      	b.n	8001dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fdbe 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2224      	movs	r2, #36	; 0x24
 8001d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	68d2      	ldr	r2, [r2, #12]
 8001daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f90b 	bl	8001fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	6912      	ldr	r2, [r2, #16]
 8001dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	6952      	ldr	r2, [r2, #20]
 8001dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	68d2      	ldr	r2, [r2, #12]
 8001de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2220      	movs	r2, #32
 8001df8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b088      	sub	sp, #32
 8001e0a:	af02      	add	r7, sp, #8
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	f040 8082 	bne.w	8001f2c <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_UART_Transmit+0x2e>
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e07a      	b.n	8001f2e <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_UART_Transmit+0x40>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e073      	b.n	8001f2e <HAL_UART_Transmit+0x128>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2221      	movs	r2, #33	; 0x21
 8001e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e5c:	f7fe fe4c 	bl	8000af8 <HAL_GetTick>
 8001e60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	88fa      	ldrh	r2, [r7, #6]
 8001e66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	88fa      	ldrh	r2, [r7, #6]
 8001e6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e76:	e041      	b.n	8001efc <HAL_UART_Transmit+0xf6>
    {
      huart->TxXferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8e:	d121      	bne.n	8001ed4 <HAL_UART_Transmit+0xce>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f84b 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e041      	b.n	8001f2e <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eba:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <HAL_UART_Transmit+0xc6>
        {
          pData += 2U;
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	e017      	b.n	8001efc <HAL_UART_Transmit+0xf6>
        }
        else
        {
          pData += 1U;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	e013      	b.n	8001efc <HAL_UART_Transmit+0xf6>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f829 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_UART_Transmit+0xe8>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e01f      	b.n	8001f2e <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1c59      	adds	r1, r3, #1
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1b8      	bne.n	8001e78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 f810 	bl	8001f36 <UART_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_Transmit+0x11a>
    {
      return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f46:	e02c      	b.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4e:	d028      	beq.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f56:	f7fe fdcf 	bl	8000af8 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d91d      	bls.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	68d2      	ldr	r2, [r2, #12]
 8001f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	6952      	ldr	r2, [r2, #20]
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e00f      	b.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d0c3      	beq.n	8001f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd0:	b0a3      	sub	sp, #140	; 0x8c
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8002006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002008:	6819      	ldr	r1, [r3, #0]
 800200a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8002014:	f022 020c 	bic.w	r2, r2, #12
 8002018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800202e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002036:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203e:	f040 8171 	bne.w	8002324 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002042:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4ab4      	ldr	r2, [pc, #720]	; (8002318 <UART_SetConfig+0x34c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d005      	beq.n	8002058 <UART_SetConfig+0x8c>
 800204c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4ab2      	ldr	r2, [pc, #712]	; (800231c <UART_SetConfig+0x350>)
 8002052:	4293      	cmp	r3, r2
 8002054:	f040 80b1 	bne.w	80021ba <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002058:	f7ff fa64 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 800205c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002060:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002062:	681d      	ldr	r5, [r3, #0]
 8002064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	18db      	adds	r3, r3, r3
 8002074:	eb44 0404 	adc.w	r4, r4, r4
 8002078:	185b      	adds	r3, r3, r1
 800207a:	eb44 0402 	adc.w	r4, r4, r2
 800207e:	00e0      	lsls	r0, r4, #3
 8002080:	6478      	str	r0, [r7, #68]	; 0x44
 8002082:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002084:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002088:	6478      	str	r0, [r7, #68]	; 0x44
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	643b      	str	r3, [r7, #64]	; 0x40
 800208e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002092:	eb13 0801 	adds.w	r8, r3, r1
 8002096:	eb44 0902 	adc.w	r9, r4, r2
 800209a:	4640      	mov	r0, r8
 800209c:	4649      	mov	r1, r9
 800209e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f04f 0400 	mov.w	r4, #0
 80020a6:	18db      	adds	r3, r3, r3
 80020a8:	eb44 0404 	adc.w	r4, r4, r4
 80020ac:	461a      	mov	r2, r3
 80020ae:	4623      	mov	r3, r4
 80020b0:	f7fe f8b0 	bl	8000214 <__aeabi_uldivmod>
 80020b4:	4603      	mov	r3, r0
 80020b6:	460c      	mov	r4, r1
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b99      	ldr	r3, [pc, #612]	; (8002320 <UART_SetConfig+0x354>)
 80020bc:	fba3 2302 	umull	r2, r3, r3, r2
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	011e      	lsls	r6, r3, #4
 80020c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	18db      	adds	r3, r3, r3
 80020d4:	eb44 0404 	adc.w	r4, r4, r4
 80020d8:	185b      	adds	r3, r3, r1
 80020da:	eb44 0402 	adc.w	r4, r4, r2
 80020de:	00e0      	lsls	r0, r4, #3
 80020e0:	63f8      	str	r0, [r7, #60]	; 0x3c
 80020e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020e4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80020e8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80020f2:	eb13 0801 	adds.w	r8, r3, r1
 80020f6:	eb44 0902 	adc.w	r9, r4, r2
 80020fa:	4640      	mov	r0, r8
 80020fc:	4649      	mov	r1, r9
 80020fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f04f 0400 	mov.w	r4, #0
 8002106:	18db      	adds	r3, r3, r3
 8002108:	eb44 0404 	adc.w	r4, r4, r4
 800210c:	461a      	mov	r2, r3
 800210e:	4623      	mov	r3, r4
 8002110:	f7fe f880 	bl	8000214 <__aeabi_uldivmod>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	461a      	mov	r2, r3
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <UART_SetConfig+0x354>)
 800211c:	fba3 1302 	umull	r1, r3, r3, r2
 8002120:	095b      	lsrs	r3, r3, #5
 8002122:	2164      	movs	r1, #100	; 0x64
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	3332      	adds	r3, #50	; 0x32
 800212e:	4a7c      	ldr	r2, [pc, #496]	; (8002320 <UART_SetConfig+0x354>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800213c:	441e      	add	r6, r3
 800213e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	460b      	mov	r3, r1
 800214a:	4614      	mov	r4, r2
 800214c:	18db      	adds	r3, r3, r3
 800214e:	eb44 0404 	adc.w	r4, r4, r4
 8002152:	185b      	adds	r3, r3, r1
 8002154:	eb44 0402 	adc.w	r4, r4, r2
 8002158:	00e0      	lsls	r0, r4, #3
 800215a:	6378      	str	r0, [r7, #52]	; 0x34
 800215c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800215e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002162:	6378      	str	r0, [r7, #52]	; 0x34
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
 8002168:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800216c:	eb13 0801 	adds.w	r8, r3, r1
 8002170:	eb44 0902 	adc.w	r9, r4, r2
 8002174:	4640      	mov	r0, r8
 8002176:	4649      	mov	r1, r9
 8002178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f04f 0400 	mov.w	r4, #0
 8002180:	18db      	adds	r3, r3, r3
 8002182:	eb44 0404 	adc.w	r4, r4, r4
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	f7fe f843 	bl	8000214 <__aeabi_uldivmod>
 800218e:	4603      	mov	r3, r0
 8002190:	460c      	mov	r4, r1
 8002192:	461a      	mov	r2, r3
 8002194:	4b62      	ldr	r3, [pc, #392]	; (8002320 <UART_SetConfig+0x354>)
 8002196:	fba3 1302 	umull	r1, r3, r3, r2
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2164      	movs	r1, #100	; 0x64
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	3332      	adds	r3, #50	; 0x32
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <UART_SetConfig+0x354>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4433      	add	r3, r6
 80021b6:	60ab      	str	r3, [r5, #8]
 80021b8:	e240      	b.n	800263c <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ba:	f7ff f99f 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 80021be:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	673a      	str	r2, [r7, #112]	; 0x70
 80021c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4614      	mov	r4, r2
 80021d6:	18db      	adds	r3, r3, r3
 80021d8:	eb44 0404 	adc.w	r4, r4, r4
 80021dc:	185b      	adds	r3, r3, r1
 80021de:	eb44 0402 	adc.w	r4, r4, r2
 80021e2:	00e0      	lsls	r0, r4, #3
 80021e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80021e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021e8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80021ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80021f6:	185d      	adds	r5, r3, r1
 80021f8:	eb44 0602 	adc.w	r6, r4, r2
 80021fc:	4628      	mov	r0, r5
 80021fe:	4631      	mov	r1, r6
 8002200:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	18db      	adds	r3, r3, r3
 800220a:	eb44 0404 	adc.w	r4, r4, r4
 800220e:	461a      	mov	r2, r3
 8002210:	4623      	mov	r3, r4
 8002212:	f7fd ffff 	bl	8000214 <__aeabi_uldivmod>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	461a      	mov	r2, r3
 800221c:	4b40      	ldr	r3, [pc, #256]	; (8002320 <UART_SetConfig+0x354>)
 800221e:	fba3 2302 	umull	r2, r3, r3, r2
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	011e      	lsls	r6, r3, #4
 8002226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800222a:	4619      	mov	r1, r3
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	18db      	adds	r3, r3, r3
 8002236:	eb44 0404 	adc.w	r4, r4, r4
 800223a:	185b      	adds	r3, r3, r1
 800223c:	eb44 0402 	adc.w	r4, r4, r2
 8002240:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8002244:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8002248:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800224c:	4653      	mov	r3, sl
 800224e:	465c      	mov	r4, fp
 8002250:	eb13 0a01 	adds.w	sl, r3, r1
 8002254:	eb44 0b02 	adc.w	fp, r4, r2
 8002258:	4650      	mov	r0, sl
 800225a:	4659      	mov	r1, fp
 800225c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f04f 0400 	mov.w	r4, #0
 8002264:	18db      	adds	r3, r3, r3
 8002266:	eb44 0404 	adc.w	r4, r4, r4
 800226a:	461a      	mov	r2, r3
 800226c:	4623      	mov	r3, r4
 800226e:	f7fd ffd1 	bl	8000214 <__aeabi_uldivmod>
 8002272:	4603      	mov	r3, r0
 8002274:	460c      	mov	r4, r1
 8002276:	461a      	mov	r2, r3
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <UART_SetConfig+0x354>)
 800227a:	fba3 1302 	umull	r1, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2164      	movs	r1, #100	; 0x64
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a24      	ldr	r2, [pc, #144]	; (8002320 <UART_SetConfig+0x354>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800229a:	441e      	add	r6, r3
 800229c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022a0:	4619      	mov	r1, r3
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4614      	mov	r4, r2
 80022aa:	18db      	adds	r3, r3, r3
 80022ac:	eb44 0404 	adc.w	r4, r4, r4
 80022b0:	185b      	adds	r3, r3, r1
 80022b2:	eb44 0402 	adc.w	r4, r4, r2
 80022b6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80022ba:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80022be:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80022c2:	4643      	mov	r3, r8
 80022c4:	464c      	mov	r4, r9
 80022c6:	eb13 0801 	adds.w	r8, r3, r1
 80022ca:	eb44 0902 	adc.w	r9, r4, r2
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f04f 0400 	mov.w	r4, #0
 80022da:	18db      	adds	r3, r3, r3
 80022dc:	eb44 0404 	adc.w	r4, r4, r4
 80022e0:	461a      	mov	r2, r3
 80022e2:	4623      	mov	r3, r4
 80022e4:	f7fd ff96 	bl	8000214 <__aeabi_uldivmod>
 80022e8:	4603      	mov	r3, r0
 80022ea:	460c      	mov	r4, r1
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <UART_SetConfig+0x354>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	2164      	movs	r1, #100	; 0x64
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	3332      	adds	r3, #50	; 0x32
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <UART_SetConfig+0x354>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	4433      	add	r3, r6
 8002310:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002312:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002314:	e192      	b.n	800263c <UART_SetConfig+0x670>
 8002316:	bf00      	nop
 8002318:	40011000 	.word	0x40011000
 800231c:	40011400 	.word	0x40011400
 8002320:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4bc1      	ldr	r3, [pc, #772]	; (8002630 <UART_SetConfig+0x664>)
 800232a:	429a      	cmp	r2, r3
 800232c:	d005      	beq.n	800233a <UART_SetConfig+0x36e>
 800232e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4bc0      	ldr	r3, [pc, #768]	; (8002634 <UART_SetConfig+0x668>)
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 80bf 	bne.w	80024b8 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 800233a:	f7ff f8f3 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 800233e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002344:	681e      	ldr	r6, [r3, #0]
 8002346:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	460b      	mov	r3, r1
 8002352:	4614      	mov	r4, r2
 8002354:	18db      	adds	r3, r3, r3
 8002356:	eb44 0404 	adc.w	r4, r4, r4
 800235a:	185b      	adds	r3, r3, r1
 800235c:	eb44 0402 	adc.w	r4, r4, r2
 8002360:	00e0      	lsls	r0, r4, #3
 8002362:	6278      	str	r0, [r7, #36]	; 0x24
 8002364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002366:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800236a:	6278      	str	r0, [r7, #36]	; 0x24
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002374:	eb13 0801 	adds.w	r8, r3, r1
 8002378:	eb44 0902 	adc.w	r9, r4, r2
 800237c:	4640      	mov	r0, r8
 800237e:	4649      	mov	r1, r9
 8002380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f04f 0400 	mov.w	r4, #0
 8002388:	00a2      	lsls	r2, r4, #2
 800238a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800238c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800238e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002392:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	65bb      	str	r3, [r7, #88]	; 0x58
 8002398:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800239c:	f7fd ff3a 	bl	8000214 <__aeabi_uldivmod>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	461a      	mov	r2, r3
 80023a6:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <UART_SetConfig+0x66c>)
 80023a8:	fba3 2302 	umull	r2, r3, r3, r2
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	011d      	lsls	r5, r3, #4
 80023b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b4:	4619      	mov	r1, r3
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4614      	mov	r4, r2
 80023be:	18db      	adds	r3, r3, r3
 80023c0:	eb44 0404 	adc.w	r4, r4, r4
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	eb44 0402 	adc.w	r4, r4, r2
 80023ca:	00e0      	lsls	r0, r4, #3
 80023cc:	61f8      	str	r0, [r7, #28]
 80023ce:	69f8      	ldr	r0, [r7, #28]
 80023d0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80023d4:	61f8      	str	r0, [r7, #28]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023de:	eb13 0801 	adds.w	r8, r3, r1
 80023e2:	eb44 0902 	adc.w	r9, r4, r2
 80023e6:	4640      	mov	r0, r8
 80023e8:	4649      	mov	r1, r9
 80023ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	00a2      	lsls	r2, r4, #2
 80023f4:	657a      	str	r2, [r7, #84]	; 0x54
 80023f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80023f8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80023fc:	657a      	str	r2, [r7, #84]	; 0x54
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	653b      	str	r3, [r7, #80]	; 0x50
 8002402:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002406:	f7fd ff05 	bl	8000214 <__aeabi_uldivmod>
 800240a:	4603      	mov	r3, r0
 800240c:	460c      	mov	r4, r1
 800240e:	461a      	mov	r2, r3
 8002410:	4b89      	ldr	r3, [pc, #548]	; (8002638 <UART_SetConfig+0x66c>)
 8002412:	fba3 1302 	umull	r1, r3, r3, r2
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2164      	movs	r1, #100	; 0x64
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	3332      	adds	r3, #50	; 0x32
 8002424:	4a84      	ldr	r2, [pc, #528]	; (8002638 <UART_SetConfig+0x66c>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002430:	441d      	add	r5, r3
 8002432:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	460b      	mov	r3, r1
 800243e:	4614      	mov	r4, r2
 8002440:	18db      	adds	r3, r3, r3
 8002442:	eb44 0404 	adc.w	r4, r4, r4
 8002446:	185b      	adds	r3, r3, r1
 8002448:	eb44 0402 	adc.w	r4, r4, r2
 800244c:	00e0      	lsls	r0, r4, #3
 800244e:	6178      	str	r0, [r7, #20]
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002456:	6178      	str	r0, [r7, #20]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002460:	eb13 0801 	adds.w	r8, r3, r1
 8002464:	eb44 0902 	adc.w	r9, r4, r2
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f04f 0400 	mov.w	r4, #0
 8002474:	00a2      	lsls	r2, r4, #2
 8002476:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002478:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800247a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800247e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	64bb      	str	r3, [r7, #72]	; 0x48
 8002484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002488:	f7fd fec4 	bl	8000214 <__aeabi_uldivmod>
 800248c:	4603      	mov	r3, r0
 800248e:	460c      	mov	r4, r1
 8002490:	461a      	mov	r2, r3
 8002492:	4b69      	ldr	r3, [pc, #420]	; (8002638 <UART_SetConfig+0x66c>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	2164      	movs	r1, #100	; 0x64
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	3332      	adds	r3, #50	; 0x32
 80024a6:	4a64      	ldr	r2, [pc, #400]	; (8002638 <UART_SetConfig+0x66c>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	442b      	add	r3, r5
 80024b4:	60b3      	str	r3, [r6, #8]
 80024b6:	e0c1      	b.n	800263c <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024b8:	f7ff f820 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 80024bc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80024c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ca:	4619      	mov	r1, r3
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	18db      	adds	r3, r3, r3
 80024d6:	eb44 0404 	adc.w	r4, r4, r4
 80024da:	185b      	adds	r3, r3, r1
 80024dc:	eb44 0402 	adc.w	r4, r4, r2
 80024e0:	00e6      	lsls	r6, r4, #3
 80024e2:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80024e6:	00dd      	lsls	r5, r3, #3
 80024e8:	462b      	mov	r3, r5
 80024ea:	4634      	mov	r4, r6
 80024ec:	185d      	adds	r5, r3, r1
 80024ee:	eb44 0602 	adc.w	r6, r4, r2
 80024f2:	4628      	mov	r0, r5
 80024f4:	4631      	mov	r1, r6
 80024f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f04f 0400 	mov.w	r4, #0
 80024fe:	00a5      	lsls	r5, r4, #2
 8002500:	677d      	str	r5, [r7, #116]	; 0x74
 8002502:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8002504:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8002508:	677d      	str	r5, [r7, #116]	; 0x74
 800250a:	009c      	lsls	r4, r3, #2
 800250c:	673c      	str	r4, [r7, #112]	; 0x70
 800250e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002512:	f7fd fe7f 	bl	8000214 <__aeabi_uldivmod>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	461a      	mov	r2, r3
 800251c:	4b46      	ldr	r3, [pc, #280]	; (8002638 <UART_SetConfig+0x66c>)
 800251e:	fba3 1302 	umull	r1, r3, r3, r2
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	011d      	lsls	r5, r3, #4
 8002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800252a:	4619      	mov	r1, r3
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	460b      	mov	r3, r1
 8002532:	4614      	mov	r4, r2
 8002534:	18db      	adds	r3, r3, r3
 8002536:	eb44 0404 	adc.w	r4, r4, r4
 800253a:	185b      	adds	r3, r3, r1
 800253c:	eb44 0402 	adc.w	r4, r4, r2
 8002540:	00e0      	lsls	r0, r4, #3
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	00d8      	lsls	r0, r3, #3
 800254e:	60b8      	str	r0, [r7, #8]
 8002550:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002554:	eb13 0801 	adds.w	r8, r3, r1
 8002558:	eb44 0902 	adc.w	r9, r4, r2
 800255c:	4640      	mov	r0, r8
 800255e:	4649      	mov	r1, r9
 8002560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f04f 0400 	mov.w	r4, #0
 8002568:	00a6      	lsls	r6, r4, #2
 800256a:	66fe      	str	r6, [r7, #108]	; 0x6c
 800256c:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800256e:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002572:	66fe      	str	r6, [r7, #108]	; 0x6c
 8002574:	009c      	lsls	r4, r3, #2
 8002576:	66bc      	str	r4, [r7, #104]	; 0x68
 8002578:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800257c:	f7fd fe4a 	bl	8000214 <__aeabi_uldivmod>
 8002580:	4603      	mov	r3, r0
 8002582:	460c      	mov	r4, r1
 8002584:	461a      	mov	r2, r3
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <UART_SetConfig+0x66c>)
 8002588:	fba3 1302 	umull	r1, r3, r3, r2
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	2164      	movs	r1, #100	; 0x64
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	3332      	adds	r3, #50	; 0x32
 800259a:	4a27      	ldr	r2, [pc, #156]	; (8002638 <UART_SetConfig+0x66c>)
 800259c:	fba2 1303 	umull	r1, r3, r2, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a6:	441d      	add	r5, r3
 80025a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ac:	4619      	mov	r1, r3
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4614      	mov	r4, r2
 80025b6:	18db      	adds	r3, r3, r3
 80025b8:	eb44 0404 	adc.w	r4, r4, r4
 80025bc:	185b      	adds	r3, r3, r1
 80025be:	eb44 0402 	adc.w	r4, r4, r2
 80025c2:	00e0      	lsls	r0, r4, #3
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	00d8      	lsls	r0, r3, #3
 80025d0:	6038      	str	r0, [r7, #0]
 80025d2:	e897 0018 	ldmia.w	r7, {r3, r4}
 80025d6:	eb13 0801 	adds.w	r8, r3, r1
 80025da:	eb44 0902 	adc.w	r9, r4, r2
 80025de:	4640      	mov	r0, r8
 80025e0:	4649      	mov	r1, r9
 80025e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f04f 0400 	mov.w	r4, #0
 80025ea:	00a6      	lsls	r6, r4, #2
 80025ec:	667e      	str	r6, [r7, #100]	; 0x64
 80025ee:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 80025f0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80025f4:	667e      	str	r6, [r7, #100]	; 0x64
 80025f6:	009c      	lsls	r4, r3, #2
 80025f8:	663c      	str	r4, [r7, #96]	; 0x60
 80025fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80025fe:	f7fd fe09 	bl	8000214 <__aeabi_uldivmod>
 8002602:	4603      	mov	r3, r0
 8002604:	460c      	mov	r4, r1
 8002606:	461a      	mov	r2, r3
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <UART_SetConfig+0x66c>)
 800260a:	fba3 1302 	umull	r1, r3, r3, r2
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2164      	movs	r1, #100	; 0x64
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	3332      	adds	r3, #50	; 0x32
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <UART_SetConfig+0x66c>)
 800261e:	fba2 1303 	umull	r1, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	442b      	add	r3, r5
 800262a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800262c:	6093      	str	r3, [r2, #8]
}
 800262e:	e005      	b.n	800263c <UART_SetConfig+0x670>
 8002630:	40011000 	.word	0x40011000
 8002634:	40011400 	.word	0x40011400
 8002638:	51eb851f 	.word	0x51eb851f
 800263c:	bf00      	nop
 800263e:	378c      	adds	r7, #140	; 0x8c
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop

08002648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002680 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800264c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800264e:	e003      	b.n	8002658 <LoopCopyDataInit>

08002650 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002652:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002654:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002656:	3104      	adds	r1, #4

08002658 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002658:	480b      	ldr	r0, [pc, #44]	; (8002688 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800265c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800265e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002660:	d3f6      	bcc.n	8002650 <CopyDataInit>
  ldr  r2, =_sbss
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002664:	e002      	b.n	800266c <LoopFillZerobss>

08002666 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002666:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002668:	f842 3b04 	str.w	r3, [r2], #4

0800266c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800266e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002670:	d3f9      	bcc.n	8002666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002672:	f7fe f9c5 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002676:	f000 f811 	bl	800269c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800267a:	f7fd ff53 	bl	8000524 <main>
  bx  lr    
 800267e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002680:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002684:	08002748 	.word	0x08002748
  ldr  r0, =_sdata
 8002688:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800268c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002690:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002694:	200000c0 	.word	0x200000c0

08002698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC_IRQHandler>
	...

0800269c <__libc_init_array>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	4e0d      	ldr	r6, [pc, #52]	; (80026d4 <__libc_init_array+0x38>)
 80026a0:	4c0d      	ldr	r4, [pc, #52]	; (80026d8 <__libc_init_array+0x3c>)
 80026a2:	1ba4      	subs	r4, r4, r6
 80026a4:	10a4      	asrs	r4, r4, #2
 80026a6:	2500      	movs	r5, #0
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d109      	bne.n	80026c0 <__libc_init_array+0x24>
 80026ac:	4e0b      	ldr	r6, [pc, #44]	; (80026dc <__libc_init_array+0x40>)
 80026ae:	4c0c      	ldr	r4, [pc, #48]	; (80026e0 <__libc_init_array+0x44>)
 80026b0:	f000 f820 	bl	80026f4 <_init>
 80026b4:	1ba4      	subs	r4, r4, r6
 80026b6:	10a4      	asrs	r4, r4, #2
 80026b8:	2500      	movs	r5, #0
 80026ba:	42a5      	cmp	r5, r4
 80026bc:	d105      	bne.n	80026ca <__libc_init_array+0x2e>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026c4:	4798      	blx	r3
 80026c6:	3501      	adds	r5, #1
 80026c8:	e7ee      	b.n	80026a8 <__libc_init_array+0xc>
 80026ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ce:	4798      	blx	r3
 80026d0:	3501      	adds	r5, #1
 80026d2:	e7f2      	b.n	80026ba <__libc_init_array+0x1e>
 80026d4:	08002740 	.word	0x08002740
 80026d8:	08002740 	.word	0x08002740
 80026dc:	08002740 	.word	0x08002740
 80026e0:	08002744 	.word	0x08002744

080026e4 <memset>:
 80026e4:	4402      	add	r2, r0
 80026e6:	4603      	mov	r3, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr
