
ELE400f767.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019604  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003510  08019808  08019808  00029808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cd18  0801cd18  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801cd18  0801cd18  0002cd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cd20  0801cd20  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cd20  0801cd20  0002cd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cd24  0801cd24  0002cd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801cd28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012b18  200001f4  0801cf1c  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d0c  0801cf1c  00032d0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000514d1  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000959d  00000000  00000000  000816f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a08  00000000  00000000  0008ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027f8  00000000  00000000  0008d698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ae25  00000000  00000000  0008fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041593  00000000  00000000  000cacb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127012  00000000  00000000  0010c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023325a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd1c  00000000  00000000  002332b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	080197ec 	.word	0x080197ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	080197ec 	.word	0x080197ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of debugMsgQueue */
	debugMsgQueueHandle = osMessageQueueNew (4, sizeof(debugMsg), &debugMsgQueue_attributes);
 80005ec:	4a10      	ldr	r2, [pc, #64]	; (8000630 <MX_FREERTOS_Init+0x48>)
 80005ee:	2114      	movs	r1, #20
 80005f0:	2004      	movs	r0, #4
 80005f2:	f006 fd11 	bl	8007018 <osMessageQueueNew>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <MX_FREERTOS_Init+0x4c>)
 80005fa:	6013      	str	r3, [r2, #0]

	/* creation of pitot_queue */
	pitot_queueHandle = osMessageQueueNew (8, sizeof(double), &pitot_queue_attributes);
 80005fc:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_FREERTOS_Init+0x50>)
 80005fe:	2108      	movs	r1, #8
 8000600:	2008      	movs	r0, #8
 8000602:	f006 fd09 	bl	8007018 <osMessageQueueNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <MX_FREERTOS_Init+0x54>)
 800060a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of mqtt_Client */
	mqtt_ClientHandle = osThreadNew(Start_mqtt_Client, NULL, &mqtt_Client_attributes);
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <MX_FREERTOS_Init+0x58>)
 800060e:	2100      	movs	r1, #0
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_FREERTOS_Init+0x5c>)
 8000612:	f006 f98b 	bl	800692c <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <MX_FREERTOS_Init+0x60>)
 800061a:	6013      	str	r3, [r2, #0]

	/* creation of pitot_task */
	pitot_taskHandle = osThreadNew(Start_pitot_task, NULL, &pitot_task_attributes);
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <MX_FREERTOS_Init+0x64>)
 800061e:	2100      	movs	r1, #0
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <MX_FREERTOS_Init+0x68>)
 8000622:	f006 f983 	bl	800692c <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <MX_FREERTOS_Init+0x6c>)
 800062a:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	0801c758 	.word	0x0801c758
 8000634:	20005d18 	.word	0x20005d18
 8000638:	0801c770 	.word	0x0801c770
 800063c:	20005dcc 	.word	0x20005dcc
 8000640:	0801c710 	.word	0x0801c710
 8000644:	08000659 	.word	0x08000659
 8000648:	2000be7c 	.word	0x2000be7c
 800064c:	0801c734 	.word	0x0801c734
 8000650:	08000705 	.word	0x08000705
 8000654:	20005d1c 	.word	0x20005d1c

08000658 <Start_mqtt_Client>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_mqtt_Client */
void Start_mqtt_Client(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8000660:	f005 fb74 	bl	8005d4c <MX_LWIP_Init>

	//struct netconn * conn;d

	// Connect to server
	//conn  = cMqtt_Connect(10,214,96,60,1883);
	int count=0;
 8000664:	2300      	movs	r3, #0
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c

	double avrPressure=0;
 8000668:	f04f 0200 	mov.w	r2, #0
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	for(;;)
	{

		double pressure;

		osStatus_t status_queue = osMessageQueueGet(pitot_queueHandle,&pressure,0,0);
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <Start_mqtt_Client+0xa0>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800067c:	2300      	movs	r3, #0
 800067e:	2200      	movs	r2, #0
 8000680:	f006 fdc4 	bl	800720c <osMessageQueueGet>
 8000684:	63f8      	str	r0, [r7, #60]	; 0x3c
		if(status_queue == osOK){
 8000686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000688:	2b00      	cmp	r3, #0
 800068a:	d130      	bne.n	80006ee <Start_mqtt_Client+0x96>
			char string[40];

			avrPressure+=pressure;
 800068c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000690:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000694:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000698:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
			//cMqtt_Publish(conn, "1/data/1", string, strlen(string));
			count ++;
 800069c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800069e:	3301      	adds	r3, #1
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(count>=10){
 80006a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80006a4:	2b09      	cmp	r3, #9
 80006a6:	dd22      	ble.n	80006ee <Start_mqtt_Client+0x96>
				sprintf(string, "vitesse(m/s) %.4lf \n\r", avrPressure/10);
 80006a8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80006ac:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80006b0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80006b4:	f107 0008 	add.w	r0, r7, #8
 80006b8:	ec53 2b15 	vmov	r2, r3, d5
 80006bc:	490f      	ldr	r1, [pc, #60]	; (80006fc <Start_mqtt_Client+0xa4>)
 80006be:	f016 fec5 	bl	801744c <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fdba 	bl	8000240 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f107 0108 	add.w	r1, r7, #8
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <Start_mqtt_Client+0xa8>)
 80006da:	f004 fc21 	bl	8004f20 <HAL_UART_Transmit>
				count=0;
 80006de:	2300      	movs	r3, #0
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
				avrPressure=0;
 80006e2:	f04f 0200 	mov.w	r2, #0
 80006e6:	f04f 0300 	mov.w	r3, #0
 80006ea:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			}

		}

		osDelay(100);
 80006ee:	2064      	movs	r0, #100	; 0x64
 80006f0:	f006 f9c2 	bl	8006a78 <osDelay>
	{
 80006f4:	e7be      	b.n	8000674 <Start_mqtt_Client+0x1c>
 80006f6:	bf00      	nop
 80006f8:	20005dcc 	.word	0x20005dcc
 80006fc:	0801983c 	.word	0x0801983c
 8000700:	2000bf58 	.word	0x2000bf58

08000704 <Start_pitot_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_pitot_task */
void Start_pitot_task(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	double speed;
	for(;;)
	{

		HAL_StatusTypeDef ret = !HAL_OK;
 800070c:	2301      	movs	r3, #1
 800070e:	75fb      	strb	r3, [r7, #23]
		while(ret != HAL_OK){
 8000710:	e005      	b.n	800071e <Start_pitot_task+0x1a>

			ret = init_pitot(&hi2c2,START_AVERAGE16);
 8000712:	21af      	movs	r1, #175	; 0xaf
 8000714:	4810      	ldr	r0, [pc, #64]	; (8000758 <Start_pitot_task+0x54>)
 8000716:	f005 ff8d 	bl	8006634 <init_pitot>
 800071a:	4603      	mov	r3, r0
 800071c:	75fb      	strb	r3, [r7, #23]
		while(ret != HAL_OK){
 800071e:	7dfb      	ldrb	r3, [r7, #23]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f6      	bne.n	8000712 <Start_pitot_task+0xe>

		}

		HAL_GPIO_TogglePin (Led2_GPIO_Port, Led2_Pin);
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <Start_pitot_task+0x58>)
 8000728:	f002 f90d 	bl	8002946 <HAL_GPIO_TogglePin>
		osDelay(100);
 800072c:	2064      	movs	r0, #100	; 0x64
 800072e:	f006 f9a3 	bl	8006a78 <osDelay>

		if(read_pitot_speed(&hi2c2,&speed))
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <Start_pitot_task+0x54>)
 800073a:	f006 f829 	bl	8006790 <read_pitot_speed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0e3      	beq.n	800070c <Start_pitot_task+0x8>
			osMessageQueuePut(pitot_queueHandle,&speed,0,0);
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <Start_pitot_task+0x5c>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	f107 0108 	add.w	r1, r7, #8
 800074c:	2300      	movs	r3, #0
 800074e:	2200      	movs	r2, #0
 8000750:	f006 fce8 	bl	8007124 <osMessageQueuePut>
	{
 8000754:	e7da      	b.n	800070c <Start_pitot_task+0x8>
 8000756:	bf00      	nop
 8000758:	2000bec0 	.word	0x2000bec0
 800075c:	40020400 	.word	0x40020400
 8000760:	20005dcc 	.word	0x20005dcc

08000764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0xd8>)
 8000810:	f002 f880 	bl	8002914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led2_Pin;
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Led2_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xd8>)
 800082c:	f001 fec6 	bl	80025bc <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020400 	.word	0x40020400

08000840 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_I2C2_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_I2C2_Init+0x74>)
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <MX_I2C2_Init+0x7c>)
 800084e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_I2C2_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087a:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_I2C2_Init+0x74>)
 800087c:	f002 f87e 	bl	800297c <HAL_I2C_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000886:	f000 f931 	bl	8000aec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088a:	2100      	movs	r1, #0
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_I2C2_Init+0x74>)
 800088e:	f002 fccf 	bl	8003230 <HAL_I2CEx_ConfigAnalogFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000898:	f000 f928 	bl	8000aec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_I2C2_Init+0x74>)
 80008a0:	f002 fd11 	bl	80032c6 <HAL_I2CEx_ConfigDigitalFilter>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 f91f 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000bec0 	.word	0x2000bec0
 80008b8:	40005800 	.word	0x40005800
 80008bc:	20303e5d 	.word	0x20303e5d

080008c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_I2C_MspInit+0x7c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d127      	bne.n	8000932 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_I2C_MspInit+0x80>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_I2C_MspInit+0x80>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_I2C_MspInit+0x80>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008fa:	2303      	movs	r3, #3
 80008fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fe:	2312      	movs	r3, #18
 8000900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800090a:	2304      	movs	r3, #4
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <HAL_I2C_MspInit+0x84>)
 8000916:	f001 fe51 	bl	80025bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_I2C_MspInit+0x80>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_I2C_MspInit+0x80>)
 8000920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_I2C_MspInit+0x80>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40005800 	.word	0x40005800
 8000940:	40023800 	.word	0x40023800
 8000944:	40021400 	.word	0x40021400

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094e:	f000 fb7e 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000952:	f000 f821 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f7ff ff05 	bl	8000764 <MX_GPIO_Init>
  MX_I2C2_Init();
 800095a:	f7ff ff71 	bl	8000840 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800095e:	f000 fa4f 	bl	8000e00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000962:	f000 fac1 	bl	8000ee8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  char *msg = "debut de programme\n\r";
 8000966:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <main+0x48>)
 8000968:	607b      	str	r3, [r7, #4]


  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fc68 	bl	8000240 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <main+0x4c>)
 800097c:	f004 fad0 	bl	8004f20 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000980:	f005 ff42 	bl	8006808 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000984:	f7ff fe30 	bl	80005e8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000988:	f005 ff72 	bl	8006870 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800098c:	e7fe      	b.n	800098c <main+0x44>
 800098e:	bf00      	nop
 8000990:	08019854 	.word	0x08019854
 8000994:	2000bf58 	.word	0x2000bf58

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0b8      	sub	sp, #224	; 0xe0
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009a2:	2234      	movs	r2, #52	; 0x34
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f016 f8ac 	bl	8016b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0308 	add.w	r3, r7, #8
 80009c0:	2290      	movs	r2, #144	; 0x90
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f016 f89d 	bl	8016b04 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ca:	f002 fe11 	bl	80035f0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <SystemClock_Config+0x124>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a3a      	ldr	r2, [pc, #232]	; (8000abc <SystemClock_Config+0x124>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <SystemClock_Config+0x124>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <SystemClock_Config+0x128>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ee:	4a34      	ldr	r2, [pc, #208]	; (8000ac0 <SystemClock_Config+0x128>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6013      	str	r3, [r2, #0]
 80009f6:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <SystemClock_Config+0x128>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fe38 	bl	80036b0 <HAL_RCC_OscConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a46:	f000 f851 	bl	8000aec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a4a:	f002 fde1 	bl	8003610 <HAL_PWREx_EnableOverDrive>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a54:	f000 f84a 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a7c:	2103      	movs	r1, #3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f8c4 	bl	8003c0c <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a8a:	f000 f82f 	bl	8000aec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <SystemClock_Config+0x12c>)
 8000a90:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 fae5 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000ab0:	f000 f81c 	bl	8000aec <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	37e0      	adds	r7, #224	; 0xe0
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000
 8000ac4:	00208100 	.word	0x00208100

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 fac5 	bl	8001068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010000 	.word	0x40010000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	210f      	movs	r1, #15
 8000b32:	f06f 0001 	mvn.w	r0, #1
 8000b36:	f000 fb93 	bl	8001260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2019      	movs	r0, #25
 8000b5e:	f000 fb7f 	bl	8001260 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b62:	2019      	movs	r0, #25
 8000b64:	f000 fb98 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <HAL_InitTick+0x9c>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	; (8000be4 <HAL_InitTick+0x9c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6453      	str	r3, [r2, #68]	; 0x44
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <HAL_InitTick+0x9c>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fa40 	bl	8004010 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b90:	f003 fa2a 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 8000b94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_InitTick+0xa0>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_InitTick+0xa4>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_InitTick+0xa8>)
 8000ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_InitTick+0xa4>)
 8000bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_InitTick+0xa4>)
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_InitTick+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_InitTick+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_InitTick+0xa4>)
 8000bc6:	f003 fe7d 	bl	80048c4 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_InitTick+0xa4>)
 8000bd2:	f003 fed9 	bl	8004988 <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	2000bf0c 	.word	0x2000bf0c
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c26:	f003 ff27 	bl	8004a78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000bf0c 	.word	0x2000bf0c

08000c34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <ETH_IRQHandler+0x10>)
 8000c3a:	f000 ff1d 	bl	8001a78 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000dd24 	.word	0x2000dd24

08000c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	return 1;
 8000c4c:	2301      	movs	r3, #1
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_kill>:

int _kill(int pid, int sig)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <_kill+0x20>)
 8000c64:	2216      	movs	r2, #22
 8000c66:	601a      	str	r2, [r3, #0]
	return -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	20012cf8 	.word	0x20012cf8

08000c7c <_exit>:

void _exit (int status)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffe5 	bl	8000c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c8e:	e7fe      	b.n	8000c8e <_exit+0x12>

08000c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e00a      	b.n	8000cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ca2:	f3af 8000 	nop.w
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	b2ca      	uxtb	r2, r1
 8000cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbf0      	blt.n	8000ca2 <_read+0x12>
	}

return len;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf1      	blt.n	8000cdc <_write+0x12>
	}
	return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_close>:

int _close(int file)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b083      	sub	sp, #12
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
	return -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_isatty>:

int _isatty(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return 1;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d205      	bcs.n	8000da8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <_sbrk+0x6c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	371c      	adds	r7, #28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20080000 	.word	0x20080000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000210 	.word	0x20000210
 8000dd4:	20012d10 	.word	0x20012d10
 8000dd8:	20012cf8 	.word	0x20012cf8

08000ddc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_USART3_UART_Init+0x5c>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e44:	f004 f81e 	bl	8004e84 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f7ff fe4d 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000bf58 	.word	0x2000bf58
 8000e5c:	40004800 	.word	0x40004800

08000e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_UART_MspInit+0x7c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d128      	bne.n	8000ed4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_UART_MspInit+0x80>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_UART_MspInit+0x84>)
 8000ed0:	f001 fb74 	bl	80025bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020c00 	.word	0x40020c00

08000ee8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ef2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	f002 fa17 	bl	800335e <HAL_PCD_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f36:	f7ff fdd9 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000bfdc 	.word	0x2000bfdc

08000f44 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f64:	d141      	bne.n	8000fea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f7e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f90:	230a      	movs	r3, #10
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <HAL_PCD_MspInit+0xb4>)
 8000f9c:	f001 fb0e 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <HAL_PCD_MspInit+0xb4>)
 8000fb6:	f001 fb01 	bl	80025bc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_PCD_MspInit+0xb0>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40020000 	.word	0x40020000

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff fed9 	bl	8000ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f015 fd11 	bl	8016a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fc8b 	bl	8000948 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001040:	0801cd28 	.word	0x0801cd28
  ldr r2, =_sbss
 8001044:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001048:	20012d0c 	.word	0x20012d0c

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>

0800104e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001052:	2003      	movs	r0, #3
 8001054:	f000 f8f9 	bl	800124a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fd75 	bl	8000b48 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800105e:	f7ff fd4b 	bl	8000af8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	2000c3e0 	.word	0x2000c3e0

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000c3e0 	.word	0x2000c3e0

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <__NVIC_SetPriorityGrouping+0x40>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	4313      	orrs	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x40>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	05fa0000 	.word	0x05fa0000

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <__NVIC_EnableIRQ+0x38>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f1c3 0307 	rsb	r3, r3, #7
 80011fe:	2b04      	cmp	r3, #4
 8001200:	bf28      	it	cs
 8001202:	2304      	movcs	r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3304      	adds	r3, #4
 800120a:	2b06      	cmp	r3, #6
 800120c:	d902      	bls.n	8001214 <NVIC_EncodePriority+0x30>
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3b03      	subs	r3, #3
 8001212:	e000      	b.n	8001216 <NVIC_EncodePriority+0x32>
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	401a      	ands	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800122c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43d9      	mvns	r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	4313      	orrs	r3, r2
         );
}
 800123e:	4618      	mov	r0, r3
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff4c 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001272:	f7ff ff61 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001276:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	6978      	ldr	r0, [r7, #20]
 800127e:	f7ff ffb1 	bl	80011e4 <NVIC_EncodePriority>
 8001282:	4602      	mov	r2, r0
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff80 	bl	8001190 <__NVIC_SetPriority>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff54 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80012c4:	4ba9      	ldr	r3, [pc, #676]	; (800156c <HAL_ETH_Init+0x2b8>)
 80012c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e181      	b.n	80015de <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f004 fda0 	bl	8005e34 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b9e      	ldr	r3, [pc, #632]	; (8001570 <HAL_ETH_Init+0x2bc>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	4a9d      	ldr	r2, [pc, #628]	; (8001570 <HAL_ETH_Init+0x2bc>)
 80012fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001300:	4b9b      	ldr	r3, [pc, #620]	; (8001570 <HAL_ETH_Init+0x2bc>)
 8001302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800130c:	4b99      	ldr	r3, [pc, #612]	; (8001574 <HAL_ETH_Init+0x2c0>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_ETH_Init+0x2c0>)
 8001312:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001316:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001318:	4b96      	ldr	r3, [pc, #600]	; (8001574 <HAL_ETH_Init+0x2c0>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4994      	ldr	r1, [pc, #592]	; (8001574 <HAL_ETH_Init+0x2c0>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800133e:	f7ff fea7 	bl	8001090 <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001344:	e011      	b.n	800136a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001346:	f7ff fea3 	bl	8001090 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001354:	d909      	bls.n	800136a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e139      	b.n	80015de <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e4      	bne.n	8001346 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f023 031c 	bic.w	r3, r3, #28
 800138a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800138c:	f002 fe0c 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8001390:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4a78      	ldr	r2, [pc, #480]	; (8001578 <HAL_ETH_Init+0x2c4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d908      	bls.n	80013ac <HAL_ETH_Init+0xf8>
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4a77      	ldr	r2, [pc, #476]	; (800157c <HAL_ETH_Init+0x2c8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d804      	bhi.n	80013ac <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e027      	b.n	80013fc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	4a73      	ldr	r2, [pc, #460]	; (800157c <HAL_ETH_Init+0x2c8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d908      	bls.n	80013c6 <HAL_ETH_Init+0x112>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	4a6d      	ldr	r2, [pc, #436]	; (800156c <HAL_ETH_Init+0x2b8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d204      	bcs.n	80013c6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f043 030c 	orr.w	r3, r3, #12
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	e01a      	b.n	80013fc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4a68      	ldr	r2, [pc, #416]	; (800156c <HAL_ETH_Init+0x2b8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d303      	bcc.n	80013d6 <HAL_ETH_Init+0x122>
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4a6b      	ldr	r2, [pc, #428]	; (8001580 <HAL_ETH_Init+0x2cc>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d911      	bls.n	80013fa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4a69      	ldr	r2, [pc, #420]	; (8001580 <HAL_ETH_Init+0x2cc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d908      	bls.n	80013f0 <HAL_ETH_Init+0x13c>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4a68      	ldr	r2, [pc, #416]	; (8001584 <HAL_ETH_Init+0x2d0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d804      	bhi.n	80013f0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e005      	b.n	80013fc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	e000      	b.n	80013fc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013fa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69fa      	ldr	r2, [r7, #28]
 8001402:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001404:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fc17 	bl	8001c3e <HAL_ETH_WritePHYRegister>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800141a:	6939      	ldr	r1, [r7, #16]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fdcd 	bl	8001fbc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0d7      	b.n	80015de <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800142e:	20ff      	movs	r0, #255	; 0xff
 8001430:	f7ff fe3a 	bl	80010a8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80a5 	beq.w	8001588 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800143e:	f7ff fe27 	bl	8001090 <HAL_GetTick>
 8001442:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	461a      	mov	r2, r3
 800144a:	2101      	movs	r1, #1
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fb8e 	bl	8001b6e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001452:	f7ff fe1d 	bl	8001090 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d90f      	bls.n	8001484 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001468:	6939      	ldr	r1, [r7, #16]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fda6 	bl	8001fbc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0ac      	b.n	80015de <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0da      	beq.n	8001444 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800148e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001492:	2100      	movs	r1, #0
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fbd2 	bl	8001c3e <HAL_ETH_WritePHYRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fd88 	bl	8001fbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014b4:	2301      	movs	r3, #1
 80014b6:	e092      	b.n	80015de <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fdea 	bl	8001090 <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	461a      	mov	r2, r3
 80014c4:	2101      	movs	r1, #1
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fb51 	bl	8001b6e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014cc:	f7ff fde0 	bl	8001090 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014da:	4293      	cmp	r3, r2
 80014dc:	d90f      	bls.n	80014fe <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014e2:	6939      	ldr	r1, [r7, #16]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fd69 	bl	8001fbc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e06f      	b.n	80015de <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f003 0320 	and.w	r3, r3, #32
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0da      	beq.n	80014be <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	461a      	mov	r2, r3
 800150e:	2110      	movs	r1, #16
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fb2c 	bl	8001b6e <HAL_ETH_ReadPHYRegister>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00b      	beq.n	8001534 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fd4a 	bl	8001fbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001530:	2301      	movs	r3, #1
 8001532:	e054      	b.n	80015de <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	e002      	b.n	800154e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	e035      	b.n	80015cc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e030      	b.n	80015cc <HAL_ETH_Init+0x318>
 800156a:	bf00      	nop
 800156c:	03938700 	.word	0x03938700
 8001570:	40023800 	.word	0x40023800
 8001574:	40013800 	.word	0x40013800
 8001578:	01312cff 	.word	0x01312cff
 800157c:	02160ebf 	.word	0x02160ebf
 8001580:	05f5e0ff 	.word	0x05f5e0ff
 8001584:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	08db      	lsrs	r3, r3, #3
 800158e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001598:	4313      	orrs	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb4c 	bl	8001c3e <HAL_ETH_WritePHYRegister>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fd02 	bl	8001fbc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e00c      	b.n	80015de <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015c8:	f7ff fd6e 	bl	80010a8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fcf4 	bl	8001fbc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop

080015e8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ETH_DMATxDescListInit+0x20>
 8001604:	2302      	movs	r3, #2
 8001606:	e052      	b.n	80016ae <HAL_ETH_DMATxDescListInit+0xc6>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	e030      	b.n	8001686 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001634:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	4413      	add	r3, r2
 8001644:	461a      	mov	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	d208      	bcs.n	800167a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3301      	adds	r3, #1
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	4413      	add	r3, r2
 8001672:	461a      	mov	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e002      	b.n	8001680 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d3ca      	bcc.n	8001624 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6819      	ldr	r1, [r3, #0]
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f241 0310 	movw	r3, #4112	; 0x1010
 8001698:	440b      	add	r3, r1
 800169a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b087      	sub	sp, #28
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_ETH_DMARxDescListInit+0x20>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e056      	b.n	8001788 <HAL_ETH_DMARxDescListInit+0xce>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2202      	movs	r2, #2
 80016e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e034      	b.n	8001760 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	015b      	lsls	r3, r3, #5
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4413      	add	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001706:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800170e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001716:	fb02 f303 	mul.w	r3, r2, r3
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	461a      	mov	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	3b01      	subs	r3, #1
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	429a      	cmp	r2, r3
 8001740:	d208      	bcs.n	8001754 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	015b      	lsls	r3, r3, #5
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	461a      	mov	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e002      	b.n	800175a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3c6      	bcc.n	80016f6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6819      	ldr	r1, [r3, #0]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001772:	440b      	add	r3, r1
 8001774:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_ETH_TransmitFrame+0x24>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e0cd      	b.n	8001954 <HAL_ETH_TransmitFrame+0x1c0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017de:	2301      	movs	r3, #1
 80017e0:	e0b8      	b.n	8001954 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da09      	bge.n	8001800 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2212      	movs	r2, #18
 80017f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0a9      	b.n	8001954 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001806:	4293      	cmp	r3, r2
 8001808:	d915      	bls.n	8001836 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_ETH_TransmitFrame+0x1cc>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0a9b      	lsrs	r3, r3, #10
 8001814:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_ETH_TransmitFrame+0x1cc>)
 800181a:	fba3 1302 	umull	r1, r3, r3, r2
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e001      	b.n	800183a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d11c      	bne.n	800187a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800184e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800185a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800186a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
 8001878:	e04b      	b.n	8001912 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	e044      	b.n	800190a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800188e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018a4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ae:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d116      	bne.n	80018e8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80018c8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	4a25      	ldr	r2, [pc, #148]	; (8001964 <HAL_ETH_TransmitFrame+0x1d0>)
 80018ce:	fb02 f203 	mul.w	r2, r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018da:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018e6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018f6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	3301      	adds	r3, #1
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3b6      	bcc.n	8001880 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f241 0314 	movw	r3, #4116	; 0x1014
 800191a:	4413      	add	r3, r2
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00d      	beq.n	8001942 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f241 0314 	movw	r3, #4116	; 0x1014
 800192e:	4413      	add	r3, r2
 8001930:	2204      	movs	r2, #4
 8001932:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f241 0304 	movw	r3, #4100	; 0x1004
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	ac02b00b 	.word	0xac02b00b
 8001964:	fffffa0c 	.word	0xfffffa0c

08001968 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800197e:	2302      	movs	r3, #2
 8001980:	e074      	b.n	8001a6c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001992:	e05a      	b.n	8001a4a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a8:	d10d      	bne.n	80019c6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
 80019c4:	e041      	b.n	8001a4a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	629a      	str	r2, [r3, #40]	; 0x28
 80019ea:	e02e      	b.n	8001a4a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d103      	bne.n	8001a0e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a1a:	1f1a      	subs	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	461a      	mov	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e010      	b.n	8001a6c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db02      	blt.n	8001a5a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d99c      	bls.n	8001994 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a88:	4413      	add	r3, r2
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d112      	bne.n	8001aba <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 fa6f 	bl	8005f78 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2240      	movs	r2, #64	; 0x40
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ab8:	e01b      	b.n	8001af2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ac2:	4413      	add	r3, r2
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d111      	bne.n	8001af2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f839 	bl	8001b46 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	f241 0314 	movw	r3, #4116	; 0x1014
 8001adc:	4413      	add	r3, r2
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001afa:	4413      	add	r3, r2
 8001afc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b00:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b0a:	4413      	add	r3, r2
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b16:	d112      	bne.n	8001b3e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f81e 	bl	8001b5a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b26:	4413      	add	r3, r2
 8001b28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b2c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	460b      	mov	r3, r1
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b82      	cmp	r3, #130	; 0x82
 8001b8e:	d101      	bne.n	8001b94 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
 8001b92:	e050      	b.n	8001c36 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2282      	movs	r2, #130	; 0x82
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f003 031c 	and.w	r3, r3, #28
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8a1b      	ldrh	r3, [r3, #16]
 8001bb0:	02db      	lsls	r3, r3, #11
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	019b      	lsls	r3, r3, #6
 8001bbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f023 0302 	bic.w	r3, r3, #2
 8001bce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001be0:	f7ff fa56 	bl	8001090 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001be6:	e015      	b.n	8001c14 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001be8:	f7ff fa52 	bl	8001090 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d309      	bcc.n	8001c0c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e014      	b.n	8001c36 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1e4      	bne.n	8001be8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	460b      	mov	r3, r1
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b42      	cmp	r3, #66	; 0x42
 8001c5e:	d101      	bne.n	8001c64 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c60:	2302      	movs	r3, #2
 8001c62:	e04e      	b.n	8001d02 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2242      	movs	r2, #66	; 0x42
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 031c 	and.w	r3, r3, #28
 8001c7a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8a1b      	ldrh	r3, [r3, #16]
 8001c80:	02db      	lsls	r3, r3, #11
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001cba:	f7ff f9e9 	bl	8001090 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cc0:	e015      	b.n	8001cee <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001cc2:	f7ff f9e5 	bl	8001090 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d309      	bcc.n	8001ce6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e00d      	b.n	8001d02 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e4      	bne.n	8001cc2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_ETH_Start+0x16>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e01f      	b.n	8001d60 <HAL_ETH_Start+0x56>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb45 	bl	80023c0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fb7c 	bl	8002434 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fc13 	bl	8002568 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fbb0 	bl	80024a8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fbdd 	bl	8002508 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_ETH_Stop+0x16>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e01f      	b.n	8001dbe <HAL_ETH_Stop+0x56>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fba2 	bl	80024d8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fbcf 	bl	8002538 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fb67 	bl	800246e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fbe1 	bl	8002568 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fb27 	bl	80023fa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_ETH_ConfigMAC+0x1c>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e0e4      	b.n	8001fae <HAL_ETH_ConfigMAC+0x1e6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80b1 	beq.w	8001f5e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4b6c      	ldr	r3, [pc, #432]	; (8001fb8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e14:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e1a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e20:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e26:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e2c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e32:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e38:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e3e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e44:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e4a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e50:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e56:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff f91a 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e84:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e8a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e90:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e96:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e9c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001ea2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001eae:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001eb0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7ff f8f4 	bl	80010a8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ed0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eda:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ef8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001efe:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f04:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f0a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f10:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff f8bd 	bl	80010a8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff f8aa 	bl	80010a8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	61da      	str	r2, [r3, #28]
 8001f5c:	e01e      	b.n	8001f9c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f6c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff f88a 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	ff20810f 	.word	0xff20810f

08001fbc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b0b0      	sub	sp, #192	; 0xc0
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fe0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002006:	663b      	str	r3, [r7, #96]	; 0x60
 8002008:	e001      	b.n	800200e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002018:	2300      	movs	r3, #0
 800201a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002090:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002094:	4bab      	ldr	r3, [pc, #684]	; (8002344 <ETH_MACDMAConfig+0x388>)
 8002096:	4013      	ands	r3, r2
 8002098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800209c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020a0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80020a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80020a4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80020a8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80020ae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80020b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80020b2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80020b6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80020bc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80020be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80020c0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80020c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80020c4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80020c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80020c8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80020ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80020cc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80020ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80020d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80020d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe ffd9 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002100:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002104:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002108:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800210a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800210e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002114:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800211a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800211c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002120:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002124:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800212c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800212e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe ffb4 	bl	80010a8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002148:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002152:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800215c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002170:	4013      	ands	r3, r2
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800217a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800217c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002180:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002186:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800218c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800218e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002192:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002198:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800219a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7fe ff75 	bl	80010a8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80021cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe ff60 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002200:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002204:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002216:	2304      	movs	r3, #4
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800221a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800222c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002236:	2300      	movs	r3, #0
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800223a:	2300      	movs	r3, #0
 800223c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f241 0318 	movw	r3, #4120	; 0x1018
 8002246:	4413      	add	r3, r2
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800224e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <ETH_MACDMAConfig+0x38c>)
 8002254:	4013      	ands	r3, r2
 8002256:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800225a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800225c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800225e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002260:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002262:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002264:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002266:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002268:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800226a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800226c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800226e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002270:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002272:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002276:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800227a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800227c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f241 0318 	movw	r3, #4120	; 0x1018
 800228e:	4413      	add	r3, r2
 8002290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002294:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f241 0318 	movw	r3, #4120	; 0x1018
 800229e:	4413      	add	r3, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f7fe fefe 	bl	80010a8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b4:	4413      	add	r3, r2
 80022b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ba:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022c0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80022c4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022c8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80022ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80022cc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80022ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80022d2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80022d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80022d6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe fed7 	bl	80010a8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002306:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10d      	bne.n	800232c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f241 031c 	movw	r3, #4124	; 0x101c
 8002318:	4413      	add	r3, r2
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6811      	ldr	r1, [r2, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <ETH_MACDMAConfig+0x390>)
 8002322:	431a      	orrs	r2, r3
 8002324:	f241 031c 	movw	r3, #4124	; 0x101c
 8002328:	440b      	add	r3, r1
 800232a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	461a      	mov	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f80b 	bl	8002350 <ETH_MACAddressConfig>
}
 800233a:	bf00      	nop
 800233c:	37c0      	adds	r7, #192	; 0xc0
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	ff20810f 	.word	0xff20810f
 8002348:	f8de3f23 	.word	0xf8de3f23
 800234c:	00010040 	.word	0x00010040

08002350 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3305      	adds	r3, #5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	3204      	adds	r2, #4
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <ETH_MACAddressConfig+0x68>)
 8002372:	4413      	add	r3, r2
 8002374:	461a      	mov	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3303      	adds	r3, #3
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	061a      	lsls	r2, r3, #24
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3302      	adds	r3, #2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	4313      	orrs	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	7812      	ldrb	r2, [r2, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <ETH_MACAddressConfig+0x6c>)
 80023a2:	4413      	add	r3, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	6013      	str	r3, [r2, #0]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40028040 	.word	0x40028040
 80023bc:	40028044 	.word	0x40028044

080023c0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0208 	orr.w	r2, r2, #8
 80023da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7fe fe5f 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800241e:	2001      	movs	r0, #1
 8002420:	f7fe fe42 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0204 	orr.w	r2, r2, #4
 800244e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002458:	2001      	movs	r0, #1
 800245a:	f7fe fe25 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0204 	bic.w	r2, r2, #4
 8002488:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002492:	2001      	movs	r0, #1
 8002494:	f7fe fe08 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	601a      	str	r2, [r3, #0]
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024b8:	4413      	add	r3, r2
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024c8:	440b      	add	r3, r1
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024e8:	4413      	add	r3, r2
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6811      	ldr	r1, [r2, #0]
 80024f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024f8:	440b      	add	r3, r1
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f241 0318 	movw	r3, #4120	; 0x1018
 8002518:	4413      	add	r3, r2
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6811      	ldr	r1, [r2, #0]
 8002520:	f043 0202 	orr.w	r2, r3, #2
 8002524:	f241 0318 	movw	r3, #4120	; 0x1018
 8002528:	440b      	add	r3, r1
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f241 0318 	movw	r3, #4120	; 0x1018
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6811      	ldr	r1, [r2, #0]
 8002550:	f023 0202 	bic.w	r2, r3, #2
 8002554:	f241 0318 	movw	r3, #4120	; 0x1018
 8002558:	440b      	add	r3, r1
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f241 0318 	movw	r3, #4120	; 0x1018
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6811      	ldr	r1, [r2, #0]
 8002584:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002588:	f241 0318 	movw	r3, #4120	; 0x1018
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f241 0318 	movw	r3, #4120	; 0x1018
 8002598:	4413      	add	r3, r2
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800259e:	2001      	movs	r0, #1
 80025a0:	f7fe fd82 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80025ae:	440b      	add	r3, r1
 80025b0:	601a      	str	r2, [r3, #0]
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e175      	b.n	80028c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 8164 	bne.w	80028c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d00b      	beq.n	800261a <HAL_GPIO_Init+0x5e>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800260e:	2b11      	cmp	r3, #17
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b12      	cmp	r3, #18
 8002618:	d130      	bne.n	800267c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 0201 	and.w	r2, r3, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x100>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b12      	cmp	r3, #18
 80026ba:	d123      	bne.n	8002704 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	08da      	lsrs	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3208      	adds	r2, #8
 80026c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	08da      	lsrs	r2, r3, #3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3208      	adds	r2, #8
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0203 	and.w	r2, r3, #3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80be 	beq.w	80028c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_GPIO_Init+0x324>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a65      	ldr	r2, [pc, #404]	; (80028e0 <HAL_GPIO_Init+0x324>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_GPIO_Init+0x324>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800275e:	4a61      	ldr	r2, [pc, #388]	; (80028e4 <HAL_GPIO_Init+0x328>)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_GPIO_Init+0x32c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d037      	beq.n	80027fa <HAL_GPIO_Init+0x23e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a57      	ldr	r2, [pc, #348]	; (80028ec <HAL_GPIO_Init+0x330>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d031      	beq.n	80027f6 <HAL_GPIO_Init+0x23a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x334>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d02b      	beq.n	80027f2 <HAL_GPIO_Init+0x236>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a55      	ldr	r2, [pc, #340]	; (80028f4 <HAL_GPIO_Init+0x338>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d025      	beq.n	80027ee <HAL_GPIO_Init+0x232>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a54      	ldr	r2, [pc, #336]	; (80028f8 <HAL_GPIO_Init+0x33c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d01f      	beq.n	80027ea <HAL_GPIO_Init+0x22e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a53      	ldr	r2, [pc, #332]	; (80028fc <HAL_GPIO_Init+0x340>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d019      	beq.n	80027e6 <HAL_GPIO_Init+0x22a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a52      	ldr	r2, [pc, #328]	; (8002900 <HAL_GPIO_Init+0x344>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d013      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a51      	ldr	r2, [pc, #324]	; (8002904 <HAL_GPIO_Init+0x348>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00d      	beq.n	80027de <HAL_GPIO_Init+0x222>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a50      	ldr	r2, [pc, #320]	; (8002908 <HAL_GPIO_Init+0x34c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x21e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4f      	ldr	r2, [pc, #316]	; (800290c <HAL_GPIO_Init+0x350>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_GPIO_Init+0x21a>
 80027d2:	2309      	movs	r3, #9
 80027d4:	e012      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027d6:	230a      	movs	r3, #10
 80027d8:	e010      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027da:	2308      	movs	r3, #8
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027de:	2307      	movs	r3, #7
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x240>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <HAL_GPIO_Init+0x328>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_GPIO_Init+0x354>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800283e:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002868:	4a29      	ldr	r2, [pc, #164]	; (8002910 <HAL_GPIO_Init+0x354>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_GPIO_Init+0x354>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_GPIO_Init+0x354>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_GPIO_Init+0x354>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae86 	bls.w	80025dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40022000 	.word	0x40022000
 800290c:	40022400 	.word	0x40022400
 8002910:	40013c00 	.word	0x40013c00

08002914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	807b      	strh	r3, [r7, #2]
 8002920:	4613      	mov	r3, r2
 8002922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002930:	e003      	b.n	800293a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	041a      	lsls	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002958:	887a      	ldrh	r2, [r7, #2]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	041a      	lsls	r2, r3, #16
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43d9      	mvns	r1, r3
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	400b      	ands	r3, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e07f      	b.n	8002a8e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd ff8c 	bl	80008c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	; 0x24
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	e006      	b.n	8002a04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d104      	bne.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_I2C_Init+0x11c>)
 8002a22:	430b      	orrs	r3, r1
 8002a24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	ea42 0103 	orr.w	r1, r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	02008000 	.word	0x02008000

08002a9c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	817b      	strh	r3, [r7, #10]
 8002aac:	4613      	mov	r3, r2
 8002aae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	f040 80da 	bne.w	8002c72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2C_Master_Transmit+0x30>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0d3      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1d8>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fadc 	bl	8001090 <HAL_GetTick>
 8002ad8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2319      	movs	r3, #25
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f9e6 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0be      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2221      	movs	r2, #33	; 0x21
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2210      	movs	r2, #16
 8002b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	893a      	ldrh	r2, [r7, #8]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2bff      	cmp	r3, #255	; 0xff
 8002b26:	d90e      	bls.n	8002b46 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	22ff      	movs	r2, #255	; 0xff
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	8979      	ldrh	r1, [r7, #10]
 8002b36:	4b51      	ldr	r3, [pc, #324]	; (8002c7c <HAL_I2C_Master_Transmit+0x1e0>)
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fb48 	bl	80031d4 <I2C_TransferConfig>
 8002b44:	e06c      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	8979      	ldrh	r1, [r7, #10]
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <HAL_I2C_Master_Transmit+0x1e0>)
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb37 	bl	80031d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b66:	e05b      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	6a39      	ldr	r1, [r7, #32]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f9e3 	bl	8002f38 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e07b      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d034      	beq.n	8002c20 <HAL_I2C_Master_Transmit+0x184>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d130      	bne.n	8002c20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f975 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e04d      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2bff      	cmp	r3, #255	; 0xff
 8002be0:	d90e      	bls.n	8002c00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	8979      	ldrh	r1, [r7, #10]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 faeb 	bl	80031d4 <I2C_TransferConfig>
 8002bfe:	e00f      	b.n	8002c20 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	8979      	ldrh	r1, [r7, #10]
 8002c12:	2300      	movs	r3, #0
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fada 	bl	80031d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d19e      	bne.n	8002b68 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	6a39      	ldr	r1, [r7, #32]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f9c2 	bl	8002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e01a      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2220      	movs	r2, #32
 8002c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c52:	400b      	ands	r3, r1
 8002c54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	80002000 	.word	0x80002000
 8002c80:	fe00e800 	.word	0xfe00e800

08002c84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	460b      	mov	r3, r1
 8002c92:	817b      	strh	r3, [r7, #10]
 8002c94:	4613      	mov	r3, r2
 8002c96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	f040 80db 	bne.w	8002e5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_I2C_Master_Receive+0x30>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0d4      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1da>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f9e8 	bl	8001090 <HAL_GetTick>
 8002cc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2319      	movs	r3, #25
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f8f2 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0bf      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2222      	movs	r2, #34	; 0x22
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2210      	movs	r2, #16
 8002cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	893a      	ldrh	r2, [r7, #8]
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2bff      	cmp	r3, #255	; 0xff
 8002d0e:	d90e      	bls.n	8002d2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	22ff      	movs	r2, #255	; 0xff
 8002d14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	8979      	ldrh	r1, [r7, #10]
 8002d1e:	4b52      	ldr	r3, [pc, #328]	; (8002e68 <HAL_I2C_Master_Receive+0x1e4>)
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa54 	bl	80031d4 <I2C_TransferConfig>
 8002d2c:	e06d      	b.n	8002e0a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	4b49      	ldr	r3, [pc, #292]	; (8002e68 <HAL_I2C_Master_Receive+0x1e4>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fa43 	bl	80031d4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d4e:	e05c      	b.n	8002e0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	6a39      	ldr	r1, [r7, #32]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f96b 	bl	8003030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e07c      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d034      	beq.n	8002e0a <HAL_I2C_Master_Receive+0x186>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d130      	bne.n	8002e0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f880 	bl	8002eb8 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e04d      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2bff      	cmp	r3, #255	; 0xff
 8002dca:	d90e      	bls.n	8002dea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	22ff      	movs	r2, #255	; 0xff
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f9f6 	bl	80031d4 <I2C_TransferConfig>
 8002de8:	e00f      	b.n	8002e0a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	8979      	ldrh	r1, [r7, #10]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f9e5 	bl	80031d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d19d      	bne.n	8002d50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	6a39      	ldr	r1, [r7, #32]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f8cd 	bl	8002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01a      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_I2C_Master_Receive+0x1e8>)
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	80002400 	.word	0x80002400
 8002e6c:	fe00e800 	.word	0xfe00e800

08002e70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	619a      	str	r2, [r3, #24]
  }
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec8:	e022      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ed0:	d01e      	beq.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe f8dd 	bl	8001090 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d113      	bne.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e00f      	b.n	8002f30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d0cd      	beq.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f44:	e02c      	b.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8dc 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02a      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f60:	d01e      	beq.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7fe f895 	bl	8001090 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d113      	bne.n	8002fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d1cb      	bne.n	8002f46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fc4:	e028      	b.n	8003018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 f89c 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e026      	b.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe f859 	bl	8001090 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d113      	bne.n	8003018 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b20      	cmp	r3, #32
 8003024:	d1cf      	bne.n	8002fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800303c:	e055      	b.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f860 	bl	8003108 <I2C_IsAcknowledgeFailed>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e053      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d129      	bne.n	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b04      	cmp	r3, #4
 800306c:	d105      	bne.n	800307a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e03f      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e022      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b4:	f7fd ffec 	bl	8001090 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d302      	bcc.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e007      	b.n	80030fa <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d1a2      	bne.n	800303e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	fe00e800 	.word	0xfe00e800

08003108 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b10      	cmp	r3, #16
 8003120:	d151      	bne.n	80031c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003122:	e022      	b.n	800316a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312a:	d01e      	beq.n	800316a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd ffb0 	bl	8001090 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <I2C_IsAcknowledgeFailed+0x3a>
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d113      	bne.n	800316a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e02e      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b20      	cmp	r3, #32
 8003176:	d1d5      	bne.n	8003124 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2220      	movs	r2, #32
 8003186:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe71 	bl	8002e70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800319a:	400b      	ands	r3, r1
 800319c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0204 	orr.w	r2, r3, #4
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	fe00e800 	.word	0xfe00e800

080031d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607b      	str	r3, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	817b      	strh	r3, [r7, #10]
 80031e2:	4613      	mov	r3, r2
 80031e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	0d5b      	lsrs	r3, r3, #21
 80031f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <I2C_TransferConfig+0x58>)
 80031f6:	430b      	orrs	r3, r1
 80031f8:	43db      	mvns	r3, r3
 80031fa:	ea02 0103 	and.w	r1, r2, r3
 80031fe:	897b      	ldrh	r3, [r7, #10]
 8003200:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003204:	7a7b      	ldrb	r3, [r7, #9]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	431a      	orrs	r2, r3
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	03ff63ff 	.word	0x03ff63ff

08003230 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	d138      	bne.n	80032b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e032      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003282:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d139      	bne.n	8003350 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e033      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2224      	movs	r2, #36	; 0x24
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003318:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800335e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003360:	b08f      	sub	sp, #60	; 0x3c
 8003362:	af0a      	add	r7, sp, #40	; 0x28
 8003364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e116      	b.n	800359e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fdda 	bl	8000f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2203      	movs	r2, #3
 8003394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 fa6c 	bl	800588c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	687e      	ldr	r6, [r7, #4]
 80033bc:	466d      	mov	r5, sp
 80033be:	f106 0410 	add.w	r4, r6, #16
 80033c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80033d2:	1d33      	adds	r3, r6, #4
 80033d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d6:	6838      	ldr	r0, [r7, #0]
 80033d8:	f002 fa00 	bl	80057dc <USB_CoreInit>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e0d7      	b.n	800359e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f002 fa5a 	bl	80058ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	e04a      	b.n	8003496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	333d      	adds	r3, #61	; 0x3d
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	333c      	adds	r3, #60	; 0x3c
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	b298      	uxth	r0, r3
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3342      	adds	r3, #66	; 0x42
 800343c:	4602      	mov	r2, r0
 800343e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	333f      	adds	r3, #63	; 0x3f
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3344      	adds	r3, #68	; 0x44
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3350      	adds	r3, #80	; 0x50
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	3301      	adds	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d3af      	bcc.n	8003400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e044      	b.n	8003530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	3301      	adds	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d3b5      	bcc.n	80034a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	687e      	ldr	r6, [r7, #4]
 8003542:	466d      	mov	r5, sp
 8003544:	f106 0410 	add.w	r4, r6, #16
 8003548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003554:	e885 0003 	stmia.w	r5, {r0, r1}
 8003558:	1d33      	adds	r3, r6, #4
 800355a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800355c:	6838      	ldr	r0, [r7, #0]
 800355e:	f002 f9d1 	bl	8005904 <USB_DevInit>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e014      	b.n	800359e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d102      	bne.n	8003592 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f80b 	bl	80035a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f002 fb83 	bl	8005ca2 <USB_DevDisconnect>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080035a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_PCDEx_ActivateLPM+0x44>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	10000003 	.word	0x10000003

080035f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40007000 	.word	0x40007000

08003610 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003632:	4b1e      	ldr	r3, [pc, #120]	; (80036ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1d      	ldr	r2, [pc, #116]	; (80036ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800363e:	f7fd fd27 	bl	8001090 <HAL_GetTick>
 8003642:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003644:	e009      	b.n	800365a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003646:	f7fd fd23 	bl	8001090 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003654:	d901      	bls.n	800365a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e022      	b.n	80036a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003666:	d1ee      	bne.n	8003646 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003672:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003674:	f7fd fd0c 	bl	8001090 <HAL_GetTick>
 8003678:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800367a:	e009      	b.n	8003690 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800367c:	f7fd fd08 	bl	8001090 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800368a:	d901      	bls.n	8003690 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e007      	b.n	80036a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800369c:	d1ee      	bne.n	800367c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40007000 	.word	0x40007000

080036b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e29b      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8087 	beq.w	80037e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d4:	4b96      	ldr	r3, [pc, #600]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d00c      	beq.n	80036fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e0:	4b93      	ldr	r3, [pc, #588]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d112      	bne.n	8003712 <HAL_RCC_OscConfig+0x62>
 80036ec:	4b90      	ldr	r3, [pc, #576]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f8:	d10b      	bne.n	8003712 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fa:	4b8d      	ldr	r3, [pc, #564]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d06c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x130>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d168      	bne.n	80037e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e275      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371a:	d106      	bne.n	800372a <HAL_RCC_OscConfig+0x7a>
 800371c:	4b84      	ldr	r3, [pc, #528]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a83      	ldr	r2, [pc, #524]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e02e      	b.n	8003788 <HAL_RCC_OscConfig+0xd8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x9c>
 8003732:	4b7f      	ldr	r3, [pc, #508]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a7e      	ldr	r2, [pc, #504]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b7c      	ldr	r3, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7b      	ldr	r2, [pc, #492]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e01d      	b.n	8003788 <HAL_RCC_OscConfig+0xd8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003754:	d10c      	bne.n	8003770 <HAL_RCC_OscConfig+0xc0>
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a75      	ldr	r2, [pc, #468]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	4b73      	ldr	r3, [pc, #460]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a72      	ldr	r2, [pc, #456]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e00b      	b.n	8003788 <HAL_RCC_OscConfig+0xd8>
 8003770:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6b      	ldr	r2, [pc, #428]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7fd fc7e 	bl	8001090 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fd fc7a 	bl	8001090 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e229      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b61      	ldr	r3, [pc, #388]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0xe8>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fc6a 	bl	8001090 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fd fc66 	bl	8001090 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e215      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	4b57      	ldr	r3, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x110>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d069      	beq.n	80038c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ee:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fa:	4b4d      	ldr	r3, [pc, #308]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d11c      	bne.n	8003840 <HAL_RCC_OscConfig+0x190>
 8003806:	4b4a      	ldr	r3, [pc, #296]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d116      	bne.n	8003840 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_RCC_OscConfig+0x17a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e1e9      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	493d      	ldr	r1, [pc, #244]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	e040      	b.n	80038c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d023      	beq.n	8003890 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fd fc1c 	bl	8001090 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fd fc18 	bl	8001090 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1c7      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4929      	ldr	r1, [pc, #164]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]
 800388e:	e018      	b.n	80038c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd fbf8 	bl	8001090 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fd fbf4 	bl	8001090 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1a3      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d038      	beq.n	8003940 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d019      	beq.n	800390a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fd fbd5 	bl	8001090 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ea:	f7fd fbd1 	bl	8001090 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e180      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fc:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f0      	beq.n	80038ea <HAL_RCC_OscConfig+0x23a>
 8003908:	e01a      	b.n	8003940 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 800390c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390e:	4a08      	ldr	r2, [pc, #32]	; (8003930 <HAL_RCC_OscConfig+0x280>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fd fbbb 	bl	8001090 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391e:	f7fd fbb7 	bl	8001090 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d903      	bls.n	8003934 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e166      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
 8003930:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b92      	ldr	r3, [pc, #584]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ee      	bne.n	800391e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80a4 	beq.w	8003a96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b8c      	ldr	r3, [pc, #560]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4b89      	ldr	r3, [pc, #548]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a88      	ldr	r2, [pc, #544]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b86      	ldr	r3, [pc, #536]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003976:	4b83      	ldr	r3, [pc, #524]	; (8003b84 <HAL_RCC_OscConfig+0x4d4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003982:	4b80      	ldr	r3, [pc, #512]	; (8003b84 <HAL_RCC_OscConfig+0x4d4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7f      	ldr	r2, [pc, #508]	; (8003b84 <HAL_RCC_OscConfig+0x4d4>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fd fb7f 	bl	8001090 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fd fb7b 	bl	8001090 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b64      	cmp	r3, #100	; 0x64
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e12a      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a8:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0x4d4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x31a>
 80039bc:	4b70      	ldr	r3, [pc, #448]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a6f      	ldr	r2, [pc, #444]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	e02d      	b.n	8003a26 <HAL_RCC_OscConfig+0x376>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x33c>
 80039d2:	4b6b      	ldr	r3, [pc, #428]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	4b68      	ldr	r3, [pc, #416]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x376>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x35e>
 80039f4:	4b62      	ldr	r3, [pc, #392]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a5e      	ldr	r2, [pc, #376]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x376>
 8003a0e:	4b5c      	ldr	r3, [pc, #368]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fd fb2f 	bl	8001090 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fd fb2b 	bl	8001090 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x386>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fb19 	bl	8001090 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fd fb15 	bl	8001090 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e0c2      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b3d      	ldr	r3, [pc, #244]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a3c      	ldr	r2, [pc, #240]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80ae 	beq.w	8003bfc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa0:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d06d      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d14b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fae6 	bl	8001090 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fd fae2 	bl	8001090 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e091      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	085b      	lsrs	r3, r3, #1
 8003afe:	3b01      	subs	r3, #1
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	071b      	lsls	r3, r3, #28
 8003b12:	491b      	ldr	r1, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b18:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fab4 	bl	8001090 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd fab0 	bl	8001090 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e05f      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x47c>
 8003b4a:	e057      	b.n	8003bfc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fa9a 	bl	8001090 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fd fa96 	bl	8001090 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e045      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b72:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_OscConfig+0x4d0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4b0>
 8003b7e:	e03d      	b.n	8003bfc <HAL_RCC_OscConfig+0x54c>
 8003b80:	40023800 	.word	0x40023800
 8003b84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b88:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <HAL_RCC_OscConfig+0x558>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d030      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d129      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d122      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d119      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0d0      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c24:	4b6a      	ldr	r3, [pc, #424]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d910      	bls.n	8003c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 020f 	bic.w	r2, r3, #15
 8003c3a:	4965      	ldr	r1, [pc, #404]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0b8      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6c:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c84:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	494d      	ldr	r1, [pc, #308]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d040      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d115      	bne.n	8003cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e07f      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d107      	bne.n	8003cde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e073      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cde:	4b3d      	ldr	r3, [pc, #244]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06b      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0203 	bic.w	r2, r3, #3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4936      	ldr	r1, [pc, #216]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d00:	f7fd f9c6 	bl	8001090 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d08:	f7fd f9c2 	bl	8001090 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e053      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 020c 	and.w	r2, r3, #12
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d1eb      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d210      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 020f 	bic.w	r2, r3, #15
 8003d46:	4922      	ldr	r1, [pc, #136]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e032      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d9e:	f000 f821 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	490a      	ldr	r1, [pc, #40]	; (8003dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003db0:	5ccb      	ldrb	r3, [r1, r3]
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1d0>)
 8003db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1d4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc fec2 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	0801c788 	.word	0x0801c788
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	20000004 	.word	0x20000004

08003de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	2300      	movs	r3, #0
 8003df6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dfc:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d00d      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x40>
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	f200 80bd 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x34>
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e16:	e0b7      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b61      	ldr	r3, [pc, #388]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e1a:	60bb      	str	r3, [r7, #8]
      break;
 8003e1c:	e0b7      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e1e:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003e20:	60bb      	str	r3, [r7, #8]
      break;
 8003e22:	e0b4      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e24:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d04d      	beq.n	8003ed6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3a:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	461a      	mov	r2, r3
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	ea02 0800 	and.w	r8, r2, r0
 8003e52:	ea03 0901 	and.w	r9, r3, r1
 8003e56:	4640      	mov	r0, r8
 8003e58:	4649      	mov	r1, r9
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	014b      	lsls	r3, r1, #5
 8003e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e68:	0142      	lsls	r2, r0, #5
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	ebb0 0008 	subs.w	r0, r0, r8
 8003e72:	eb61 0109 	sbc.w	r1, r1, r9
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	018b      	lsls	r3, r1, #6
 8003e80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e84:	0182      	lsls	r2, r0, #6
 8003e86:	1a12      	subs	r2, r2, r0
 8003e88:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8c:	f04f 0000 	mov.w	r0, #0
 8003e90:	f04f 0100 	mov.w	r1, #0
 8003e94:	00d9      	lsls	r1, r3, #3
 8003e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e9a:	00d0      	lsls	r0, r2, #3
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	eb12 0208 	adds.w	r2, r2, r8
 8003ea4:	eb43 0309 	adc.w	r3, r3, r9
 8003ea8:	f04f 0000 	mov.w	r0, #0
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	0259      	lsls	r1, r3, #9
 8003eb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003eb6:	0250      	lsls	r0, r2, #9
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	f7fc fa12 	bl	80002f0 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e04a      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	099b      	lsrs	r3, r3, #6
 8003edc:	461a      	mov	r2, r3
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	ea02 0400 	and.w	r4, r2, r0
 8003eee:	ea03 0501 	and.w	r5, r3, r1
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	014b      	lsls	r3, r1, #5
 8003f00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f04:	0142      	lsls	r2, r0, #5
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	1b00      	subs	r0, r0, r4
 8003f0c:	eb61 0105 	sbc.w	r1, r1, r5
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	018b      	lsls	r3, r1, #6
 8003f1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f1e:	0182      	lsls	r2, r0, #6
 8003f20:	1a12      	subs	r2, r2, r0
 8003f22:	eb63 0301 	sbc.w	r3, r3, r1
 8003f26:	f04f 0000 	mov.w	r0, #0
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	00d9      	lsls	r1, r3, #3
 8003f30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f34:	00d0      	lsls	r0, r2, #3
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	1912      	adds	r2, r2, r4
 8003f3c:	eb45 0303 	adc.w	r3, r5, r3
 8003f40:	f04f 0000 	mov.w	r0, #0
 8003f44:	f04f 0100 	mov.w	r1, #0
 8003f48:	0299      	lsls	r1, r3, #10
 8003f4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f4e:	0290      	lsls	r0, r2, #10
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	f7fc f9c6 	bl	80002f0 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	60bb      	str	r3, [r7, #8]
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f8a:	60bb      	str	r3, [r7, #8]
      break;
 8003f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	0801c798 	.word	0x0801c798

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	0801c798 	.word	0x0801c798

08004010 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	220f      	movs	r2, #15
 800401e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_GetClockConfig+0x5c>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0203 	and.w	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_GetClockConfig+0x5c>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004038:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_RCC_GetClockConfig+0x5c>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004044:	4b09      	ldr	r3, [pc, #36]	; (800406c <HAL_RCC_GetClockConfig+0x5c>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_RCC_GetClockConfig+0x60>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	601a      	str	r2, [r3, #0]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	40023c00 	.word	0x40023c00

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800409c:	4b69      	ldr	r3, [pc, #420]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a68      	ldr	r2, [pc, #416]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040a6:	6093      	str	r3, [r2, #8]
 80040a8:	4b66      	ldr	r3, [pc, #408]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	4964      	ldr	r1, [pc, #400]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040be:	2301      	movs	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d017      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040ce:	4b5d      	ldr	r3, [pc, #372]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	4959      	ldr	r1, [pc, #356]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800410a:	4b4e      	ldr	r3, [pc, #312]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004110:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	494a      	ldr	r1, [pc, #296]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004136:	2301      	movs	r3, #1
 8004138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 808b 	beq.w	800426e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	4a39      	ldr	r2, [pc, #228]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	6413      	str	r3, [r2, #64]	; 0x40
 8004164:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004170:	4b35      	ldr	r3, [pc, #212]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a34      	ldr	r2, [pc, #208]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fc ff88 	bl	8001090 <HAL_GetTick>
 8004180:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004184:	f7fc ff84 	bl	8001090 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e38f      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041a2:	4b28      	ldr	r3, [pc, #160]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d035      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d02e      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c0:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041e2:	4a18      	ldr	r2, [pc, #96]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d114      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fc ff4c 	bl	8001090 <HAL_GetTick>
 80041f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fc ff48 	bl	8001090 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e351      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422a:	d111      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800423a:	400b      	ands	r3, r1
 800423c:	4901      	ldr	r1, [pc, #4]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
 8004242:	e00b      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004244:	40023800 	.word	0x40023800
 8004248:	40007000 	.word	0x40007000
 800424c:	0ffffcff 	.word	0x0ffffcff
 8004250:	4bb3      	ldr	r3, [pc, #716]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4ab2      	ldr	r2, [pc, #712]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004256:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800425a:	6093      	str	r3, [r2, #8]
 800425c:	4bb0      	ldr	r3, [pc, #704]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800425e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004268:	49ad      	ldr	r1, [pc, #692]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426a:	4313      	orrs	r3, r2
 800426c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	2b00      	cmp	r3, #0
 8004278:	d010      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800427a:	4ba9      	ldr	r3, [pc, #676]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004280:	4aa7      	ldr	r2, [pc, #668]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004286:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800428a:	4ba5      	ldr	r3, [pc, #660]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800428c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	49a2      	ldr	r1, [pc, #648]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a8:	4b9d      	ldr	r3, [pc, #628]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042b6:	499a      	ldr	r1, [pc, #616]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ca:	4b95      	ldr	r3, [pc, #596]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d8:	4991      	ldr	r1, [pc, #580]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ec:	4b8c      	ldr	r3, [pc, #560]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fa:	4989      	ldr	r1, [pc, #548]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800430e:	4b84      	ldr	r3, [pc, #528]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004314:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4980      	ldr	r1, [pc, #512]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800431e:	4313      	orrs	r3, r2
 8004320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004330:	4b7b      	ldr	r3, [pc, #492]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004336:	f023 0203 	bic.w	r2, r3, #3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	4978      	ldr	r1, [pc, #480]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004352:	4b73      	ldr	r3, [pc, #460]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f023 020c 	bic.w	r2, r3, #12
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004360:	496f      	ldr	r1, [pc, #444]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004374:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	4967      	ldr	r1, [pc, #412]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004396:	4b62      	ldr	r3, [pc, #392]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	495e      	ldr	r1, [pc, #376]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043b8:	4b59      	ldr	r3, [pc, #356]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	4956      	ldr	r1, [pc, #344]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043da:	4b51      	ldr	r3, [pc, #324]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	494d      	ldr	r1, [pc, #308]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043fc:	4b48      	ldr	r3, [pc, #288]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004402:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	4945      	ldr	r1, [pc, #276]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800442c:	493c      	ldr	r1, [pc, #240]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004440:	4b37      	ldr	r3, [pc, #220]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004446:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444e:	4934      	ldr	r1, [pc, #208]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004462:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004470:	492b      	ldr	r1, [pc, #172]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004492:	2301      	movs	r3, #1
 8004494:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044a2:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b0:	491b      	ldr	r1, [pc, #108]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044c4:	4b16      	ldr	r3, [pc, #88]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d4:	4912      	ldr	r1, [pc, #72]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80044e8:	4b0d      	ldr	r3, [pc, #52]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f8:	4909      	ldr	r1, [pc, #36]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004512:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800
 8004524:	4986      	ldr	r1, [pc, #536]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004538:	4b81      	ldr	r3, [pc, #516]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004548:	497d      	ldr	r1, [pc, #500]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d006      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80d6 	beq.w	8004710 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004564:	4b76      	ldr	r3, [pc, #472]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a75      	ldr	r2, [pc, #468]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800456e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004570:	f7fc fd8e 	bl	8001090 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004578:	f7fc fd8a 	bl	8001090 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e195      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800458a:	4b6d      	ldr	r3, [pc, #436]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d021      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045aa:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045b8:	4b61      	ldr	r3, [pc, #388]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045be:	0e1b      	lsrs	r3, r3, #24
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	019a      	lsls	r2, r3, #6
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	041b      	lsls	r3, r3, #16
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	061b      	lsls	r3, r3, #24
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	071b      	lsls	r3, r3, #28
 80045de:	4958      	ldr	r1, [pc, #352]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02e      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004610:	d129      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004612:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004620:	4b47      	ldr	r3, [pc, #284]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004626:	0f1b      	lsrs	r3, r3, #28
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	019a      	lsls	r2, r3, #6
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	061b      	lsls	r3, r3, #24
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	071b      	lsls	r3, r3, #28
 8004646:	493e      	ldr	r1, [pc, #248]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800464e:	4b3c      	ldr	r3, [pc, #240]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004654:	f023 021f 	bic.w	r2, r3, #31
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	3b01      	subs	r3, #1
 800465e:	4938      	ldr	r1, [pc, #224]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01d      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004672:	4b33      	ldr	r3, [pc, #204]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004678:	0e1b      	lsrs	r3, r3, #24
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004680:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	0f1b      	lsrs	r3, r3, #28
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	019a      	lsls	r2, r3, #6
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	041b      	lsls	r3, r3, #16
 800469a:	431a      	orrs	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	071b      	lsls	r3, r3, #28
 80046a6:	4926      	ldr	r1, [pc, #152]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d011      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	019a      	lsls	r2, r3, #6
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	041b      	lsls	r3, r3, #16
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	061b      	lsls	r3, r3, #24
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	491a      	ldr	r1, [pc, #104]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ea:	f7fc fcd1 	bl	8001090 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046f2:	f7fc fccd 	bl	8001090 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b64      	cmp	r3, #100	; 0x64
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0d8      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004704:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b01      	cmp	r3, #1
 8004714:	f040 80ce 	bne.w	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a08      	ldr	r2, [pc, #32]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004724:	f7fc fcb4 	bl	8001090 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800472a:	e00b      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800472c:	f7fc fcb0 	bl	8001090 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d904      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0bb      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004744:	4b5e      	ldr	r3, [pc, #376]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800474c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004750:	d0ec      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800476e:	2b00      	cmp	r3, #0
 8004770:	d02e      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d12a      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800477a:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004788:	4b4d      	ldr	r3, [pc, #308]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	0f1b      	lsrs	r3, r3, #28
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	019a      	lsls	r2, r3, #6
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	041b      	lsls	r3, r3, #16
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	061b      	lsls	r3, r3, #24
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	071b      	lsls	r3, r3, #28
 80047ae:	4944      	ldr	r1, [pc, #272]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047b6:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	3b01      	subs	r3, #1
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	493d      	ldr	r1, [pc, #244]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d022      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047e4:	d11d      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047e6:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	0e1b      	lsrs	r3, r3, #24
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	0f1b      	lsrs	r3, r3, #28
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	019a      	lsls	r2, r3, #6
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	431a      	orrs	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	4929      	ldr	r1, [pc, #164]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d028      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800482e:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800483c:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	019a      	lsls	r2, r3, #6
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	041b      	lsls	r3, r3, #16
 8004854:	431a      	orrs	r2, r3
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	071b      	lsls	r3, r3, #28
 8004862:	4917      	ldr	r1, [pc, #92]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004870:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	4911      	ldr	r1, [pc, #68]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0e      	ldr	r2, [pc, #56]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488c:	f7fc fc00 	bl	8001090 <HAL_GetTick>
 8004890:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004894:	f7fc fbfc 	bl	8001090 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e007      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048b2:	d1ef      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3720      	adds	r7, #32
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800

080048c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e049      	b.n	800496a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f841 	bl	8004972 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3304      	adds	r3, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4610      	mov	r0, r2
 8004904:	f000 fa00 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d001      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e054      	b.n	8004a4a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a26      	ldr	r2, [pc, #152]	; (8004a58 <HAL_TIM_Base_Start_IT+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d022      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ca:	d01d      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a22      	ldr	r2, [pc, #136]	; (8004a5c <HAL_TIM_Base_Start_IT+0xd4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d018      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <HAL_TIM_Base_Start_IT+0xd8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <HAL_TIM_Base_Start_IT+0xdc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00e      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <HAL_TIM_Base_Start_IT+0xe0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d009      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <HAL_TIM_Base_Start_IT+0xe4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_Base_Start_IT+0x80>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d115      	bne.n	8004a34 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_TIM_Base_Start_IT+0xec>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d015      	beq.n	8004a46 <HAL_TIM_Base_Start_IT+0xbe>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d011      	beq.n	8004a46 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0201 	orr.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a32:	e008      	b.n	8004a46 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e000      	b.n	8004a48 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40010400 	.word	0x40010400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40001800 	.word	0x40001800
 8004a74:	00010007 	.word	0x00010007

08004a78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0202 	mvn.w	r2, #2
 8004aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f905 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8f7 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f908 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0204 	mvn.w	r2, #4
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f8db 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8cd 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f8de 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0208 	mvn.w	r2, #8
 8004b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8b1 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8a3 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8b4 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0210 	mvn.w	r2, #16
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f887 	bl	8004cca <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f879 	bl	8004cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f88a 	bl	8004cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0201 	mvn.w	r2, #1
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fb ff66 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d10e      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c14:	2b80      	cmp	r3, #128	; 0x80
 8004c16:	d107      	bne.n	8004c28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f91a 	bl	8004e5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c36:	d10e      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d107      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f90d 	bl	8004e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f838 	bl	8004cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d10e      	bne.n	8004cae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d107      	bne.n	8004cae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f06f 0220 	mvn.w	r2, #32
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f8cd 	bl	8004e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a40      	ldr	r2, [pc, #256]	; (8004e1c <TIM_Base_SetConfig+0x114>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d00f      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a3d      	ldr	r2, [pc, #244]	; (8004e20 <TIM_Base_SetConfig+0x118>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a3c      	ldr	r2, [pc, #240]	; (8004e24 <TIM_Base_SetConfig+0x11c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3b      	ldr	r2, [pc, #236]	; (8004e28 <TIM_Base_SetConfig+0x120>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3a      	ldr	r2, [pc, #232]	; (8004e2c <TIM_Base_SetConfig+0x124>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d108      	bne.n	8004d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <TIM_Base_SetConfig+0x114>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d02b      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d68:	d027      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <TIM_Base_SetConfig+0x118>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d023      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <TIM_Base_SetConfig+0x11c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01f      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2a      	ldr	r2, [pc, #168]	; (8004e28 <TIM_Base_SetConfig+0x120>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01b      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <TIM_Base_SetConfig+0x124>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d017      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a28      	ldr	r2, [pc, #160]	; (8004e30 <TIM_Base_SetConfig+0x128>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <TIM_Base_SetConfig+0x12c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00f      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <TIM_Base_SetConfig+0x130>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a25      	ldr	r2, [pc, #148]	; (8004e3c <TIM_Base_SetConfig+0x134>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a24      	ldr	r2, [pc, #144]	; (8004e40 <TIM_Base_SetConfig+0x138>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <TIM_Base_SetConfig+0x13c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <TIM_Base_SetConfig+0x114>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <TIM_Base_SetConfig+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d103      	bne.n	8004e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]
}
 8004e0e:	bf00      	nop
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40010400 	.word	0x40010400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800
 8004e3c:	40001800 	.word	0x40001800
 8004e40:	40001c00 	.word	0x40001c00
 8004e44:	40002000 	.word	0x40002000

08004e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e040      	b.n	8004f18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fb ffda 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2224      	movs	r2, #36	; 0x24
 8004eb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8c0 	bl	8005048 <UART_SetConfig>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e022      	b.n	8004f18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fb16 	bl	800550c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fb9d 	bl	8005650 <UART_CheckIdleState>
 8004f16:	4603      	mov	r3, r0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	f040 8081 	bne.w	800503c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_UART_Transmit+0x26>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e079      	b.n	800503e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_UART_Transmit+0x38>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e072      	b.n	800503e <HAL_UART_Transmit+0x11e>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2221      	movs	r2, #33	; 0x21
 8004f6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6e:	f7fc f88f 	bl	8001090 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	d108      	bne.n	8004fa0 <HAL_UART_Transmit+0x80>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d104      	bne.n	8004fa0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e003      	b.n	8004fa8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fb0:	e02c      	b.n	800500c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fb90 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e038      	b.n	800503e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10b      	bne.n	8004fea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e007      	b.n	8004ffa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1cc      	bne.n	8004fb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2200      	movs	r2, #0
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb5d 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e005      	b.n	800503e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	e000      	b.n	800503e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800503c:	2302      	movs	r3, #2
  }
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4ba7      	ldr	r3, [pc, #668]	; (8005310 <UART_SetConfig+0x2c8>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	6979      	ldr	r1, [r7, #20]
 800507c:	430b      	orrs	r3, r1
 800507e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a95      	ldr	r2, [pc, #596]	; (8005314 <UART_SetConfig+0x2cc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d120      	bne.n	8005106 <UART_SetConfig+0xbe>
 80050c4:	4b94      	ldr	r3, [pc, #592]	; (8005318 <UART_SetConfig+0x2d0>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d816      	bhi.n	8005100 <UART_SetConfig+0xb8>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <UART_SetConfig+0x90>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050f5 	.word	0x080050f5
 80050e0:	080050ef 	.word	0x080050ef
 80050e4:	080050fb 	.word	0x080050fb
 80050e8:	2301      	movs	r3, #1
 80050ea:	77fb      	strb	r3, [r7, #31]
 80050ec:	e14f      	b.n	800538e <UART_SetConfig+0x346>
 80050ee:	2302      	movs	r3, #2
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e14c      	b.n	800538e <UART_SetConfig+0x346>
 80050f4:	2304      	movs	r3, #4
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e149      	b.n	800538e <UART_SetConfig+0x346>
 80050fa:	2308      	movs	r3, #8
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e146      	b.n	800538e <UART_SetConfig+0x346>
 8005100:	2310      	movs	r3, #16
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e143      	b.n	800538e <UART_SetConfig+0x346>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a84      	ldr	r2, [pc, #528]	; (800531c <UART_SetConfig+0x2d4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d132      	bne.n	8005176 <UART_SetConfig+0x12e>
 8005110:	4b81      	ldr	r3, [pc, #516]	; (8005318 <UART_SetConfig+0x2d0>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d828      	bhi.n	8005170 <UART_SetConfig+0x128>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0xdc>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005159 	.word	0x08005159
 8005128:	08005171 	.word	0x08005171
 800512c:	08005171 	.word	0x08005171
 8005130:	08005171 	.word	0x08005171
 8005134:	08005165 	.word	0x08005165
 8005138:	08005171 	.word	0x08005171
 800513c:	08005171 	.word	0x08005171
 8005140:	08005171 	.word	0x08005171
 8005144:	0800515f 	.word	0x0800515f
 8005148:	08005171 	.word	0x08005171
 800514c:	08005171 	.word	0x08005171
 8005150:	08005171 	.word	0x08005171
 8005154:	0800516b 	.word	0x0800516b
 8005158:	2300      	movs	r3, #0
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e117      	b.n	800538e <UART_SetConfig+0x346>
 800515e:	2302      	movs	r3, #2
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e114      	b.n	800538e <UART_SetConfig+0x346>
 8005164:	2304      	movs	r3, #4
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e111      	b.n	800538e <UART_SetConfig+0x346>
 800516a:	2308      	movs	r3, #8
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e10e      	b.n	800538e <UART_SetConfig+0x346>
 8005170:	2310      	movs	r3, #16
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e10b      	b.n	800538e <UART_SetConfig+0x346>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a69      	ldr	r2, [pc, #420]	; (8005320 <UART_SetConfig+0x2d8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d120      	bne.n	80051c2 <UART_SetConfig+0x17a>
 8005180:	4b65      	ldr	r3, [pc, #404]	; (8005318 <UART_SetConfig+0x2d0>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800518a:	2b30      	cmp	r3, #48	; 0x30
 800518c:	d013      	beq.n	80051b6 <UART_SetConfig+0x16e>
 800518e:	2b30      	cmp	r3, #48	; 0x30
 8005190:	d814      	bhi.n	80051bc <UART_SetConfig+0x174>
 8005192:	2b20      	cmp	r3, #32
 8005194:	d009      	beq.n	80051aa <UART_SetConfig+0x162>
 8005196:	2b20      	cmp	r3, #32
 8005198:	d810      	bhi.n	80051bc <UART_SetConfig+0x174>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <UART_SetConfig+0x15c>
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d006      	beq.n	80051b0 <UART_SetConfig+0x168>
 80051a2:	e00b      	b.n	80051bc <UART_SetConfig+0x174>
 80051a4:	2300      	movs	r3, #0
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e0f1      	b.n	800538e <UART_SetConfig+0x346>
 80051aa:	2302      	movs	r3, #2
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e0ee      	b.n	800538e <UART_SetConfig+0x346>
 80051b0:	2304      	movs	r3, #4
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e0eb      	b.n	800538e <UART_SetConfig+0x346>
 80051b6:	2308      	movs	r3, #8
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e0e8      	b.n	800538e <UART_SetConfig+0x346>
 80051bc:	2310      	movs	r3, #16
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e0e5      	b.n	800538e <UART_SetConfig+0x346>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a57      	ldr	r2, [pc, #348]	; (8005324 <UART_SetConfig+0x2dc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d120      	bne.n	800520e <UART_SetConfig+0x1c6>
 80051cc:	4b52      	ldr	r3, [pc, #328]	; (8005318 <UART_SetConfig+0x2d0>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051d6:	2bc0      	cmp	r3, #192	; 0xc0
 80051d8:	d013      	beq.n	8005202 <UART_SetConfig+0x1ba>
 80051da:	2bc0      	cmp	r3, #192	; 0xc0
 80051dc:	d814      	bhi.n	8005208 <UART_SetConfig+0x1c0>
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d009      	beq.n	80051f6 <UART_SetConfig+0x1ae>
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d810      	bhi.n	8005208 <UART_SetConfig+0x1c0>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <UART_SetConfig+0x1a8>
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d006      	beq.n	80051fc <UART_SetConfig+0x1b4>
 80051ee:	e00b      	b.n	8005208 <UART_SetConfig+0x1c0>
 80051f0:	2300      	movs	r3, #0
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	e0cb      	b.n	800538e <UART_SetConfig+0x346>
 80051f6:	2302      	movs	r3, #2
 80051f8:	77fb      	strb	r3, [r7, #31]
 80051fa:	e0c8      	b.n	800538e <UART_SetConfig+0x346>
 80051fc:	2304      	movs	r3, #4
 80051fe:	77fb      	strb	r3, [r7, #31]
 8005200:	e0c5      	b.n	800538e <UART_SetConfig+0x346>
 8005202:	2308      	movs	r3, #8
 8005204:	77fb      	strb	r3, [r7, #31]
 8005206:	e0c2      	b.n	800538e <UART_SetConfig+0x346>
 8005208:	2310      	movs	r3, #16
 800520a:	77fb      	strb	r3, [r7, #31]
 800520c:	e0bf      	b.n	800538e <UART_SetConfig+0x346>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a45      	ldr	r2, [pc, #276]	; (8005328 <UART_SetConfig+0x2e0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d125      	bne.n	8005264 <UART_SetConfig+0x21c>
 8005218:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <UART_SetConfig+0x2d0>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005226:	d017      	beq.n	8005258 <UART_SetConfig+0x210>
 8005228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522c:	d817      	bhi.n	800525e <UART_SetConfig+0x216>
 800522e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005232:	d00b      	beq.n	800524c <UART_SetConfig+0x204>
 8005234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005238:	d811      	bhi.n	800525e <UART_SetConfig+0x216>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <UART_SetConfig+0x1fe>
 800523e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005242:	d006      	beq.n	8005252 <UART_SetConfig+0x20a>
 8005244:	e00b      	b.n	800525e <UART_SetConfig+0x216>
 8005246:	2300      	movs	r3, #0
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e0a0      	b.n	800538e <UART_SetConfig+0x346>
 800524c:	2302      	movs	r3, #2
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e09d      	b.n	800538e <UART_SetConfig+0x346>
 8005252:	2304      	movs	r3, #4
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e09a      	b.n	800538e <UART_SetConfig+0x346>
 8005258:	2308      	movs	r3, #8
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	e097      	b.n	800538e <UART_SetConfig+0x346>
 800525e:	2310      	movs	r3, #16
 8005260:	77fb      	strb	r3, [r7, #31]
 8005262:	e094      	b.n	800538e <UART_SetConfig+0x346>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a30      	ldr	r2, [pc, #192]	; (800532c <UART_SetConfig+0x2e4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d125      	bne.n	80052ba <UART_SetConfig+0x272>
 800526e:	4b2a      	ldr	r3, [pc, #168]	; (8005318 <UART_SetConfig+0x2d0>)
 8005270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005274:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005278:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800527c:	d017      	beq.n	80052ae <UART_SetConfig+0x266>
 800527e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005282:	d817      	bhi.n	80052b4 <UART_SetConfig+0x26c>
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d00b      	beq.n	80052a2 <UART_SetConfig+0x25a>
 800528a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528e:	d811      	bhi.n	80052b4 <UART_SetConfig+0x26c>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <UART_SetConfig+0x254>
 8005294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005298:	d006      	beq.n	80052a8 <UART_SetConfig+0x260>
 800529a:	e00b      	b.n	80052b4 <UART_SetConfig+0x26c>
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e075      	b.n	800538e <UART_SetConfig+0x346>
 80052a2:	2302      	movs	r3, #2
 80052a4:	77fb      	strb	r3, [r7, #31]
 80052a6:	e072      	b.n	800538e <UART_SetConfig+0x346>
 80052a8:	2304      	movs	r3, #4
 80052aa:	77fb      	strb	r3, [r7, #31]
 80052ac:	e06f      	b.n	800538e <UART_SetConfig+0x346>
 80052ae:	2308      	movs	r3, #8
 80052b0:	77fb      	strb	r3, [r7, #31]
 80052b2:	e06c      	b.n	800538e <UART_SetConfig+0x346>
 80052b4:	2310      	movs	r3, #16
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e069      	b.n	800538e <UART_SetConfig+0x346>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <UART_SetConfig+0x2e8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d137      	bne.n	8005334 <UART_SetConfig+0x2ec>
 80052c4:	4b14      	ldr	r3, [pc, #80]	; (8005318 <UART_SetConfig+0x2d0>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052d2:	d017      	beq.n	8005304 <UART_SetConfig+0x2bc>
 80052d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052d8:	d817      	bhi.n	800530a <UART_SetConfig+0x2c2>
 80052da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052de:	d00b      	beq.n	80052f8 <UART_SetConfig+0x2b0>
 80052e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e4:	d811      	bhi.n	800530a <UART_SetConfig+0x2c2>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <UART_SetConfig+0x2aa>
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d006      	beq.n	80052fe <UART_SetConfig+0x2b6>
 80052f0:	e00b      	b.n	800530a <UART_SetConfig+0x2c2>
 80052f2:	2300      	movs	r3, #0
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e04a      	b.n	800538e <UART_SetConfig+0x346>
 80052f8:	2302      	movs	r3, #2
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e047      	b.n	800538e <UART_SetConfig+0x346>
 80052fe:	2304      	movs	r3, #4
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e044      	b.n	800538e <UART_SetConfig+0x346>
 8005304:	2308      	movs	r3, #8
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e041      	b.n	800538e <UART_SetConfig+0x346>
 800530a:	2310      	movs	r3, #16
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e03e      	b.n	800538e <UART_SetConfig+0x346>
 8005310:	efff69f3 	.word	0xefff69f3
 8005314:	40011000 	.word	0x40011000
 8005318:	40023800 	.word	0x40023800
 800531c:	40004400 	.word	0x40004400
 8005320:	40004800 	.word	0x40004800
 8005324:	40004c00 	.word	0x40004c00
 8005328:	40005000 	.word	0x40005000
 800532c:	40011400 	.word	0x40011400
 8005330:	40007800 	.word	0x40007800
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a71      	ldr	r2, [pc, #452]	; (8005500 <UART_SetConfig+0x4b8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d125      	bne.n	800538a <UART_SetConfig+0x342>
 800533e:	4b71      	ldr	r3, [pc, #452]	; (8005504 <UART_SetConfig+0x4bc>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005348:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800534c:	d017      	beq.n	800537e <UART_SetConfig+0x336>
 800534e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005352:	d817      	bhi.n	8005384 <UART_SetConfig+0x33c>
 8005354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005358:	d00b      	beq.n	8005372 <UART_SetConfig+0x32a>
 800535a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800535e:	d811      	bhi.n	8005384 <UART_SetConfig+0x33c>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <UART_SetConfig+0x324>
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005368:	d006      	beq.n	8005378 <UART_SetConfig+0x330>
 800536a:	e00b      	b.n	8005384 <UART_SetConfig+0x33c>
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e00d      	b.n	800538e <UART_SetConfig+0x346>
 8005372:	2302      	movs	r3, #2
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e00a      	b.n	800538e <UART_SetConfig+0x346>
 8005378:	2304      	movs	r3, #4
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e007      	b.n	800538e <UART_SetConfig+0x346>
 800537e:	2308      	movs	r3, #8
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e004      	b.n	800538e <UART_SetConfig+0x346>
 8005384:	2310      	movs	r3, #16
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e001      	b.n	800538e <UART_SetConfig+0x346>
 800538a:	2310      	movs	r3, #16
 800538c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005396:	d15b      	bne.n	8005450 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005398:	7ffb      	ldrb	r3, [r7, #31]
 800539a:	2b08      	cmp	r3, #8
 800539c:	d827      	bhi.n	80053ee <UART_SetConfig+0x3a6>
 800539e:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <UART_SetConfig+0x35c>)
 80053a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	080053ef 	.word	0x080053ef
 80053b4:	080053df 	.word	0x080053df
 80053b8:	080053ef 	.word	0x080053ef
 80053bc:	080053ef 	.word	0x080053ef
 80053c0:	080053ef 	.word	0x080053ef
 80053c4:	080053e7 	.word	0x080053e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe fdfa 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 80053cc:	61b8      	str	r0, [r7, #24]
        break;
 80053ce:	e013      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d0:	f7fe fe0a 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 80053d4:	61b8      	str	r0, [r7, #24]
        break;
 80053d6:	e00f      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d8:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <UART_SetConfig+0x4c0>)
 80053da:	61bb      	str	r3, [r7, #24]
        break;
 80053dc:	e00c      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053de:	f7fe fd01 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 80053e2:	61b8      	str	r0, [r7, #24]
        break;
 80053e4:	e008      	b.n	80053f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ea:	61bb      	str	r3, [r7, #24]
        break;
 80053ec:	e004      	b.n	80053f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	77bb      	strb	r3, [r7, #30]
        break;
 80053f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d074      	beq.n	80054e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	005a      	lsls	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	085b      	lsrs	r3, r3, #1
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	b29b      	uxth	r3, r3
 8005414:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b0f      	cmp	r3, #15
 800541a:	d916      	bls.n	800544a <UART_SetConfig+0x402>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005422:	d212      	bcs.n	800544a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	b29b      	uxth	r3, r3
 8005428:	f023 030f 	bic.w	r3, r3, #15
 800542c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	085b      	lsrs	r3, r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	b29a      	uxth	r2, r3
 800543a:	89fb      	ldrh	r3, [r7, #14]
 800543c:	4313      	orrs	r3, r2
 800543e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	89fa      	ldrh	r2, [r7, #14]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	e04e      	b.n	80054e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	77bb      	strb	r3, [r7, #30]
 800544e:	e04b      	b.n	80054e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b08      	cmp	r3, #8
 8005454:	d827      	bhi.n	80054a6 <UART_SetConfig+0x45e>
 8005456:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x414>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	080054a7 	.word	0x080054a7
 800546c:	08005497 	.word	0x08005497
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054a7 	.word	0x080054a7
 800547c:	0800549f 	.word	0x0800549f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fd9e 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8005484:	61b8      	str	r0, [r7, #24]
        break;
 8005486:	e013      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005488:	f7fe fdae 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 800548c:	61b8      	str	r0, [r7, #24]
        break;
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <UART_SetConfig+0x4c0>)
 8005492:	61bb      	str	r3, [r7, #24]
        break;
 8005494:	e00c      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fe fca5 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 800549a:	61b8      	str	r0, [r7, #24]
        break;
 800549c:	e008      	b.n	80054b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a2:	61bb      	str	r3, [r7, #24]
        break;
 80054a4:	e004      	b.n	80054b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	77bb      	strb	r3, [r7, #30]
        break;
 80054ae:	bf00      	nop
    }

    if (pclk != 0U)
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d018      	beq.n	80054e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085a      	lsrs	r2, r3, #1
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	441a      	add	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	d908      	bls.n	80054e4 <UART_SetConfig+0x49c>
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d204      	bcs.n	80054e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	e001      	b.n	80054e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40007c00 	.word	0x40007c00
 8005504:	40023800 	.word	0x40023800
 8005508:	00f42400 	.word	0x00f42400

0800550c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d10a      	bne.n	8005622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	605a      	str	r2, [r3, #4]
  }
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005660:	f7fb fd16 	bl	8001090 <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b08      	cmp	r3, #8
 8005672:	d10e      	bne.n	8005692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f82d 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e023      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b04      	cmp	r3, #4
 800569e:	d10e      	bne.n	80056be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f817 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00d      	b.n	80056da <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2220      	movs	r2, #32
 80056c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	e05e      	b.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056fa:	d05a      	beq.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fc:	f7fb fcc8 	bl	8001090 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	d302      	bcc.n	8005712 <UART_WaitOnFlagUntilTimeout+0x30>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11b      	bne.n	800574a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005720:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e043      	b.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02c      	beq.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005766:	d124      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005770:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005780:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 0201 	bic.w	r2, r2, #1
 8005790:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e00f      	b.n	80057d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4013      	ands	r3, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	429a      	cmp	r2, r3
 80057c0:	bf0c      	ite	eq
 80057c2:	2301      	moveq	r3, #1
 80057c4:	2300      	movne	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d091      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057dc:	b084      	sub	sp, #16
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	f107 001c 	add.w	r0, r7, #28
 80057ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d120      	bne.n	8005836 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	4b20      	ldr	r3, [pc, #128]	; (8005888 <USB_CoreInit+0xac>)
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa5a 	bl	8005ce4 <USB_CoreReset>
 8005830:	4603      	mov	r3, r0
 8005832:	73fb      	strb	r3, [r7, #15]
 8005834:	e010      	b.n	8005858 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa4e 	bl	8005ce4 <USB_CoreReset>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	2b01      	cmp	r3, #1
 800585c:	d10b      	bne.n	8005876 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f043 0206 	orr.w	r2, r3, #6
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f043 0220 	orr.w	r2, r3, #32
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005882:	b004      	add	sp, #16
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	ffbdffbf 	.word	0xffbdffbf

0800588c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f023 0201 	bic.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60da      	str	r2, [r3, #12]
 80058d8:	e00b      	b.n	80058f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]
 80058ec:	e001      	b.n	80058f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e003      	b.n	80058fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80058f2:	2032      	movs	r0, #50	; 0x32
 80058f4:	f7fb fbd8 	bl	80010a8 <HAL_Delay>

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005904:	b084      	sub	sp, #16
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e009      	b.n	8005938 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	3340      	adds	r3, #64	; 0x40
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	2200      	movs	r2, #0
 8005930:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3301      	adds	r3, #1
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b0e      	cmp	r3, #14
 800593c:	d9f2      	bls.n	8005924 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11c      	bne.n	800597e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005952:	f043 0302 	orr.w	r3, r3, #2
 8005956:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e005      	b.n	800598a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005990:	461a      	mov	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	4619      	mov	r1, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a4:	461a      	mov	r2, r3
 80059a6:	680b      	ldr	r3, [r1, #0]
 80059a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d10c      	bne.n	80059ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d104      	bne.n	80059c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059b6:	2100      	movs	r1, #0
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f959 	bl	8005c70 <USB_SetDevSpeed>
 80059be:	e018      	b.n	80059f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059c0:	2101      	movs	r1, #1
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f954 	bl	8005c70 <USB_SetDevSpeed>
 80059c8:	e013      	b.n	80059f2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d10c      	bne.n	80059ea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059d6:	2100      	movs	r1, #0
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f949 	bl	8005c70 <USB_SetDevSpeed>
 80059de:	e008      	b.n	80059f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059e0:	2101      	movs	r1, #1
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f944 	bl	8005c70 <USB_SetDevSpeed>
 80059e8:	e003      	b.n	80059f2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059ea:	2103      	movs	r1, #3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f93f 	bl	8005c70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059f2:	2110      	movs	r1, #16
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8f3 	bl	8005be0 <USB_FlushTxFifo>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f911 	bl	8005c2c <USB_FlushRxFifo>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	461a      	mov	r2, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a32:	461a      	mov	r2, r3
 8005a34:	2300      	movs	r3, #0
 8005a36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e043      	b.n	8005ac6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a54:	d118      	bne.n	8005a88 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a68:	461a      	mov	r2, r3
 8005a6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e013      	b.n	8005a9a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e008      	b.n	8005a9a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	461a      	mov	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005abe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	613b      	str	r3, [r7, #16]
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d3b7      	bcc.n	8005a3e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e043      	b.n	8005b5c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aea:	d118      	bne.n	8005b1e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	461a      	mov	r2, r3
 8005b00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e013      	b.n	8005b30 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	e008      	b.n	8005b30 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d3b7      	bcc.n	8005ad4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d105      	bne.n	8005b98 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f043 0210 	orr.w	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <USB_DevInit+0x2d4>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f043 0208 	orr.w	r2, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d105      	bne.n	8005bc8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <USB_DevInit+0x2d8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd4:	b004      	add	sp, #16
 8005bd6:	4770      	bx	lr
 8005bd8:	803c3800 	.word	0x803c3800
 8005bdc:	40000004 	.word	0x40000004

08005be0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	019b      	lsls	r3, r3, #6
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <USB_FlushTxFifo+0x48>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d901      	bls.n	8005c0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e006      	b.n	8005c1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d0f0      	beq.n	8005bfa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	00030d40 	.word	0x00030d40

08005c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <USB_FlushRxFifo+0x40>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d901      	bls.n	8005c50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e006      	b.n	8005c5e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b10      	cmp	r3, #16
 8005c5a:	d0f0      	beq.n	8005c3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	00030d40 	.word	0x00030d40

08005c70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	68f9      	ldr	r1, [r7, #12]
 8005c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cbc:	f023 0303 	bic.w	r3, r3, #3
 8005cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <USB_CoreReset+0x64>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e01b      	b.n	8005d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	daf2      	bge.n	8005cf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f043 0201 	orr.w	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <USB_CoreReset+0x64>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e006      	b.n	8005d3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d0f0      	beq.n	8005d1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	00030d40 	.word	0x00030d40

08005d4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005d52:	2100      	movs	r1, #0
 8005d54:	2000      	movs	r0, #0
 8005d56:	f004 fdd9 	bl	800a90c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */\
  ipaddr.addr = 0;
 8005d5a:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <MX_LWIP_Init+0xb8>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005d60:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <MX_LWIP_Init+0xbc>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005d66:	4b29      	ldr	r3, [pc, #164]	; (8005e0c <MX_LWIP_Init+0xc0>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005d6c:	4b28      	ldr	r3, [pc, #160]	; (8005e10 <MX_LWIP_Init+0xc4>)
 8005d6e:	9302      	str	r3, [sp, #8]
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <MX_LWIP_Init+0xc8>)
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <MX_LWIP_Init+0xc0>)
 8005d7a:	4a23      	ldr	r2, [pc, #140]	; (8005e08 <MX_LWIP_Init+0xbc>)
 8005d7c:	4921      	ldr	r1, [pc, #132]	; (8005e04 <MX_LWIP_Init+0xb8>)
 8005d7e:	4826      	ldr	r0, [pc, #152]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005d80:	f005 fb48 	bl	800b414 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d84:	4824      	ldr	r0, [pc, #144]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005d86:	f005 fcff 	bl	800b788 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005d8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d90:	089b      	lsrs	r3, r3, #2
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005d9c:	481e      	ldr	r0, [pc, #120]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005d9e:	f005 fd03 	bl	800b7a8 <netif_set_up>
 8005da2:	e002      	b.n	8005daa <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005da4:	481c      	ldr	r0, [pc, #112]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005da6:	f005 fd6b 	bl	800b880 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005daa:	491c      	ldr	r1, [pc, #112]	; (8005e1c <MX_LWIP_Init+0xd0>)
 8005dac:	481a      	ldr	r0, [pc, #104]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005dae:	f005 fe01 	bl	800b9b4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005db2:	2200      	movs	r2, #0
 8005db4:	2101      	movs	r1, #1
 8005db6:	2001      	movs	r0, #1
 8005db8:	f000 ffd4 	bl	8006d64 <osSemaphoreNew>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	4a18      	ldr	r2, [pc, #96]	; (8005e20 <MX_LWIP_Init+0xd4>)
 8005dc0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005dc2:	4b18      	ldr	r3, [pc, #96]	; (8005e24 <MX_LWIP_Init+0xd8>)
 8005dc4:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005dc6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005dc8:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <MX_LWIP_Init+0xd4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <MX_LWIP_Init+0xd8>)
 8005dce:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005dd0:	2224      	movs	r2, #36	; 0x24
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4814      	ldr	r0, [pc, #80]	; (8005e28 <MX_LWIP_Init+0xdc>)
 8005dd6:	f010 fe95 	bl	8016b04 <memset>
  attributes.name = "LinkThr";
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <MX_LWIP_Init+0xdc>)
 8005ddc:	4a13      	ldr	r2, [pc, #76]	; (8005e2c <MX_LWIP_Init+0xe0>)
 8005dde:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005de0:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <MX_LWIP_Init+0xdc>)
 8005de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005de8:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <MX_LWIP_Init+0xdc>)
 8005dea:	2210      	movs	r2, #16
 8005dec:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005dee:	4a0e      	ldr	r2, [pc, #56]	; (8005e28 <MX_LWIP_Init+0xdc>)
 8005df0:	490c      	ldr	r1, [pc, #48]	; (8005e24 <MX_LWIP_Init+0xd8>)
 8005df2:	480f      	ldr	r0, [pc, #60]	; (8005e30 <MX_LWIP_Init+0xe4>)
 8005df4:	f000 fd9a 	bl	800692c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005df8:	4807      	ldr	r0, [pc, #28]	; (8005e18 <MX_LWIP_Init+0xcc>)
 8005dfa:	f00c ff3f 	bl	8012c7c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	2000c448 	.word	0x2000c448
 8005e08:	2000c44c 	.word	0x2000c44c
 8005e0c:	2000c450 	.word	0x2000c450
 8005e10:	0800a849 	.word	0x0800a849
 8005e14:	08006445 	.word	0x08006445
 8005e18:	2000c410 	.word	0x2000c410
 8005e1c:	08006529 	.word	0x08006529
 8005e20:	20000214 	.word	0x20000214
 8005e24:	2000c3e4 	.word	0x2000c3e4
 8005e28:	2000c3ec 	.word	0x2000c3ec
 8005e2c:	0801986c 	.word	0x0801986c
 8005e30:	080064b1 	.word	0x080064b1

08005e34 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	; 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a44      	ldr	r2, [pc, #272]	; (8005f64 <HAL_ETH_MspInit+0x130>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	f040 8081 	bne.w	8005f5a <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005e58:	4b43      	ldr	r3, [pc, #268]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	4a42      	ldr	r2, [pc, #264]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005e62:	6313      	str	r3, [r2, #48]	; 0x30
 8005e64:	4b40      	ldr	r3, [pc, #256]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6c:	623b      	str	r3, [r7, #32]
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7c:	4b3a      	ldr	r3, [pc, #232]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4b37      	ldr	r3, [pc, #220]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	4a36      	ldr	r2, [pc, #216]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e92:	6313      	str	r3, [r2, #48]	; 0x30
 8005e94:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ea0:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4a30      	ldr	r2, [pc, #192]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ea6:	f043 0304 	orr.w	r3, r3, #4
 8005eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb8:	4b2b      	ldr	r3, [pc, #172]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	4a2a      	ldr	r2, [pc, #168]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec4:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ed6:	f043 0302 	orr.w	r3, r3, #2
 8005eda:	6313      	str	r3, [r2, #48]	; 0x30
 8005edc:	4b22      	ldr	r3, [pc, #136]	; (8005f68 <HAL_ETH_MspInit+0x134>)
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005ee8:	2332      	movs	r3, #50	; 0x32
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eec:	2302      	movs	r3, #2
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ef8:	230b      	movs	r3, #11
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f00:	4619      	mov	r1, r3
 8005f02:	481a      	ldr	r0, [pc, #104]	; (8005f6c <HAL_ETH_MspInit+0x138>)
 8005f04:	f7fc fb5a 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005f08:	2386      	movs	r3, #134	; 0x86
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f14:	2303      	movs	r3, #3
 8005f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f18:	230b      	movs	r3, #11
 8005f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f20:	4619      	mov	r1, r3
 8005f22:	4813      	ldr	r0, [pc, #76]	; (8005f70 <HAL_ETH_MspInit+0x13c>)
 8005f24:	f7fc fb4a 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005f28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f36:	2303      	movs	r3, #3
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f3a:	230b      	movs	r3, #11
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f42:	4619      	mov	r1, r3
 8005f44:	480b      	ldr	r0, [pc, #44]	; (8005f74 <HAL_ETH_MspInit+0x140>)
 8005f46:	f7fc fb39 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2105      	movs	r1, #5
 8005f4e:	203d      	movs	r0, #61	; 0x3d
 8005f50:	f7fb f986 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005f54:	203d      	movs	r0, #61	; 0x3d
 8005f56:	f7fb f99f 	bl	8001298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005f5a:	bf00      	nop
 8005f5c:	3738      	adds	r7, #56	; 0x38
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40028000 	.word	0x40028000
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	40020800 	.word	0x40020800
 8005f70:	40020000 	.word	0x40020000
 8005f74:	40020400 	.word	0x40020400

08005f78 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005f80:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <HAL_ETH_RxCpltCallback+0x1c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 ffef 	bl	8006f68 <osSemaphoreRelease>
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000218 	.word	0x20000218

08005f98 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b090      	sub	sp, #64	; 0x40
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005fa4:	4b5d      	ldr	r3, [pc, #372]	; (800611c <low_level_init+0x184>)
 8005fa6:	4a5e      	ldr	r2, [pc, #376]	; (8006120 <low_level_init+0x188>)
 8005fa8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005faa:	4b5c      	ldr	r3, [pc, #368]	; (800611c <low_level_init+0x184>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005fb0:	4b5a      	ldr	r3, [pc, #360]	; (800611c <low_level_init+0x184>)
 8005fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fb6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005fb8:	4b58      	ldr	r3, [pc, #352]	; (800611c <low_level_init+0x184>)
 8005fba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fbe:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005fc0:	4b56      	ldr	r3, [pc, #344]	; (800611c <low_level_init+0x184>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005fce:	23e1      	movs	r3, #225	; 0xe1
 8005fd0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005fde:	4a4f      	ldr	r2, [pc, #316]	; (800611c <low_level_init+0x184>)
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005fe6:	4b4d      	ldr	r3, [pc, #308]	; (800611c <low_level_init+0x184>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005fec:	4b4b      	ldr	r3, [pc, #300]	; (800611c <low_level_init+0x184>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005ff2:	4b4a      	ldr	r3, [pc, #296]	; (800611c <low_level_init+0x184>)
 8005ff4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ff8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005ffa:	4848      	ldr	r0, [pc, #288]	; (800611c <low_level_init+0x184>)
 8005ffc:	f7fb f95a 	bl	80012b4 <HAL_ETH_Init>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006006:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	b2da      	uxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006020:	2304      	movs	r3, #4
 8006022:	4a40      	ldr	r2, [pc, #256]	; (8006124 <low_level_init+0x18c>)
 8006024:	4940      	ldr	r1, [pc, #256]	; (8006128 <low_level_init+0x190>)
 8006026:	483d      	ldr	r0, [pc, #244]	; (800611c <low_level_init+0x184>)
 8006028:	f7fb fade 	bl	80015e8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800602c:	2304      	movs	r3, #4
 800602e:	4a3f      	ldr	r2, [pc, #252]	; (800612c <low_level_init+0x194>)
 8006030:	493f      	ldr	r1, [pc, #252]	; (8006130 <low_level_init+0x198>)
 8006032:	483a      	ldr	r0, [pc, #232]	; (800611c <low_level_init+0x184>)
 8006034:	f7fb fb41 	bl	80016ba <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2206      	movs	r2, #6
 800603c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006040:	4b36      	ldr	r3, [pc, #216]	; (800611c <low_level_init+0x184>)
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	781a      	ldrb	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800604c:	4b33      	ldr	r3, [pc, #204]	; (800611c <low_level_init+0x184>)
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	785a      	ldrb	r2, [r3, #1]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006058:	4b30      	ldr	r3, [pc, #192]	; (800611c <low_level_init+0x184>)
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	789a      	ldrb	r2, [r3, #2]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006064:	4b2d      	ldr	r3, [pc, #180]	; (800611c <low_level_init+0x184>)
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	78da      	ldrb	r2, [r3, #3]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006070:	4b2a      	ldr	r3, [pc, #168]	; (800611c <low_level_init+0x184>)
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	791a      	ldrb	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <low_level_init+0x184>)
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	795a      	ldrb	r2, [r3, #5]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006096:	f043 030a 	orr.w	r3, r3, #10
 800609a:	b2da      	uxtb	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80060a2:	2200      	movs	r2, #0
 80060a4:	2101      	movs	r1, #1
 80060a6:	2001      	movs	r0, #1
 80060a8:	f000 fe5c 	bl	8006d64 <osSemaphoreNew>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4a21      	ldr	r2, [pc, #132]	; (8006134 <low_level_init+0x19c>)
 80060b0:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80060b2:	f107 0314 	add.w	r3, r7, #20
 80060b6:	2224      	movs	r2, #36	; 0x24
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f010 fd22 	bl	8016b04 <memset>
  attributes.name = "EthIf";
 80060c0:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <low_level_init+0x1a0>)
 80060c2:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80060c4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80060ca:	2330      	movs	r3, #48	; 0x30
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80060ce:	f107 0314 	add.w	r3, r7, #20
 80060d2:	461a      	mov	r2, r3
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4819      	ldr	r0, [pc, #100]	; (800613c <low_level_init+0x1a4>)
 80060d8:	f000 fc28 	bl	800692c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80060dc:	480f      	ldr	r0, [pc, #60]	; (800611c <low_level_init+0x184>)
 80060de:	f7fb fe14 	bl	8001d0a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80060e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80060e6:	461a      	mov	r2, r3
 80060e8:	211d      	movs	r1, #29
 80060ea:	480c      	ldr	r0, [pc, #48]	; (800611c <low_level_init+0x184>)
 80060ec:	f7fb fd3f 	bl	8001b6e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f043 030b 	orr.w	r3, r3, #11
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	461a      	mov	r2, r3
 80060fc:	211d      	movs	r1, #29
 80060fe:	4807      	ldr	r0, [pc, #28]	; (800611c <low_level_init+0x184>)
 8006100:	f7fb fd9d 	bl	8001c3e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006104:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006108:	461a      	mov	r2, r3
 800610a:	211d      	movs	r1, #29
 800610c:	4803      	ldr	r0, [pc, #12]	; (800611c <low_level_init+0x184>)
 800610e:	f7fb fd2e 	bl	8001b6e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006112:	bf00      	nop
 8006114:	3740      	adds	r7, #64	; 0x40
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	2000dd24 	.word	0x2000dd24
 8006120:	40028000 	.word	0x40028000
 8006124:	2000dd6c 	.word	0x2000dd6c
 8006128:	2000c454 	.word	0x2000c454
 800612c:	2000c4d4 	.word	0x2000c4d4
 8006130:	2000dca4 	.word	0x2000dca4
 8006134:	20000218 	.word	0x20000218
 8006138:	08019874 	.word	0x08019874
 800613c:	080063e5 	.word	0x080063e5

08006140 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800614a:	4b4b      	ldr	r3, [pc, #300]	; (8006278 <low_level_output+0x138>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006162:	4b45      	ldr	r3, [pc, #276]	; (8006278 <low_level_output+0x138>)
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	623b      	str	r3, [r7, #32]
 8006170:	e05a      	b.n	8006228 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	da03      	bge.n	8006182 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800617a:	23f8      	movs	r3, #248	; 0xf8
 800617c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006180:	e05c      	b.n	800623c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	895b      	ldrh	r3, [r3, #10]
 8006186:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800618c:	e02f      	b.n	80061ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	18d0      	adds	r0, r2, r3
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	18d1      	adds	r1, r2, r3
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	f010 fc85 	bl	8016ab4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da03      	bge.n	80061c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80061b8:	23f8      	movs	r3, #248	; 0xf8
 80061ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80061be:	e03d      	b.n	800623c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80061d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80061dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80061e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d8c8      	bhi.n	800618e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	18d0      	adds	r0, r2, r3
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	4413      	add	r3, r2
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4619      	mov	r1, r3
 800620e:	f010 fc51 	bl	8016ab4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1a1      	bne.n	8006172 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	4811      	ldr	r0, [pc, #68]	; (8006278 <low_level_output+0x138>)
 8006232:	f7fb faaf 	bl	8001794 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800623c:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <low_level_output+0x138>)
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	f241 0314 	movw	r3, #4116	; 0x1014
 8006244:	4413      	add	r3, r2
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <low_level_output+0x138>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	f241 0314 	movw	r3, #4116	; 0x1014
 8006258:	4413      	add	r3, r2
 800625a:	2220      	movs	r2, #32
 800625c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <low_level_output+0x138>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	f241 0304 	movw	r3, #4100	; 0x1004
 8006266:	4413      	add	r3, r2
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800626c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	; 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2000dd24 	.word	0x2000dd24

0800627c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	; 0x30
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80062a0:	484f      	ldr	r0, [pc, #316]	; (80063e0 <low_level_input+0x164>)
 80062a2:	f7fb fb61 	bl	8001968 <HAL_ETH_GetReceivedFrame_IT>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <low_level_input+0x34>

    return NULL;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e092      	b.n	80063d6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80062b0:	4b4b      	ldr	r3, [pc, #300]	; (80063e0 <low_level_input+0x164>)
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80062b6:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <low_level_input+0x164>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80062bc:	89fb      	ldrh	r3, [r7, #14]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80062c2:	89fb      	ldrh	r3, [r7, #14]
 80062c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80062c8:	4619      	mov	r1, r3
 80062ca:	2000      	movs	r0, #0
 80062cc:	f005 fc3c 	bl	800bb48 <pbuf_alloc>
 80062d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d04b      	beq.n	8006370 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80062d8:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <low_level_input+0x164>)
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e6:	e040      	b.n	800636a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	895b      	ldrh	r3, [r3, #10]
 80062ec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80062f2:	e021      	b.n	8006338 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	18d0      	adds	r0, r2, r3
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	18d1      	adds	r1, r2, r3
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	461a      	mov	r2, r3
 800630c:	f010 fbd2 	bl	8016ab4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006326:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006332:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006342:	4293      	cmp	r3, r2
 8006344:	d8d6      	bhi.n	80062f4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	18d0      	adds	r0, r2, r3
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	4619      	mov	r1, r3
 8006358:	f010 fbac 	bl	8016ab4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	4413      	add	r3, r2
 8006362:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	62bb      	str	r3, [r7, #40]	; 0x28
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1bb      	bne.n	80062e8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006370:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <low_level_input+0x164>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006376:	2300      	movs	r3, #0
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	e00b      	b.n	8006394 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <low_level_input+0x164>)
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	429a      	cmp	r2, r3
 800639c:	d3ee      	bcc.n	800637c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <low_level_input+0x164>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80063a4:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <low_level_input+0x164>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	f241 0314 	movw	r3, #4116	; 0x1014
 80063ac:	4413      	add	r3, r2
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00d      	beq.n	80063d4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <low_level_input+0x164>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	f241 0314 	movw	r3, #4116	; 0x1014
 80063c0:	4413      	add	r3, r2
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80063c6:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <low_level_input+0x164>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	f241 0308 	movw	r3, #4104	; 0x1008
 80063ce:	4413      	add	r3, r2
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3730      	adds	r7, #48	; 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000dd24 	.word	0x2000dd24

080063e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80063f0:	4b12      	ldr	r3, [pc, #72]	; (800643c <ethernetif_input+0x58>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 fd4f 	bl	8006e9c <osSemaphoreAcquire>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f5      	bne.n	80063f0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006404:	480e      	ldr	r0, [pc, #56]	; (8006440 <ethernetif_input+0x5c>)
 8006406:	f010 fac9 	bl	801699c <sys_mutex_lock>
        p = low_level_input( netif );
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7ff ff36 	bl	800627c <low_level_input>
 8006410:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	68f9      	ldr	r1, [r7, #12]
 800641e:	68b8      	ldr	r0, [r7, #8]
 8006420:	4798      	blx	r3
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006428:	68b8      	ldr	r0, [r7, #8]
 800642a:	f005 fe71 	bl	800c110 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800642e:	4804      	ldr	r0, [pc, #16]	; (8006440 <ethernetif_input+0x5c>)
 8006430:	f010 fac3 	bl	80169ba <sys_mutex_unlock>
      } while(p!=NULL);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e4      	bne.n	8006404 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800643a:	e7d9      	b.n	80063f0 <ethernetif_input+0xc>
 800643c:	20000218 	.word	0x20000218
 8006440:	2000f57c 	.word	0x2000f57c

08006444 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <ethernetif_init+0x1c>
 8006452:	4b0e      	ldr	r3, [pc, #56]	; (800648c <ethernetif_init+0x48>)
 8006454:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006458:	490d      	ldr	r1, [pc, #52]	; (8006490 <ethernetif_init+0x4c>)
 800645a:	480e      	ldr	r0, [pc, #56]	; (8006494 <ethernetif_init+0x50>)
 800645c:	f010 ff9e 	bl	801739c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2273      	movs	r2, #115	; 0x73
 8006464:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2274      	movs	r2, #116	; 0x74
 800646c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <ethernetif_init+0x54>)
 8006474:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a08      	ldr	r2, [pc, #32]	; (800649c <ethernetif_init+0x58>)
 800647a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fd8b 	bl	8005f98 <low_level_init>

  return ERR_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	0801987c 	.word	0x0801987c
 8006490:	08019898 	.word	0x08019898
 8006494:	080198a8 	.word	0x080198a8
 8006498:	08014b49 	.word	0x08014b49
 800649c:	08006141 	.word	0x08006141

080064a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80064a4:	f7fa fdf4 	bl	8001090 <HAL_GetTick>
 80064a8:	4603      	mov	r3, r0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80064c0:	f107 0308 	add.w	r3, r7, #8
 80064c4:	461a      	mov	r2, r3
 80064c6:	2101      	movs	r1, #1
 80064c8:	4816      	ldr	r0, [pc, #88]	; (8006524 <ethernetif_set_link+0x74>)
 80064ca:	f7fb fb50 	bl	8001b6e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <ethernetif_set_link+0x48>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f005 f9f7 	bl	800b8e4 <netif_set_link_up>
 80064f6:	e011      	b.n	800651c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006500:	089b      	lsrs	r3, r3, #2
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <ethernetif_set_link+0x6c>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f005 fa1c 	bl	800b954 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800651c:	20c8      	movs	r0, #200	; 0xc8
 800651e:	f000 faab 	bl	8006a78 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006522:	e7cd      	b.n	80064c0 <ethernetif_set_link+0x10>
 8006524:	2000dd24 	.word	0x2000dd24

08006528 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d05d      	beq.n	8006606 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800654a:	4b34      	ldr	r3, [pc, #208]	; (800661c <ethernetif_update_config+0xf4>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d03f      	beq.n	80065d2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006552:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006556:	2100      	movs	r1, #0
 8006558:	4830      	ldr	r0, [pc, #192]	; (800661c <ethernetif_update_config+0xf4>)
 800655a:	f7fb fb70 	bl	8001c3e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800655e:	f7fa fd97 	bl	8001090 <HAL_GetTick>
 8006562:	4603      	mov	r3, r0
 8006564:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	461a      	mov	r2, r3
 800656c:	2101      	movs	r1, #1
 800656e:	482b      	ldr	r0, [pc, #172]	; (800661c <ethernetif_update_config+0xf4>)
 8006570:	f7fb fafd 	bl	8001b6e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006574:	f7fa fd8c 	bl	8001090 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006582:	d828      	bhi.n	80065d6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 0320 	and.w	r3, r3, #32
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0eb      	beq.n	8006566 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800658e:	f107 0308 	add.w	r3, r7, #8
 8006592:	461a      	mov	r2, r3
 8006594:	2110      	movs	r1, #16
 8006596:	4821      	ldr	r0, [pc, #132]	; (800661c <ethernetif_update_config+0xf4>)
 8006598:	f7fb fae9 	bl	8001b6e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80065a6:	4b1d      	ldr	r3, [pc, #116]	; (800661c <ethernetif_update_config+0xf4>)
 80065a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	e002      	b.n	80065b6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <ethernetif_update_config+0xf4>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80065c0:	4b16      	ldr	r3, [pc, #88]	; (800661c <ethernetif_update_config+0xf4>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	609a      	str	r2, [r3, #8]
 80065c6:	e016      	b.n	80065f6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80065c8:	4b14      	ldr	r3, [pc, #80]	; (800661c <ethernetif_update_config+0xf4>)
 80065ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	e011      	b.n	80065f6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <ethernetif_update_config+0xb0>
          goto error;
 80065d6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80065d8:	4b10      	ldr	r3, [pc, #64]	; (800661c <ethernetif_update_config+0xf4>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	08db      	lsrs	r3, r3, #3
 80065de:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <ethernetif_update_config+0xf4>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	2100      	movs	r1, #0
 80065f0:	480a      	ldr	r0, [pc, #40]	; (800661c <ethernetif_update_config+0xf4>)
 80065f2:	f7fb fb24 	bl	8001c3e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80065f6:	2100      	movs	r1, #0
 80065f8:	4808      	ldr	r0, [pc, #32]	; (800661c <ethernetif_update_config+0xf4>)
 80065fa:	f7fb fbe5 	bl	8001dc8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80065fe:	4807      	ldr	r0, [pc, #28]	; (800661c <ethernetif_update_config+0xf4>)
 8006600:	f7fb fb83 	bl	8001d0a <HAL_ETH_Start>
 8006604:	e002      	b.n	800660c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006606:	4805      	ldr	r0, [pc, #20]	; (800661c <ethernetif_update_config+0xf4>)
 8006608:	f7fb fbae 	bl	8001d68 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f807 	bl	8006620 <ethernetif_notify_conn_changed>
}
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	2000dd24 	.word	0x2000dd24

08006620 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <init_pitot>:
 */
#include "../Inc/pitot.h"
#include "math.h"


HAL_StatusTypeDef  init_pitot(I2C_HandleTypeDef* hi2c, int operationMod){
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]

	uint8_t commande[1];
	commande[0] = operationMod;//choose your average
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	733b      	strb	r3, [r7, #12]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c,(uint16_t)ADDR_PITOT<<1,commande,1,HAL_MAX_DELAY);
 8006644:	f107 020c 	add.w	r2, r7, #12
 8006648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	2301      	movs	r3, #1
 8006650:	2152      	movs	r1, #82	; 0x52
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fc fa22 	bl	8002a9c <HAL_I2C_Master_Transmit>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]

	return ret;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <read_pitot_pressure_temperature>:

int read_pitot_pressure_temperature(I2C_HandleTypeDef* hi2c, double* pressure, double* temperature){
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af02      	add	r7, sp, #8
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]

	uint8_t buf[7];
	HAL_StatusTypeDef ret;
	uint8_t status1;
	uint8_t status2;
	int success = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	62fb      	str	r3, [r7, #44]	; 0x2c

	ret = HAL_I2C_Master_Receive(hi2c,(uint16_t)(ADDR_PITOT<<1)+1,buf,1,HAL_MAX_DELAY);
 8006678:	f107 0214 	add.w	r2, r7, #20
 800667c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	2301      	movs	r3, #1
 8006684:	2153      	movs	r1, #83	; 0x53
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7fc fafc 	bl	8002c84 <HAL_I2C_Master_Receive>
 800668c:	4603      	mov	r3, r0
 800668e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if(ret != HAL_OK){
 8006692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006696:	2b00      	cmp	r3, #0
 8006698:	d164      	bne.n	8006764 <read_pitot_pressure_temperature+0xfc>

		//err code

	}else{
		status1 = buf[0];
 800669a:	7d3b      	ldrb	r3, [r7, #20]
 800669c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		ret = HAL_I2C_Master_Receive(hi2c,(uint16_t)(ADDR_PITOT<<1)+1,buf,7,HAL_MAX_DELAY);
 80066a0:	f107 0214 	add.w	r2, r7, #20
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	2307      	movs	r3, #7
 80066ac:	2153      	movs	r1, #83	; 0x53
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7fc fae8 	bl	8002c84 <HAL_I2C_Master_Receive>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(ret != HAL_OK){
 80066ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d150      	bne.n	8006764 <read_pitot_pressure_temperature+0xfc>

			//err code

		}else{
			status2 = buf[0];
 80066c2:	7d3b      	ldrb	r3, [r7, #20]
 80066c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			uint32_t P_out = (uint32_t)(buf[1]<<16|buf[2]<<8|buf[3]);
 80066c8:	7d7b      	ldrb	r3, [r7, #21]
 80066ca:	041a      	lsls	r2, r3, #16
 80066cc:	7dbb      	ldrb	r3, [r7, #22]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	4313      	orrs	r3, r2
 80066d2:	7dfa      	ldrb	r2, [r7, #23]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
			uint32_t T_out = (uint32_t)(buf[4]<<16|buf[5]<<8|buf[6]);
 80066d8:	7e3b      	ldrb	r3, [r7, #24]
 80066da:	041a      	lsls	r2, r3, #16
 80066dc:	7e7b      	ldrb	r3, [r7, #25]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	4313      	orrs	r3, r2
 80066e2:	7eba      	ldrb	r2, [r7, #26]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	623b      	str	r3, [r7, #32]

			uint32_t nbBits = pow(2,24);
 80066e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066ec:	61fb      	str	r3, [r7, #28]

			*pressure = 1.25 * ((P_out - (OS_DIG * nbBits))/nbBits) * (double)MAX_RANGE_MULTIPLIER * (double)MAX_RANGE;
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	ee07 3a90 	vmov	s15, r3
 80066f4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006702:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8006770 <read_pitot_pressure_temperature+0x108>
 8006706:	ee27 7b05 	vmul.f64	d7, d7, d5
 800670a:	ee36 5b47 	vsub.f64	d5, d6, d7
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006718:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800671c:	eeb7 6b04 	vmov.f64	d6, #116	; 0x3fa00000  1.250
 8006720:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006724:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8006778 <read_pitot_pressure_temperature+0x110>
 8006728:	ee27 7b06 	vmul.f64	d7, d7, d6
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	ed83 7b00 	vstr	d7, [r3]
			*temperature = ((T_out * 125.0)/nbBits)-40.0;
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800673c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8006780 <read_pitot_pressure_temperature+0x118>
 8006740:	ee27 5b06 	vmul.f64	d5, d7, d6
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800674e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006752:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8006788 <read_pitot_pressure_temperature+0x120>
 8006756:	ee37 7b46 	vsub.f64	d7, d7, d6
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	ed83 7b00 	vstr	d7, [r3]
			success=1;
 8006760:	2301      	movs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
	}
	return success;
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 8006766:	4618      	mov	r0, r3
 8006768:	3730      	adds	r7, #48	; 0x30
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	9999999a 	.word	0x9999999a
 8006774:	3fb99999 	.word	0x3fb99999
 8006778:	00000000 	.word	0x00000000
 800677c:	40a38800 	.word	0x40a38800
 8006780:	00000000 	.word	0x00000000
 8006784:	405f4000 	.word	0x405f4000
 8006788:	00000000 	.word	0x00000000
 800678c:	40440000 	.word	0x40440000

08006790 <read_pitot_speed>:

int read_pitot_speed(I2C_HandleTypeDef* hi2c , double* speed){
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]

	double pressure;

	int success = read_pitot_pressure_temperature(hi2c,&pressure,NULL);
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	2200      	movs	r2, #0
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ff60 	bl	8006668 <read_pitot_pressure_temperature>
 80067a8:	61f8      	str	r0, [r7, #28]

	if(success){
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d014      	beq.n	80067da <read_pitot_speed+0x4a>
		double speed_square = (double)SPEED_CALIBRATION_CONSTANT*(pressure/1000.0);
 80067b0:	ed97 6b02 	vldr	d6, [r7, #8]
 80067b4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80067e8 <read_pitot_speed+0x58>
 80067b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067bc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80067f0 <read_pitot_speed+0x60>
 80067c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067c4:	ed87 7b04 	vstr	d7, [r7, #16]
		*speed = sqrt(speed_square);
 80067c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80067cc:	f012 ffe0 	bl	8019790 <sqrt>
 80067d0:	eeb0 7b40 	vmov.f64	d7, d0
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	ed83 7b00 	vstr	d7, [r3]
	}
	return success;
 80067da:	69fb      	ldr	r3, [r7, #28]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	f3af 8000 	nop.w
 80067e8:	00000000 	.word	0x00000000
 80067ec:	408f4000 	.word	0x408f4000
 80067f0:	cccccccd 	.word	0xcccccccd
 80067f4:	3ff4cccc 	.word	0x3ff4cccc

080067f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
	...

08006808 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800680e:	f3ef 8305 	mrs	r3, IPSR
 8006812:	60bb      	str	r3, [r7, #8]
  return(result);
 8006814:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10f      	bne.n	800683a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800681a:	f3ef 8310 	mrs	r3, PRIMASK
 800681e:	607b      	str	r3, [r7, #4]
  return(result);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006826:	f3ef 8311 	mrs	r3, BASEPRI
 800682a:	603b      	str	r3, [r7, #0]
  return(result);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <osKernelInitialize+0x3a>
 8006832:	4b0e      	ldr	r3, [pc, #56]	; (800686c <osKernelInitialize+0x64>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d103      	bne.n	8006842 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800683a:	f06f 0305 	mvn.w	r3, #5
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e00c      	b.n	800685c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <osKernelInitialize+0x64>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <osKernelInitialize+0x64>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e002      	b.n	800685c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800685a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800685c:	68fb      	ldr	r3, [r7, #12]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	2000021c 	.word	0x2000021c

08006870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006876:	f3ef 8305 	mrs	r3, IPSR
 800687a:	60bb      	str	r3, [r7, #8]
  return(result);
 800687c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006882:	f3ef 8310 	mrs	r3, PRIMASK
 8006886:	607b      	str	r3, [r7, #4]
  return(result);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d105      	bne.n	800689a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800688e:	f3ef 8311 	mrs	r3, BASEPRI
 8006892:	603b      	str	r3, [r7, #0]
  return(result);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d007      	beq.n	80068aa <osKernelStart+0x3a>
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <osKernelStart+0x68>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d103      	bne.n	80068aa <osKernelStart+0x3a>
    stat = osErrorISR;
 80068a2:	f06f 0305 	mvn.w	r3, #5
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e010      	b.n	80068cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <osKernelStart+0x68>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d109      	bne.n	80068c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068b2:	f7ff ffa1 	bl	80067f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <osKernelStart+0x68>)
 80068b8:	2202      	movs	r2, #2
 80068ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068bc:	f002 f8f0 	bl	8008aa0 <vTaskStartScheduler>
      stat = osOK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e002      	b.n	80068cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80068c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	2000021c 	.word	0x2000021c

080068dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e2:	f3ef 8305 	mrs	r3, IPSR
 80068e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ee:	f3ef 8310 	mrs	r3, PRIMASK
 80068f2:	607b      	str	r3, [r7, #4]
  return(result);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d105      	bne.n	8006906 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068fa:	f3ef 8311 	mrs	r3, BASEPRI
 80068fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <osKernelGetTickCount+0x3a>
 8006906:	4b08      	ldr	r3, [pc, #32]	; (8006928 <osKernelGetTickCount+0x4c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d103      	bne.n	8006916 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800690e:	f002 f9ef 	bl	8008cf0 <xTaskGetTickCountFromISR>
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	e002      	b.n	800691c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006916:	f002 f9db 	bl	8008cd0 <xTaskGetTickCount>
 800691a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800691c:	68fb      	ldr	r3, [r7, #12]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	2000021c 	.word	0x2000021c

0800692c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b090      	sub	sp, #64	; 0x40
 8006930:	af04      	add	r7, sp, #16
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006938:	2300      	movs	r3, #0
 800693a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800693c:	f3ef 8305 	mrs	r3, IPSR
 8006940:	61fb      	str	r3, [r7, #28]
  return(result);
 8006942:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006944:	2b00      	cmp	r3, #0
 8006946:	f040 808f 	bne.w	8006a68 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800694a:	f3ef 8310 	mrs	r3, PRIMASK
 800694e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006956:	f3ef 8311 	mrs	r3, BASEPRI
 800695a:	617b      	str	r3, [r7, #20]
  return(result);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <osThreadNew+0x3e>
 8006962:	4b44      	ldr	r3, [pc, #272]	; (8006a74 <osThreadNew+0x148>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d07e      	beq.n	8006a68 <osThreadNew+0x13c>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d07b      	beq.n	8006a68 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006974:	2318      	movs	r3, #24
 8006976:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800697c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006980:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d045      	beq.n	8006a14 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <osThreadNew+0x6a>
        name = attr->name;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d008      	beq.n	80069bc <osThreadNew+0x90>
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2b38      	cmp	r3, #56	; 0x38
 80069ae:	d805      	bhi.n	80069bc <osThreadNew+0x90>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <osThreadNew+0x94>
        return (NULL);
 80069bc:	2300      	movs	r3, #0
 80069be:	e054      	b.n	8006a6a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	089b      	lsrs	r3, r3, #2
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <osThreadNew+0xca>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b5b      	cmp	r3, #91	; 0x5b
 80069de:	d90a      	bls.n	80069f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <osThreadNew+0xca>
        mem = 1;
 80069f0:	2301      	movs	r3, #1
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	e010      	b.n	8006a18 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10c      	bne.n	8006a18 <osThreadNew+0xec>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d108      	bne.n	8006a18 <osThreadNew+0xec>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <osThreadNew+0xec>
          mem = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	e001      	b.n	8006a18 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d110      	bne.n	8006a40 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a26:	9202      	str	r2, [sp, #8]
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 fe53 	bl	80086e0 <xTaskCreateStatic>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	613b      	str	r3, [r7, #16]
 8006a3e:	e013      	b.n	8006a68 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d110      	bne.n	8006a68 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	f107 0310 	add.w	r3, r7, #16
 8006a4e:	9301      	str	r3, [sp, #4]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f001 fea4 	bl	80087a6 <xTaskCreate>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d001      	beq.n	8006a68 <osThreadNew+0x13c>
          hTask = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006a68:	693b      	ldr	r3, [r7, #16]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3730      	adds	r7, #48	; 0x30
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	2000021c 	.word	0x2000021c

08006a78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a80:	f3ef 8305 	mrs	r3, IPSR
 8006a84:	613b      	str	r3, [r7, #16]
  return(result);
 8006a86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10f      	bne.n	8006aac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006a90:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a98:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d007      	beq.n	8006ab4 <osDelay+0x3c>
 8006aa4:	4b0a      	ldr	r3, [pc, #40]	; (8006ad0 <osDelay+0x58>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d103      	bne.n	8006ab4 <osDelay+0x3c>
    stat = osErrorISR;
 8006aac:	f06f 0305 	mvn.w	r3, #5
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	e007      	b.n	8006ac4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 ffb8 	bl	8008a34 <vTaskDelay>
    }
  }

  return (stat);
 8006ac4:	697b      	ldr	r3, [r7, #20]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	2000021c 	.word	0x2000021c

08006ad4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ae0:	f3ef 8305 	mrs	r3, IPSR
 8006ae4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 8085 	bne.w	8006bf8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aee:	f3ef 8310 	mrs	r3, PRIMASK
 8006af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d105      	bne.n	8006b06 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006afa:	f3ef 8311 	mrs	r3, BASEPRI
 8006afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <osMutexNew+0x3a>
 8006b06:	4b3f      	ldr	r3, [pc, #252]	; (8006c04 <osMutexNew+0x130>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d074      	beq.n	8006bf8 <osMutexNew+0x124>
    if (attr != NULL) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	e001      	b.n	8006b20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <osMutexNew+0x5c>
      rmtx = 1U;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e001      	b.n	8006b34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d15c      	bne.n	8006bf8 <osMutexNew+0x124>
      mem = -1;
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d015      	beq.n	8006b76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d006      	beq.n	8006b60 <osMutexNew+0x8c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b4f      	cmp	r3, #79	; 0x4f
 8006b58:	d902      	bls.n	8006b60 <osMutexNew+0x8c>
          mem = 1;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	e00c      	b.n	8006b7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <osMutexNew+0xa6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <osMutexNew+0xa6>
            mem = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
 8006b74:	e001      	b.n	8006b7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d112      	bne.n	8006ba6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	2004      	movs	r0, #4
 8006b8e:	f000 fe1a 	bl	80077c6 <xQueueCreateMutexStatic>
 8006b92:	6278      	str	r0, [r7, #36]	; 0x24
 8006b94:	e016      	b.n	8006bc4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	f000 fe12 	bl	80077c6 <xQueueCreateMutexStatic>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8006ba4:	e00e      	b.n	8006bc4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10b      	bne.n	8006bc4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006bb2:	2004      	movs	r0, #4
 8006bb4:	f000 fdef 	bl	8007796 <xQueueCreateMutex>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8006bba:	e003      	b.n	8006bc4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f000 fdea 	bl	8007796 <xQueueCreateMutex>
 8006bc2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <osMutexNew+0x110>
        if (attr != NULL) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <osMutexNew+0x104>
          name = attr->name;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e001      	b.n	8006bdc <osMutexNew+0x108>
        } else {
          name = NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be0:	f001 fcf6 	bl	80085d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d006      	beq.n	8006bf8 <osMutexNew+0x124>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3728      	adds	r7, #40	; 0x28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	2000021c 	.word	0x2000021c

08006c08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c26:	f3ef 8305 	mrs	r3, IPSR
 8006c2a:	613b      	str	r3, [r7, #16]
  return(result);
 8006c2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10f      	bne.n	8006c52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c32:	f3ef 8310 	mrs	r3, PRIMASK
 8006c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <osMutexAcquire+0x52>
 8006c4a:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <osMutexAcquire+0xb8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d103      	bne.n	8006c5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006c52:	f06f 0305 	mvn.w	r3, #5
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e02c      	b.n	8006cb4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006c60:	f06f 0303 	mvn.w	r3, #3
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	e025      	b.n	8006cb4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d011      	beq.n	8006c92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	69b8      	ldr	r0, [r7, #24]
 8006c72:	f000 fdf9 	bl	8007868 <xQueueTakeMutexRecursive>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d01b      	beq.n	8006cb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006c82:	f06f 0301 	mvn.w	r3, #1
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	e014      	b.n	8006cb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006c8a:	f06f 0302 	mvn.w	r3, #2
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e010      	b.n	8006cb4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	69b8      	ldr	r0, [r7, #24]
 8006c96:	f001 f9b3 	bl	8008000 <xQueueSemaphoreTake>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d009      	beq.n	8006cb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006ca6:	f06f 0301 	mvn.w	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e002      	b.n	8006cb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006cae:	f06f 0302 	mvn.w	r3, #2
 8006cb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cb4:	69fb      	ldr	r3, [r7, #28]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3720      	adds	r7, #32
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2000021c 	.word	0x2000021c

08006cc4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ce0:	f3ef 8305 	mrs	r3, IPSR
 8006ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ce6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10f      	bne.n	8006d0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cec:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d105      	bne.n	8006d04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cf8:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <osMutexRelease+0x50>
 8006d04:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <osMutexRelease+0x9c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d103      	bne.n	8006d14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006d0c:	f06f 0305 	mvn.w	r3, #5
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	e01f      	b.n	8006d54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006d1a:	f06f 0303 	mvn.w	r3, #3
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	e018      	b.n	8006d54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d009      	beq.n	8006d3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006d28:	69b8      	ldr	r0, [r7, #24]
 8006d2a:	f000 fd67 	bl	80077fc <xQueueGiveMutexRecursive>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d00f      	beq.n	8006d54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006d34:	f06f 0302 	mvn.w	r3, #2
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e00b      	b.n	8006d54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2100      	movs	r1, #0
 8006d42:	69b8      	ldr	r0, [r7, #24]
 8006d44:	f000 fe3a 	bl	80079bc <xQueueGenericSend>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d002      	beq.n	8006d54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006d4e:	f06f 0302 	mvn.w	r3, #2
 8006d52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006d54:	69fb      	ldr	r3, [r7, #28]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000021c 	.word	0x2000021c

08006d64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08c      	sub	sp, #48	; 0x30
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006d70:	2300      	movs	r3, #0
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d74:	f3ef 8305 	mrs	r3, IPSR
 8006d78:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8086 	bne.w	8006e8e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d82:	f3ef 8310 	mrs	r3, PRIMASK
 8006d86:	617b      	str	r3, [r7, #20]
  return(result);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d92:	613b      	str	r3, [r7, #16]
  return(result);
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <osSemaphoreNew+0x3e>
 8006d9a:	4b3f      	ldr	r3, [pc, #252]	; (8006e98 <osSemaphoreNew+0x134>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d075      	beq.n	8006e8e <osSemaphoreNew+0x12a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d072      	beq.n	8006e8e <osSemaphoreNew+0x12a>
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d86e      	bhi.n	8006e8e <osSemaphoreNew+0x12a>
    mem = -1;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006db4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d015      	beq.n	8006de8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <osSemaphoreNew+0x6e>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8006dca:	d902      	bls.n	8006dd2 <osSemaphoreNew+0x6e>
        mem = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	623b      	str	r3, [r7, #32]
 8006dd0:	e00c      	b.n	8006dec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <osSemaphoreNew+0x88>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d104      	bne.n	8006dec <osSemaphoreNew+0x88>
          mem = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	e001      	b.n	8006dec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df2:	d04c      	beq.n	8006e8e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d128      	bne.n	8006e4c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10a      	bne.n	8006e16 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2203      	movs	r2, #3
 8006e06:	9200      	str	r2, [sp, #0]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	f000 fbc1 	bl	8007594 <xQueueGenericCreateStatic>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24
 8006e14:	e005      	b.n	8006e22 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006e16:	2203      	movs	r2, #3
 8006e18:	2100      	movs	r1, #0
 8006e1a:	2001      	movs	r0, #1
 8006e1c:	f000 fc3c 	bl	8007698 <xQueueGenericCreate>
 8006e20:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d022      	beq.n	8006e6e <osSemaphoreNew+0x10a>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01f      	beq.n	8006e6e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e36:	f000 fdc1 	bl	80079bc <xQueueGenericSend>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d016      	beq.n	8006e6e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e42:	f001 fa77 	bl	8008334 <vQueueDelete>
            hSemaphore = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
 8006e4a:	e010      	b.n	8006e6e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d108      	bne.n	8006e64 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	461a      	mov	r2, r3
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fd3c 	bl	80078d8 <xQueueCreateCountingSemaphoreStatic>
 8006e60:	6278      	str	r0, [r7, #36]	; 0x24
 8006e62:	e004      	b.n	8006e6e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fd71 	bl	800794e <xQueueCreateCountingSemaphore>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	61fb      	str	r3, [r7, #28]
 8006e80:	e001      	b.n	8006e86 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006e86:	69f9      	ldr	r1, [r7, #28]
 8006e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e8a:	f001 fba1 	bl	80085d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	2000021c 	.word	0x2000021c

08006e9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006eb4:	f06f 0303 	mvn.w	r3, #3
 8006eb8:	61fb      	str	r3, [r7, #28]
 8006eba:	e04b      	b.n	8006f54 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ebc:	f3ef 8305 	mrs	r3, IPSR
 8006ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ec2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10f      	bne.n	8006ee8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d026      	beq.n	8006f2e <osSemaphoreAcquire+0x92>
 8006ee0:	4b1f      	ldr	r3, [pc, #124]	; (8006f60 <osSemaphoreAcquire+0xc4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d122      	bne.n	8006f2e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006eee:	f06f 0303 	mvn.w	r3, #3
 8006ef2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006ef4:	e02d      	b.n	8006f52 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	461a      	mov	r2, r3
 8006f00:	2100      	movs	r1, #0
 8006f02:	69b8      	ldr	r0, [r7, #24]
 8006f04:	f001 f990 	bl	8008228 <xQueueReceiveFromISR>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d003      	beq.n	8006f16 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006f0e:	f06f 0302 	mvn.w	r3, #2
 8006f12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006f14:	e01d      	b.n	8006f52 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <osSemaphoreAcquire+0xb6>
 8006f1c:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <osSemaphoreAcquire+0xc8>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006f2c:	e011      	b.n	8006f52 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	69b8      	ldr	r0, [r7, #24]
 8006f32:	f001 f865 	bl	8008000 <xQueueSemaphoreTake>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d00b      	beq.n	8006f54 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006f42:	f06f 0301 	mvn.w	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	e004      	b.n	8006f54 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006f4a:	f06f 0302 	mvn.w	r3, #2
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e000      	b.n	8006f54 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006f52:	bf00      	nop
      }
    }
  }

  return (stat);
 8006f54:	69fb      	ldr	r3, [r7, #28]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	2000021c 	.word	0x2000021c
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d103      	bne.n	8006f86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006f7e:	f06f 0303 	mvn.w	r3, #3
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e03e      	b.n	8007004 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f86:	f3ef 8305 	mrs	r3, IPSR
 8006f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8006f8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10f      	bne.n	8006fb2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f92:	f3ef 8310 	mrs	r3, PRIMASK
 8006f96:	613b      	str	r3, [r7, #16]
  return(result);
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d105      	bne.n	8006faa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d01e      	beq.n	8006fe8 <osSemaphoreRelease+0x80>
 8006faa:	4b19      	ldr	r3, [pc, #100]	; (8007010 <osSemaphoreRelease+0xa8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d11a      	bne.n	8006fe8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006fb6:	f107 0308 	add.w	r3, r7, #8
 8006fba:	4619      	mov	r1, r3
 8006fbc:	69b8      	ldr	r0, [r7, #24]
 8006fbe:	f000 fea3 	bl	8007d08 <xQueueGiveFromISR>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d003      	beq.n	8006fd0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006fc8:	f06f 0302 	mvn.w	r3, #2
 8006fcc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006fce:	e018      	b.n	8007002 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d015      	beq.n	8007002 <osSemaphoreRelease+0x9a>
 8006fd6:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <osSemaphoreRelease+0xac>)
 8006fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006fe6:	e00c      	b.n	8007002 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2200      	movs	r2, #0
 8006fec:	2100      	movs	r1, #0
 8006fee:	69b8      	ldr	r0, [r7, #24]
 8006ff0:	f000 fce4 	bl	80079bc <xQueueGenericSend>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d004      	beq.n	8007004 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006ffa:	f06f 0302 	mvn.w	r3, #2
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	e000      	b.n	8007004 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007002:	bf00      	nop
    }
  }

  return (stat);
 8007004:	69fb      	ldr	r3, [r7, #28]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	2000021c 	.word	0x2000021c
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b08c      	sub	sp, #48	; 0x30
 800701c:	af02      	add	r7, sp, #8
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007028:	f3ef 8305 	mrs	r3, IPSR
 800702c:	61bb      	str	r3, [r7, #24]
  return(result);
 800702e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007030:	2b00      	cmp	r3, #0
 8007032:	d16f      	bne.n	8007114 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007034:	f3ef 8310 	mrs	r3, PRIMASK
 8007038:	617b      	str	r3, [r7, #20]
  return(result);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d105      	bne.n	800704c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007040:	f3ef 8311 	mrs	r3, BASEPRI
 8007044:	613b      	str	r3, [r7, #16]
  return(result);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d003      	beq.n	8007054 <osMessageQueueNew+0x3c>
 800704c:	4b34      	ldr	r3, [pc, #208]	; (8007120 <osMessageQueueNew+0x108>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d05f      	beq.n	8007114 <osMessageQueueNew+0xfc>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d05c      	beq.n	8007114 <osMessageQueueNew+0xfc>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d059      	beq.n	8007114 <osMessageQueueNew+0xfc>
    mem = -1;
 8007060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007064:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d029      	beq.n	80070c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d012      	beq.n	800709a <osMessageQueueNew+0x82>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	2b4f      	cmp	r3, #79	; 0x4f
 800707a:	d90e      	bls.n	800709a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <osMessageQueueNew+0x82>
        mem = 1;
 8007094:	2301      	movs	r3, #1
 8007096:	623b      	str	r3, [r7, #32]
 8007098:	e014      	b.n	80070c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d110      	bne.n	80070c4 <osMessageQueueNew+0xac>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d108      	bne.n	80070c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <osMessageQueueNew+0xac>
          mem = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	623b      	str	r3, [r7, #32]
 80070be:	e001      	b.n	80070c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80070c0:	2300      	movs	r3, #0
 80070c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d10b      	bne.n	80070e2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	2100      	movs	r1, #0
 80070d4:	9100      	str	r1, [sp, #0]
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fa5b 	bl	8007594 <xQueueGenericCreateStatic>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
 80070e0:	e008      	b.n	80070f4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d105      	bne.n	80070f4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80070e8:	2200      	movs	r2, #0
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fad3 	bl	8007698 <xQueueGenericCreate>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00c      	beq.n	8007114 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	61fb      	str	r3, [r7, #28]
 8007106:	e001      	b.n	800710c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800710c:	69f9      	ldr	r1, [r7, #28]
 800710e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007110:	f001 fa5e 	bl	80085d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007116:	4618      	mov	r0, r3
 8007118:	3728      	adds	r7, #40	; 0x28
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	2000021c 	.word	0x2000021c

08007124 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007124:	b580      	push	{r7, lr}
 8007126:	b08a      	sub	sp, #40	; 0x28
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007138:	2300      	movs	r3, #0
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800713c:	f3ef 8305 	mrs	r3, IPSR
 8007140:	61fb      	str	r3, [r7, #28]
  return(result);
 8007142:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007148:	f3ef 8310 	mrs	r3, PRIMASK
 800714c:	61bb      	str	r3, [r7, #24]
  return(result);
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007154:	f3ef 8311 	mrs	r3, BASEPRI
 8007158:	617b      	str	r3, [r7, #20]
  return(result);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02c      	beq.n	80071ba <osMessageQueuePut+0x96>
 8007160:	4b28      	ldr	r3, [pc, #160]	; (8007204 <osMessageQueuePut+0xe0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d128      	bne.n	80071ba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <osMessageQueuePut+0x56>
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <osMessageQueuePut+0x56>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800717a:	f06f 0303 	mvn.w	r3, #3
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007180:	e039      	b.n	80071f6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007186:	f107 0210 	add.w	r2, r7, #16
 800718a:	2300      	movs	r3, #0
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	6a38      	ldr	r0, [r7, #32]
 8007190:	f000 fd1a 	bl	8007bc8 <xQueueGenericSendFromISR>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800719a:	f06f 0302 	mvn.w	r3, #2
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071a0:	e029      	b.n	80071f6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d026      	beq.n	80071f6 <osMessageQueuePut+0xd2>
 80071a8:	4b17      	ldr	r3, [pc, #92]	; (8007208 <osMessageQueuePut+0xe4>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071b8:	e01d      	b.n	80071f6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <osMessageQueuePut+0xa2>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80071c6:	f06f 0303 	mvn.w	r3, #3
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
 80071cc:	e014      	b.n	80071f8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80071ce:	2300      	movs	r3, #0
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	68b9      	ldr	r1, [r7, #8]
 80071d4:	6a38      	ldr	r0, [r7, #32]
 80071d6:	f000 fbf1 	bl	80079bc <xQueueGenericSend>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d00b      	beq.n	80071f8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80071e6:	f06f 0301 	mvn.w	r3, #1
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
 80071ec:	e004      	b.n	80071f8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80071ee:	f06f 0302 	mvn.w	r3, #2
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
 80071f4:	e000      	b.n	80071f8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3728      	adds	r7, #40	; 0x28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	2000021c 	.word	0x2000021c
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	; 0x28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007222:	f3ef 8305 	mrs	r3, IPSR
 8007226:	61fb      	str	r3, [r7, #28]
  return(result);
 8007228:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10f      	bne.n	800724e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722e:	f3ef 8310 	mrs	r3, PRIMASK
 8007232:	61bb      	str	r3, [r7, #24]
  return(result);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800723a:	f3ef 8311 	mrs	r3, BASEPRI
 800723e:	617b      	str	r3, [r7, #20]
  return(result);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d02c      	beq.n	80072a0 <osMessageQueueGet+0x94>
 8007246:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <osMessageQueueGet+0xdc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d128      	bne.n	80072a0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <osMessageQueueGet+0x54>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <osMessageQueueGet+0x54>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007260:	f06f 0303 	mvn.w	r3, #3
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007266:	e038      	b.n	80072da <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800726c:	f107 0310 	add.w	r3, r7, #16
 8007270:	461a      	mov	r2, r3
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	6a38      	ldr	r0, [r7, #32]
 8007276:	f000 ffd7 	bl	8008228 <xQueueReceiveFromISR>
 800727a:	4603      	mov	r3, r0
 800727c:	2b01      	cmp	r3, #1
 800727e:	d003      	beq.n	8007288 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007280:	f06f 0302 	mvn.w	r3, #2
 8007284:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007286:	e028      	b.n	80072da <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d025      	beq.n	80072da <osMessageQueueGet+0xce>
 800728e:	4b17      	ldr	r3, [pc, #92]	; (80072ec <osMessageQueueGet+0xe0>)
 8007290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800729e:	e01c      	b.n	80072da <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <osMessageQueueGet+0xa0>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80072ac:	f06f 0303 	mvn.w	r3, #3
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
 80072b2:	e013      	b.n	80072dc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	6a38      	ldr	r0, [r7, #32]
 80072ba:	f000 fdbb 	bl	8007e34 <xQueueReceive>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d00b      	beq.n	80072dc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80072ca:	f06f 0301 	mvn.w	r3, #1
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
 80072d0:	e004      	b.n	80072dc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80072d2:	f06f 0302 	mvn.w	r3, #2
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
 80072d8:	e000      	b.n	80072dc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80072da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3728      	adds	r7, #40	; 0x28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	2000021c 	.word	0x2000021c
 80072ec:	e000ed04 	.word	0xe000ed04

080072f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4a07      	ldr	r2, [pc, #28]	; (800731c <vApplicationGetIdleTaskMemory+0x2c>)
 8007300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4a06      	ldr	r2, [pc, #24]	; (8007320 <vApplicationGetIdleTaskMemory+0x30>)
 8007306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	601a      	str	r2, [r3, #0]
}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20000220 	.word	0x20000220
 8007320:	2000027c 	.word	0x2000027c

08007324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4a07      	ldr	r2, [pc, #28]	; (8007350 <vApplicationGetTimerTaskMemory+0x2c>)
 8007334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4a06      	ldr	r2, [pc, #24]	; (8007354 <vApplicationGetTimerTaskMemory+0x30>)
 800733a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	2000047c 	.word	0x2000047c
 8007354:	200004d8 	.word	0x200004d8

08007358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f103 0208 	add.w	r2, r3, #8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f103 0208 	add.w	r2, r3, #8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f103 0208 	add.w	r2, r3, #8
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	601a      	str	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007410:	d103      	bne.n	800741a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	e00c      	b.n	8007434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3308      	adds	r3, #8
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e002      	b.n	8007428 <vListInsert+0x2e>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	429a      	cmp	r2, r3
 8007432:	d2f6      	bcs.n	8007422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
}
 8007460:	bf00      	nop
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6892      	ldr	r2, [r2, #8]
 8007482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6852      	ldr	r2, [r2, #4]
 800748c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	429a      	cmp	r2, r3
 8007496:	d103      	bne.n	80074a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	1e5a      	subs	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10c      	bne.n	80074ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d8:	b672      	cpsid	i
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	b662      	cpsie	i
 80074e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074ea:	bf00      	nop
 80074ec:	e7fe      	b.n	80074ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80074ee:	f002 fda5 	bl	800a03c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	441a      	add	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	3b01      	subs	r3, #1
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007524:	fb01 f303 	mul.w	r3, r1, r3
 8007528:	441a      	add	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	22ff      	movs	r2, #255	; 0xff
 8007532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	22ff      	movs	r2, #255	; 0xff
 800753a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d114      	bne.n	800756e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3310      	adds	r3, #16
 8007550:	4618      	mov	r0, r3
 8007552:	f001 fd4f 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d012      	beq.n	8007582 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <xQueueGenericReset+0xd0>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	e009      	b.n	8007582 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3310      	adds	r3, #16
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff fef0 	bl	8007358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3324      	adds	r3, #36	; 0x24
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff feeb 	bl	8007358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007582:	f002 fd8f 	bl	800a0a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007586:	2301      	movs	r3, #1
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08e      	sub	sp, #56	; 0x38
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
 80075a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10c      	bne.n	80075c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	b672      	cpsid	i
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	b662      	cpsie	i
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10c      	bne.n	80075e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	b672      	cpsid	i
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	b662      	cpsie	i
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <xQueueGenericCreateStatic+0x5a>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <xQueueGenericCreateStatic+0x5e>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <xQueueGenericCreateStatic+0x60>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	b672      	cpsid	i
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	b662      	cpsie	i
 800760c:	623b      	str	r3, [r7, #32]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d102      	bne.n	800761e <xQueueGenericCreateStatic+0x8a>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <xQueueGenericCreateStatic+0x8e>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <xQueueGenericCreateStatic+0x90>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10c      	bne.n	8007642 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	61fb      	str	r3, [r7, #28]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007642:	2350      	movs	r3, #80	; 0x50
 8007644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b50      	cmp	r3, #80	; 0x50
 800764a:	d00c      	beq.n	8007666 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	b672      	cpsid	i
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	b662      	cpsie	i
 8007660:	61bb      	str	r3, [r7, #24]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007666:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00d      	beq.n	800768e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800767a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f847 	bl	800771c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007690:	4618      	mov	r0, r3
 8007692:	3730      	adds	r7, #48	; 0x30
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4613      	mov	r3, r2
 80076a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10c      	bne.n	80076c6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	b672      	cpsid	i
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	b662      	cpsie	i
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e004      	b.n	80076dc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3350      	adds	r3, #80	; 0x50
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 fdd7 	bl	800a294 <pvPortMalloc>
 80076e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d011      	beq.n	8007712 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3350      	adds	r3, #80	; 0x50
 80076f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007700:	79fa      	ldrb	r2, [r7, #7]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	4613      	mov	r3, r2
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f805 	bl	800771c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007712:	69bb      	ldr	r3, [r7, #24]
	}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	e002      	b.n	800773e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800774a:	2101      	movs	r1, #1
 800774c:	69b8      	ldr	r0, [r7, #24]
 800774e:	f7ff feb7 	bl	80074c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	78fa      	ldrb	r2, [r7, #3]
 8007756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00e      	beq.n	800778e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007782:	2300      	movs	r3, #0
 8007784:	2200      	movs	r2, #0
 8007786:	2100      	movs	r1, #0
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f917 	bl	80079bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800778e:	bf00      	nop
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007796:	b580      	push	{r7, lr}
 8007798:	b086      	sub	sp, #24
 800779a:	af00      	add	r7, sp, #0
 800779c:	4603      	mov	r3, r0
 800779e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077a0:	2301      	movs	r3, #1
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	2300      	movs	r3, #0
 80077a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	461a      	mov	r2, r3
 80077ac:	6939      	ldr	r1, [r7, #16]
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f7ff ff72 	bl	8007698 <xQueueGenericCreate>
 80077b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f7ff ffd3 	bl	8007762 <prvInitialiseMutex>

		return xNewQueue;
 80077bc:	68fb      	ldr	r3, [r7, #12]
	}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af02      	add	r7, sp, #8
 80077cc:	4603      	mov	r3, r0
 80077ce:	6039      	str	r1, [r7, #0]
 80077d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2200      	movs	r2, #0
 80077e2:	6939      	ldr	r1, [r7, #16]
 80077e4:	6978      	ldr	r0, [r7, #20]
 80077e6:	f7ff fed5 	bl	8007594 <xQueueGenericCreateStatic>
 80077ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7ff ffb8 	bl	8007762 <prvInitialiseMutex>

		return xNewQueue;
 80077f2:	68fb      	ldr	r3, [r7, #12]
	}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10c      	bne.n	8007828 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	b672      	cpsid	i
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	b662      	cpsie	i
 8007822:	60fb      	str	r3, [r7, #12]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	689c      	ldr	r4, [r3, #8]
 800782c:	f001 fda8 	bl	8009380 <xTaskGetCurrentTaskHandle>
 8007830:	4603      	mov	r3, r0
 8007832:	429c      	cmp	r4, r3
 8007834:	d111      	bne.n	800785a <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	1e5a      	subs	r2, r3, #1
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007848:	2300      	movs	r3, #0
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	6938      	ldr	r0, [r7, #16]
 8007850:	f000 f8b4 	bl	80079bc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007854:	2301      	movs	r3, #1
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	e001      	b.n	800785e <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800785e:	697b      	ldr	r3, [r7, #20]
	}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd90      	pop	{r4, r7, pc}

08007868 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10c      	bne.n	8007896 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	b672      	cpsid	i
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	b662      	cpsie	i
 8007890:	60fb      	str	r3, [r7, #12]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	689c      	ldr	r4, [r3, #8]
 800789a:	f001 fd71 	bl	8009380 <xTaskGetCurrentTaskHandle>
 800789e:	4603      	mov	r3, r0
 80078a0:	429c      	cmp	r4, r3
 80078a2:	d107      	bne.n	80078b4 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80078ae:	2301      	movs	r3, #1
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	e00c      	b.n	80078ce <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6938      	ldr	r0, [r7, #16]
 80078b8:	f000 fba2 	bl	8008000 <xQueueSemaphoreTake>
 80078bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80078ce:	697b      	ldr	r3, [r7, #20]
	}
 80078d0:	4618      	mov	r0, r3
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd90      	pop	{r4, r7, pc}

080078d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10c      	bne.n	8007904 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	b672      	cpsid	i
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	b662      	cpsie	i
 80078fe:	61bb      	str	r3, [r7, #24]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	429a      	cmp	r2, r3
 800790a:	d90c      	bls.n	8007926 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	b672      	cpsid	i
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	b662      	cpsie	i
 8007920:	617b      	str	r3, [r7, #20]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007926:	2302      	movs	r3, #2
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	2100      	movs	r1, #0
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f7ff fe2f 	bl	8007594 <xQueueGenericCreateStatic>
 8007936:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007944:	69fb      	ldr	r3, [r7, #28]
	}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10c      	bne.n	8007978 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	b672      	cpsid	i
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	b662      	cpsie	i
 8007972:	613b      	str	r3, [r7, #16]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d90c      	bls.n	800799a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	b672      	cpsid	i
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	b662      	cpsie	i
 8007994:	60fb      	str	r3, [r7, #12]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800799a:	2202      	movs	r2, #2
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff fe7a 	bl	8007698 <xQueueGenericCreate>
 80079a4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80079b2:	697b      	ldr	r3, [r7, #20]
	}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08e      	sub	sp, #56	; 0x38
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079ca:	2300      	movs	r3, #0
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10c      	bne.n	80079f2 <xQueueGenericSend+0x36>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	b672      	cpsid	i
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	b662      	cpsie	i
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d103      	bne.n	8007a00 <xQueueGenericSend+0x44>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <xQueueGenericSend+0x48>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <xQueueGenericSend+0x4a>
 8007a04:	2300      	movs	r3, #0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10c      	bne.n	8007a24 <xQueueGenericSend+0x68>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	b672      	cpsid	i
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	b662      	cpsie	i
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a20:	bf00      	nop
 8007a22:	e7fe      	b.n	8007a22 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d103      	bne.n	8007a32 <xQueueGenericSend+0x76>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <xQueueGenericSend+0x7a>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueGenericSend+0x7c>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10c      	bne.n	8007a56 <xQueueGenericSend+0x9a>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	b672      	cpsid	i
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	b662      	cpsie	i
 8007a50:	623b      	str	r3, [r7, #32]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a56:	f001 fca3 	bl	80093a0 <xTaskGetSchedulerState>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <xQueueGenericSend+0xaa>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <xQueueGenericSend+0xae>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <xQueueGenericSend+0xb0>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <xQueueGenericSend+0xce>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	b672      	cpsid	i
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	b662      	cpsie	i
 8007a84:	61fb      	str	r3, [r7, #28]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a8a:	f002 fad7 	bl	800a03c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d302      	bcc.n	8007aa0 <xQueueGenericSend+0xe4>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d129      	bne.n	8007af4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa6:	f000 fc82 	bl	80083ae <prvCopyDataToQueue>
 8007aaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d010      	beq.n	8007ad6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	3324      	adds	r3, #36	; 0x24
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 fa9b 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d013      	beq.n	8007aec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b3f      	ldr	r3, [pc, #252]	; (8007bc4 <xQueueGenericSend+0x208>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	e00a      	b.n	8007aec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d007      	beq.n	8007aec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007adc:	4b39      	ldr	r3, [pc, #228]	; (8007bc4 <xQueueGenericSend+0x208>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007aec:	f002 fada 	bl	800a0a4 <vPortExitCritical>
				return pdPASS;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e063      	b.n	8007bbc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d103      	bne.n	8007b02 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007afa:	f002 fad3 	bl	800a0a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	e05c      	b.n	8007bbc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d106      	bne.n	8007b16 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b08:	f107 0314 	add.w	r3, r7, #20
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 fad7 	bl	80090c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b16:	f002 fac5 	bl	800a0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b1a:	f001 f82b 	bl	8008b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b1e:	f002 fa8d 	bl	800a03c <vPortEnterCritical>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b28:	b25b      	sxtb	r3, r3
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b2e:	d103      	bne.n	8007b38 <xQueueGenericSend+0x17c>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b3e:	b25b      	sxtb	r3, r3
 8007b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b44:	d103      	bne.n	8007b4e <xQueueGenericSend+0x192>
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b4e:	f002 faa9 	bl	800a0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b52:	1d3a      	adds	r2, r7, #4
 8007b54:	f107 0314 	add.w	r3, r7, #20
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 fac6 	bl	80090ec <xTaskCheckForTimeOut>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d124      	bne.n	8007bb0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b68:	f000 fd19 	bl	800859e <prvIsQueueFull>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d018      	beq.n	8007ba4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	3310      	adds	r3, #16
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 f9e6 	bl	8008f4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b82:	f000 fca4 	bl	80084ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b86:	f001 f803 	bl	8008b90 <xTaskResumeAll>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f47f af7c 	bne.w	8007a8a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <xQueueGenericSend+0x208>)
 8007b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	e772      	b.n	8007a8a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ba6:	f000 fc92 	bl	80084ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007baa:	f000 fff1 	bl	8008b90 <xTaskResumeAll>
 8007bae:	e76c      	b.n	8007a8a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb2:	f000 fc8c 	bl	80084ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bb6:	f000 ffeb 	bl	8008b90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3738      	adds	r7, #56	; 0x38
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08e      	sub	sp, #56	; 0x38
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10c      	bne.n	8007bfa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	b672      	cpsid	i
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	b662      	cpsie	i
 8007bf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <xQueueGenericSendFromISR+0x40>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <xQueueGenericSendFromISR+0x44>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <xQueueGenericSendFromISR+0x46>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10c      	bne.n	8007c2c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	623b      	str	r3, [r7, #32]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d103      	bne.n	8007c3a <xQueueGenericSendFromISR+0x72>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <xQueueGenericSendFromISR+0x76>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e000      	b.n	8007c40 <xQueueGenericSendFromISR+0x78>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10c      	bne.n	8007c5e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	b672      	cpsid	i
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	b662      	cpsie	i
 8007c58:	61fb      	str	r3, [r7, #28]
}
 8007c5a:	bf00      	nop
 8007c5c:	e7fe      	b.n	8007c5c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c5e:	f002 fad5 	bl	800a20c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c62:	f3ef 8211 	mrs	r2, BASEPRI
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	b672      	cpsid	i
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	b662      	cpsie	i
 8007c7a:	61ba      	str	r2, [r7, #24]
 8007c7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d302      	bcc.n	8007c94 <xQueueGenericSendFromISR+0xcc>
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d12c      	bne.n	8007cee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68b9      	ldr	r1, [r7, #8]
 8007ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ca4:	f000 fb83 	bl	80083ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ca8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb0:	d112      	bne.n	8007cd8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d016      	beq.n	8007ce8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	3324      	adds	r3, #36	; 0x24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 f998 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00e      	beq.n	8007ce8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00b      	beq.n	8007ce8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e007      	b.n	8007ce8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cdc:	3301      	adds	r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	b25a      	sxtb	r2, r3
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007cec:	e001      	b.n	8007cf2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007cfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3738      	adds	r7, #56	; 0x38
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b08e      	sub	sp, #56	; 0x38
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10c      	bne.n	8007d36 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	b672      	cpsid	i
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	b662      	cpsie	i
 8007d30:	623b      	str	r3, [r7, #32]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	b672      	cpsid	i
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	b662      	cpsie	i
 8007d52:	61fb      	str	r3, [r7, #28]
}
 8007d54:	bf00      	nop
 8007d56:	e7fe      	b.n	8007d56 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <xQueueGiveFromISR+0x60>
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <xQueueGiveFromISR+0x64>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <xQueueGiveFromISR+0x66>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10c      	bne.n	8007d8c <xQueueGiveFromISR+0x84>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	b672      	cpsid	i
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	b662      	cpsie	i
 8007d86:	61bb      	str	r3, [r7, #24]
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d8c:	f002 fa3e 	bl	800a20c <vPortValidateInterruptPriority>
	__asm volatile
 8007d90:	f3ef 8211 	mrs	r2, BASEPRI
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	b672      	cpsid	i
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	b662      	cpsie	i
 8007da8:	617a      	str	r2, [r7, #20]
 8007daa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007dac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d22b      	bcs.n	8007e18 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007dd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dda:	d112      	bne.n	8007e02 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d016      	beq.n	8007e12 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	3324      	adds	r3, #36	; 0x24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f903 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	e007      	b.n	8007e12 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e06:	3301      	adds	r3, #1
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	b25a      	sxtb	r2, r3
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e12:	2301      	movs	r3, #1
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
 8007e16:	e001      	b.n	8007e1c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f383 8811 	msr	BASEPRI, r3
}
 8007e26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3738      	adds	r7, #56	; 0x38
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08c      	sub	sp, #48	; 0x30
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10c      	bne.n	8007e68 <xQueueReceive+0x34>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	b672      	cpsid	i
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	b662      	cpsie	i
 8007e62:	623b      	str	r3, [r7, #32]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <xQueueReceive+0x42>
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <xQueueReceive+0x46>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <xQueueReceive+0x48>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10c      	bne.n	8007e9a <xQueueReceive+0x66>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	61fb      	str	r3, [r7, #28]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e9a:	f001 fa81 	bl	80093a0 <xTaskGetSchedulerState>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d102      	bne.n	8007eaa <xQueueReceive+0x76>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <xQueueReceive+0x7a>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <xQueueReceive+0x7c>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10c      	bne.n	8007ece <xQueueReceive+0x9a>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	b672      	cpsid	i
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	b662      	cpsie	i
 8007ec8:	61bb      	str	r3, [r7, #24]
}
 8007eca:	bf00      	nop
 8007ecc:	e7fe      	b.n	8007ecc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ece:	f002 f8b5 	bl	800a03c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01f      	beq.n	8007f1e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee2:	f000 face 	bl	8008482 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	1e5a      	subs	r2, r3, #1
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00f      	beq.n	8007f16 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef8:	3310      	adds	r3, #16
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 f87a 	bl	8008ff4 <xTaskRemoveFromEventList>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f06:	4b3d      	ldr	r3, [pc, #244]	; (8007ffc <xQueueReceive+0x1c8>)
 8007f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f16:	f002 f8c5 	bl	800a0a4 <vPortExitCritical>
				return pdPASS;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e069      	b.n	8007ff2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d103      	bne.n	8007f2c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f24:	f002 f8be 	bl	800a0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	e062      	b.n	8007ff2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f32:	f107 0310 	add.w	r3, r7, #16
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 f8c2 	bl	80090c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f40:	f002 f8b0 	bl	800a0a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f44:	f000 fe16 	bl	8008b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f48:	f002 f878 	bl	800a03c <vPortEnterCritical>
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f52:	b25b      	sxtb	r3, r3
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f58:	d103      	bne.n	8007f62 <xQueueReceive+0x12e>
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f68:	b25b      	sxtb	r3, r3
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f6e:	d103      	bne.n	8007f78 <xQueueReceive+0x144>
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f78:	f002 f894 	bl	800a0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f7c:	1d3a      	adds	r2, r7, #4
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	4611      	mov	r1, r2
 8007f84:	4618      	mov	r0, r3
 8007f86:	f001 f8b1 	bl	80090ec <xTaskCheckForTimeOut>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d123      	bne.n	8007fd8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f92:	f000 faee 	bl	8008572 <prvIsQueueEmpty>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d017      	beq.n	8007fcc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	3324      	adds	r3, #36	; 0x24
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 ffd1 	bl	8008f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fac:	f000 fa8f 	bl	80084ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fb0:	f000 fdee 	bl	8008b90 <xTaskResumeAll>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d189      	bne.n	8007ece <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <xQueueReceive+0x1c8>)
 8007fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	e780      	b.n	8007ece <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fce:	f000 fa7e 	bl	80084ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fd2:	f000 fddd 	bl	8008b90 <xTaskResumeAll>
 8007fd6:	e77a      	b.n	8007ece <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fda:	f000 fa78 	bl	80084ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fde:	f000 fdd7 	bl	8008b90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe4:	f000 fac5 	bl	8008572 <prvIsQueueEmpty>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f43f af6f 	beq.w	8007ece <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3730      	adds	r7, #48	; 0x30
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	e000ed04 	.word	0xe000ed04

08008000 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08e      	sub	sp, #56	; 0x38
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008012:	2300      	movs	r3, #0
 8008014:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10c      	bne.n	8008036 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	b672      	cpsid	i
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	b662      	cpsie	i
 8008030:	623b      	str	r3, [r7, #32]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00c      	beq.n	8008058 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	b672      	cpsid	i
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	b662      	cpsie	i
 8008052:	61fb      	str	r3, [r7, #28]
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008058:	f001 f9a2 	bl	80093a0 <xTaskGetSchedulerState>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <xQueueSemaphoreTake+0x68>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <xQueueSemaphoreTake+0x6c>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <xQueueSemaphoreTake+0x6e>
 800806c:	2300      	movs	r3, #0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10c      	bne.n	800808c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	b672      	cpsid	i
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	b662      	cpsie	i
 8008086:	61bb      	str	r3, [r7, #24]
}
 8008088:	bf00      	nop
 800808a:	e7fe      	b.n	800808a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800808c:	f001 ffd6 	bl	800a03c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	2b00      	cmp	r3, #0
 800809a:	d024      	beq.n	80080e6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	1e5a      	subs	r2, r3, #1
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080ac:	f001 faf6 	bl	800969c <pvTaskIncrementMutexHeldCount>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00f      	beq.n	80080de <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	3310      	adds	r3, #16
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 ff96 	bl	8008ff4 <xTaskRemoveFromEventList>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080ce:	4b55      	ldr	r3, [pc, #340]	; (8008224 <xQueueSemaphoreTake+0x224>)
 80080d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080de:	f001 ffe1 	bl	800a0a4 <vPortExitCritical>
				return pdPASS;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e099      	b.n	800821a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d113      	bne.n	8008114 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00c      	beq.n	800810c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	b672      	cpsid	i
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	b662      	cpsie	i
 8008106:	617b      	str	r3, [r7, #20]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800810c:	f001 ffca 	bl	800a0a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008110:	2300      	movs	r3, #0
 8008112:	e082      	b.n	800821a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800811a:	f107 030c 	add.w	r3, r7, #12
 800811e:	4618      	mov	r0, r3
 8008120:	f000 ffce 	bl	80090c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008128:	f001 ffbc 	bl	800a0a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800812c:	f000 fd22 	bl	8008b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008130:	f001 ff84 	bl	800a03c <vPortEnterCritical>
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800813a:	b25b      	sxtb	r3, r3
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008140:	d103      	bne.n	800814a <xQueueSemaphoreTake+0x14a>
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008150:	b25b      	sxtb	r3, r3
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008156:	d103      	bne.n	8008160 <xQueueSemaphoreTake+0x160>
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008160:	f001 ffa0 	bl	800a0a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008164:	463a      	mov	r2, r7
 8008166:	f107 030c 	add.w	r3, r7, #12
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f000 ffbd 	bl	80090ec <xTaskCheckForTimeOut>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d132      	bne.n	80081de <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800817a:	f000 f9fa 	bl	8008572 <prvIsQueueEmpty>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d026      	beq.n	80081d2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d109      	bne.n	80081a0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800818c:	f001 ff56 	bl	800a03c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	4618      	mov	r0, r3
 8008196:	f001 f921 	bl	80093dc <xTaskPriorityInherit>
 800819a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800819c:	f001 ff82 	bl	800a0a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a2:	3324      	adds	r3, #36	; 0x24
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	4611      	mov	r1, r2
 80081a8:	4618      	mov	r0, r3
 80081aa:	f000 fecf 	bl	8008f4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081b0:	f000 f98d 	bl	80084ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081b4:	f000 fcec 	bl	8008b90 <xTaskResumeAll>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f47f af66 	bne.w	800808c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80081c0:	4b18      	ldr	r3, [pc, #96]	; (8008224 <xQueueSemaphoreTake+0x224>)
 80081c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	e75c      	b.n	800808c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081d4:	f000 f97b 	bl	80084ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081d8:	f000 fcda 	bl	8008b90 <xTaskResumeAll>
 80081dc:	e756      	b.n	800808c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081e0:	f000 f975 	bl	80084ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081e4:	f000 fcd4 	bl	8008b90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ea:	f000 f9c2 	bl	8008572 <prvIsQueueEmpty>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f43f af4b 	beq.w	800808c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00d      	beq.n	8008218 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80081fc:	f001 ff1e 	bl	800a03c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008202:	f000 f8bc 	bl	800837e <prvGetDisinheritPriorityAfterTimeout>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800820e:	4618      	mov	r0, r3
 8008210:	f001 f9be 	bl	8009590 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008214:	f001 ff46 	bl	800a0a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800821a:	4618      	mov	r0, r3
 800821c:	3738      	adds	r7, #56	; 0x38
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	e000ed04 	.word	0xe000ed04

08008228 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b08e      	sub	sp, #56	; 0x38
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10c      	bne.n	8008258 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	b672      	cpsid	i
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	b662      	cpsie	i
 8008252:	623b      	str	r3, [r7, #32]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d103      	bne.n	8008266 <xQueueReceiveFromISR+0x3e>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	2b00      	cmp	r3, #0
 8008264:	d101      	bne.n	800826a <xQueueReceiveFromISR+0x42>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <xQueueReceiveFromISR+0x44>
 800826a:	2300      	movs	r3, #0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	b672      	cpsid	i
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	b662      	cpsie	i
 8008284:	61fb      	str	r3, [r7, #28]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800828a:	f001 ffbf 	bl	800a20c <vPortValidateInterruptPriority>
	__asm volatile
 800828e:	f3ef 8211 	mrs	r2, BASEPRI
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	61ba      	str	r2, [r7, #24]
 80082a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80082aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02f      	beq.n	800831a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082c8:	f000 f8db 	bl	8008482 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	1e5a      	subs	r2, r3, #1
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80082d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082dc:	d112      	bne.n	8008304 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d016      	beq.n	8008314 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e8:	3310      	adds	r3, #16
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fe82 	bl	8008ff4 <xTaskRemoveFromEventList>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00e      	beq.n	8008314 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e007      	b.n	8008314 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008308:	3301      	adds	r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	b25a      	sxtb	r2, r3
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008314:	2301      	movs	r3, #1
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
 8008318:	e001      	b.n	800831e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800831a:	2300      	movs	r3, #0
 800831c:	637b      	str	r3, [r7, #52]	; 0x34
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f383 8811 	msr	BASEPRI, r3
}
 8008328:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800832c:	4618      	mov	r0, r3
 800832e:	3738      	adds	r7, #56	; 0x38
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10c      	bne.n	8008360 <vQueueDelete+0x2c>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	b672      	cpsid	i
 800834c:	f383 8811 	msr	BASEPRI, r3
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	f3bf 8f4f 	dsb	sy
 8008358:	b662      	cpsie	i
 800835a:	60bb      	str	r3, [r7, #8]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 f95f 	bl	8008624 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f002 f859 	bl	800a428 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800837e:	b480      	push	{r7}
 8008380:	b085      	sub	sp, #20
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d006      	beq.n	800839c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008398:	60fb      	str	r3, [r7, #12]
 800839a:	e001      	b.n	80083a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80083a0:	68fb      	ldr	r3, [r7, #12]
	}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b086      	sub	sp, #24
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	60f8      	str	r0, [r7, #12]
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10d      	bne.n	80083e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d14d      	bne.n	8008470 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 f867 	bl	80094ac <xTaskPriorityDisinherit>
 80083de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
 80083e6:	e043      	b.n	8008470 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d119      	bne.n	8008422 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6858      	ldr	r0, [r3, #4]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f6:	461a      	mov	r2, r3
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	f00e fb5b 	bl	8016ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	441a      	add	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	429a      	cmp	r2, r3
 8008416:	d32b      	bcc.n	8008470 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	605a      	str	r2, [r3, #4]
 8008420:	e026      	b.n	8008470 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68d8      	ldr	r0, [r3, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	461a      	mov	r2, r3
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	f00e fb41 	bl	8016ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	425b      	negs	r3, r3
 800843c:	441a      	add	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d207      	bcs.n	800845e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	425b      	negs	r3, r3
 8008458:	441a      	add	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d105      	bne.n	8008470 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3b01      	subs	r3, #1
 800846e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008478:	697b      	ldr	r3, [r7, #20]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	d018      	beq.n	80084c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	441a      	add	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d303      	bcc.n	80084b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68d9      	ldr	r1, [r3, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	461a      	mov	r2, r3
 80084c0:	6838      	ldr	r0, [r7, #0]
 80084c2:	f00e faf7 	bl	8016ab4 <memcpy>
	}
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084d6:	f001 fdb1 	bl	800a03c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084e2:	e011      	b.n	8008508 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d012      	beq.n	8008512 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3324      	adds	r3, #36	; 0x24
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fd7f 	bl	8008ff4 <xTaskRemoveFromEventList>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084fc:	f000 fe5c 	bl	80091b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	3b01      	subs	r3, #1
 8008504:	b2db      	uxtb	r3, r3
 8008506:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	dce9      	bgt.n	80084e4 <prvUnlockQueue+0x16>
 8008510:	e000      	b.n	8008514 <prvUnlockQueue+0x46>
					break;
 8008512:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	22ff      	movs	r2, #255	; 0xff
 8008518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800851c:	f001 fdc2 	bl	800a0a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008520:	f001 fd8c 	bl	800a03c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800852a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800852c:	e011      	b.n	8008552 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d012      	beq.n	800855c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3310      	adds	r3, #16
 800853a:	4618      	mov	r0, r3
 800853c:	f000 fd5a 	bl	8008ff4 <xTaskRemoveFromEventList>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008546:	f000 fe37 	bl	80091b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	3b01      	subs	r3, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dce9      	bgt.n	800852e <prvUnlockQueue+0x60>
 800855a:	e000      	b.n	800855e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800855c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	22ff      	movs	r2, #255	; 0xff
 8008562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008566:	f001 fd9d 	bl	800a0a4 <vPortExitCritical>
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800857a:	f001 fd5f 	bl	800a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008586:	2301      	movs	r3, #1
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	e001      	b.n	8008590 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008590:	f001 fd88 	bl	800a0a4 <vPortExitCritical>

	return xReturn;
 8008594:	68fb      	ldr	r3, [r7, #12]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085a6:	f001 fd49 	bl	800a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d102      	bne.n	80085bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085b6:	2301      	movs	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e001      	b.n	80085c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085c0:	f001 fd70 	bl	800a0a4 <vPortExitCritical>

	return xReturn;
 80085c4:	68fb      	ldr	r3, [r7, #12]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
	...

080085d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085da:	2300      	movs	r3, #0
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	e014      	b.n	800860a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085e0:	4a0f      	ldr	r2, [pc, #60]	; (8008620 <vQueueAddToRegistry+0x50>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10b      	bne.n	8008604 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085ec:	490c      	ldr	r1, [pc, #48]	; (8008620 <vQueueAddToRegistry+0x50>)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085f6:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <vQueueAddToRegistry+0x50>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008602:	e006      	b.n	8008612 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3301      	adds	r3, #1
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b07      	cmp	r3, #7
 800860e:	d9e7      	bls.n	80085e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	2000f53c 	.word	0x2000f53c

08008624 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	e016      	b.n	8008660 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008632:	4a10      	ldr	r2, [pc, #64]	; (8008674 <vQueueUnregisterQueue+0x50>)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	4413      	add	r3, r2
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	429a      	cmp	r2, r3
 8008640:	d10b      	bne.n	800865a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008642:	4a0c      	ldr	r2, [pc, #48]	; (8008674 <vQueueUnregisterQueue+0x50>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2100      	movs	r1, #0
 8008648:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800864c:	4a09      	ldr	r2, [pc, #36]	; (8008674 <vQueueUnregisterQueue+0x50>)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	4413      	add	r3, r2
 8008654:	2200      	movs	r2, #0
 8008656:	605a      	str	r2, [r3, #4]
				break;
 8008658:	e006      	b.n	8008668 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	60fb      	str	r3, [r7, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b07      	cmp	r3, #7
 8008664:	d9e5      	bls.n	8008632 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	2000f53c 	.word	0x2000f53c

08008678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008688:	f001 fcd8 	bl	800a03c <vPortEnterCritical>
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008692:	b25b      	sxtb	r3, r3
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008698:	d103      	bne.n	80086a2 <vQueueWaitForMessageRestricted+0x2a>
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a8:	b25b      	sxtb	r3, r3
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ae:	d103      	bne.n	80086b8 <vQueueWaitForMessageRestricted+0x40>
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086b8:	f001 fcf4 	bl	800a0a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d106      	bne.n	80086d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	3324      	adds	r3, #36	; 0x24
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fc63 	bl	8008f98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80086d2:	6978      	ldr	r0, [r7, #20]
 80086d4:	f7ff fefb 	bl	80084ce <prvUnlockQueue>
	}
 80086d8:	bf00      	nop
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08e      	sub	sp, #56	; 0x38
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <xTaskCreateStatic+0x2e>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	b672      	cpsid	i
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	b662      	cpsie	i
 8008708:	623b      	str	r3, [r7, #32]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10c      	bne.n	800872e <xTaskCreateStatic+0x4e>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	b672      	cpsid	i
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	b662      	cpsie	i
 8008728:	61fb      	str	r3, [r7, #28]
}
 800872a:	bf00      	nop
 800872c:	e7fe      	b.n	800872c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800872e:	235c      	movs	r3, #92	; 0x5c
 8008730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b5c      	cmp	r3, #92	; 0x5c
 8008736:	d00c      	beq.n	8008752 <xTaskCreateStatic+0x72>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	b672      	cpsid	i
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	b662      	cpsie	i
 800874c:	61bb      	str	r3, [r7, #24]
}
 800874e:	bf00      	nop
 8008750:	e7fe      	b.n	8008750 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008752:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	2b00      	cmp	r3, #0
 8008758:	d01e      	beq.n	8008798 <xTaskCreateStatic+0xb8>
 800875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01b      	beq.n	8008798 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008768:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	2202      	movs	r2, #2
 800876e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008772:	2300      	movs	r3, #0
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	f107 0314 	add.w	r3, r7, #20
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f000 f850 	bl	8008830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008792:	f000 f8df 	bl	8008954 <prvAddNewTaskToReadyList>
 8008796:	e001      	b.n	800879c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800879c:	697b      	ldr	r3, [r7, #20]
	}
 800879e:	4618      	mov	r0, r3
 80087a0:	3728      	adds	r7, #40	; 0x28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b08c      	sub	sp, #48	; 0x30
 80087aa:	af04      	add	r7, sp, #16
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	603b      	str	r3, [r7, #0]
 80087b2:	4613      	mov	r3, r2
 80087b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f001 fd6a 	bl	800a294 <pvPortMalloc>
 80087c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087c8:	205c      	movs	r0, #92	; 0x5c
 80087ca:	f001 fd63 	bl	800a294 <pvPortMalloc>
 80087ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	631a      	str	r2, [r3, #48]	; 0x30
 80087dc:	e005      	b.n	80087ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087de:	6978      	ldr	r0, [r7, #20]
 80087e0:	f001 fe22 	bl	800a428 <vPortFree>
 80087e4:	e001      	b.n	80087ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d017      	beq.n	8008820 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087f8:	88fa      	ldrh	r2, [r7, #6]
 80087fa:	2300      	movs	r3, #0
 80087fc:	9303      	str	r3, [sp, #12]
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	9302      	str	r3, [sp, #8]
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68b9      	ldr	r1, [r7, #8]
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f80e 	bl	8008830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008814:	69f8      	ldr	r0, [r7, #28]
 8008816:	f000 f89d 	bl	8008954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800881a:	2301      	movs	r3, #1
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	e002      	b.n	8008826 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008824:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008826:	69bb      	ldr	r3, [r7, #24]
	}
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	461a      	mov	r2, r3
 8008848:	21a5      	movs	r1, #165	; 0xa5
 800884a:	f00e f95b 	bl	8016b04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008850:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008858:	440b      	add	r3, r1
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	f023 0307 	bic.w	r3, r3, #7
 8008866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f003 0307 	and.w	r3, r3, #7
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00c      	beq.n	800888c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	b672      	cpsid	i
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	b662      	cpsie	i
 8008886:	617b      	str	r3, [r7, #20]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d01f      	beq.n	80088d2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008892:	2300      	movs	r3, #0
 8008894:	61fb      	str	r3, [r7, #28]
 8008896:	e012      	b.n	80088be <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	7819      	ldrb	r1, [r3, #0]
 80088a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	4413      	add	r3, r2
 80088a6:	3334      	adds	r3, #52	; 0x34
 80088a8:	460a      	mov	r2, r1
 80088aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d006      	beq.n	80088c6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	3301      	adds	r3, #1
 80088bc:	61fb      	str	r3, [r7, #28]
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	2b0f      	cmp	r3, #15
 80088c2:	d9e9      	bls.n	8008898 <prvInitialiseNewTask+0x68>
 80088c4:	e000      	b.n	80088c8 <prvInitialiseNewTask+0x98>
			{
				break;
 80088c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088d0:	e003      	b.n	80088da <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088dc:	2b37      	cmp	r3, #55	; 0x37
 80088de:	d901      	bls.n	80088e4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088e0:	2337      	movs	r3, #55	; 0x37
 80088e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	2200      	movs	r2, #0
 80088f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	3304      	adds	r3, #4
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fd4c 	bl	8007398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	3318      	adds	r3, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fd47 	bl	8007398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	2200      	movs	r2, #0
 8008924:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	68f9      	ldr	r1, [r7, #12]
 8008932:	69b8      	ldr	r0, [r7, #24]
 8008934:	f001 fa76 	bl	8009e24 <pxPortInitialiseStack>
 8008938:	4602      	mov	r2, r0
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008948:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800894a:	bf00      	nop
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800895c:	f001 fb6e 	bl	800a03c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <prvAddNewTaskToReadyList+0xc4>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <prvAddNewTaskToReadyList+0xc4>)
 8008968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800896a:	4b2c      	ldr	r3, [pc, #176]	; (8008a1c <prvAddNewTaskToReadyList+0xc8>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008972:	4a2a      	ldr	r2, [pc, #168]	; (8008a1c <prvAddNewTaskToReadyList+0xc8>)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008978:	4b27      	ldr	r3, [pc, #156]	; (8008a18 <prvAddNewTaskToReadyList+0xc4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d110      	bne.n	80089a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008980:	f000 fc3e 	bl	8009200 <prvInitialiseTaskLists>
 8008984:	e00d      	b.n	80089a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008986:	4b26      	ldr	r3, [pc, #152]	; (8008a20 <prvAddNewTaskToReadyList+0xcc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800898e:	4b23      	ldr	r3, [pc, #140]	; (8008a1c <prvAddNewTaskToReadyList+0xc8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	429a      	cmp	r2, r3
 800899a:	d802      	bhi.n	80089a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800899c:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <prvAddNewTaskToReadyList+0xc8>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089a2:	4b20      	ldr	r3, [pc, #128]	; (8008a24 <prvAddNewTaskToReadyList+0xd0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	4a1e      	ldr	r2, [pc, #120]	; (8008a24 <prvAddNewTaskToReadyList+0xd0>)
 80089aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089ac:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <prvAddNewTaskToReadyList+0xd0>)
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <prvAddNewTaskToReadyList+0xd4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <prvAddNewTaskToReadyList+0x74>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <prvAddNewTaskToReadyList+0xd4>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <prvAddNewTaskToReadyList+0xd8>)
 80089d6:	441a      	add	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe fce7 	bl	80073b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089e4:	f001 fb5e 	bl	800a0a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <prvAddNewTaskToReadyList+0xcc>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00e      	beq.n	8008a0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <prvAddNewTaskToReadyList+0xc8>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d207      	bcs.n	8008a0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <prvAddNewTaskToReadyList+0xdc>)
 8008a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	20000dac 	.word	0x20000dac
 8008a1c:	200008d8 	.word	0x200008d8
 8008a20:	20000db8 	.word	0x20000db8
 8008a24:	20000dc8 	.word	0x20000dc8
 8008a28:	20000db4 	.word	0x20000db4
 8008a2c:	200008dc 	.word	0x200008dc
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d019      	beq.n	8008a7a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a46:	4b14      	ldr	r3, [pc, #80]	; (8008a98 <vTaskDelay+0x64>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00c      	beq.n	8008a68 <vTaskDelay+0x34>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	b672      	cpsid	i
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	b662      	cpsie	i
 8008a62:	60bb      	str	r3, [r7, #8]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008a68:	f000 f884 	bl	8008b74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fe28 	bl	80096c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a74:	f000 f88c 	bl	8008b90 <xTaskResumeAll>
 8008a78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d107      	bne.n	8008a90 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <vTaskDelay+0x68>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000dd4 	.word	0x20000dd4
 8008a9c:	e000ed04 	.word	0xe000ed04

08008aa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008aae:	463a      	mov	r2, r7
 8008ab0:	1d39      	adds	r1, r7, #4
 8008ab2:	f107 0308 	add.w	r3, r7, #8
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe fc1a 	bl	80072f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	9202      	str	r2, [sp, #8]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	2300      	movs	r3, #0
 8008acc:	460a      	mov	r2, r1
 8008ace:	4923      	ldr	r1, [pc, #140]	; (8008b5c <vTaskStartScheduler+0xbc>)
 8008ad0:	4823      	ldr	r0, [pc, #140]	; (8008b60 <vTaskStartScheduler+0xc0>)
 8008ad2:	f7ff fe05 	bl	80086e0 <xTaskCreateStatic>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	4a22      	ldr	r2, [pc, #136]	; (8008b64 <vTaskStartScheduler+0xc4>)
 8008ada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008adc:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <vTaskStartScheduler+0xc4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d002      	beq.n	8008aea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	617b      	str	r3, [r7, #20]
 8008ae8:	e001      	b.n	8008aee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d102      	bne.n	8008afa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008af4:	f000 fe3a 	bl	800976c <xTimerCreateTimerTask>
 8008af8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d118      	bne.n	8008b32 <vTaskStartScheduler+0x92>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	613b      	str	r3, [r7, #16]
}
 8008b16:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b18:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <vTaskStartScheduler+0xc8>)
 8008b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b20:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <vTaskStartScheduler+0xcc>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b26:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <vTaskStartScheduler+0xd0>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b2c:	f001 fa08 	bl	8009f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b30:	e010      	b.n	8008b54 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b38:	d10c      	bne.n	8008b54 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	b672      	cpsid	i
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	b662      	cpsie	i
 8008b4e:	60fb      	str	r3, [r7, #12]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vTaskStartScheduler+0xb2>
}
 8008b54:	bf00      	nop
 8008b56:	3718      	adds	r7, #24
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	080198d0 	.word	0x080198d0
 8008b60:	080091d1 	.word	0x080091d1
 8008b64:	20000dd0 	.word	0x20000dd0
 8008b68:	20000dcc 	.word	0x20000dcc
 8008b6c:	20000db8 	.word	0x20000db8
 8008b70:	20000db0 	.word	0x20000db0

08008b74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <vTaskSuspendAll+0x18>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	4a03      	ldr	r2, [pc, #12]	; (8008b8c <vTaskSuspendAll+0x18>)
 8008b80:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b82:	bf00      	nop
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	20000dd4 	.word	0x20000dd4

08008b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b9e:	4b43      	ldr	r3, [pc, #268]	; (8008cac <xTaskResumeAll+0x11c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10c      	bne.n	8008bc0 <xTaskResumeAll+0x30>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	b672      	cpsid	i
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	b662      	cpsie	i
 8008bba:	603b      	str	r3, [r7, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bc0:	f001 fa3c 	bl	800a03c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bc4:	4b39      	ldr	r3, [pc, #228]	; (8008cac <xTaskResumeAll+0x11c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	4a38      	ldr	r2, [pc, #224]	; (8008cac <xTaskResumeAll+0x11c>)
 8008bcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bce:	4b37      	ldr	r3, [pc, #220]	; (8008cac <xTaskResumeAll+0x11c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d162      	bne.n	8008c9c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bd6:	4b36      	ldr	r3, [pc, #216]	; (8008cb0 <xTaskResumeAll+0x120>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d05e      	beq.n	8008c9c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bde:	e02f      	b.n	8008c40 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be0:	4b34      	ldr	r3, [pc, #208]	; (8008cb4 <xTaskResumeAll+0x124>)
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3318      	adds	r3, #24
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fc3d 	bl	800746c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fc38 	bl	800746c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c00:	4b2d      	ldr	r3, [pc, #180]	; (8008cb8 <xTaskResumeAll+0x128>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d903      	bls.n	8008c10 <xTaskResumeAll+0x80>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	4a2a      	ldr	r2, [pc, #168]	; (8008cb8 <xTaskResumeAll+0x128>)
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c14:	4613      	mov	r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	4413      	add	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4a27      	ldr	r2, [pc, #156]	; (8008cbc <xTaskResumeAll+0x12c>)
 8008c1e:	441a      	add	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fe fbc3 	bl	80073b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c30:	4b23      	ldr	r3, [pc, #140]	; (8008cc0 <xTaskResumeAll+0x130>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d302      	bcc.n	8008c40 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008c3a:	4b22      	ldr	r3, [pc, #136]	; (8008cc4 <xTaskResumeAll+0x134>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c40:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <xTaskResumeAll+0x124>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1cb      	bne.n	8008be0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c4e:	f000 fb77 	bl	8009340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <xTaskResumeAll+0x138>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d010      	beq.n	8008c80 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c5e:	f000 f859 	bl	8008d14 <xTaskIncrementTick>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008c68:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <xTaskResumeAll+0x134>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1f1      	bne.n	8008c5e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008c7a:	4b13      	ldr	r3, [pc, #76]	; (8008cc8 <xTaskResumeAll+0x138>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c80:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <xTaskResumeAll+0x134>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c8c:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <xTaskResumeAll+0x13c>)
 8008c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c9c:	f001 fa02 	bl	800a0a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000dd4 	.word	0x20000dd4
 8008cb0:	20000dac 	.word	0x20000dac
 8008cb4:	20000d6c 	.word	0x20000d6c
 8008cb8:	20000db4 	.word	0x20000db4
 8008cbc:	200008dc 	.word	0x200008dc
 8008cc0:	200008d8 	.word	0x200008d8
 8008cc4:	20000dc0 	.word	0x20000dc0
 8008cc8:	20000dbc 	.word	0x20000dbc
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <xTaskGetTickCount+0x1c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cdc:	687b      	ldr	r3, [r7, #4]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	370c      	adds	r7, #12
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20000db0 	.word	0x20000db0

08008cf0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cf6:	f001 fa89 	bl	800a20c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <xTaskGetTickCountFromISR+0x20>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d04:	683b      	ldr	r3, [r7, #0]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000db0 	.word	0x20000db0

08008d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d1e:	4b50      	ldr	r3, [pc, #320]	; (8008e60 <xTaskIncrementTick+0x14c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f040 808b 	bne.w	8008e3e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d28:	4b4e      	ldr	r3, [pc, #312]	; (8008e64 <xTaskIncrementTick+0x150>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d30:	4a4c      	ldr	r2, [pc, #304]	; (8008e64 <xTaskIncrementTick+0x150>)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d122      	bne.n	8008d82 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d3c:	4b4a      	ldr	r3, [pc, #296]	; (8008e68 <xTaskIncrementTick+0x154>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00c      	beq.n	8008d60 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	b672      	cpsid	i
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	b662      	cpsie	i
 8008d5a:	603b      	str	r3, [r7, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <xTaskIncrementTick+0x4a>
 8008d60:	4b41      	ldr	r3, [pc, #260]	; (8008e68 <xTaskIncrementTick+0x154>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	4b41      	ldr	r3, [pc, #260]	; (8008e6c <xTaskIncrementTick+0x158>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a3f      	ldr	r2, [pc, #252]	; (8008e68 <xTaskIncrementTick+0x154>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	4a3f      	ldr	r2, [pc, #252]	; (8008e6c <xTaskIncrementTick+0x158>)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	4b3e      	ldr	r3, [pc, #248]	; (8008e70 <xTaskIncrementTick+0x15c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	4a3d      	ldr	r2, [pc, #244]	; (8008e70 <xTaskIncrementTick+0x15c>)
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	f000 fadf 	bl	8009340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d82:	4b3c      	ldr	r3, [pc, #240]	; (8008e74 <xTaskIncrementTick+0x160>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d349      	bcc.n	8008e20 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d8c:	4b36      	ldr	r3, [pc, #216]	; (8008e68 <xTaskIncrementTick+0x154>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d96:	4b37      	ldr	r3, [pc, #220]	; (8008e74 <xTaskIncrementTick+0x160>)
 8008d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d9c:	601a      	str	r2, [r3, #0]
					break;
 8008d9e:	e03f      	b.n	8008e20 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da0:	4b31      	ldr	r3, [pc, #196]	; (8008e68 <xTaskIncrementTick+0x154>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d203      	bcs.n	8008dc0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008db8:	4a2e      	ldr	r2, [pc, #184]	; (8008e74 <xTaskIncrementTick+0x160>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dbe:	e02f      	b.n	8008e20 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fe fb51 	bl	800746c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	3318      	adds	r3, #24
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fb48 	bl	800746c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de0:	4b25      	ldr	r3, [pc, #148]	; (8008e78 <xTaskIncrementTick+0x164>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d903      	bls.n	8008df0 <xTaskIncrementTick+0xdc>
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dec:	4a22      	ldr	r2, [pc, #136]	; (8008e78 <xTaskIncrementTick+0x164>)
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df4:	4613      	mov	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <xTaskIncrementTick+0x168>)
 8008dfe:	441a      	add	r2, r3
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f7fe fad3 	bl	80073b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e10:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <xTaskIncrementTick+0x16c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d3b8      	bcc.n	8008d8c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e1e:	e7b5      	b.n	8008d8c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e20:	4b17      	ldr	r3, [pc, #92]	; (8008e80 <xTaskIncrementTick+0x16c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e26:	4915      	ldr	r1, [pc, #84]	; (8008e7c <xTaskIncrementTick+0x168>)
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d907      	bls.n	8008e48 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e004      	b.n	8008e48 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e3e:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <xTaskIncrementTick+0x170>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3301      	adds	r3, #1
 8008e44:	4a0f      	ldr	r2, [pc, #60]	; (8008e84 <xTaskIncrementTick+0x170>)
 8008e46:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <xTaskIncrementTick+0x174>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e54:	697b      	ldr	r3, [r7, #20]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000dd4 	.word	0x20000dd4
 8008e64:	20000db0 	.word	0x20000db0
 8008e68:	20000d64 	.word	0x20000d64
 8008e6c:	20000d68 	.word	0x20000d68
 8008e70:	20000dc4 	.word	0x20000dc4
 8008e74:	20000dcc 	.word	0x20000dcc
 8008e78:	20000db4 	.word	0x20000db4
 8008e7c:	200008dc 	.word	0x200008dc
 8008e80:	200008d8 	.word	0x200008d8
 8008e84:	20000dbc 	.word	0x20000dbc
 8008e88:	20000dc0 	.word	0x20000dc0

08008e8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e92:	4b29      	ldr	r3, [pc, #164]	; (8008f38 <vTaskSwitchContext+0xac>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e9a:	4b28      	ldr	r3, [pc, #160]	; (8008f3c <vTaskSwitchContext+0xb0>)
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ea0:	e043      	b.n	8008f2a <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008ea2:	4b26      	ldr	r3, [pc, #152]	; (8008f3c <vTaskSwitchContext+0xb0>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <vTaskSwitchContext+0xb4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	e012      	b.n	8008ed6 <vTaskSwitchContext+0x4a>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10c      	bne.n	8008ed0 <vTaskSwitchContext+0x44>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	b672      	cpsid	i
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	b662      	cpsie	i
 8008eca:	607b      	str	r3, [r7, #4]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <vTaskSwitchContext+0x42>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	491b      	ldr	r1, [pc, #108]	; (8008f44 <vTaskSwitchContext+0xb8>)
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0e2      	beq.n	8008eb0 <vTaskSwitchContext+0x24>
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4613      	mov	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4a13      	ldr	r2, [pc, #76]	; (8008f44 <vTaskSwitchContext+0xb8>)
 8008ef6:	4413      	add	r3, r2
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d104      	bne.n	8008f1a <vTaskSwitchContext+0x8e>
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	605a      	str	r2, [r3, #4]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4a09      	ldr	r2, [pc, #36]	; (8008f48 <vTaskSwitchContext+0xbc>)
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	4a06      	ldr	r2, [pc, #24]	; (8008f40 <vTaskSwitchContext+0xb4>)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6013      	str	r3, [r2, #0]
}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000dd4 	.word	0x20000dd4
 8008f3c:	20000dc0 	.word	0x20000dc0
 8008f40:	20000db4 	.word	0x20000db4
 8008f44:	200008dc 	.word	0x200008dc
 8008f48:	200008d8 	.word	0x200008d8

08008f4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10c      	bne.n	8008f76 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	b672      	cpsid	i
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	b662      	cpsie	i
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f76:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <vTaskPlaceOnEventList+0x48>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3318      	adds	r3, #24
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f7fe fa3b 	bl	80073fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f84:	2101      	movs	r1, #1
 8008f86:	6838      	ldr	r0, [r7, #0]
 8008f88:	f000 fb9c 	bl	80096c4 <prvAddCurrentTaskToDelayedList>
}
 8008f8c:	bf00      	nop
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	200008d8 	.word	0x200008d8

08008f98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10c      	bne.n	8008fc4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	b672      	cpsid	i
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	b662      	cpsie	i
 8008fbe:	617b      	str	r3, [r7, #20]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <vTaskPlaceOnEventListRestricted+0x58>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3318      	adds	r3, #24
 8008fca:	4619      	mov	r1, r3
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f7fe f9f0 	bl	80073b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	68b8      	ldr	r0, [r7, #8]
 8008fe2:	f000 fb6f 	bl	80096c4 <prvAddCurrentTaskToDelayedList>
	}
 8008fe6:	bf00      	nop
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200008d8 	.word	0x200008d8

08008ff4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10c      	bne.n	8009024 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	b672      	cpsid	i
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	b662      	cpsie	i
 800901e:	60fb      	str	r3, [r7, #12]
}
 8009020:	bf00      	nop
 8009022:	e7fe      	b.n	8009022 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	3318      	adds	r3, #24
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fa1f 	bl	800746c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800902e:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <xTaskRemoveFromEventList+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d11d      	bne.n	8009072 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3304      	adds	r3, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fa16 	bl	800746c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	4b19      	ldr	r3, [pc, #100]	; (80090ac <xTaskRemoveFromEventList+0xb8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d903      	bls.n	8009054 <xTaskRemoveFromEventList+0x60>
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	4a16      	ldr	r2, [pc, #88]	; (80090ac <xTaskRemoveFromEventList+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <xTaskRemoveFromEventList+0xbc>)
 8009062:	441a      	add	r2, r3
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	3304      	adds	r3, #4
 8009068:	4619      	mov	r1, r3
 800906a:	4610      	mov	r0, r2
 800906c:	f7fe f9a1 	bl	80073b2 <vListInsertEnd>
 8009070:	e005      	b.n	800907e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	3318      	adds	r3, #24
 8009076:	4619      	mov	r1, r3
 8009078:	480e      	ldr	r0, [pc, #56]	; (80090b4 <xTaskRemoveFromEventList+0xc0>)
 800907a:	f7fe f99a 	bl	80073b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009082:	4b0d      	ldr	r3, [pc, #52]	; (80090b8 <xTaskRemoveFromEventList+0xc4>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	429a      	cmp	r2, r3
 800908a:	d905      	bls.n	8009098 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009090:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <xTaskRemoveFromEventList+0xc8>)
 8009092:	2201      	movs	r2, #1
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e001      	b.n	800909c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009098:	2300      	movs	r3, #0
 800909a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800909c:	697b      	ldr	r3, [r7, #20]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000dd4 	.word	0x20000dd4
 80090ac:	20000db4 	.word	0x20000db4
 80090b0:	200008dc 	.word	0x200008dc
 80090b4:	20000d6c 	.word	0x20000d6c
 80090b8:	200008d8 	.word	0x200008d8
 80090bc:	20000dc0 	.word	0x20000dc0

080090c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090c8:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <vTaskInternalSetTimeOutState+0x24>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090d0:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <vTaskInternalSetTimeOutState+0x28>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	605a      	str	r2, [r3, #4]
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr
 80090e4:	20000dc4 	.word	0x20000dc4
 80090e8:	20000db0 	.word	0x20000db0

080090ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10c      	bne.n	8009116 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80090fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009100:	b672      	cpsid	i
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	b662      	cpsie	i
 8009110:	613b      	str	r3, [r7, #16]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10c      	bne.n	8009136 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	b672      	cpsid	i
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	b662      	cpsie	i
 8009130:	60fb      	str	r3, [r7, #12]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009136:	f000 ff81 	bl	800a03c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800913a:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <xTaskCheckForTimeOut+0xc4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009152:	d102      	bne.n	800915a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009154:	2300      	movs	r3, #0
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e023      	b.n	80091a2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <xTaskCheckForTimeOut+0xc8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	429a      	cmp	r2, r3
 8009164:	d007      	beq.n	8009176 <xTaskCheckForTimeOut+0x8a>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	429a      	cmp	r2, r3
 800916e:	d302      	bcc.n	8009176 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e015      	b.n	80091a2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	429a      	cmp	r2, r3
 800917e:	d20b      	bcs.n	8009198 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	1ad2      	subs	r2, r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ff97 	bl	80090c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
 8009196:	e004      	b.n	80091a2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800919e:	2301      	movs	r3, #1
 80091a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091a2:	f000 ff7f 	bl	800a0a4 <vPortExitCritical>

	return xReturn;
 80091a6:	69fb      	ldr	r3, [r7, #28]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20000db0 	.word	0x20000db0
 80091b4:	20000dc4 	.word	0x20000dc4

080091b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091bc:	4b03      	ldr	r3, [pc, #12]	; (80091cc <vTaskMissedYield+0x14>)
 80091be:	2201      	movs	r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	20000dc0 	.word	0x20000dc0

080091d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091d8:	f000 f852 	bl	8009280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <prvIdleTask+0x28>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d9f9      	bls.n	80091d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091e4:	4b05      	ldr	r3, [pc, #20]	; (80091fc <prvIdleTask+0x2c>)
 80091e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091f4:	e7f0      	b.n	80091d8 <prvIdleTask+0x8>
 80091f6:	bf00      	nop
 80091f8:	200008dc 	.word	0x200008dc
 80091fc:	e000ed04 	.word	0xe000ed04

08009200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009206:	2300      	movs	r3, #0
 8009208:	607b      	str	r3, [r7, #4]
 800920a:	e00c      	b.n	8009226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	4613      	mov	r3, r2
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4a12      	ldr	r2, [pc, #72]	; (8009260 <prvInitialiseTaskLists+0x60>)
 8009218:	4413      	add	r3, r2
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe f89c 	bl	8007358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3301      	adds	r3, #1
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b37      	cmp	r3, #55	; 0x37
 800922a:	d9ef      	bls.n	800920c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800922c:	480d      	ldr	r0, [pc, #52]	; (8009264 <prvInitialiseTaskLists+0x64>)
 800922e:	f7fe f893 	bl	8007358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009232:	480d      	ldr	r0, [pc, #52]	; (8009268 <prvInitialiseTaskLists+0x68>)
 8009234:	f7fe f890 	bl	8007358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009238:	480c      	ldr	r0, [pc, #48]	; (800926c <prvInitialiseTaskLists+0x6c>)
 800923a:	f7fe f88d 	bl	8007358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800923e:	480c      	ldr	r0, [pc, #48]	; (8009270 <prvInitialiseTaskLists+0x70>)
 8009240:	f7fe f88a 	bl	8007358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009244:	480b      	ldr	r0, [pc, #44]	; (8009274 <prvInitialiseTaskLists+0x74>)
 8009246:	f7fe f887 	bl	8007358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <prvInitialiseTaskLists+0x78>)
 800924c:	4a05      	ldr	r2, [pc, #20]	; (8009264 <prvInitialiseTaskLists+0x64>)
 800924e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009250:	4b0a      	ldr	r3, [pc, #40]	; (800927c <prvInitialiseTaskLists+0x7c>)
 8009252:	4a05      	ldr	r2, [pc, #20]	; (8009268 <prvInitialiseTaskLists+0x68>)
 8009254:	601a      	str	r2, [r3, #0]
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	200008dc 	.word	0x200008dc
 8009264:	20000d3c 	.word	0x20000d3c
 8009268:	20000d50 	.word	0x20000d50
 800926c:	20000d6c 	.word	0x20000d6c
 8009270:	20000d80 	.word	0x20000d80
 8009274:	20000d98 	.word	0x20000d98
 8009278:	20000d64 	.word	0x20000d64
 800927c:	20000d68 	.word	0x20000d68

08009280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009286:	e019      	b.n	80092bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009288:	f000 fed8 	bl	800a03c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928c:	4b10      	ldr	r3, [pc, #64]	; (80092d0 <prvCheckTasksWaitingTermination+0x50>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3304      	adds	r3, #4
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe f8e7 	bl	800746c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800929e:	4b0d      	ldr	r3, [pc, #52]	; (80092d4 <prvCheckTasksWaitingTermination+0x54>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	4a0b      	ldr	r2, [pc, #44]	; (80092d4 <prvCheckTasksWaitingTermination+0x54>)
 80092a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092a8:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <prvCheckTasksWaitingTermination+0x58>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	4a0a      	ldr	r2, [pc, #40]	; (80092d8 <prvCheckTasksWaitingTermination+0x58>)
 80092b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092b2:	f000 fef7 	bl	800a0a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f810 	bl	80092dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <prvCheckTasksWaitingTermination+0x58>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e1      	bne.n	8009288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000d80 	.word	0x20000d80
 80092d4:	20000dac 	.word	0x20000dac
 80092d8:	20000d94 	.word	0x20000d94

080092dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d108      	bne.n	8009300 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f898 	bl	800a428 <vPortFree>
				vPortFree( pxTCB );
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 f895 	bl	800a428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092fe:	e01a      	b.n	8009336 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009306:	2b01      	cmp	r3, #1
 8009308:	d103      	bne.n	8009312 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f001 f88c 	bl	800a428 <vPortFree>
	}
 8009310:	e011      	b.n	8009336 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009318:	2b02      	cmp	r3, #2
 800931a:	d00c      	beq.n	8009336 <prvDeleteTCB+0x5a>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	b672      	cpsid	i
 8009322:	f383 8811 	msr	BASEPRI, r3
 8009326:	f3bf 8f6f 	isb	sy
 800932a:	f3bf 8f4f 	dsb	sy
 800932e:	b662      	cpsie	i
 8009330:	60fb      	str	r3, [r7, #12]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <prvDeleteTCB+0x58>
	}
 8009336:	bf00      	nop
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <prvResetNextTaskUnblockTime+0x38>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <prvResetNextTaskUnblockTime+0x3c>)
 8009352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009358:	e008      	b.n	800936c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800935a:	4b07      	ldr	r3, [pc, #28]	; (8009378 <prvResetNextTaskUnblockTime+0x38>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	4a04      	ldr	r2, [pc, #16]	; (800937c <prvResetNextTaskUnblockTime+0x3c>)
 800936a:	6013      	str	r3, [r2, #0]
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	20000d64 	.word	0x20000d64
 800937c:	20000dcc 	.word	0x20000dcc

08009380 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <xTaskGetCurrentTaskHandle+0x1c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800938c:	687b      	ldr	r3, [r7, #4]
	}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	200008d8 	.word	0x200008d8

080093a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <xTaskGetSchedulerState+0x34>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d102      	bne.n	80093b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093ae:	2301      	movs	r3, #1
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	e008      	b.n	80093c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093b4:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <xTaskGetSchedulerState+0x38>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d102      	bne.n	80093c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093bc:	2302      	movs	r3, #2
 80093be:	607b      	str	r3, [r7, #4]
 80093c0:	e001      	b.n	80093c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093c2:	2300      	movs	r3, #0
 80093c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093c6:	687b      	ldr	r3, [r7, #4]
	}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	20000db8 	.word	0x20000db8
 80093d8:	20000dd4 	.word	0x20000dd4

080093dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d051      	beq.n	8009496 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f6:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <xTaskPriorityInherit+0xc4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d241      	bcs.n	8009484 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	db06      	blt.n	8009416 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009408:	4b25      	ldr	r3, [pc, #148]	; (80094a0 <xTaskPriorityInherit+0xc4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6959      	ldr	r1, [r3, #20]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4a1f      	ldr	r2, [pc, #124]	; (80094a4 <xTaskPriorityInherit+0xc8>)
 8009428:	4413      	add	r3, r2
 800942a:	4299      	cmp	r1, r3
 800942c:	d122      	bne.n	8009474 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	3304      	adds	r3, #4
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe f81a 	bl	800746c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009438:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <xTaskPriorityInherit+0xc4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009446:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <xTaskPriorityInherit+0xcc>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d903      	bls.n	8009456 <xTaskPriorityInherit+0x7a>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4a15      	ldr	r2, [pc, #84]	; (80094a8 <xTaskPriorityInherit+0xcc>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945a:	4613      	mov	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4a10      	ldr	r2, [pc, #64]	; (80094a4 <xTaskPriorityInherit+0xc8>)
 8009464:	441a      	add	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f7fd ffa0 	bl	80073b2 <vListInsertEnd>
 8009472:	e004      	b.n	800947e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <xTaskPriorityInherit+0xc4>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800947e:	2301      	movs	r3, #1
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	e008      	b.n	8009496 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <xTaskPriorityInherit+0xc4>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	429a      	cmp	r2, r3
 8009490:	d201      	bcs.n	8009496 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009492:	2301      	movs	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009496:	68fb      	ldr	r3, [r7, #12]
	}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	200008d8 	.word	0x200008d8
 80094a4:	200008dc 	.word	0x200008dc
 80094a8:	20000db4 	.word	0x20000db4

080094ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b086      	sub	sp, #24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d05a      	beq.n	8009578 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094c2:	4b30      	ldr	r3, [pc, #192]	; (8009584 <xTaskPriorityDisinherit+0xd8>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d00c      	beq.n	80094e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	b672      	cpsid	i
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	b662      	cpsie	i
 80094e0:	60fb      	str	r3, [r7, #12]
}
 80094e2:	bf00      	nop
 80094e4:	e7fe      	b.n	80094e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10c      	bne.n	8009508 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	b672      	cpsid	i
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	b662      	cpsie	i
 8009502:	60bb      	str	r3, [r7, #8]
}
 8009504:	bf00      	nop
 8009506:	e7fe      	b.n	8009506 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	1e5a      	subs	r2, r3, #1
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800951a:	429a      	cmp	r2, r3
 800951c:	d02c      	beq.n	8009578 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009522:	2b00      	cmp	r3, #0
 8009524:	d128      	bne.n	8009578 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3304      	adds	r3, #4
 800952a:	4618      	mov	r0, r3
 800952c:	f7fd ff9e 	bl	800746c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4b0f      	ldr	r3, [pc, #60]	; (8009588 <xTaskPriorityDisinherit+0xdc>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d903      	bls.n	8009558 <xTaskPriorityDisinherit+0xac>
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <xTaskPriorityDisinherit+0xdc>)
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4a09      	ldr	r2, [pc, #36]	; (800958c <xTaskPriorityDisinherit+0xe0>)
 8009566:	441a      	add	r2, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fd ff1f 	bl	80073b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009574:	2301      	movs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009578:	697b      	ldr	r3, [r7, #20]
	}
 800957a:	4618      	mov	r0, r3
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	200008d8 	.word	0x200008d8
 8009588:	20000db4 	.word	0x20000db4
 800958c:	200008dc 	.word	0x200008dc

08009590 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800959e:	2301      	movs	r3, #1
 80095a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d06e      	beq.n	8009686 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10c      	bne.n	80095ca <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	b672      	cpsid	i
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	b662      	cpsie	i
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d902      	bls.n	80095da <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	61fb      	str	r3, [r7, #28]
 80095d8:	e002      	b.n	80095e0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d04d      	beq.n	8009686 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d148      	bne.n	8009686 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095f4:	4b26      	ldr	r3, [pc, #152]	; (8009690 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d10c      	bne.n	8009618 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	b672      	cpsid	i
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	b662      	cpsie	i
 8009612:	60bb      	str	r3, [r7, #8]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	69fa      	ldr	r2, [r7, #28]
 8009622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	db04      	blt.n	8009636 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	6959      	ldr	r1, [r3, #20]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4613      	mov	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4a13      	ldr	r2, [pc, #76]	; (8009694 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009646:	4413      	add	r3, r2
 8009648:	4299      	cmp	r1, r3
 800964a:	d11c      	bne.n	8009686 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	3304      	adds	r3, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f7fd ff0b 	bl	800746c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d903      	bls.n	800966a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009666:	4a0c      	ldr	r2, [pc, #48]	; (8009698 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009668:	6013      	str	r3, [r2, #0]
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4a07      	ldr	r2, [pc, #28]	; (8009694 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009678:	441a      	add	r2, r3
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	3304      	adds	r3, #4
 800967e:	4619      	mov	r1, r3
 8009680:	4610      	mov	r0, r2
 8009682:	f7fd fe96 	bl	80073b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009686:	bf00      	nop
 8009688:	3720      	adds	r7, #32
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200008d8 	.word	0x200008d8
 8009694:	200008dc 	.word	0x200008dc
 8009698:	20000db4 	.word	0x20000db4

0800969c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d004      	beq.n	80096b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096a8:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096ae:	3201      	adds	r2, #1
 80096b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80096b2:	4b03      	ldr	r3, [pc, #12]	; (80096c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80096b4:	681b      	ldr	r3, [r3, #0]
	}
 80096b6:	4618      	mov	r0, r3
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	200008d8 	.word	0x200008d8

080096c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096ce:	4b21      	ldr	r3, [pc, #132]	; (8009754 <prvAddCurrentTaskToDelayedList+0x90>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096d4:	4b20      	ldr	r3, [pc, #128]	; (8009758 <prvAddCurrentTaskToDelayedList+0x94>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3304      	adds	r3, #4
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fd fec6 	bl	800746c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096e6:	d10a      	bne.n	80096fe <prvAddCurrentTaskToDelayedList+0x3a>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d007      	beq.n	80096fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ee:	4b1a      	ldr	r3, [pc, #104]	; (8009758 <prvAddCurrentTaskToDelayedList+0x94>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4819      	ldr	r0, [pc, #100]	; (800975c <prvAddCurrentTaskToDelayedList+0x98>)
 80096f8:	f7fd fe5b 	bl	80073b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096fc:	e026      	b.n	800974c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4413      	add	r3, r2
 8009704:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009706:	4b14      	ldr	r3, [pc, #80]	; (8009758 <prvAddCurrentTaskToDelayedList+0x94>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d209      	bcs.n	800972a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <prvAddCurrentTaskToDelayedList+0x94>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fd fe69 	bl	80073fa <vListInsert>
}
 8009728:	e010      	b.n	800974c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972a:	4b0e      	ldr	r3, [pc, #56]	; (8009764 <prvAddCurrentTaskToDelayedList+0xa0>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <prvAddCurrentTaskToDelayedList+0x94>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7fd fe5f 	bl	80073fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800973c:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <prvAddCurrentTaskToDelayedList+0xa4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	429a      	cmp	r2, r3
 8009744:	d202      	bcs.n	800974c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009746:	4a08      	ldr	r2, [pc, #32]	; (8009768 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6013      	str	r3, [r2, #0]
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000db0 	.word	0x20000db0
 8009758:	200008d8 	.word	0x200008d8
 800975c:	20000d98 	.word	0x20000d98
 8009760:	20000d68 	.word	0x20000d68
 8009764:	20000d64 	.word	0x20000d64
 8009768:	20000dcc 	.word	0x20000dcc

0800976c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08a      	sub	sp, #40	; 0x28
 8009770:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009772:	2300      	movs	r3, #0
 8009774:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009776:	f000 fb15 	bl	8009da4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800977a:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <xTimerCreateTimerTask+0x84>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d021      	beq.n	80097c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009786:	2300      	movs	r3, #0
 8009788:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800978a:	1d3a      	adds	r2, r7, #4
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	f107 030c 	add.w	r3, r7, #12
 8009794:	4618      	mov	r0, r3
 8009796:	f7fd fdc5 	bl	8007324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	68fa      	ldr	r2, [r7, #12]
 80097a0:	9202      	str	r2, [sp, #8]
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	2302      	movs	r3, #2
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2300      	movs	r3, #0
 80097aa:	460a      	mov	r2, r1
 80097ac:	4911      	ldr	r1, [pc, #68]	; (80097f4 <xTimerCreateTimerTask+0x88>)
 80097ae:	4812      	ldr	r0, [pc, #72]	; (80097f8 <xTimerCreateTimerTask+0x8c>)
 80097b0:	f7fe ff96 	bl	80086e0 <xTaskCreateStatic>
 80097b4:	4603      	mov	r3, r0
 80097b6:	4a11      	ldr	r2, [pc, #68]	; (80097fc <xTimerCreateTimerTask+0x90>)
 80097b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097ba:	4b10      	ldr	r3, [pc, #64]	; (80097fc <xTimerCreateTimerTask+0x90>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097c2:	2301      	movs	r3, #1
 80097c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10c      	bne.n	80097e6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	b672      	cpsid	i
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	b662      	cpsie	i
 80097e0:	613b      	str	r3, [r7, #16]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80097e6:	697b      	ldr	r3, [r7, #20]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20000e08 	.word	0x20000e08
 80097f4:	080198d8 	.word	0x080198d8
 80097f8:	0800993d 	.word	0x0800993d
 80097fc:	20000e0c 	.word	0x20000e0c

08009800 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08a      	sub	sp, #40	; 0x28
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800980e:	2300      	movs	r3, #0
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10c      	bne.n	8009832 <xTimerGenericCommand+0x32>
	__asm volatile
 8009818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981c:	b672      	cpsid	i
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	b662      	cpsie	i
 800982c:	623b      	str	r3, [r7, #32]
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009832:	4b1a      	ldr	r3, [pc, #104]	; (800989c <xTimerGenericCommand+0x9c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d02a      	beq.n	8009890 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b05      	cmp	r3, #5
 800984a:	dc18      	bgt.n	800987e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800984c:	f7ff fda8 	bl	80093a0 <xTaskGetSchedulerState>
 8009850:	4603      	mov	r3, r0
 8009852:	2b02      	cmp	r3, #2
 8009854:	d109      	bne.n	800986a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009856:	4b11      	ldr	r3, [pc, #68]	; (800989c <xTimerGenericCommand+0x9c>)
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	f107 0110 	add.w	r1, r7, #16
 800985e:	2300      	movs	r3, #0
 8009860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009862:	f7fe f8ab 	bl	80079bc <xQueueGenericSend>
 8009866:	6278      	str	r0, [r7, #36]	; 0x24
 8009868:	e012      	b.n	8009890 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <xTimerGenericCommand+0x9c>)
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f107 0110 	add.w	r1, r7, #16
 8009872:	2300      	movs	r3, #0
 8009874:	2200      	movs	r2, #0
 8009876:	f7fe f8a1 	bl	80079bc <xQueueGenericSend>
 800987a:	6278      	str	r0, [r7, #36]	; 0x24
 800987c:	e008      	b.n	8009890 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800987e:	4b07      	ldr	r3, [pc, #28]	; (800989c <xTimerGenericCommand+0x9c>)
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	f107 0110 	add.w	r1, r7, #16
 8009886:	2300      	movs	r3, #0
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	f7fe f99d 	bl	8007bc8 <xQueueGenericSendFromISR>
 800988e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009892:	4618      	mov	r0, r3
 8009894:	3728      	adds	r7, #40	; 0x28
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000e08 	.word	0x20000e08

080098a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098aa:	4b23      	ldr	r3, [pc, #140]	; (8009938 <prvProcessExpiredTimer+0x98>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fd fdd7 	bl	800746c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d024      	beq.n	8009916 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	18d1      	adds	r1, r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	6978      	ldr	r0, [r7, #20]
 80098da:	f000 f8d3 	bl	8009a84 <prvInsertTimerInActiveList>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d021      	beq.n	8009928 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098e4:	2300      	movs	r3, #0
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2300      	movs	r3, #0
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	2100      	movs	r1, #0
 80098ee:	6978      	ldr	r0, [r7, #20]
 80098f0:	f7ff ff86 	bl	8009800 <xTimerGenericCommand>
 80098f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d115      	bne.n	8009928 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	b672      	cpsid	i
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	b662      	cpsie	i
 8009910:	60fb      	str	r3, [r7, #12]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	6978      	ldr	r0, [r7, #20]
 800992e:	4798      	blx	r3
}
 8009930:	bf00      	nop
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	20000e00 	.word	0x20000e00

0800993c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009944:	f107 0308 	add.w	r3, r7, #8
 8009948:	4618      	mov	r0, r3
 800994a:	f000 f857 	bl	80099fc <prvGetNextExpireTime>
 800994e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4619      	mov	r1, r3
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 f803 	bl	8009960 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800995a:	f000 f8d5 	bl	8009b08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800995e:	e7f1      	b.n	8009944 <prvTimerTask+0x8>

08009960 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800996a:	f7ff f903 	bl	8008b74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800996e:	f107 0308 	add.w	r3, r7, #8
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f866 	bl	8009a44 <prvSampleTimeNow>
 8009978:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d130      	bne.n	80099e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <prvProcessTimerOrBlockTask+0x3c>
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	429a      	cmp	r2, r3
 800998c:	d806      	bhi.n	800999c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800998e:	f7ff f8ff 	bl	8008b90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009992:	68f9      	ldr	r1, [r7, #12]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7ff ff83 	bl	80098a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800999a:	e024      	b.n	80099e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d008      	beq.n	80099b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099a2:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <prvProcessTimerOrBlockTask+0x90>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <prvProcessTimerOrBlockTask+0x50>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <prvProcessTimerOrBlockTask+0x52>
 80099b0:	2300      	movs	r3, #0
 80099b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099b4:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <prvProcessTimerOrBlockTask+0x94>)
 80099b6:	6818      	ldr	r0, [r3, #0]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	4619      	mov	r1, r3
 80099c2:	f7fe fe59 	bl	8008678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099c6:	f7ff f8e3 	bl	8008b90 <xTaskResumeAll>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099d0:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <prvProcessTimerOrBlockTask+0x98>)
 80099d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
}
 80099e0:	e001      	b.n	80099e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099e2:	f7ff f8d5 	bl	8008b90 <xTaskResumeAll>
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000e04 	.word	0x20000e04
 80099f4:	20000e08 	.word	0x20000e08
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a04:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <prvGetNextExpireTime+0x44>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <prvGetNextExpireTime+0x16>
 8009a0e:	2201      	movs	r2, #1
 8009a10:	e000      	b.n	8009a14 <prvGetNextExpireTime+0x18>
 8009a12:	2200      	movs	r2, #0
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d105      	bne.n	8009a2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a20:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <prvGetNextExpireTime+0x44>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e001      	b.n	8009a30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a30:	68fb      	ldr	r3, [r7, #12]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	20000e00 	.word	0x20000e00

08009a44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a4c:	f7ff f940 	bl	8008cd0 <xTaskGetTickCount>
 8009a50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a52:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <prvSampleTimeNow+0x3c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d205      	bcs.n	8009a68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a5c:	f000 f93c 	bl	8009cd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	601a      	str	r2, [r3, #0]
 8009a66:	e002      	b.n	8009a6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a6e:	4a04      	ldr	r2, [pc, #16]	; (8009a80 <prvSampleTimeNow+0x3c>)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a74:	68fb      	ldr	r3, [r7, #12]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000e10 	.word	0x20000e10

08009a84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a92:	2300      	movs	r3, #0
 8009a94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d812      	bhi.n	8009ad0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	1ad2      	subs	r2, r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d302      	bcc.n	8009abe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	617b      	str	r3, [r7, #20]
 8009abc:	e01b      	b.n	8009af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009abe:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <prvInsertTimerInActiveList+0x7c>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4610      	mov	r0, r2
 8009aca:	f7fd fc96 	bl	80073fa <vListInsert>
 8009ace:	e012      	b.n	8009af6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d206      	bcs.n	8009ae6 <prvInsertTimerInActiveList+0x62>
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d302      	bcc.n	8009ae6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	e007      	b.n	8009af6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <prvInsertTimerInActiveList+0x80>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3304      	adds	r3, #4
 8009aee:	4619      	mov	r1, r3
 8009af0:	4610      	mov	r0, r2
 8009af2:	f7fd fc82 	bl	80073fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009af6:	697b      	ldr	r3, [r7, #20]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000e04 	.word	0x20000e04
 8009b04:	20000e00 	.word	0x20000e00

08009b08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	; 0x38
 8009b0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b0e:	e0d0      	b.n	8009cb2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da1a      	bge.n	8009b4c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b16:	1d3b      	adds	r3, r7, #4
 8009b18:	3304      	adds	r3, #4
 8009b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10c      	bne.n	8009b3c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	b672      	cpsid	i
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	b662      	cpsie	i
 8009b36:	61fb      	str	r3, [r7, #28]
}
 8009b38:	bf00      	nop
 8009b3a:	e7fe      	b.n	8009b3a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b42:	6850      	ldr	r0, [r2, #4]
 8009b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b46:	6892      	ldr	r2, [r2, #8]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f2c0 80ae 	blt.w	8009cb0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5a:	695b      	ldr	r3, [r3, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b62:	3304      	adds	r3, #4
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fd fc81 	bl	800746c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b6a:	463b      	mov	r3, r7
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7ff ff69 	bl	8009a44 <prvSampleTimeNow>
 8009b72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b09      	cmp	r3, #9
 8009b78:	f200 809b 	bhi.w	8009cb2 <prvProcessReceivedCommands+0x1aa>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <prvProcessReceivedCommands+0x7c>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009bad 	.word	0x08009bad
 8009b88:	08009bad 	.word	0x08009bad
 8009b8c:	08009bad 	.word	0x08009bad
 8009b90:	08009c25 	.word	0x08009c25
 8009b94:	08009c39 	.word	0x08009c39
 8009b98:	08009c87 	.word	0x08009c87
 8009b9c:	08009bad 	.word	0x08009bad
 8009ba0:	08009bad 	.word	0x08009bad
 8009ba4:	08009c25 	.word	0x08009c25
 8009ba8:	08009c39 	.word	0x08009c39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	18d1      	adds	r1, r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bcc:	f7ff ff5a 	bl	8009a84 <prvInsertTimerInActiveList>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d06d      	beq.n	8009cb2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d062      	beq.n	8009cb2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	441a      	add	r2, r3
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfe:	f7ff fdff 	bl	8009800 <xTimerGenericCommand>
 8009c02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d153      	bne.n	8009cb2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	b672      	cpsid	i
 8009c10:	f383 8811 	msr	BASEPRI, r3
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	b662      	cpsie	i
 8009c1e:	61bb      	str	r3, [r7, #24]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c2a:	f023 0301 	bic.w	r3, r3, #1
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c36:	e03c      	b.n	8009cb2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10c      	bne.n	8009c72 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	b672      	cpsid	i
 8009c5e:	f383 8811 	msr	BASEPRI, r3
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	f3bf 8f4f 	dsb	sy
 8009c6a:	b662      	cpsie	i
 8009c6c:	617b      	str	r3, [r7, #20]
}
 8009c6e:	bf00      	nop
 8009c70:	e7fe      	b.n	8009c70 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	699a      	ldr	r2, [r3, #24]
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	18d1      	adds	r1, r2, r3
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c80:	f7ff ff00 	bl	8009a84 <prvInsertTimerInActiveList>
					break;
 8009c84:	e015      	b.n	8009cb2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c96:	f000 fbc7 	bl	800a428 <vPortFree>
 8009c9a:	e00a      	b.n	8009cb2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ca2:	f023 0301 	bic.w	r3, r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009cae:	e000      	b.n	8009cb2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009cb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cb2:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <prvProcessReceivedCommands+0x1cc>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	1d39      	adds	r1, r7, #4
 8009cb8:	2200      	movs	r2, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe f8ba 	bl	8007e34 <xQueueReceive>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f47f af24 	bne.w	8009b10 <prvProcessReceivedCommands+0x8>
	}
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	3730      	adds	r7, #48	; 0x30
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000e08 	.word	0x20000e08

08009cd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cde:	e04a      	b.n	8009d76 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ce0:	4b2e      	ldr	r3, [pc, #184]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cea:	4b2c      	ldr	r3, [pc, #176]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3304      	adds	r3, #4
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fd fbb7 	bl	800746c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d0c:	f003 0304 	and.w	r3, r3, #4
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d030      	beq.n	8009d76 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	699b      	ldr	r3, [r3, #24]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d90e      	bls.n	8009d44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d32:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fd fb5c 	bl	80073fa <vListInsert>
 8009d42:	e018      	b.n	8009d76 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d44:	2300      	movs	r3, #0
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fd56 	bl	8009800 <xTimerGenericCommand>
 8009d54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10c      	bne.n	8009d76 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	b672      	cpsid	i
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	b662      	cpsie	i
 8009d70:	603b      	str	r3, [r7, #0]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1af      	bne.n	8009ce0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d86:	4b06      	ldr	r3, [pc, #24]	; (8009da0 <prvSwitchTimerLists+0xc8>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <prvSwitchTimerLists+0xc4>)
 8009d8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d8e:	4a04      	ldr	r2, [pc, #16]	; (8009da0 <prvSwitchTimerLists+0xc8>)
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	6013      	str	r3, [r2, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20000e00 	.word	0x20000e00
 8009da0:	20000e04 	.word	0x20000e04

08009da4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009daa:	f000 f947 	bl	800a03c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dae:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <prvCheckForValidListAndQueue+0x60>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d120      	bne.n	8009df8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009db6:	4814      	ldr	r0, [pc, #80]	; (8009e08 <prvCheckForValidListAndQueue+0x64>)
 8009db8:	f7fd face 	bl	8007358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009dbc:	4813      	ldr	r0, [pc, #76]	; (8009e0c <prvCheckForValidListAndQueue+0x68>)
 8009dbe:	f7fd facb 	bl	8007358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dc2:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <prvCheckForValidListAndQueue+0x6c>)
 8009dc4:	4a10      	ldr	r2, [pc, #64]	; (8009e08 <prvCheckForValidListAndQueue+0x64>)
 8009dc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dc8:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <prvCheckForValidListAndQueue+0x70>)
 8009dca:	4a10      	ldr	r2, [pc, #64]	; (8009e0c <prvCheckForValidListAndQueue+0x68>)
 8009dcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dce:	2300      	movs	r3, #0
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	4b11      	ldr	r3, [pc, #68]	; (8009e18 <prvCheckForValidListAndQueue+0x74>)
 8009dd4:	4a11      	ldr	r2, [pc, #68]	; (8009e1c <prvCheckForValidListAndQueue+0x78>)
 8009dd6:	2110      	movs	r1, #16
 8009dd8:	200a      	movs	r0, #10
 8009dda:	f7fd fbdb 	bl	8007594 <xQueueGenericCreateStatic>
 8009dde:	4603      	mov	r3, r0
 8009de0:	4a08      	ldr	r2, [pc, #32]	; (8009e04 <prvCheckForValidListAndQueue+0x60>)
 8009de2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009de4:	4b07      	ldr	r3, [pc, #28]	; (8009e04 <prvCheckForValidListAndQueue+0x60>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <prvCheckForValidListAndQueue+0x60>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	490b      	ldr	r1, [pc, #44]	; (8009e20 <prvCheckForValidListAndQueue+0x7c>)
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fbec 	bl	80085d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009df8:	f000 f954 	bl	800a0a4 <vPortExitCritical>
}
 8009dfc:	bf00      	nop
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000e08 	.word	0x20000e08
 8009e08:	20000dd8 	.word	0x20000dd8
 8009e0c:	20000dec 	.word	0x20000dec
 8009e10:	20000e00 	.word	0x20000e00
 8009e14:	20000e04 	.word	0x20000e04
 8009e18:	20000eb4 	.word	0x20000eb4
 8009e1c:	20000e14 	.word	0x20000e14
 8009e20:	080198e0 	.word	0x080198e0

08009e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3b04      	subs	r3, #4
 8009e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3b04      	subs	r3, #4
 8009e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f023 0201 	bic.w	r2, r3, #1
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3b04      	subs	r3, #4
 8009e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e54:	4a0c      	ldr	r2, [pc, #48]	; (8009e88 <pxPortInitialiseStack+0x64>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b14      	subs	r3, #20
 8009e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3b04      	subs	r3, #4
 8009e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f06f 0202 	mvn.w	r2, #2
 8009e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	3b20      	subs	r3, #32
 8009e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	08009e8d 	.word	0x08009e8d

08009e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <prvTaskExitError+0x5c>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e9e:	d00c      	beq.n	8009eba <prvTaskExitError+0x2e>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	b672      	cpsid	i
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	b662      	cpsie	i
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <prvTaskExitError+0x2c>
	__asm volatile
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	b672      	cpsid	i
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	b662      	cpsie	i
 8009ece:	60bb      	str	r3, [r7, #8]
}
 8009ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ed2:	bf00      	nop
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0fc      	beq.n	8009ed4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	2000000c 	.word	0x2000000c
 8009eec:	00000000 	.word	0x00000000

08009ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <pxCurrentTCBConst2>)
 8009ef2:	6819      	ldr	r1, [r3, #0]
 8009ef4:	6808      	ldr	r0, [r1, #0]
 8009ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efa:	f380 8809 	msr	PSP, r0
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f04f 0000 	mov.w	r0, #0
 8009f06:	f380 8811 	msr	BASEPRI, r0
 8009f0a:	4770      	bx	lr
 8009f0c:	f3af 8000 	nop.w

08009f10 <pxCurrentTCBConst2>:
 8009f10:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop

08009f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f18:	4808      	ldr	r0, [pc, #32]	; (8009f3c <prvPortStartFirstTask+0x24>)
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	6800      	ldr	r0, [r0, #0]
 8009f1e:	f380 8808 	msr	MSP, r0
 8009f22:	f04f 0000 	mov.w	r0, #0
 8009f26:	f380 8814 	msr	CONTROL, r0
 8009f2a:	b662      	cpsie	i
 8009f2c:	b661      	cpsie	f
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	df00      	svc	0
 8009f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f3a:	bf00      	nop
 8009f3c:	e000ed08 	.word	0xe000ed08

08009f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f46:	4b37      	ldr	r3, [pc, #220]	; (800a024 <xPortStartScheduler+0xe4>)
 8009f48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	22ff      	movs	r2, #255	; 0xff
 8009f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f68:	b2da      	uxtb	r2, r3
 8009f6a:	4b2f      	ldr	r3, [pc, #188]	; (800a028 <xPortStartScheduler+0xe8>)
 8009f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f6e:	4b2f      	ldr	r3, [pc, #188]	; (800a02c <xPortStartScheduler+0xec>)
 8009f70:	2207      	movs	r2, #7
 8009f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f74:	e009      	b.n	8009f8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009f76:	4b2d      	ldr	r3, [pc, #180]	; (800a02c <xPortStartScheduler+0xec>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	4a2b      	ldr	r2, [pc, #172]	; (800a02c <xPortStartScheduler+0xec>)
 8009f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f92:	2b80      	cmp	r3, #128	; 0x80
 8009f94:	d0ef      	beq.n	8009f76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f96:	4b25      	ldr	r3, [pc, #148]	; (800a02c <xPortStartScheduler+0xec>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f1c3 0307 	rsb	r3, r3, #7
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d00c      	beq.n	8009fbc <xPortStartScheduler+0x7c>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	b672      	cpsid	i
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	b662      	cpsie	i
 8009fb6:	60bb      	str	r3, [r7, #8]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fbc:	4b1b      	ldr	r3, [pc, #108]	; (800a02c <xPortStartScheduler+0xec>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	4a1a      	ldr	r2, [pc, #104]	; (800a02c <xPortStartScheduler+0xec>)
 8009fc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fc6:	4b19      	ldr	r3, [pc, #100]	; (800a02c <xPortStartScheduler+0xec>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fce:	4a17      	ldr	r2, [pc, #92]	; (800a02c <xPortStartScheduler+0xec>)
 8009fd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fda:	4b15      	ldr	r3, [pc, #84]	; (800a030 <xPortStartScheduler+0xf0>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a14      	ldr	r2, [pc, #80]	; (800a030 <xPortStartScheduler+0xf0>)
 8009fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fe4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fe6:	4b12      	ldr	r3, [pc, #72]	; (800a030 <xPortStartScheduler+0xf0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a11      	ldr	r2, [pc, #68]	; (800a030 <xPortStartScheduler+0xf0>)
 8009fec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ff0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ff2:	f000 f8dd 	bl	800a1b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <xPortStartScheduler+0xf4>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ffc:	f000 f8fc 	bl	800a1f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a000:	4b0d      	ldr	r3, [pc, #52]	; (800a038 <xPortStartScheduler+0xf8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a0c      	ldr	r2, [pc, #48]	; (800a038 <xPortStartScheduler+0xf8>)
 800a006:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a00a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a00c:	f7ff ff84 	bl	8009f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a010:	f7fe ff3c 	bl	8008e8c <vTaskSwitchContext>
	prvTaskExitError();
 800a014:	f7ff ff3a 	bl	8009e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	e000e400 	.word	0xe000e400
 800a028:	20000f04 	.word	0x20000f04
 800a02c:	20000f08 	.word	0x20000f08
 800a030:	e000ed20 	.word	0xe000ed20
 800a034:	2000000c 	.word	0x2000000c
 800a038:	e000ef34 	.word	0xe000ef34

0800a03c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a046:	b672      	cpsid	i
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	b662      	cpsie	i
 800a056:	607b      	str	r3, [r7, #4]
}
 800a058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a05a:	4b10      	ldr	r3, [pc, #64]	; (800a09c <vPortEnterCritical+0x60>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	3301      	adds	r3, #1
 800a060:	4a0e      	ldr	r2, [pc, #56]	; (800a09c <vPortEnterCritical+0x60>)
 800a062:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <vPortEnterCritical+0x60>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d111      	bne.n	800a090 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a06c:	4b0c      	ldr	r3, [pc, #48]	; (800a0a0 <vPortEnterCritical+0x64>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00c      	beq.n	800a090 <vPortEnterCritical+0x54>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	b672      	cpsid	i
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	b662      	cpsie	i
 800a08a:	603b      	str	r3, [r7, #0]
}
 800a08c:	bf00      	nop
 800a08e:	e7fe      	b.n	800a08e <vPortEnterCritical+0x52>
	}
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	2000000c 	.word	0x2000000c
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0aa:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <vPortExitCritical+0x54>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10c      	bne.n	800a0cc <vPortExitCritical+0x28>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	b672      	cpsid	i
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	b662      	cpsie	i
 800a0c6:	607b      	str	r3, [r7, #4]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <vPortExitCritical+0x54>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	4a09      	ldr	r2, [pc, #36]	; (800a0f8 <vPortExitCritical+0x54>)
 800a0d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0d6:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <vPortExitCritical+0x54>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d105      	bne.n	800a0ea <vPortExitCritical+0x46>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	f383 8811 	msr	BASEPRI, r3
}
 800a0e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	2000000c 	.word	0x2000000c
 800a0fc:	00000000 	.word	0x00000000

0800a100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a100:	f3ef 8009 	mrs	r0, PSP
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <pxCurrentTCBConst>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	f01e 0f10 	tst.w	lr, #16
 800a110:	bf08      	it	eq
 800a112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11a:	6010      	str	r0, [r2, #0]
 800a11c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a120:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a124:	b672      	cpsid	i
 800a126:	f380 8811 	msr	BASEPRI, r0
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	b662      	cpsie	i
 800a134:	f7fe feaa 	bl	8008e8c <vTaskSwitchContext>
 800a138:	f04f 0000 	mov.w	r0, #0
 800a13c:	f380 8811 	msr	BASEPRI, r0
 800a140:	bc09      	pop	{r0, r3}
 800a142:	6819      	ldr	r1, [r3, #0]
 800a144:	6808      	ldr	r0, [r1, #0]
 800a146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	f01e 0f10 	tst.w	lr, #16
 800a14e:	bf08      	it	eq
 800a150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a154:	f380 8809 	msr	PSP, r0
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop

0800a160 <pxCurrentTCBConst>:
 800a160:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop

0800a168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	b672      	cpsid	i
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	b662      	cpsie	i
 800a182:	607b      	str	r3, [r7, #4]
}
 800a184:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a186:	f7fe fdc5 	bl	8008d14 <xTaskIncrementTick>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a190:	4b06      	ldr	r3, [pc, #24]	; (800a1ac <SysTick_Handler+0x44>)
 800a192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	2300      	movs	r3, #0
 800a19a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	f383 8811 	msr	BASEPRI, r3
}
 800a1a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	e000ed04 	.word	0xe000ed04

0800a1b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1b4:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <vPortSetupTimerInterrupt+0x34>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1ba:	4b0b      	ldr	r3, [pc, #44]	; (800a1e8 <vPortSetupTimerInterrupt+0x38>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <vPortSetupTimerInterrupt+0x3c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a0a      	ldr	r2, [pc, #40]	; (800a1f0 <vPortSetupTimerInterrupt+0x40>)
 800a1c6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ca:	099b      	lsrs	r3, r3, #6
 800a1cc:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <vPortSetupTimerInterrupt+0x44>)
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1d2:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <vPortSetupTimerInterrupt+0x34>)
 800a1d4:	2207      	movs	r2, #7
 800a1d6:	601a      	str	r2, [r3, #0]
}
 800a1d8:	bf00      	nop
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	e000e010 	.word	0xe000e010
 800a1e8:	e000e018 	.word	0xe000e018
 800a1ec:	20000000 	.word	0x20000000
 800a1f0:	10624dd3 	.word	0x10624dd3
 800a1f4:	e000e014 	.word	0xe000e014

0800a1f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a208 <vPortEnableVFP+0x10>
 800a1fc:	6801      	ldr	r1, [r0, #0]
 800a1fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a202:	6001      	str	r1, [r0, #0]
 800a204:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a206:	bf00      	nop
 800a208:	e000ed88 	.word	0xe000ed88

0800a20c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a212:	f3ef 8305 	mrs	r3, IPSR
 800a216:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b0f      	cmp	r3, #15
 800a21c:	d916      	bls.n	800a24c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a21e:	4a19      	ldr	r2, [pc, #100]	; (800a284 <vPortValidateInterruptPriority+0x78>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4413      	add	r3, r2
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a228:	4b17      	ldr	r3, [pc, #92]	; (800a288 <vPortValidateInterruptPriority+0x7c>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	7afa      	ldrb	r2, [r7, #11]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d20c      	bcs.n	800a24c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	b672      	cpsid	i
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	b662      	cpsie	i
 800a246:	607b      	str	r3, [r7, #4]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a24c:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <vPortValidateInterruptPriority+0x80>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <vPortValidateInterruptPriority+0x84>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d90c      	bls.n	800a276 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	b672      	cpsid	i
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	b662      	cpsie	i
 800a270:	603b      	str	r3, [r7, #0]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <vPortValidateInterruptPriority+0x68>
	}
 800a276:	bf00      	nop
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	e000e3f0 	.word	0xe000e3f0
 800a288:	20000f04 	.word	0x20000f04
 800a28c:	e000ed0c 	.word	0xe000ed0c
 800a290:	20000f08 	.word	0x20000f08

0800a294 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a29c:	2300      	movs	r3, #0
 800a29e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2a0:	f7fe fc68 	bl	8008b74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2a4:	4b5b      	ldr	r3, [pc, #364]	; (800a414 <pvPortMalloc+0x180>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2ac:	f000 f91a 	bl	800a4e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2b0:	4b59      	ldr	r3, [pc, #356]	; (800a418 <pvPortMalloc+0x184>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f040 8092 	bne.w	800a3e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01f      	beq.n	800a304 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f003 0307 	and.w	r3, r3, #7
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d016      	beq.n	800a304 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f023 0307 	bic.w	r3, r3, #7
 800a2dc:	3308      	adds	r3, #8
 800a2de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <pvPortMalloc+0x70>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	b672      	cpsid	i
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	b662      	cpsie	i
 800a2fe:	617b      	str	r3, [r7, #20]
}
 800a300:	bf00      	nop
 800a302:	e7fe      	b.n	800a302 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d06b      	beq.n	800a3e2 <pvPortMalloc+0x14e>
 800a30a:	4b44      	ldr	r3, [pc, #272]	; (800a41c <pvPortMalloc+0x188>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d866      	bhi.n	800a3e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a314:	4b42      	ldr	r3, [pc, #264]	; (800a420 <pvPortMalloc+0x18c>)
 800a316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a318:	4b41      	ldr	r3, [pc, #260]	; (800a420 <pvPortMalloc+0x18c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a31e:	e004      	b.n	800a32a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d903      	bls.n	800a33c <pvPortMalloc+0xa8>
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1f1      	bne.n	800a320 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a33c:	4b35      	ldr	r3, [pc, #212]	; (800a414 <pvPortMalloc+0x180>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a342:	429a      	cmp	r2, r3
 800a344:	d04d      	beq.n	800a3e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2208      	movs	r2, #8
 800a34c:	4413      	add	r3, r2
 800a34e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	2308      	movs	r3, #8
 800a362:	005b      	lsls	r3, r3, #1
 800a364:	429a      	cmp	r2, r3
 800a366:	d921      	bls.n	800a3ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4413      	add	r3, r2
 800a36e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00c      	beq.n	800a394 <pvPortMalloc+0x100>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	b672      	cpsid	i
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	b662      	cpsie	i
 800a38e:	613b      	str	r3, [r7, #16]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	1ad2      	subs	r2, r2, r3
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3a6:	69b8      	ldr	r0, [r7, #24]
 800a3a8:	f000 f8fe 	bl	800a5a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3ac:	4b1b      	ldr	r3, [pc, #108]	; (800a41c <pvPortMalloc+0x188>)
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	4a19      	ldr	r2, [pc, #100]	; (800a41c <pvPortMalloc+0x188>)
 800a3b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3ba:	4b18      	ldr	r3, [pc, #96]	; (800a41c <pvPortMalloc+0x188>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b19      	ldr	r3, [pc, #100]	; (800a424 <pvPortMalloc+0x190>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d203      	bcs.n	800a3ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3c6:	4b15      	ldr	r3, [pc, #84]	; (800a41c <pvPortMalloc+0x188>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a16      	ldr	r2, [pc, #88]	; (800a424 <pvPortMalloc+0x190>)
 800a3cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	4b11      	ldr	r3, [pc, #68]	; (800a418 <pvPortMalloc+0x184>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3e2:	f7fe fbd5 	bl	8008b90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00c      	beq.n	800a40a <pvPortMalloc+0x176>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	b672      	cpsid	i
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	b662      	cpsie	i
 800a404:	60fb      	str	r3, [r7, #12]
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <pvPortMalloc+0x174>
	return pvReturn;
 800a40a:	69fb      	ldr	r3, [r7, #28]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3728      	adds	r7, #40	; 0x28
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	20004b14 	.word	0x20004b14
 800a418:	20004b20 	.word	0x20004b20
 800a41c:	20004b18 	.word	0x20004b18
 800a420:	20004b0c 	.word	0x20004b0c
 800a424:	20004b1c 	.word	0x20004b1c

0800a428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d04c      	beq.n	800a4d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a43a:	2308      	movs	r3, #8
 800a43c:	425b      	negs	r3, r3
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4413      	add	r3, r2
 800a442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	685a      	ldr	r2, [r3, #4]
 800a44c:	4b23      	ldr	r3, [pc, #140]	; (800a4dc <vPortFree+0xb4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4013      	ands	r3, r2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10c      	bne.n	800a470 <vPortFree+0x48>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	b672      	cpsid	i
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	b662      	cpsie	i
 800a46a:	60fb      	str	r3, [r7, #12]
}
 800a46c:	bf00      	nop
 800a46e:	e7fe      	b.n	800a46e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00c      	beq.n	800a492 <vPortFree+0x6a>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	b672      	cpsid	i
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	b662      	cpsie	i
 800a48c:	60bb      	str	r3, [r7, #8]
}
 800a48e:	bf00      	nop
 800a490:	e7fe      	b.n	800a490 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	685a      	ldr	r2, [r3, #4]
 800a496:	4b11      	ldr	r3, [pc, #68]	; (800a4dc <vPortFree+0xb4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4013      	ands	r3, r2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d019      	beq.n	800a4d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d115      	bne.n	800a4d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	4b0b      	ldr	r3, [pc, #44]	; (800a4dc <vPortFree+0xb4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	401a      	ands	r2, r3
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4b8:	f7fe fb5c 	bl	8008b74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <vPortFree+0xb8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4a06      	ldr	r2, [pc, #24]	; (800a4e0 <vPortFree+0xb8>)
 800a4c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4ca:	6938      	ldr	r0, [r7, #16]
 800a4cc:	f000 f86c 	bl	800a5a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a4d0:	f7fe fb5e 	bl	8008b90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4d4:	bf00      	nop
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	20004b20 	.word	0x20004b20
 800a4e0:	20004b18 	.word	0x20004b18

0800a4e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a4ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4f0:	4b27      	ldr	r3, [pc, #156]	; (800a590 <prvHeapInit+0xac>)
 800a4f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00c      	beq.n	800a518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3307      	adds	r3, #7
 800a502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f023 0307 	bic.w	r3, r3, #7
 800a50a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <prvHeapInit+0xac>)
 800a514:	4413      	add	r3, r2
 800a516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a51c:	4a1d      	ldr	r2, [pc, #116]	; (800a594 <prvHeapInit+0xb0>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a522:	4b1c      	ldr	r3, [pc, #112]	; (800a594 <prvHeapInit+0xb0>)
 800a524:	2200      	movs	r2, #0
 800a526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	4413      	add	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a530:	2208      	movs	r2, #8
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	1a9b      	subs	r3, r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0307 	bic.w	r3, r3, #7
 800a53e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a15      	ldr	r2, [pc, #84]	; (800a598 <prvHeapInit+0xb4>)
 800a544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a546:	4b14      	ldr	r3, [pc, #80]	; (800a598 <prvHeapInit+0xb4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2200      	movs	r2, #0
 800a54c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a54e:	4b12      	ldr	r3, [pc, #72]	; (800a598 <prvHeapInit+0xb4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a564:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <prvHeapInit+0xb4>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	4a0a      	ldr	r2, [pc, #40]	; (800a59c <prvHeapInit+0xb8>)
 800a572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	4a09      	ldr	r2, [pc, #36]	; (800a5a0 <prvHeapInit+0xbc>)
 800a57a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a57c:	4b09      	ldr	r3, [pc, #36]	; (800a5a4 <prvHeapInit+0xc0>)
 800a57e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a582:	601a      	str	r2, [r3, #0]
}
 800a584:	bf00      	nop
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	20000f0c 	.word	0x20000f0c
 800a594:	20004b0c 	.word	0x20004b0c
 800a598:	20004b14 	.word	0x20004b14
 800a59c:	20004b1c 	.word	0x20004b1c
 800a5a0:	20004b18 	.word	0x20004b18
 800a5a4:	20004b20 	.word	0x20004b20

0800a5a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5b0:	4b28      	ldr	r3, [pc, #160]	; (800a654 <prvInsertBlockIntoFreeList+0xac>)
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	e002      	b.n	800a5bc <prvInsertBlockIntoFreeList+0x14>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d8f7      	bhi.n	800a5b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d108      	bne.n	800a5ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	441a      	add	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d118      	bne.n	800a630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	4b15      	ldr	r3, [pc, #84]	; (800a658 <prvInsertBlockIntoFreeList+0xb0>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	429a      	cmp	r2, r3
 800a608:	d00d      	beq.n	800a626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685a      	ldr	r2, [r3, #4]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	441a      	add	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	e008      	b.n	800a638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <prvInsertBlockIntoFreeList+0xb0>)
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	601a      	str	r2, [r3, #0]
 800a62e:	e003      	b.n	800a638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d002      	beq.n	800a646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	20004b0c 	.word	0x20004b0c
 800a658:	20004b14 	.word	0x20004b14

0800a65c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a666:	f007 fa97 	bl	8011b98 <sys_timeouts_sleeptime>
 800a66a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a672:	d10b      	bne.n	800a68c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a674:	4813      	ldr	r0, [pc, #76]	; (800a6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a676:	f00c f9a0 	bl	80169ba <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a67a:	2200      	movs	r2, #0
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f00c f928 	bl	80168d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a684:	480f      	ldr	r0, [pc, #60]	; (800a6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a686:	f00c f989 	bl	801699c <sys_mutex_lock>
    return;
 800a68a:	e018      	b.n	800a6be <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d102      	bne.n	800a698 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a692:	f007 fa47 	bl	8011b24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a696:	e7e6      	b.n	800a666 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a698:	480a      	ldr	r0, [pc, #40]	; (800a6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a69a:	f00c f98e 	bl	80169ba <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f00c f916 	bl	80168d4 <sys_arch_mbox_fetch>
 800a6a8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a6aa:	4806      	ldr	r0, [pc, #24]	; (800a6c4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a6ac:	f00c f976 	bl	801699c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6b6:	d102      	bne.n	800a6be <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a6b8:	f007 fa34 	bl	8011b24 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a6bc:	e7d3      	b.n	800a666 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	2000f57c 	.word	0x2000f57c

0800a6c8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a6d0:	4810      	ldr	r0, [pc, #64]	; (800a714 <tcpip_thread+0x4c>)
 800a6d2:	f00c f963 	bl	801699c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a6d6:	4b10      	ldr	r3, [pc, #64]	; (800a718 <tcpip_thread+0x50>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d005      	beq.n	800a6ea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a6de:	4b0e      	ldr	r3, [pc, #56]	; (800a718 <tcpip_thread+0x50>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a0e      	ldr	r2, [pc, #56]	; (800a71c <tcpip_thread+0x54>)
 800a6e4:	6812      	ldr	r2, [r2, #0]
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a6ea:	f107 030c 	add.w	r3, r7, #12
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	480b      	ldr	r0, [pc, #44]	; (800a720 <tcpip_thread+0x58>)
 800a6f2:	f7ff ffb3 	bl	800a65c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d106      	bne.n	800a70a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a6fc:	4b09      	ldr	r3, [pc, #36]	; (800a724 <tcpip_thread+0x5c>)
 800a6fe:	2291      	movs	r2, #145	; 0x91
 800a700:	4909      	ldr	r1, [pc, #36]	; (800a728 <tcpip_thread+0x60>)
 800a702:	480a      	ldr	r0, [pc, #40]	; (800a72c <tcpip_thread+0x64>)
 800a704:	f00c fe4a 	bl	801739c <iprintf>
      continue;
 800a708:	e003      	b.n	800a712 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 f80f 	bl	800a730 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a712:	e7ea      	b.n	800a6ea <tcpip_thread+0x22>
 800a714:	2000f57c 	.word	0x2000f57c
 800a718:	20004b24 	.word	0x20004b24
 800a71c:	20004b28 	.word	0x20004b28
 800a720:	20004b2c 	.word	0x20004b2c
 800a724:	080198e8 	.word	0x080198e8
 800a728:	08019918 	.word	0x08019918
 800a72c:	08019938 	.word	0x08019938

0800a730 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d026      	beq.n	800a78e <tcpip_thread_handle_msg+0x5e>
 800a740:	2b02      	cmp	r3, #2
 800a742:	dc2b      	bgt.n	800a79c <tcpip_thread_handle_msg+0x6c>
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <tcpip_thread_handle_msg+0x1e>
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d015      	beq.n	800a778 <tcpip_thread_handle_msg+0x48>
 800a74c:	e026      	b.n	800a79c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	6850      	ldr	r0, [r2, #4]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	6892      	ldr	r2, [r2, #8]
 800a75a:	4611      	mov	r1, r2
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 fcd1 	bl	800c110 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a76e:	6879      	ldr	r1, [r7, #4]
 800a770:	2009      	movs	r0, #9
 800a772:	f000 fe1d 	bl	800b3b0 <memp_free>
      break;
 800a776:	e018      	b.n	800a7aa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	6892      	ldr	r2, [r2, #8]
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a784:	6879      	ldr	r1, [r7, #4]
 800a786:	2008      	movs	r0, #8
 800a788:	f000 fe12 	bl	800b3b0 <memp_free>
      break;
 800a78c:	e00d      	b.n	800a7aa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	6892      	ldr	r2, [r2, #8]
 800a796:	4610      	mov	r0, r2
 800a798:	4798      	blx	r3
      break;
 800a79a:	e006      	b.n	800a7aa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a79c:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <tcpip_thread_handle_msg+0x84>)
 800a79e:	22cf      	movs	r2, #207	; 0xcf
 800a7a0:	4905      	ldr	r1, [pc, #20]	; (800a7b8 <tcpip_thread_handle_msg+0x88>)
 800a7a2:	4806      	ldr	r0, [pc, #24]	; (800a7bc <tcpip_thread_handle_msg+0x8c>)
 800a7a4:	f00c fdfa 	bl	801739c <iprintf>
      break;
 800a7a8:	bf00      	nop
  }
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	080198e8 	.word	0x080198e8
 800a7b8:	08019918 	.word	0x08019918
 800a7bc:	08019938 	.word	0x08019938

0800a7c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a7cc:	481a      	ldr	r0, [pc, #104]	; (800a838 <tcpip_inpkt+0x78>)
 800a7ce:	f00c f8b2 	bl	8016936 <sys_mbox_valid>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d105      	bne.n	800a7e4 <tcpip_inpkt+0x24>
 800a7d8:	4b18      	ldr	r3, [pc, #96]	; (800a83c <tcpip_inpkt+0x7c>)
 800a7da:	22fc      	movs	r2, #252	; 0xfc
 800a7dc:	4918      	ldr	r1, [pc, #96]	; (800a840 <tcpip_inpkt+0x80>)
 800a7de:	4819      	ldr	r0, [pc, #100]	; (800a844 <tcpip_inpkt+0x84>)
 800a7e0:	f00c fddc 	bl	801739c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a7e4:	2009      	movs	r0, #9
 800a7e6:	f000 fd91 	bl	800b30c <memp_malloc>
 800a7ea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d102      	bne.n	800a7f8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7f6:	e01a      	b.n	800a82e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a810:	6979      	ldr	r1, [r7, #20]
 800a812:	4809      	ldr	r0, [pc, #36]	; (800a838 <tcpip_inpkt+0x78>)
 800a814:	f00c f844 	bl	80168a0 <sys_mbox_trypost>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d006      	beq.n	800a82c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a81e:	6979      	ldr	r1, [r7, #20]
 800a820:	2009      	movs	r0, #9
 800a822:	f000 fdc5 	bl	800b3b0 <memp_free>
    return ERR_MEM;
 800a826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a82a:	e000      	b.n	800a82e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a82c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20004b2c 	.word	0x20004b2c
 800a83c:	080198e8 	.word	0x080198e8
 800a840:	08019960 	.word	0x08019960
 800a844:	08019938 	.word	0x08019938

0800a848 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a858:	f003 0318 	and.w	r3, r3, #24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d006      	beq.n	800a86e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a860:	4a08      	ldr	r2, [pc, #32]	; (800a884 <tcpip_input+0x3c>)
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7ff ffab 	bl	800a7c0 <tcpip_inpkt>
 800a86a:	4603      	mov	r3, r0
 800a86c:	e005      	b.n	800a87a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a86e:	4a06      	ldr	r2, [pc, #24]	; (800a888 <tcpip_input+0x40>)
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff ffa4 	bl	800a7c0 <tcpip_inpkt>
 800a878:	4603      	mov	r3, r0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	080166c1 	.word	0x080166c1
 800a888:	08015599 	.word	0x08015599

0800a88c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a896:	4819      	ldr	r0, [pc, #100]	; (800a8fc <tcpip_try_callback+0x70>)
 800a898:	f00c f84d 	bl	8016936 <sys_mbox_valid>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <tcpip_try_callback+0x24>
 800a8a2:	4b17      	ldr	r3, [pc, #92]	; (800a900 <tcpip_try_callback+0x74>)
 800a8a4:	f240 125d 	movw	r2, #349	; 0x15d
 800a8a8:	4916      	ldr	r1, [pc, #88]	; (800a904 <tcpip_try_callback+0x78>)
 800a8aa:	4817      	ldr	r0, [pc, #92]	; (800a908 <tcpip_try_callback+0x7c>)
 800a8ac:	f00c fd76 	bl	801739c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a8b0:	2008      	movs	r0, #8
 800a8b2:	f000 fd2b 	bl	800b30c <memp_malloc>
 800a8b6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d102      	bne.n	800a8c4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a8be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8c2:	e017      	b.n	800a8f4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a8d6:	68f9      	ldr	r1, [r7, #12]
 800a8d8:	4808      	ldr	r0, [pc, #32]	; (800a8fc <tcpip_try_callback+0x70>)
 800a8da:	f00b ffe1 	bl	80168a0 <sys_mbox_trypost>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d006      	beq.n	800a8f2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a8e4:	68f9      	ldr	r1, [r7, #12]
 800a8e6:	2008      	movs	r0, #8
 800a8e8:	f000 fd62 	bl	800b3b0 <memp_free>
    return ERR_MEM;
 800a8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8f0:	e000      	b.n	800a8f4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}
 800a8fc:	20004b2c 	.word	0x20004b2c
 800a900:	080198e8 	.word	0x080198e8
 800a904:	08019960 	.word	0x08019960
 800a908:	08019938 	.word	0x08019938

0800a90c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af02      	add	r7, sp, #8
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a916:	f000 f871 	bl	800a9fc <lwip_init>

  tcpip_init_done = initfunc;
 800a91a:	4a17      	ldr	r2, [pc, #92]	; (800a978 <tcpip_init+0x6c>)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a920:	4a16      	ldr	r2, [pc, #88]	; (800a97c <tcpip_init+0x70>)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a926:	2106      	movs	r1, #6
 800a928:	4815      	ldr	r0, [pc, #84]	; (800a980 <tcpip_init+0x74>)
 800a92a:	f00b ff9f 	bl	801686c <sys_mbox_new>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a934:	4b13      	ldr	r3, [pc, #76]	; (800a984 <tcpip_init+0x78>)
 800a936:	f240 2261 	movw	r2, #609	; 0x261
 800a93a:	4913      	ldr	r1, [pc, #76]	; (800a988 <tcpip_init+0x7c>)
 800a93c:	4813      	ldr	r0, [pc, #76]	; (800a98c <tcpip_init+0x80>)
 800a93e:	f00c fd2d 	bl	801739c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a942:	4813      	ldr	r0, [pc, #76]	; (800a990 <tcpip_init+0x84>)
 800a944:	f00c f814 	bl	8016970 <sys_mutex_new>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d006      	beq.n	800a95c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a94e:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <tcpip_init+0x78>)
 800a950:	f240 2265 	movw	r2, #613	; 0x265
 800a954:	490f      	ldr	r1, [pc, #60]	; (800a994 <tcpip_init+0x88>)
 800a956:	480d      	ldr	r0, [pc, #52]	; (800a98c <tcpip_init+0x80>)
 800a958:	f00c fd20 	bl	801739c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a95c:	2318      	movs	r3, #24
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a964:	2200      	movs	r2, #0
 800a966:	490c      	ldr	r1, [pc, #48]	; (800a998 <tcpip_init+0x8c>)
 800a968:	480c      	ldr	r0, [pc, #48]	; (800a99c <tcpip_init+0x90>)
 800a96a:	f00c f833 	bl	80169d4 <sys_thread_new>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20004b24 	.word	0x20004b24
 800a97c:	20004b28 	.word	0x20004b28
 800a980:	20004b2c 	.word	0x20004b2c
 800a984:	080198e8 	.word	0x080198e8
 800a988:	08019970 	.word	0x08019970
 800a98c:	08019938 	.word	0x08019938
 800a990:	2000f57c 	.word	0x2000f57c
 800a994:	08019994 	.word	0x08019994
 800a998:	0800a6c9 	.word	0x0800a6c9
 800a99c:	080199b8 	.word	0x080199b8

0800a9a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a9aa:	88fb      	ldrh	r3, [r7, #6]
 800a9ac:	021b      	lsls	r3, r3, #8
 800a9ae:	b21a      	sxth	r2, r3
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	0a1b      	lsrs	r3, r3, #8
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	b21b      	sxth	r3, r3
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	b21b      	sxth	r3, r3
 800a9bc:	b29b      	uxth	r3, r3
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	061a      	lsls	r2, r3, #24
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	021b      	lsls	r3, r3, #8
 800a9da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a9e8:	431a      	orrs	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	0e1b      	lsrs	r3, r3, #24
 800a9ee:	4313      	orrs	r3, r2
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800aa06:	f00b ffa7 	bl	8016958 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800aa0a:	f000 f8d5 	bl	800abb8 <mem_init>
  memp_init();
 800aa0e:	f000 fc31 	bl	800b274 <memp_init>
  pbuf_init();
  netif_init();
 800aa12:	f000 fcf7 	bl	800b404 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aa16:	f007 f8f7 	bl	8011c08 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800aa1a:	f001 fe23 	bl	800c664 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aa1e:	f007 f839 	bl	8011a94 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aa36:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <ptr_to_mem+0x20>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	4413      	add	r3, r2
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20004b30 	.word	0x20004b30

0800aa50 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aa58:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <mem_to_ptr+0x20>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	b29b      	uxth	r3, r3
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	20004b30 	.word	0x20004b30

0800aa74 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aa7c:	4b45      	ldr	r3, [pc, #276]	; (800ab94 <plug_holes+0x120>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d206      	bcs.n	800aa94 <plug_holes+0x20>
 800aa86:	4b44      	ldr	r3, [pc, #272]	; (800ab98 <plug_holes+0x124>)
 800aa88:	f240 12df 	movw	r2, #479	; 0x1df
 800aa8c:	4943      	ldr	r1, [pc, #268]	; (800ab9c <plug_holes+0x128>)
 800aa8e:	4844      	ldr	r0, [pc, #272]	; (800aba0 <plug_holes+0x12c>)
 800aa90:	f00c fc84 	bl	801739c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aa94:	4b43      	ldr	r3, [pc, #268]	; (800aba4 <plug_holes+0x130>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d306      	bcc.n	800aaac <plug_holes+0x38>
 800aa9e:	4b3e      	ldr	r3, [pc, #248]	; (800ab98 <plug_holes+0x124>)
 800aaa0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aaa4:	4940      	ldr	r1, [pc, #256]	; (800aba8 <plug_holes+0x134>)
 800aaa6:	483e      	ldr	r0, [pc, #248]	; (800aba0 <plug_holes+0x12c>)
 800aaa8:	f00c fc78 	bl	801739c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	791b      	ldrb	r3, [r3, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d006      	beq.n	800aac2 <plug_holes+0x4e>
 800aab4:	4b38      	ldr	r3, [pc, #224]	; (800ab98 <plug_holes+0x124>)
 800aab6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800aaba:	493c      	ldr	r1, [pc, #240]	; (800abac <plug_holes+0x138>)
 800aabc:	4838      	ldr	r0, [pc, #224]	; (800aba0 <plug_holes+0x12c>)
 800aabe:	f00c fc6d 	bl	801739c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aaca:	d906      	bls.n	800aada <plug_holes+0x66>
 800aacc:	4b32      	ldr	r3, [pc, #200]	; (800ab98 <plug_holes+0x124>)
 800aace:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800aad2:	4937      	ldr	r1, [pc, #220]	; (800abb0 <plug_holes+0x13c>)
 800aad4:	4832      	ldr	r0, [pc, #200]	; (800aba0 <plug_holes+0x12c>)
 800aad6:	f00c fc61 	bl	801739c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff ffa4 	bl	800aa2c <ptr_to_mem>
 800aae4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d024      	beq.n	800ab38 <plug_holes+0xc4>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	791b      	ldrb	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d120      	bne.n	800ab38 <plug_holes+0xc4>
 800aaf6:	4b2b      	ldr	r3, [pc, #172]	; (800aba4 <plug_holes+0x130>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d01b      	beq.n	800ab38 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ab00:	4b2c      	ldr	r3, [pc, #176]	; (800abb4 <plug_holes+0x140>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d102      	bne.n	800ab10 <plug_holes+0x9c>
      lfree = mem;
 800ab0a:	4a2a      	ldr	r2, [pc, #168]	; (800abb4 <plug_holes+0x140>)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	881a      	ldrh	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab20:	d00a      	beq.n	800ab38 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff ff80 	bl	800aa2c <ptr_to_mem>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff ff8e 	bl	800aa50 <mem_to_ptr>
 800ab34:	4603      	mov	r3, r0
 800ab36:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	885b      	ldrh	r3, [r3, #2]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff ff75 	bl	800aa2c <ptr_to_mem>
 800ab42:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d01f      	beq.n	800ab8c <plug_holes+0x118>
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	791b      	ldrb	r3, [r3, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d11b      	bne.n	800ab8c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ab54:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <plug_holes+0x140>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d102      	bne.n	800ab64 <plug_holes+0xf0>
      lfree = pmem;
 800ab5e:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <plug_holes+0x140>)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	881a      	ldrh	r2, [r3, #0]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab74:	d00a      	beq.n	800ab8c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7ff ff56 	bl	800aa2c <ptr_to_mem>
 800ab80:	4604      	mov	r4, r0
 800ab82:	68b8      	ldr	r0, [r7, #8]
 800ab84:	f7ff ff64 	bl	800aa50 <mem_to_ptr>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ab8c:	bf00      	nop
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd90      	pop	{r4, r7, pc}
 800ab94:	20004b30 	.word	0x20004b30
 800ab98:	080199c8 	.word	0x080199c8
 800ab9c:	080199f8 	.word	0x080199f8
 800aba0:	08019a10 	.word	0x08019a10
 800aba4:	20004b34 	.word	0x20004b34
 800aba8:	08019a38 	.word	0x08019a38
 800abac:	08019a54 	.word	0x08019a54
 800abb0:	08019a70 	.word	0x08019a70
 800abb4:	20004b3c 	.word	0x20004b3c

0800abb8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800abbe:	4b1f      	ldr	r3, [pc, #124]	; (800ac3c <mem_init+0x84>)
 800abc0:	3303      	adds	r3, #3
 800abc2:	f023 0303 	bic.w	r3, r3, #3
 800abc6:	461a      	mov	r2, r3
 800abc8:	4b1d      	ldr	r3, [pc, #116]	; (800ac40 <mem_init+0x88>)
 800abca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800abcc:	4b1c      	ldr	r3, [pc, #112]	; (800ac40 <mem_init+0x88>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800abd8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800abe6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800abea:	f7ff ff1f 	bl	800aa2c <ptr_to_mem>
 800abee:	4603      	mov	r3, r0
 800abf0:	4a14      	ldr	r2, [pc, #80]	; (800ac44 <mem_init+0x8c>)
 800abf2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800abf4:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <mem_init+0x8c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2201      	movs	r2, #1
 800abfa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800abfc:	4b11      	ldr	r3, [pc, #68]	; (800ac44 <mem_init+0x8c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac04:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <mem_init+0x8c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac0e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac10:	4b0b      	ldr	r3, [pc, #44]	; (800ac40 <mem_init+0x88>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a0c      	ldr	r2, [pc, #48]	; (800ac48 <mem_init+0x90>)
 800ac16:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac18:	480c      	ldr	r0, [pc, #48]	; (800ac4c <mem_init+0x94>)
 800ac1a:	f00b fea9 	bl	8016970 <sys_mutex_new>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d006      	beq.n	800ac32 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ac24:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <mem_init+0x98>)
 800ac26:	f240 221f 	movw	r2, #543	; 0x21f
 800ac2a:	490a      	ldr	r1, [pc, #40]	; (800ac54 <mem_init+0x9c>)
 800ac2c:	480a      	ldr	r0, [pc, #40]	; (800ac58 <mem_init+0xa0>)
 800ac2e:	f00c fbb5 	bl	801739c <iprintf>
  }
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	2000f598 	.word	0x2000f598
 800ac40:	20004b30 	.word	0x20004b30
 800ac44:	20004b34 	.word	0x20004b34
 800ac48:	20004b3c 	.word	0x20004b3c
 800ac4c:	20004b38 	.word	0x20004b38
 800ac50:	080199c8 	.word	0x080199c8
 800ac54:	08019a9c 	.word	0x08019a9c
 800ac58:	08019a10 	.word	0x08019a10

0800ac5c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff fef3 	bl	800aa50 <mem_to_ptr>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7ff feda 	bl	800aa2c <ptr_to_mem>
 800ac78:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	885b      	ldrh	r3, [r3, #2]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff fed4 	bl	800aa2c <ptr_to_mem>
 800ac84:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac8e:	d818      	bhi.n	800acc2 <mem_link_valid+0x66>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	885b      	ldrh	r3, [r3, #2]
 800ac94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac98:	d813      	bhi.n	800acc2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac9e:	8afa      	ldrh	r2, [r7, #22]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d004      	beq.n	800acae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	8afa      	ldrh	r2, [r7, #22]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d109      	bne.n	800acc2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800acae:	4b08      	ldr	r3, [pc, #32]	; (800acd0 <mem_link_valid+0x74>)
 800acb0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d006      	beq.n	800acc6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	885b      	ldrh	r3, [r3, #2]
 800acbc:	8afa      	ldrh	r2, [r7, #22]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d001      	beq.n	800acc6 <mem_link_valid+0x6a>
    return 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e000      	b.n	800acc8 <mem_link_valid+0x6c>
  }
  return 1;
 800acc6:	2301      	movs	r3, #1
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3718      	adds	r7, #24
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20004b34 	.word	0x20004b34

0800acd4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d070      	beq.n	800adc4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00d      	beq.n	800ad08 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800acec:	4b37      	ldr	r3, [pc, #220]	; (800adcc <mem_free+0xf8>)
 800acee:	f240 2273 	movw	r2, #627	; 0x273
 800acf2:	4937      	ldr	r1, [pc, #220]	; (800add0 <mem_free+0xfc>)
 800acf4:	4837      	ldr	r0, [pc, #220]	; (800add4 <mem_free+0x100>)
 800acf6:	f00c fb51 	bl	801739c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800acfa:	f00b fe8b 	bl	8016a14 <sys_arch_protect>
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f00b fe95 	bl	8016a30 <sys_arch_unprotect>
    return;
 800ad06:	e05e      	b.n	800adc6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3b08      	subs	r3, #8
 800ad0c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ad0e:	4b32      	ldr	r3, [pc, #200]	; (800add8 <mem_free+0x104>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d306      	bcc.n	800ad26 <mem_free+0x52>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f103 020c 	add.w	r2, r3, #12
 800ad1e:	4b2f      	ldr	r3, [pc, #188]	; (800addc <mem_free+0x108>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d90d      	bls.n	800ad42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ad26:	4b29      	ldr	r3, [pc, #164]	; (800adcc <mem_free+0xf8>)
 800ad28:	f240 227f 	movw	r2, #639	; 0x27f
 800ad2c:	492c      	ldr	r1, [pc, #176]	; (800ade0 <mem_free+0x10c>)
 800ad2e:	4829      	ldr	r0, [pc, #164]	; (800add4 <mem_free+0x100>)
 800ad30:	f00c fb34 	bl	801739c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad34:	f00b fe6e 	bl	8016a14 <sys_arch_protect>
 800ad38:	6138      	str	r0, [r7, #16]
 800ad3a:	6938      	ldr	r0, [r7, #16]
 800ad3c:	f00b fe78 	bl	8016a30 <sys_arch_unprotect>
    return;
 800ad40:	e041      	b.n	800adc6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ad42:	4828      	ldr	r0, [pc, #160]	; (800ade4 <mem_free+0x110>)
 800ad44:	f00b fe2a 	bl	801699c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	791b      	ldrb	r3, [r3, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d110      	bne.n	800ad72 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ad50:	4b1e      	ldr	r3, [pc, #120]	; (800adcc <mem_free+0xf8>)
 800ad52:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ad56:	4924      	ldr	r1, [pc, #144]	; (800ade8 <mem_free+0x114>)
 800ad58:	481e      	ldr	r0, [pc, #120]	; (800add4 <mem_free+0x100>)
 800ad5a:	f00c fb1f 	bl	801739c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ad5e:	4821      	ldr	r0, [pc, #132]	; (800ade4 <mem_free+0x110>)
 800ad60:	f00b fe2b 	bl	80169ba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad64:	f00b fe56 	bl	8016a14 <sys_arch_protect>
 800ad68:	6178      	str	r0, [r7, #20]
 800ad6a:	6978      	ldr	r0, [r7, #20]
 800ad6c:	f00b fe60 	bl	8016a30 <sys_arch_unprotect>
    return;
 800ad70:	e029      	b.n	800adc6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ad72:	69f8      	ldr	r0, [r7, #28]
 800ad74:	f7ff ff72 	bl	800ac5c <mem_link_valid>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d110      	bne.n	800ada0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <mem_free+0xf8>)
 800ad80:	f240 2295 	movw	r2, #661	; 0x295
 800ad84:	4919      	ldr	r1, [pc, #100]	; (800adec <mem_free+0x118>)
 800ad86:	4813      	ldr	r0, [pc, #76]	; (800add4 <mem_free+0x100>)
 800ad88:	f00c fb08 	bl	801739c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ad8c:	4815      	ldr	r0, [pc, #84]	; (800ade4 <mem_free+0x110>)
 800ad8e:	f00b fe14 	bl	80169ba <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad92:	f00b fe3f 	bl	8016a14 <sys_arch_protect>
 800ad96:	61b8      	str	r0, [r7, #24]
 800ad98:	69b8      	ldr	r0, [r7, #24]
 800ad9a:	f00b fe49 	bl	8016a30 <sys_arch_unprotect>
    return;
 800ad9e:	e012      	b.n	800adc6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	2200      	movs	r2, #0
 800ada4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ada6:	4b12      	ldr	r3, [pc, #72]	; (800adf0 <mem_free+0x11c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	429a      	cmp	r2, r3
 800adae:	d202      	bcs.n	800adb6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800adb0:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <mem_free+0x11c>)
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800adb6:	69f8      	ldr	r0, [r7, #28]
 800adb8:	f7ff fe5c 	bl	800aa74 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800adbc:	4809      	ldr	r0, [pc, #36]	; (800ade4 <mem_free+0x110>)
 800adbe:	f00b fdfc 	bl	80169ba <sys_mutex_unlock>
 800adc2:	e000      	b.n	800adc6 <mem_free+0xf2>
    return;
 800adc4:	bf00      	nop
}
 800adc6:	3720      	adds	r7, #32
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	080199c8 	.word	0x080199c8
 800add0:	08019ab8 	.word	0x08019ab8
 800add4:	08019a10 	.word	0x08019a10
 800add8:	20004b30 	.word	0x20004b30
 800addc:	20004b34 	.word	0x20004b34
 800ade0:	08019adc 	.word	0x08019adc
 800ade4:	20004b38 	.word	0x20004b38
 800ade8:	08019af8 	.word	0x08019af8
 800adec:	08019b20 	.word	0x08019b20
 800adf0:	20004b3c 	.word	0x20004b3c

0800adf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ae00:	887b      	ldrh	r3, [r7, #2]
 800ae02:	3303      	adds	r3, #3
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f023 0303 	bic.w	r3, r3, #3
 800ae0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ae0c:	8bfb      	ldrh	r3, [r7, #30]
 800ae0e:	2b0b      	cmp	r3, #11
 800ae10:	d801      	bhi.n	800ae16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ae12:	230c      	movs	r3, #12
 800ae14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ae16:	8bfb      	ldrh	r3, [r7, #30]
 800ae18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae1c:	d803      	bhi.n	800ae26 <mem_trim+0x32>
 800ae1e:	8bfa      	ldrh	r2, [r7, #30]
 800ae20:	887b      	ldrh	r3, [r7, #2]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d201      	bcs.n	800ae2a <mem_trim+0x36>
    return NULL;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e0d8      	b.n	800afdc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ae2a:	4b6e      	ldr	r3, [pc, #440]	; (800afe4 <mem_trim+0x1f0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d304      	bcc.n	800ae3e <mem_trim+0x4a>
 800ae34:	4b6c      	ldr	r3, [pc, #432]	; (800afe8 <mem_trim+0x1f4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d306      	bcc.n	800ae4c <mem_trim+0x58>
 800ae3e:	4b6b      	ldr	r3, [pc, #428]	; (800afec <mem_trim+0x1f8>)
 800ae40:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ae44:	496a      	ldr	r1, [pc, #424]	; (800aff0 <mem_trim+0x1fc>)
 800ae46:	486b      	ldr	r0, [pc, #428]	; (800aff4 <mem_trim+0x200>)
 800ae48:	f00c faa8 	bl	801739c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ae4c:	4b65      	ldr	r3, [pc, #404]	; (800afe4 <mem_trim+0x1f0>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d304      	bcc.n	800ae60 <mem_trim+0x6c>
 800ae56:	4b64      	ldr	r3, [pc, #400]	; (800afe8 <mem_trim+0x1f4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d307      	bcc.n	800ae70 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae60:	f00b fdd8 	bl	8016a14 <sys_arch_protect>
 800ae64:	60b8      	str	r0, [r7, #8]
 800ae66:	68b8      	ldr	r0, [r7, #8]
 800ae68:	f00b fde2 	bl	8016a30 <sys_arch_unprotect>
    return rmem;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	e0b5      	b.n	800afdc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3b08      	subs	r3, #8
 800ae74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ae76:	69b8      	ldr	r0, [r7, #24]
 800ae78:	f7ff fdea 	bl	800aa50 <mem_to_ptr>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	881a      	ldrh	r2, [r3, #0]
 800ae84:	8afb      	ldrh	r3, [r7, #22]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	3b08      	subs	r3, #8
 800ae8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ae8e:	8bfa      	ldrh	r2, [r7, #30]
 800ae90:	8abb      	ldrh	r3, [r7, #20]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d906      	bls.n	800aea4 <mem_trim+0xb0>
 800ae96:	4b55      	ldr	r3, [pc, #340]	; (800afec <mem_trim+0x1f8>)
 800ae98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ae9c:	4956      	ldr	r1, [pc, #344]	; (800aff8 <mem_trim+0x204>)
 800ae9e:	4855      	ldr	r0, [pc, #340]	; (800aff4 <mem_trim+0x200>)
 800aea0:	f00c fa7c 	bl	801739c <iprintf>
  if (newsize > size) {
 800aea4:	8bfa      	ldrh	r2, [r7, #30]
 800aea6:	8abb      	ldrh	r3, [r7, #20]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d901      	bls.n	800aeb0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e095      	b.n	800afdc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800aeb0:	8bfa      	ldrh	r2, [r7, #30]
 800aeb2:	8abb      	ldrh	r3, [r7, #20]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d101      	bne.n	800aebc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	e08f      	b.n	800afdc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aebc:	484f      	ldr	r0, [pc, #316]	; (800affc <mem_trim+0x208>)
 800aebe:	f00b fd6d 	bl	801699c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff fdb0 	bl	800aa2c <ptr_to_mem>
 800aecc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	791b      	ldrb	r3, [r3, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d13f      	bne.n	800af56 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aede:	d106      	bne.n	800aeee <mem_trim+0xfa>
 800aee0:	4b42      	ldr	r3, [pc, #264]	; (800afec <mem_trim+0x1f8>)
 800aee2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800aee6:	4946      	ldr	r1, [pc, #280]	; (800b000 <mem_trim+0x20c>)
 800aee8:	4842      	ldr	r0, [pc, #264]	; (800aff4 <mem_trim+0x200>)
 800aeea:	f00c fa57 	bl	801739c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aef4:	8afa      	ldrh	r2, [r7, #22]
 800aef6:	8bfb      	ldrh	r3, [r7, #30]
 800aef8:	4413      	add	r3, r2
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	3308      	adds	r3, #8
 800aefe:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800af00:	4b40      	ldr	r3, [pc, #256]	; (800b004 <mem_trim+0x210>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	429a      	cmp	r2, r3
 800af08:	d106      	bne.n	800af18 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800af0a:	89fb      	ldrh	r3, [r7, #14]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff fd8d 	bl	800aa2c <ptr_to_mem>
 800af12:	4603      	mov	r3, r0
 800af14:	4a3b      	ldr	r2, [pc, #236]	; (800b004 <mem_trim+0x210>)
 800af16:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800af18:	89fb      	ldrh	r3, [r7, #14]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7ff fd86 	bl	800aa2c <ptr_to_mem>
 800af20:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2200      	movs	r2, #0
 800af26:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	89ba      	ldrh	r2, [r7, #12]
 800af2c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	8afa      	ldrh	r2, [r7, #22]
 800af32:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	89fa      	ldrh	r2, [r7, #14]
 800af38:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af42:	d047      	beq.n	800afd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff fd6f 	bl	800aa2c <ptr_to_mem>
 800af4e:	4602      	mov	r2, r0
 800af50:	89fb      	ldrh	r3, [r7, #14]
 800af52:	8053      	strh	r3, [r2, #2]
 800af54:	e03e      	b.n	800afd4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800af56:	8bfb      	ldrh	r3, [r7, #30]
 800af58:	f103 0214 	add.w	r2, r3, #20
 800af5c:	8abb      	ldrh	r3, [r7, #20]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d838      	bhi.n	800afd4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800af62:	8afa      	ldrh	r2, [r7, #22]
 800af64:	8bfb      	ldrh	r3, [r7, #30]
 800af66:	4413      	add	r3, r2
 800af68:	b29b      	uxth	r3, r3
 800af6a:	3308      	adds	r3, #8
 800af6c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af76:	d106      	bne.n	800af86 <mem_trim+0x192>
 800af78:	4b1c      	ldr	r3, [pc, #112]	; (800afec <mem_trim+0x1f8>)
 800af7a:	f240 3216 	movw	r2, #790	; 0x316
 800af7e:	4920      	ldr	r1, [pc, #128]	; (800b000 <mem_trim+0x20c>)
 800af80:	481c      	ldr	r0, [pc, #112]	; (800aff4 <mem_trim+0x200>)
 800af82:	f00c fa0b 	bl	801739c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800af86:	89fb      	ldrh	r3, [r7, #14]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fd4f 	bl	800aa2c <ptr_to_mem>
 800af8e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800af90:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <mem_trim+0x210>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	429a      	cmp	r2, r3
 800af98:	d202      	bcs.n	800afa0 <mem_trim+0x1ac>
      lfree = mem2;
 800af9a:	4a1a      	ldr	r2, [pc, #104]	; (800b004 <mem_trim+0x210>)
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	2200      	movs	r2, #0
 800afa4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	881a      	ldrh	r2, [r3, #0]
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	8afa      	ldrh	r2, [r7, #22]
 800afb2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	89fa      	ldrh	r2, [r7, #14]
 800afb8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afc2:	d007      	beq.n	800afd4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff fd2f 	bl	800aa2c <ptr_to_mem>
 800afce:	4602      	mov	r2, r0
 800afd0:	89fb      	ldrh	r3, [r7, #14]
 800afd2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800afd4:	4809      	ldr	r0, [pc, #36]	; (800affc <mem_trim+0x208>)
 800afd6:	f00b fcf0 	bl	80169ba <sys_mutex_unlock>
  return rmem;
 800afda:	687b      	ldr	r3, [r7, #4]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20004b30 	.word	0x20004b30
 800afe8:	20004b34 	.word	0x20004b34
 800afec:	080199c8 	.word	0x080199c8
 800aff0:	08019b54 	.word	0x08019b54
 800aff4:	08019a10 	.word	0x08019a10
 800aff8:	08019b6c 	.word	0x08019b6c
 800affc:	20004b38 	.word	0x20004b38
 800b000:	08019b8c 	.word	0x08019b8c
 800b004:	20004b3c 	.word	0x20004b3c

0800b008 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b012:	88fb      	ldrh	r3, [r7, #6]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d101      	bne.n	800b01c <mem_malloc+0x14>
    return NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	e0e2      	b.n	800b1e2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	3303      	adds	r3, #3
 800b020:	b29b      	uxth	r3, r3
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b028:	8bbb      	ldrh	r3, [r7, #28]
 800b02a:	2b0b      	cmp	r3, #11
 800b02c:	d801      	bhi.n	800b032 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b02e:	230c      	movs	r3, #12
 800b030:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b032:	8bbb      	ldrh	r3, [r7, #28]
 800b034:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b038:	d803      	bhi.n	800b042 <mem_malloc+0x3a>
 800b03a:	8bba      	ldrh	r2, [r7, #28]
 800b03c:	88fb      	ldrh	r3, [r7, #6]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d201      	bcs.n	800b046 <mem_malloc+0x3e>
    return NULL;
 800b042:	2300      	movs	r3, #0
 800b044:	e0cd      	b.n	800b1e2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b046:	4869      	ldr	r0, [pc, #420]	; (800b1ec <mem_malloc+0x1e4>)
 800b048:	f00b fca8 	bl	801699c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b04c:	4b68      	ldr	r3, [pc, #416]	; (800b1f0 <mem_malloc+0x1e8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fcfd 	bl	800aa50 <mem_to_ptr>
 800b056:	4603      	mov	r3, r0
 800b058:	83fb      	strh	r3, [r7, #30]
 800b05a:	e0b7      	b.n	800b1cc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b05c:	8bfb      	ldrh	r3, [r7, #30]
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff fce4 	bl	800aa2c <ptr_to_mem>
 800b064:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	791b      	ldrb	r3, [r3, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f040 80a7 	bne.w	800b1be <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	461a      	mov	r2, r3
 800b076:	8bfb      	ldrh	r3, [r7, #30]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	f1a3 0208 	sub.w	r2, r3, #8
 800b07e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b080:	429a      	cmp	r2, r3
 800b082:	f0c0 809c 	bcc.w	800b1be <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	8bfb      	ldrh	r3, [r7, #30]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	f1a3 0208 	sub.w	r2, r3, #8
 800b094:	8bbb      	ldrh	r3, [r7, #28]
 800b096:	3314      	adds	r3, #20
 800b098:	429a      	cmp	r2, r3
 800b09a:	d333      	bcc.n	800b104 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b09c:	8bfa      	ldrh	r2, [r7, #30]
 800b09e:	8bbb      	ldrh	r3, [r7, #28]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b0a8:	8a7b      	ldrh	r3, [r7, #18]
 800b0aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0ae:	d106      	bne.n	800b0be <mem_malloc+0xb6>
 800b0b0:	4b50      	ldr	r3, [pc, #320]	; (800b1f4 <mem_malloc+0x1ec>)
 800b0b2:	f240 3287 	movw	r2, #903	; 0x387
 800b0b6:	4950      	ldr	r1, [pc, #320]	; (800b1f8 <mem_malloc+0x1f0>)
 800b0b8:	4850      	ldr	r0, [pc, #320]	; (800b1fc <mem_malloc+0x1f4>)
 800b0ba:	f00c f96f 	bl	801739c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b0be:	8a7b      	ldrh	r3, [r7, #18]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff fcb3 	bl	800aa2c <ptr_to_mem>
 800b0c6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	881a      	ldrh	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8bfa      	ldrh	r2, [r7, #30]
 800b0da:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	8a7a      	ldrh	r2, [r7, #18]
 800b0e0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0f0:	d00b      	beq.n	800b10a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff fc98 	bl	800aa2c <ptr_to_mem>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	8a7b      	ldrh	r3, [r7, #18]
 800b100:	8053      	strh	r3, [r2, #2]
 800b102:	e002      	b.n	800b10a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2201      	movs	r2, #1
 800b108:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b10a:	4b39      	ldr	r3, [pc, #228]	; (800b1f0 <mem_malloc+0x1e8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	697a      	ldr	r2, [r7, #20]
 800b110:	429a      	cmp	r2, r3
 800b112:	d127      	bne.n	800b164 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b114:	4b36      	ldr	r3, [pc, #216]	; (800b1f0 <mem_malloc+0x1e8>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b11a:	e005      	b.n	800b128 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff fc83 	bl	800aa2c <ptr_to_mem>
 800b126:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d004      	beq.n	800b13a <mem_malloc+0x132>
 800b130:	4b33      	ldr	r3, [pc, #204]	; (800b200 <mem_malloc+0x1f8>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	429a      	cmp	r2, r3
 800b138:	d1f0      	bne.n	800b11c <mem_malloc+0x114>
          }
          lfree = cur;
 800b13a:	4a2d      	ldr	r2, [pc, #180]	; (800b1f0 <mem_malloc+0x1e8>)
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b140:	4b2b      	ldr	r3, [pc, #172]	; (800b1f0 <mem_malloc+0x1e8>)
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	4b2e      	ldr	r3, [pc, #184]	; (800b200 <mem_malloc+0x1f8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d00b      	beq.n	800b164 <mem_malloc+0x15c>
 800b14c:	4b28      	ldr	r3, [pc, #160]	; (800b1f0 <mem_malloc+0x1e8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	791b      	ldrb	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d006      	beq.n	800b164 <mem_malloc+0x15c>
 800b156:	4b27      	ldr	r3, [pc, #156]	; (800b1f4 <mem_malloc+0x1ec>)
 800b158:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b15c:	4929      	ldr	r1, [pc, #164]	; (800b204 <mem_malloc+0x1fc>)
 800b15e:	4827      	ldr	r0, [pc, #156]	; (800b1fc <mem_malloc+0x1f4>)
 800b160:	f00c f91c 	bl	801739c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b164:	4821      	ldr	r0, [pc, #132]	; (800b1ec <mem_malloc+0x1e4>)
 800b166:	f00b fc28 	bl	80169ba <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b16a:	8bba      	ldrh	r2, [r7, #28]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	4413      	add	r3, r2
 800b170:	3308      	adds	r3, #8
 800b172:	4a23      	ldr	r2, [pc, #140]	; (800b200 <mem_malloc+0x1f8>)
 800b174:	6812      	ldr	r2, [r2, #0]
 800b176:	4293      	cmp	r3, r2
 800b178:	d906      	bls.n	800b188 <mem_malloc+0x180>
 800b17a:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <mem_malloc+0x1ec>)
 800b17c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b180:	4921      	ldr	r1, [pc, #132]	; (800b208 <mem_malloc+0x200>)
 800b182:	481e      	ldr	r0, [pc, #120]	; (800b1fc <mem_malloc+0x1f4>)
 800b184:	f00c f90a 	bl	801739c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d006      	beq.n	800b1a0 <mem_malloc+0x198>
 800b192:	4b18      	ldr	r3, [pc, #96]	; (800b1f4 <mem_malloc+0x1ec>)
 800b194:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b198:	491c      	ldr	r1, [pc, #112]	; (800b20c <mem_malloc+0x204>)
 800b19a:	4818      	ldr	r0, [pc, #96]	; (800b1fc <mem_malloc+0x1f4>)
 800b19c:	f00c f8fe 	bl	801739c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	f003 0303 	and.w	r3, r3, #3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d006      	beq.n	800b1b8 <mem_malloc+0x1b0>
 800b1aa:	4b12      	ldr	r3, [pc, #72]	; (800b1f4 <mem_malloc+0x1ec>)
 800b1ac:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b1b0:	4917      	ldr	r1, [pc, #92]	; (800b210 <mem_malloc+0x208>)
 800b1b2:	4812      	ldr	r0, [pc, #72]	; (800b1fc <mem_malloc+0x1f4>)
 800b1b4:	f00c f8f2 	bl	801739c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	e011      	b.n	800b1e2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b1be:	8bfb      	ldrh	r3, [r7, #30]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff fc33 	bl	800aa2c <ptr_to_mem>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b1cc:	8bfa      	ldrh	r2, [r7, #30]
 800b1ce:	8bbb      	ldrh	r3, [r7, #28]
 800b1d0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	f4ff af41 	bcc.w	800b05c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b1da:	4804      	ldr	r0, [pc, #16]	; (800b1ec <mem_malloc+0x1e4>)
 800b1dc:	f00b fbed 	bl	80169ba <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3720      	adds	r7, #32
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	20004b38 	.word	0x20004b38
 800b1f0:	20004b3c 	.word	0x20004b3c
 800b1f4:	080199c8 	.word	0x080199c8
 800b1f8:	08019b8c 	.word	0x08019b8c
 800b1fc:	08019a10 	.word	0x08019a10
 800b200:	20004b34 	.word	0x20004b34
 800b204:	08019ba0 	.word	0x08019ba0
 800b208:	08019bbc 	.word	0x08019bbc
 800b20c:	08019bec 	.word	0x08019bec
 800b210:	08019c1c 	.word	0x08019c1c

0800b214 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	3303      	adds	r3, #3
 800b22a:	f023 0303 	bic.w	r3, r3, #3
 800b22e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b230:	2300      	movs	r3, #0
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	e011      	b.n	800b25a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	461a      	mov	r2, r3
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4413      	add	r3, r2
 800b252:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	885b      	ldrh	r3, [r3, #2]
 800b25e:	461a      	mov	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4293      	cmp	r3, r2
 800b264:	dbe7      	blt.n	800b236 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b266:	bf00      	nop
 800b268:	bf00      	nop
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b27a:	2300      	movs	r3, #0
 800b27c:	80fb      	strh	r3, [r7, #6]
 800b27e:	e009      	b.n	800b294 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b280:	88fb      	ldrh	r3, [r7, #6]
 800b282:	4a08      	ldr	r2, [pc, #32]	; (800b2a4 <memp_init+0x30>)
 800b284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff ffc3 	bl	800b214 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	3301      	adds	r3, #1
 800b292:	80fb      	strh	r3, [r7, #6]
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	2b0c      	cmp	r3, #12
 800b298:	d9f2      	bls.n	800b280 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}
 800b2a4:	0801c83c 	.word	0x0801c83c

0800b2a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b2b0:	f00b fbb0 	bl	8016a14 <sys_arch_protect>
 800b2b4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d015      	beq.n	800b2f0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f003 0303 	and.w	r3, r3, #3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <do_memp_malloc_pool+0x3e>
 800b2d8:	4b09      	ldr	r3, [pc, #36]	; (800b300 <do_memp_malloc_pool+0x58>)
 800b2da:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b2de:	4909      	ldr	r1, [pc, #36]	; (800b304 <do_memp_malloc_pool+0x5c>)
 800b2e0:	4809      	ldr	r0, [pc, #36]	; (800b308 <do_memp_malloc_pool+0x60>)
 800b2e2:	f00c f85b 	bl	801739c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f00b fba2 	bl	8016a30 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	e003      	b.n	800b2f8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	f00b fb9d 	bl	8016a30 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	08019c40 	.word	0x08019c40
 800b304:	08019c70 	.word	0x08019c70
 800b308:	08019c94 	.word	0x08019c94

0800b30c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	2b0c      	cmp	r3, #12
 800b31a:	d908      	bls.n	800b32e <memp_malloc+0x22>
 800b31c:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <memp_malloc+0x3c>)
 800b31e:	f240 1257 	movw	r2, #343	; 0x157
 800b322:	490a      	ldr	r1, [pc, #40]	; (800b34c <memp_malloc+0x40>)
 800b324:	480a      	ldr	r0, [pc, #40]	; (800b350 <memp_malloc+0x44>)
 800b326:	f00c f839 	bl	801739c <iprintf>
 800b32a:	2300      	movs	r3, #0
 800b32c:	e008      	b.n	800b340 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	4a08      	ldr	r2, [pc, #32]	; (800b354 <memp_malloc+0x48>)
 800b332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff ffb6 	bl	800b2a8 <do_memp_malloc_pool>
 800b33c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b33e:	68fb      	ldr	r3, [r7, #12]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	08019c40 	.word	0x08019c40
 800b34c:	08019cd0 	.word	0x08019cd0
 800b350:	08019c94 	.word	0x08019c94
 800b354:	0801c83c 	.word	0x0801c83c

0800b358 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	f003 0303 	and.w	r3, r3, #3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d006      	beq.n	800b37a <do_memp_free_pool+0x22>
 800b36c:	4b0d      	ldr	r3, [pc, #52]	; (800b3a4 <do_memp_free_pool+0x4c>)
 800b36e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b372:	490d      	ldr	r1, [pc, #52]	; (800b3a8 <do_memp_free_pool+0x50>)
 800b374:	480d      	ldr	r0, [pc, #52]	; (800b3ac <do_memp_free_pool+0x54>)
 800b376:	f00c f811 	bl	801739c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b37e:	f00b fb49 	bl	8016a14 <sys_arch_protect>
 800b382:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b396:	68b8      	ldr	r0, [r7, #8]
 800b398:	f00b fb4a 	bl	8016a30 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b39c:	bf00      	nop
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	08019c40 	.word	0x08019c40
 800b3a8:	08019cf0 	.word	0x08019cf0
 800b3ac:	08019c94 	.word	0x08019c94

0800b3b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	2b0c      	cmp	r3, #12
 800b3c0:	d907      	bls.n	800b3d2 <memp_free+0x22>
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <memp_free+0x44>)
 800b3c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b3c8:	490b      	ldr	r1, [pc, #44]	; (800b3f8 <memp_free+0x48>)
 800b3ca:	480c      	ldr	r0, [pc, #48]	; (800b3fc <memp_free+0x4c>)
 800b3cc:	f00b ffe6 	bl	801739c <iprintf>
 800b3d0:	e00c      	b.n	800b3ec <memp_free+0x3c>

  if (mem == NULL) {
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d008      	beq.n	800b3ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	4a09      	ldr	r2, [pc, #36]	; (800b400 <memp_free+0x50>)
 800b3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff ffb8 	bl	800b358 <do_memp_free_pool>
 800b3e8:	e000      	b.n	800b3ec <memp_free+0x3c>
    return;
 800b3ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	08019c40 	.word	0x08019c40
 800b3f8:	08019d10 	.word	0x08019d10
 800b3fc:	08019c94 	.word	0x08019c94
 800b400:	0801c83c 	.word	0x0801c83c

0800b404 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b408:	bf00      	nop
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
	...

0800b414 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d108      	bne.n	800b43a <netif_add+0x26>
 800b428:	4b5b      	ldr	r3, [pc, #364]	; (800b598 <netif_add+0x184>)
 800b42a:	f240 1227 	movw	r2, #295	; 0x127
 800b42e:	495b      	ldr	r1, [pc, #364]	; (800b59c <netif_add+0x188>)
 800b430:	485b      	ldr	r0, [pc, #364]	; (800b5a0 <netif_add+0x18c>)
 800b432:	f00b ffb3 	bl	801739c <iprintf>
 800b436:	2300      	movs	r3, #0
 800b438:	e0a9      	b.n	800b58e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d108      	bne.n	800b452 <netif_add+0x3e>
 800b440:	4b55      	ldr	r3, [pc, #340]	; (800b598 <netif_add+0x184>)
 800b442:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b446:	4957      	ldr	r1, [pc, #348]	; (800b5a4 <netif_add+0x190>)
 800b448:	4855      	ldr	r0, [pc, #340]	; (800b5a0 <netif_add+0x18c>)
 800b44a:	f00b ffa7 	bl	801739c <iprintf>
 800b44e:	2300      	movs	r3, #0
 800b450:	e09d      	b.n	800b58e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b458:	4b53      	ldr	r3, [pc, #332]	; (800b5a8 <netif_add+0x194>)
 800b45a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b462:	4b51      	ldr	r3, [pc, #324]	; (800b5a8 <netif_add+0x194>)
 800b464:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b46c:	4b4e      	ldr	r3, [pc, #312]	; (800b5a8 <netif_add+0x194>)
 800b46e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4a49      	ldr	r2, [pc, #292]	; (800b5ac <netif_add+0x198>)
 800b486:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3324      	adds	r3, #36	; 0x24
 800b49a:	2204      	movs	r2, #4
 800b49c:	2100      	movs	r1, #0
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f00b fb30 	bl	8016b04 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6a3a      	ldr	r2, [r7, #32]
 800b4ae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b4b0:	4b3f      	ldr	r3, [pc, #252]	; (800b5b0 <netif_add+0x19c>)
 800b4b2:	781a      	ldrb	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4be:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	68b9      	ldr	r1, [r7, #8]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 f914 	bl	800b6f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	68f8      	ldr	r0, [r7, #12]
 800b4d0:	4798      	blx	r3
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <netif_add+0xc8>
    return NULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e058      	b.n	800b58e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4e2:	2bff      	cmp	r3, #255	; 0xff
 800b4e4:	d103      	bne.n	800b4ee <netif_add+0xda>
        netif->num = 0;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b4f2:	4b30      	ldr	r3, [pc, #192]	; (800b5b4 <netif_add+0x1a0>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	617b      	str	r3, [r7, #20]
 800b4f8:	e02b      	b.n	800b552 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d106      	bne.n	800b510 <netif_add+0xfc>
 800b502:	4b25      	ldr	r3, [pc, #148]	; (800b598 <netif_add+0x184>)
 800b504:	f240 128b 	movw	r2, #395	; 0x18b
 800b508:	492b      	ldr	r1, [pc, #172]	; (800b5b8 <netif_add+0x1a4>)
 800b50a:	4825      	ldr	r0, [pc, #148]	; (800b5a0 <netif_add+0x18c>)
 800b50c:	f00b ff46 	bl	801739c <iprintf>
        num_netifs++;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	3301      	adds	r3, #1
 800b514:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2bff      	cmp	r3, #255	; 0xff
 800b51a:	dd06      	ble.n	800b52a <netif_add+0x116>
 800b51c:	4b1e      	ldr	r3, [pc, #120]	; (800b598 <netif_add+0x184>)
 800b51e:	f240 128d 	movw	r2, #397	; 0x18d
 800b522:	4926      	ldr	r1, [pc, #152]	; (800b5bc <netif_add+0x1a8>)
 800b524:	481e      	ldr	r0, [pc, #120]	; (800b5a0 <netif_add+0x18c>)
 800b526:	f00b ff39 	bl	801739c <iprintf>
        if (netif2->num == netif->num) {
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b536:	429a      	cmp	r2, r3
 800b538:	d108      	bne.n	800b54c <netif_add+0x138>
          netif->num++;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b540:	3301      	adds	r3, #1
 800b542:	b2da      	uxtb	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b54a:	e005      	b.n	800b558 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1d0      	bne.n	800b4fa <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1be      	bne.n	800b4dc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b564:	2bfe      	cmp	r3, #254	; 0xfe
 800b566:	d103      	bne.n	800b570 <netif_add+0x15c>
    netif_num = 0;
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <netif_add+0x19c>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	701a      	strb	r2, [r3, #0]
 800b56e:	e006      	b.n	800b57e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b576:	3301      	adds	r3, #1
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <netif_add+0x19c>)
 800b57c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b57e:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <netif_add+0x1a0>)
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b586:	4a0b      	ldr	r2, [pc, #44]	; (800b5b4 <netif_add+0x1a0>)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b58c:	68fb      	ldr	r3, [r7, #12]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	08019d2c 	.word	0x08019d2c
 800b59c:	08019dc0 	.word	0x08019dc0
 800b5a0:	08019d7c 	.word	0x08019d7c
 800b5a4:	08019ddc 	.word	0x08019ddc
 800b5a8:	0801c8c0 	.word	0x0801c8c0
 800b5ac:	0800b9d7 	.word	0x0800b9d7
 800b5b0:	20004b74 	.word	0x20004b74
 800b5b4:	20012ca4 	.word	0x20012ca4
 800b5b8:	08019e00 	.word	0x08019e00
 800b5bc:	08019e14 	.word	0x08019e14

0800b5c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f002 fb91 	bl	800dcf4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f006 ffa3 	bl	8012520 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <netif_do_set_ipaddr+0x20>
 800b5f6:	4b1d      	ldr	r3, [pc, #116]	; (800b66c <netif_do_set_ipaddr+0x88>)
 800b5f8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b5fc:	491c      	ldr	r1, [pc, #112]	; (800b670 <netif_do_set_ipaddr+0x8c>)
 800b5fe:	481d      	ldr	r0, [pc, #116]	; (800b674 <netif_do_set_ipaddr+0x90>)
 800b600:	f00b fecc 	bl	801739c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <netif_do_set_ipaddr+0x34>
 800b60a:	4b18      	ldr	r3, [pc, #96]	; (800b66c <netif_do_set_ipaddr+0x88>)
 800b60c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b610:	4917      	ldr	r1, [pc, #92]	; (800b670 <netif_do_set_ipaddr+0x8c>)
 800b612:	4818      	ldr	r0, [pc, #96]	; (800b674 <netif_do_set_ipaddr+0x90>)
 800b614:	f00b fec2 	bl	801739c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	3304      	adds	r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	429a      	cmp	r2, r3
 800b624:	d01c      	beq.n	800b660 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	3304      	adds	r3, #4
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b636:	f107 0314 	add.w	r3, r7, #20
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7ff ffbf 	bl	800b5c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <netif_do_set_ipaddr+0x6a>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	e000      	b.n	800b650 <netif_do_set_ipaddr+0x6c>
 800b64e:	2300      	movs	r3, #0
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b654:	2101      	movs	r1, #1
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 f8d2 	bl	800b800 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b65c:	2301      	movs	r3, #1
 800b65e:	e000      	b.n	800b662 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08019d2c 	.word	0x08019d2c
 800b670:	08019e44 	.word	0x08019e44
 800b674:	08019d7c 	.word	0x08019d7c

0800b678 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3308      	adds	r3, #8
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d00a      	beq.n	800b6a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <netif_do_set_netmask+0x26>
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	e000      	b.n	800b6a0 <netif_do_set_netmask+0x28>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e000      	b.n	800b6aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	60f8      	str	r0, [r7, #12]
 800b6be:	60b9      	str	r1, [r7, #8]
 800b6c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	330c      	adds	r3, #12
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d00a      	beq.n	800b6e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <netif_do_set_gw+0x26>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	e000      	b.n	800b6de <netif_do_set_gw+0x28>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e000      	b.n	800b6e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b710:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <netif_set_addr+0x90>)
 800b712:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b71a:	4b1a      	ldr	r3, [pc, #104]	; (800b784 <netif_set_addr+0x90>)
 800b71c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d101      	bne.n	800b728 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b724:	4b17      	ldr	r3, [pc, #92]	; (800b784 <netif_set_addr+0x90>)
 800b726:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <netif_set_addr+0x42>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <netif_set_addr+0x46>
 800b736:	2301      	movs	r3, #1
 800b738:	e000      	b.n	800b73c <netif_set_addr+0x48>
 800b73a:	2300      	movs	r3, #0
 800b73c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b744:	f107 0310 	add.w	r3, r7, #16
 800b748:	461a      	mov	r2, r3
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f7ff ff49 	bl	800b5e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b752:	69fa      	ldr	r2, [r7, #28]
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff ff8e 	bl	800b678 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b75c:	69ba      	ldr	r2, [r7, #24]
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f7ff ffa8 	bl	800b6b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d106      	bne.n	800b77a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b76c:	f107 0310 	add.w	r3, r7, #16
 800b770:	461a      	mov	r2, r3
 800b772:	68b9      	ldr	r1, [r7, #8]
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f7ff ff35 	bl	800b5e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b77a:	bf00      	nop
 800b77c:	3720      	adds	r7, #32
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	0801c8c0 	.word	0x0801c8c0

0800b788 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b790:	4a04      	ldr	r2, [pc, #16]	; (800b7a4 <netif_set_default+0x1c>)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b796:	bf00      	nop
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	20012ca8 	.word	0x20012ca8

0800b7a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d107      	bne.n	800b7c6 <netif_set_up+0x1e>
 800b7b6:	4b0f      	ldr	r3, [pc, #60]	; (800b7f4 <netif_set_up+0x4c>)
 800b7b8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b7bc:	490e      	ldr	r1, [pc, #56]	; (800b7f8 <netif_set_up+0x50>)
 800b7be:	480f      	ldr	r0, [pc, #60]	; (800b7fc <netif_set_up+0x54>)
 800b7c0:	f00b fdec 	bl	801739c <iprintf>
 800b7c4:	e013      	b.n	800b7ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10c      	bne.n	800b7ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7da:	f043 0301 	orr.w	r3, r3, #1
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b7e6:	2103      	movs	r1, #3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f809 	bl	800b800 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	08019d2c 	.word	0x08019d2c
 800b7f8:	08019eb4 	.word	0x08019eb4
 800b7fc:	08019d7c 	.word	0x08019d7c

0800b800 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <netif_issue_reports+0x20>
 800b812:	4b18      	ldr	r3, [pc, #96]	; (800b874 <netif_issue_reports+0x74>)
 800b814:	f240 326d 	movw	r2, #877	; 0x36d
 800b818:	4917      	ldr	r1, [pc, #92]	; (800b878 <netif_issue_reports+0x78>)
 800b81a:	4818      	ldr	r0, [pc, #96]	; (800b87c <netif_issue_reports+0x7c>)
 800b81c:	f00b fdbe 	bl	801739c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b826:	f003 0304 	and.w	r3, r3, #4
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d01e      	beq.n	800b86c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b834:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d017      	beq.n	800b86c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b83c:	78fb      	ldrb	r3, [r7, #3]
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d013      	beq.n	800b86e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3304      	adds	r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00e      	beq.n	800b86e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b856:	f003 0308 	and.w	r3, r3, #8
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d007      	beq.n	800b86e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3304      	adds	r3, #4
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f009 fc5d 	bl	8015124 <etharp_request>
 800b86a:	e000      	b.n	800b86e <netif_issue_reports+0x6e>
    return;
 800b86c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	08019d2c 	.word	0x08019d2c
 800b878:	08019ed0 	.word	0x08019ed0
 800b87c:	08019d7c 	.word	0x08019d7c

0800b880 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d107      	bne.n	800b89e <netif_set_down+0x1e>
 800b88e:	4b12      	ldr	r3, [pc, #72]	; (800b8d8 <netif_set_down+0x58>)
 800b890:	f240 329b 	movw	r2, #923	; 0x39b
 800b894:	4911      	ldr	r1, [pc, #68]	; (800b8dc <netif_set_down+0x5c>)
 800b896:	4812      	ldr	r0, [pc, #72]	; (800b8e0 <netif_set_down+0x60>)
 800b898:	f00b fd80 	bl	801739c <iprintf>
 800b89c:	e019      	b.n	800b8d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b8a4:	f003 0301 	and.w	r3, r3, #1
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d012      	beq.n	800b8d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b8c4:	f003 0308 	and.w	r3, r3, #8
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f008 ffe3 	bl	8014898 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	08019d2c 	.word	0x08019d2c
 800b8dc:	08019ef4 	.word	0x08019ef4
 800b8e0:	08019d7c 	.word	0x08019d7c

0800b8e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d107      	bne.n	800b902 <netif_set_link_up+0x1e>
 800b8f2:	4b15      	ldr	r3, [pc, #84]	; (800b948 <netif_set_link_up+0x64>)
 800b8f4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b8f8:	4914      	ldr	r1, [pc, #80]	; (800b94c <netif_set_link_up+0x68>)
 800b8fa:	4815      	ldr	r0, [pc, #84]	; (800b950 <netif_set_link_up+0x6c>)
 800b8fc:	f00b fd4e 	bl	801739c <iprintf>
 800b900:	e01e      	b.n	800b940 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d117      	bne.n	800b940 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b916:	f043 0304 	orr.w	r3, r3, #4
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f007 fa28 	bl	8012d78 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b928:	2103      	movs	r1, #3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff ff68 	bl	800b800 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	69db      	ldr	r3, [r3, #28]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <netif_set_link_up+0x5c>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b940:	3708      	adds	r7, #8
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	08019d2c 	.word	0x08019d2c
 800b94c:	08019f14 	.word	0x08019f14
 800b950:	08019d7c 	.word	0x08019d7c

0800b954 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d107      	bne.n	800b972 <netif_set_link_down+0x1e>
 800b962:	4b11      	ldr	r3, [pc, #68]	; (800b9a8 <netif_set_link_down+0x54>)
 800b964:	f240 4206 	movw	r2, #1030	; 0x406
 800b968:	4910      	ldr	r1, [pc, #64]	; (800b9ac <netif_set_link_down+0x58>)
 800b96a:	4811      	ldr	r0, [pc, #68]	; (800b9b0 <netif_set_link_down+0x5c>)
 800b96c:	f00b fd16 	bl	801739c <iprintf>
 800b970:	e017      	b.n	800b9a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d010      	beq.n	800b9a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b986:	f023 0304 	bic.w	r3, r3, #4
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	69db      	ldr	r3, [r3, #28]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <netif_set_link_down+0x4e>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	69db      	ldr	r3, [r3, #28]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	08019d2c 	.word	0x08019d2c
 800b9ac:	08019f38 	.word	0x08019f38
 800b9b0:	08019d7c 	.word	0x08019d7c

0800b9b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	61da      	str	r2, [r3, #28]
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	b085      	sub	sp, #20
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	60f8      	str	r0, [r7, #12]
 800b9de:	60b9      	str	r1, [r7, #8]
 800b9e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b9e2:	f06f 030b 	mvn.w	r3, #11
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
	...

0800b9f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d013      	beq.n	800ba2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ba04:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <netif_get_by_index+0x48>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	60fb      	str	r3, [r7, #12]
 800ba0a:	e00c      	b.n	800ba26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ba12:	3301      	adds	r3, #1
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	79fa      	ldrb	r2, [r7, #7]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d101      	bne.n	800ba20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	e006      	b.n	800ba2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	60fb      	str	r3, [r7, #12]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1ef      	bne.n	800ba0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20012ca4 	.word	0x20012ca4

0800ba40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ba46:	f00a ffe5 	bl	8016a14 <sys_arch_protect>
 800ba4a:	6038      	str	r0, [r7, #0]
 800ba4c:	4b0d      	ldr	r3, [pc, #52]	; (800ba84 <pbuf_free_ooseq+0x44>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	701a      	strb	r2, [r3, #0]
 800ba52:	6838      	ldr	r0, [r7, #0]
 800ba54:	f00a ffec 	bl	8016a30 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ba58:	4b0b      	ldr	r3, [pc, #44]	; (800ba88 <pbuf_free_ooseq+0x48>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	e00a      	b.n	800ba76 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f002 f981 	bl	800dd70 <tcp_free_ooseq>
      return;
 800ba6e:	e005      	b.n	800ba7c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	607b      	str	r3, [r7, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1f1      	bne.n	800ba60 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20012cac 	.word	0x20012cac
 800ba88:	20012cb4 	.word	0x20012cb4

0800ba8c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ba94:	f7ff ffd4 	bl	800ba40 <pbuf_free_ooseq>
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800baa6:	f00a ffb5 	bl	8016a14 <sys_arch_protect>
 800baaa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800baac:	4b0f      	ldr	r3, [pc, #60]	; (800baec <pbuf_pool_is_empty+0x4c>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bab2:	4b0e      	ldr	r3, [pc, #56]	; (800baec <pbuf_pool_is_empty+0x4c>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f00a ffb9 	bl	8016a30 <sys_arch_unprotect>

  if (!queued) {
 800babe:	78fb      	ldrb	r3, [r7, #3]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d10f      	bne.n	800bae4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bac4:	2100      	movs	r1, #0
 800bac6:	480a      	ldr	r0, [pc, #40]	; (800baf0 <pbuf_pool_is_empty+0x50>)
 800bac8:	f7fe fee0 	bl	800a88c <tcpip_try_callback>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d008      	beq.n	800bae4 <pbuf_pool_is_empty+0x44>
 800bad2:	f00a ff9f 	bl	8016a14 <sys_arch_protect>
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	4b04      	ldr	r3, [pc, #16]	; (800baec <pbuf_pool_is_empty+0x4c>)
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f00a ffa6 	bl	8016a30 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20012cac 	.word	0x20012cac
 800baf0:	0800ba8d 	.word	0x0800ba8d

0800baf4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4611      	mov	r1, r2
 800bb00:	461a      	mov	r2, r3
 800bb02:	460b      	mov	r3, r1
 800bb04:	80fb      	strh	r3, [r7, #6]
 800bb06:	4613      	mov	r3, r2
 800bb08:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	88fa      	ldrh	r2, [r7, #6]
 800bb1a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	88ba      	ldrh	r2, [r7, #4]
 800bb20:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bb22:	8b3b      	ldrh	r3, [r7, #24]
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	7f3a      	ldrb	r2, [r7, #28]
 800bb2e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2201      	movs	r2, #1
 800bb34:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	73da      	strb	r2, [r3, #15]
}
 800bb3c:	bf00      	nop
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08c      	sub	sp, #48	; 0x30
 800bb4c:	af02      	add	r7, sp, #8
 800bb4e:	4603      	mov	r3, r0
 800bb50:	71fb      	strb	r3, [r7, #7]
 800bb52:	460b      	mov	r3, r1
 800bb54:	80bb      	strh	r3, [r7, #4]
 800bb56:	4613      	mov	r3, r2
 800bb58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bb5a:	79fb      	ldrb	r3, [r7, #7]
 800bb5c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bb5e:	887b      	ldrh	r3, [r7, #2]
 800bb60:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bb64:	d07f      	beq.n	800bc66 <pbuf_alloc+0x11e>
 800bb66:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bb6a:	f300 80c8 	bgt.w	800bcfe <pbuf_alloc+0x1b6>
 800bb6e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bb72:	d010      	beq.n	800bb96 <pbuf_alloc+0x4e>
 800bb74:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bb78:	f300 80c1 	bgt.w	800bcfe <pbuf_alloc+0x1b6>
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d002      	beq.n	800bb86 <pbuf_alloc+0x3e>
 800bb80:	2b41      	cmp	r3, #65	; 0x41
 800bb82:	f040 80bc 	bne.w	800bcfe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bb86:	887a      	ldrh	r2, [r7, #2]
 800bb88:	88bb      	ldrh	r3, [r7, #4]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	f000 f8d1 	bl	800bd34 <pbuf_alloc_reference>
 800bb92:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bb94:	e0bd      	b.n	800bd12 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bb9e:	88bb      	ldrh	r3, [r7, #4]
 800bba0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bba2:	200c      	movs	r0, #12
 800bba4:	f7ff fbb2 	bl	800b30c <memp_malloc>
 800bba8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d109      	bne.n	800bbc4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bbb0:	f7ff ff76 	bl	800baa0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bbba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbbc:	f000 faa8 	bl	800c110 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e0a7      	b.n	800bd14 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bbc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbc6:	3303      	adds	r3, #3
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	f023 0303 	bic.w	r3, r3, #3
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	8b7a      	ldrh	r2, [r7, #26]
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	bf28      	it	cs
 800bbdc:	4613      	movcs	r3, r2
 800bbde:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bbe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbe2:	3310      	adds	r3, #16
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	3303      	adds	r3, #3
 800bbea:	f023 0303 	bic.w	r3, r3, #3
 800bbee:	4618      	mov	r0, r3
 800bbf0:	89f9      	ldrh	r1, [r7, #14]
 800bbf2:	8b7a      	ldrh	r2, [r7, #26]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9301      	str	r3, [sp, #4]
 800bbf8:	887b      	ldrh	r3, [r7, #2]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4601      	mov	r1, r0
 800bc00:	6938      	ldr	r0, [r7, #16]
 800bc02:	f7ff ff77 	bl	800baf4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	f003 0303 	and.w	r3, r3, #3
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d006      	beq.n	800bc20 <pbuf_alloc+0xd8>
 800bc12:	4b42      	ldr	r3, [pc, #264]	; (800bd1c <pbuf_alloc+0x1d4>)
 800bc14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc18:	4941      	ldr	r1, [pc, #260]	; (800bd20 <pbuf_alloc+0x1d8>)
 800bc1a:	4842      	ldr	r0, [pc, #264]	; (800bd24 <pbuf_alloc+0x1dc>)
 800bc1c:	f00b fbbe 	bl	801739c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bc20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc22:	3303      	adds	r3, #3
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bc2c:	d106      	bne.n	800bc3c <pbuf_alloc+0xf4>
 800bc2e:	4b3b      	ldr	r3, [pc, #236]	; (800bd1c <pbuf_alloc+0x1d4>)
 800bc30:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bc34:	493c      	ldr	r1, [pc, #240]	; (800bd28 <pbuf_alloc+0x1e0>)
 800bc36:	483b      	ldr	r0, [pc, #236]	; (800bd24 <pbuf_alloc+0x1dc>)
 800bc38:	f00b fbb0 	bl	801739c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	627b      	str	r3, [r7, #36]	; 0x24
 800bc46:	e002      	b.n	800bc4e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bc52:	8b7a      	ldrh	r2, [r7, #26]
 800bc54:	89fb      	ldrh	r3, [r7, #14]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bc5e:	8b7b      	ldrh	r3, [r7, #26]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d19e      	bne.n	800bba2 <pbuf_alloc+0x5a>
      break;
 800bc64:	e055      	b.n	800bd12 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bc66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc68:	3303      	adds	r3, #3
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	f023 0303 	bic.w	r3, r3, #3
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	88bb      	ldrh	r3, [r7, #4]
 800bc74:	3303      	adds	r3, #3
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	f023 0303 	bic.w	r3, r3, #3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4413      	add	r3, r2
 800bc80:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bc82:	8b3b      	ldrh	r3, [r7, #24]
 800bc84:	3310      	adds	r3, #16
 800bc86:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bc88:	8b3a      	ldrh	r2, [r7, #24]
 800bc8a:	88bb      	ldrh	r3, [r7, #4]
 800bc8c:	3303      	adds	r3, #3
 800bc8e:	f023 0303 	bic.w	r3, r3, #3
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d306      	bcc.n	800bca4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bc96:	8afa      	ldrh	r2, [r7, #22]
 800bc98:	88bb      	ldrh	r3, [r7, #4]
 800bc9a:	3303      	adds	r3, #3
 800bc9c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d201      	bcs.n	800bca8 <pbuf_alloc+0x160>
        return NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e035      	b.n	800bd14 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bca8:	8afb      	ldrh	r3, [r7, #22]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff f9ac 	bl	800b008 <mem_malloc>
 800bcb0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d101      	bne.n	800bcbc <pbuf_alloc+0x174>
        return NULL;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	e02b      	b.n	800bd14 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bcbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcbe:	3310      	adds	r3, #16
 800bcc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcc2:	4413      	add	r3, r2
 800bcc4:	3303      	adds	r3, #3
 800bcc6:	f023 0303 	bic.w	r3, r3, #3
 800bcca:	4618      	mov	r0, r3
 800bccc:	88b9      	ldrh	r1, [r7, #4]
 800bcce:	88ba      	ldrh	r2, [r7, #4]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	887b      	ldrh	r3, [r7, #2]
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4601      	mov	r1, r0
 800bcdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcde:	f7ff ff09 	bl	800baf4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	f003 0303 	and.w	r3, r3, #3
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d010      	beq.n	800bd10 <pbuf_alloc+0x1c8>
 800bcee:	4b0b      	ldr	r3, [pc, #44]	; (800bd1c <pbuf_alloc+0x1d4>)
 800bcf0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bcf4:	490d      	ldr	r1, [pc, #52]	; (800bd2c <pbuf_alloc+0x1e4>)
 800bcf6:	480b      	ldr	r0, [pc, #44]	; (800bd24 <pbuf_alloc+0x1dc>)
 800bcf8:	f00b fb50 	bl	801739c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bcfc:	e008      	b.n	800bd10 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bcfe:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <pbuf_alloc+0x1d4>)
 800bd00:	f240 1227 	movw	r2, #295	; 0x127
 800bd04:	490a      	ldr	r1, [pc, #40]	; (800bd30 <pbuf_alloc+0x1e8>)
 800bd06:	4807      	ldr	r0, [pc, #28]	; (800bd24 <pbuf_alloc+0x1dc>)
 800bd08:	f00b fb48 	bl	801739c <iprintf>
      return NULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	e001      	b.n	800bd14 <pbuf_alloc+0x1cc>
      break;
 800bd10:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3728      	adds	r7, #40	; 0x28
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}
 800bd1c:	08019f5c 	.word	0x08019f5c
 800bd20:	08019f8c 	.word	0x08019f8c
 800bd24:	08019fbc 	.word	0x08019fbc
 800bd28:	08019fe4 	.word	0x08019fe4
 800bd2c:	0801a018 	.word	0x0801a018
 800bd30:	0801a044 	.word	0x0801a044

0800bd34 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af02      	add	r7, sp, #8
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	807b      	strh	r3, [r7, #2]
 800bd40:	4613      	mov	r3, r2
 800bd42:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bd44:	883b      	ldrh	r3, [r7, #0]
 800bd46:	2b41      	cmp	r3, #65	; 0x41
 800bd48:	d009      	beq.n	800bd5e <pbuf_alloc_reference+0x2a>
 800bd4a:	883b      	ldrh	r3, [r7, #0]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d006      	beq.n	800bd5e <pbuf_alloc_reference+0x2a>
 800bd50:	4b0f      	ldr	r3, [pc, #60]	; (800bd90 <pbuf_alloc_reference+0x5c>)
 800bd52:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bd56:	490f      	ldr	r1, [pc, #60]	; (800bd94 <pbuf_alloc_reference+0x60>)
 800bd58:	480f      	ldr	r0, [pc, #60]	; (800bd98 <pbuf_alloc_reference+0x64>)
 800bd5a:	f00b fb1f 	bl	801739c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bd5e:	200b      	movs	r0, #11
 800bd60:	f7ff fad4 	bl	800b30c <memp_malloc>
 800bd64:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d101      	bne.n	800bd70 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e00b      	b.n	800bd88 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bd70:	8879      	ldrh	r1, [r7, #2]
 800bd72:	887a      	ldrh	r2, [r7, #2]
 800bd74:	2300      	movs	r3, #0
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	883b      	ldrh	r3, [r7, #0]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f7ff feb7 	bl	800baf4 <pbuf_init_alloced_pbuf>
  return p;
 800bd86:	68fb      	ldr	r3, [r7, #12]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	08019f5c 	.word	0x08019f5c
 800bd94:	0801a060 	.word	0x0801a060
 800bd98:	08019fbc 	.word	0x08019fbc

0800bd9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b088      	sub	sp, #32
 800bda0:	af02      	add	r7, sp, #8
 800bda2:	607b      	str	r3, [r7, #4]
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	81bb      	strh	r3, [r7, #12]
 800bdac:	4613      	mov	r3, r2
 800bdae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bdb4:	8a7b      	ldrh	r3, [r7, #18]
 800bdb6:	3303      	adds	r3, #3
 800bdb8:	f023 0203 	bic.w	r2, r3, #3
 800bdbc:	89bb      	ldrh	r3, [r7, #12]
 800bdbe:	441a      	add	r2, r3
 800bdc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d901      	bls.n	800bdca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	e018      	b.n	800bdfc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d007      	beq.n	800bde0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bdd0:	8a7b      	ldrh	r3, [r7, #18]
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	6a3a      	ldr	r2, [r7, #32]
 800bdda:	4413      	add	r3, r2
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e001      	b.n	800bde4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bde0:	2300      	movs	r3, #0
 800bde2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	89b9      	ldrh	r1, [r7, #12]
 800bde8:	89ba      	ldrh	r2, [r7, #12]
 800bdea:	2302      	movs	r3, #2
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	897b      	ldrh	r3, [r7, #10]
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	6979      	ldr	r1, [r7, #20]
 800bdf6:	f7ff fe7d 	bl	800baf4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bdfa:	687b      	ldr	r3, [r7, #4]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	460b      	mov	r3, r1
 800be0e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d106      	bne.n	800be24 <pbuf_realloc+0x20>
 800be16:	4b3a      	ldr	r3, [pc, #232]	; (800bf00 <pbuf_realloc+0xfc>)
 800be18:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800be1c:	4939      	ldr	r1, [pc, #228]	; (800bf04 <pbuf_realloc+0x100>)
 800be1e:	483a      	ldr	r0, [pc, #232]	; (800bf08 <pbuf_realloc+0x104>)
 800be20:	f00b fabc 	bl	801739c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	891b      	ldrh	r3, [r3, #8]
 800be28:	887a      	ldrh	r2, [r7, #2]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d263      	bcs.n	800bef6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	891a      	ldrh	r2, [r3, #8]
 800be32:	887b      	ldrh	r3, [r7, #2]
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800be38:	887b      	ldrh	r3, [r7, #2]
 800be3a:	817b      	strh	r3, [r7, #10]
  q = p;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800be40:	e018      	b.n	800be74 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	895b      	ldrh	r3, [r3, #10]
 800be46:	897a      	ldrh	r2, [r7, #10]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	891a      	ldrh	r2, [r3, #8]
 800be50:	893b      	ldrh	r3, [r7, #8]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <pbuf_realloc+0x70>
 800be66:	4b26      	ldr	r3, [pc, #152]	; (800bf00 <pbuf_realloc+0xfc>)
 800be68:	f240 12af 	movw	r2, #431	; 0x1af
 800be6c:	4927      	ldr	r1, [pc, #156]	; (800bf0c <pbuf_realloc+0x108>)
 800be6e:	4826      	ldr	r0, [pc, #152]	; (800bf08 <pbuf_realloc+0x104>)
 800be70:	f00b fa94 	bl	801739c <iprintf>
  while (rem_len > q->len) {
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	895b      	ldrh	r3, [r3, #10]
 800be78:	897a      	ldrh	r2, [r7, #10]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d8e1      	bhi.n	800be42 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	7b1b      	ldrb	r3, [r3, #12]
 800be82:	f003 030f 	and.w	r3, r3, #15
 800be86:	2b00      	cmp	r3, #0
 800be88:	d121      	bne.n	800bece <pbuf_realloc+0xca>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	895b      	ldrh	r3, [r3, #10]
 800be8e:	897a      	ldrh	r2, [r7, #10]
 800be90:	429a      	cmp	r2, r3
 800be92:	d01c      	beq.n	800bece <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	7b5b      	ldrb	r3, [r3, #13]
 800be98:	f003 0302 	and.w	r3, r3, #2
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d116      	bne.n	800bece <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	897b      	ldrh	r3, [r7, #10]
 800beac:	4413      	add	r3, r2
 800beae:	b29b      	uxth	r3, r3
 800beb0:	4619      	mov	r1, r3
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f7fe ff9e 	bl	800adf4 <mem_trim>
 800beb8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <pbuf_realloc+0xca>
 800bec0:	4b0f      	ldr	r3, [pc, #60]	; (800bf00 <pbuf_realloc+0xfc>)
 800bec2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bec6:	4912      	ldr	r1, [pc, #72]	; (800bf10 <pbuf_realloc+0x10c>)
 800bec8:	480f      	ldr	r0, [pc, #60]	; (800bf08 <pbuf_realloc+0x104>)
 800beca:	f00b fa67 	bl	801739c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	897a      	ldrh	r2, [r7, #10]
 800bed2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	895a      	ldrh	r2, [r3, #10]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d004      	beq.n	800beee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 f911 	bl	800c110 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	e000      	b.n	800bef8 <pbuf_realloc+0xf4>
    return;
 800bef6:	bf00      	nop

}
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	08019f5c 	.word	0x08019f5c
 800bf04:	0801a074 	.word	0x0801a074
 800bf08:	08019fbc 	.word	0x08019fbc
 800bf0c:	0801a08c 	.word	0x0801a08c
 800bf10:	0801a0a4 	.word	0x0801a0a4

0800bf14 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <pbuf_add_header_impl+0x22>
 800bf28:	4b2b      	ldr	r3, [pc, #172]	; (800bfd8 <pbuf_add_header_impl+0xc4>)
 800bf2a:	f240 12df 	movw	r2, #479	; 0x1df
 800bf2e:	492b      	ldr	r1, [pc, #172]	; (800bfdc <pbuf_add_header_impl+0xc8>)
 800bf30:	482b      	ldr	r0, [pc, #172]	; (800bfe0 <pbuf_add_header_impl+0xcc>)
 800bf32:	f00b fa33 	bl	801739c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d003      	beq.n	800bf44 <pbuf_add_header_impl+0x30>
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf42:	d301      	bcc.n	800bf48 <pbuf_add_header_impl+0x34>
    return 1;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e043      	b.n	800bfd0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <pbuf_add_header_impl+0x3e>
    return 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e03e      	b.n	800bfd0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	891a      	ldrh	r2, [r3, #8]
 800bf5a:	8a7b      	ldrh	r3, [r7, #18]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	8a7a      	ldrh	r2, [r7, #18]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d901      	bls.n	800bf6a <pbuf_add_header_impl+0x56>
    return 1;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e032      	b.n	800bfd0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	7b1b      	ldrb	r3, [r3, #12]
 800bf6e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bf70:	8a3b      	ldrh	r3, [r7, #16]
 800bf72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00c      	beq.n	800bf94 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	425b      	negs	r3, r3
 800bf82:	4413      	add	r3, r2
 800bf84:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	3310      	adds	r3, #16
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d20d      	bcs.n	800bfac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e01d      	b.n	800bfd0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bf94:	79fb      	ldrb	r3, [r7, #7]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d006      	beq.n	800bfa8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	425b      	negs	r3, r3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	617b      	str	r3, [r7, #20]
 800bfa6:	e001      	b.n	800bfac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e011      	b.n	800bfd0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	895a      	ldrh	r2, [r3, #10]
 800bfb6:	8a7b      	ldrh	r3, [r7, #18]
 800bfb8:	4413      	add	r3, r2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	891a      	ldrh	r2, [r3, #8]
 800bfc4:	8a7b      	ldrh	r3, [r7, #18]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	811a      	strh	r2, [r3, #8]


  return 0;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3718      	adds	r7, #24
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	08019f5c 	.word	0x08019f5c
 800bfdc:	0801a0c0 	.word	0x0801a0c0
 800bfe0:	08019fbc 	.word	0x08019fbc

0800bfe4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bfee:	2200      	movs	r2, #0
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff ff8e 	bl	800bf14 <pbuf_add_header_impl>
 800bff8:	4603      	mov	r3, r0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <pbuf_remove_header+0x1e>
 800c014:	4b20      	ldr	r3, [pc, #128]	; (800c098 <pbuf_remove_header+0x94>)
 800c016:	f240 224b 	movw	r2, #587	; 0x24b
 800c01a:	4920      	ldr	r1, [pc, #128]	; (800c09c <pbuf_remove_header+0x98>)
 800c01c:	4820      	ldr	r0, [pc, #128]	; (800c0a0 <pbuf_remove_header+0x9c>)
 800c01e:	f00b f9bd 	bl	801739c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d003      	beq.n	800c030 <pbuf_remove_header+0x2c>
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c02e:	d301      	bcc.n	800c034 <pbuf_remove_header+0x30>
    return 1;
 800c030:	2301      	movs	r3, #1
 800c032:	e02c      	b.n	800c08e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <pbuf_remove_header+0x3a>
    return 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e027      	b.n	800c08e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	895b      	ldrh	r3, [r3, #10]
 800c046:	89fa      	ldrh	r2, [r7, #14]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d908      	bls.n	800c05e <pbuf_remove_header+0x5a>
 800c04c:	4b12      	ldr	r3, [pc, #72]	; (800c098 <pbuf_remove_header+0x94>)
 800c04e:	f240 2255 	movw	r2, #597	; 0x255
 800c052:	4914      	ldr	r1, [pc, #80]	; (800c0a4 <pbuf_remove_header+0xa0>)
 800c054:	4812      	ldr	r0, [pc, #72]	; (800c0a0 <pbuf_remove_header+0x9c>)
 800c056:	f00b f9a1 	bl	801739c <iprintf>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e017      	b.n	800c08e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685a      	ldr	r2, [r3, #4]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	441a      	add	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	895a      	ldrh	r2, [r3, #10]
 800c074:	89fb      	ldrh	r3, [r7, #14]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	b29a      	uxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	891a      	ldrh	r2, [r3, #8]
 800c082:	89fb      	ldrh	r3, [r7, #14]
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	b29a      	uxth	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	08019f5c 	.word	0x08019f5c
 800c09c:	0801a0c0 	.word	0x0801a0c0
 800c0a0:	08019fbc 	.word	0x08019fbc
 800c0a4:	0801a0cc 	.word	0x0801a0cc

0800c0a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	807b      	strh	r3, [r7, #2]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c0b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	da08      	bge.n	800c0d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c0c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0c4:	425b      	negs	r3, r3
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff ff9b 	bl	800c004 <pbuf_remove_header>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	e007      	b.n	800c0e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c0d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0d6:	787a      	ldrb	r2, [r7, #1]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7ff ff1a 	bl	800bf14 <pbuf_add_header_impl>
 800c0e0:	4603      	mov	r3, r0
  }
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3708      	adds	r7, #8
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c0f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff ffd2 	bl	800c0a8 <pbuf_header_impl>
 800c104:	4603      	mov	r3, r0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10b      	bne.n	800c136 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d106      	bne.n	800c132 <pbuf_free+0x22>
 800c124:	4b3b      	ldr	r3, [pc, #236]	; (800c214 <pbuf_free+0x104>)
 800c126:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c12a:	493b      	ldr	r1, [pc, #236]	; (800c218 <pbuf_free+0x108>)
 800c12c:	483b      	ldr	r0, [pc, #236]	; (800c21c <pbuf_free+0x10c>)
 800c12e:	f00b f935 	bl	801739c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c132:	2300      	movs	r3, #0
 800c134:	e069      	b.n	800c20a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c136:	2300      	movs	r3, #0
 800c138:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c13a:	e062      	b.n	800c202 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c13c:	f00a fc6a 	bl	8016a14 <sys_arch_protect>
 800c140:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7b9b      	ldrb	r3, [r3, #14]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d106      	bne.n	800c158 <pbuf_free+0x48>
 800c14a:	4b32      	ldr	r3, [pc, #200]	; (800c214 <pbuf_free+0x104>)
 800c14c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c150:	4933      	ldr	r1, [pc, #204]	; (800c220 <pbuf_free+0x110>)
 800c152:	4832      	ldr	r0, [pc, #200]	; (800c21c <pbuf_free+0x10c>)
 800c154:	f00b f922 	bl	801739c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7b9b      	ldrb	r3, [r3, #14]
 800c15c:	3b01      	subs	r3, #1
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	739a      	strb	r2, [r3, #14]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	7b9b      	ldrb	r3, [r3, #14]
 800c168:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c16a:	69b8      	ldr	r0, [r7, #24]
 800c16c:	f00a fc60 	bl	8016a30 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d143      	bne.n	800c1fe <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7b1b      	ldrb	r3, [r3, #12]
 800c180:	f003 030f 	and.w	r3, r3, #15
 800c184:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7b5b      	ldrb	r3, [r3, #13]
 800c18a:	f003 0302 	and.w	r3, r3, #2
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d011      	beq.n	800c1b6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <pbuf_free+0x9c>
 800c19e:	4b1d      	ldr	r3, [pc, #116]	; (800c214 <pbuf_free+0x104>)
 800c1a0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c1a4:	491f      	ldr	r1, [pc, #124]	; (800c224 <pbuf_free+0x114>)
 800c1a6:	481d      	ldr	r0, [pc, #116]	; (800c21c <pbuf_free+0x10c>)
 800c1a8:	f00b f8f8 	bl	801739c <iprintf>
        pc->custom_free_function(p);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	4798      	blx	r3
 800c1b4:	e01d      	b.n	800c1f2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d104      	bne.n	800c1c6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c1bc:	6879      	ldr	r1, [r7, #4]
 800c1be:	200c      	movs	r0, #12
 800c1c0:	f7ff f8f6 	bl	800b3b0 <memp_free>
 800c1c4:	e015      	b.n	800c1f2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d104      	bne.n	800c1d6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	200b      	movs	r0, #11
 800c1d0:	f7ff f8ee 	bl	800b3b0 <memp_free>
 800c1d4:	e00d      	b.n	800c1f2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d103      	bne.n	800c1e4 <pbuf_free+0xd4>
          mem_free(p);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7fe fd79 	bl	800acd4 <mem_free>
 800c1e2:	e006      	b.n	800c1f2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c1e4:	4b0b      	ldr	r3, [pc, #44]	; (800c214 <pbuf_free+0x104>)
 800c1e6:	f240 320f 	movw	r2, #783	; 0x30f
 800c1ea:	490f      	ldr	r1, [pc, #60]	; (800c228 <pbuf_free+0x118>)
 800c1ec:	480b      	ldr	r0, [pc, #44]	; (800c21c <pbuf_free+0x10c>)
 800c1ee:	f00b f8d5 	bl	801739c <iprintf>
        }
      }
      count++;
 800c1f2:	7ffb      	ldrb	r3, [r7, #31]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	607b      	str	r3, [r7, #4]
 800c1fc:	e001      	b.n	800c202 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d199      	bne.n	800c13c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c208:	7ffb      	ldrb	r3, [r7, #31]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	08019f5c 	.word	0x08019f5c
 800c218:	0801a0c0 	.word	0x0801a0c0
 800c21c:	08019fbc 	.word	0x08019fbc
 800c220:	0801a0ec 	.word	0x0801a0ec
 800c224:	0801a104 	.word	0x0801a104
 800c228:	0801a128 	.word	0x0801a128

0800c22c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c234:	2300      	movs	r3, #0
 800c236:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c238:	e005      	b.n	800c246 <pbuf_clen+0x1a>
    ++len;
 800c23a:	89fb      	ldrh	r3, [r7, #14]
 800c23c:	3301      	adds	r3, #1
 800c23e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1f6      	bne.n	800c23a <pbuf_clen+0xe>
  }
  return len;
 800c24c:	89fb      	ldrh	r3, [r7, #14]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
	...

0800c25c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d016      	beq.n	800c298 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c26a:	f00a fbd3 	bl	8016a14 <sys_arch_protect>
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7b9b      	ldrb	r3, [r3, #14]
 800c274:	3301      	adds	r3, #1
 800c276:	b2da      	uxtb	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	739a      	strb	r2, [r3, #14]
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f00a fbd7 	bl	8016a30 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7b9b      	ldrb	r3, [r3, #14]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <pbuf_ref+0x3c>
 800c28a:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <pbuf_ref+0x44>)
 800c28c:	f240 3242 	movw	r2, #834	; 0x342
 800c290:	4904      	ldr	r1, [pc, #16]	; (800c2a4 <pbuf_ref+0x48>)
 800c292:	4805      	ldr	r0, [pc, #20]	; (800c2a8 <pbuf_ref+0x4c>)
 800c294:	f00b f882 	bl	801739c <iprintf>
  }
}
 800c298:	bf00      	nop
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	08019f5c 	.word	0x08019f5c
 800c2a4:	0801a13c 	.word	0x0801a13c
 800c2a8:	08019fbc 	.word	0x08019fbc

0800c2ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <pbuf_cat+0x16>
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d107      	bne.n	800c2d2 <pbuf_cat+0x26>
 800c2c2:	4b20      	ldr	r3, [pc, #128]	; (800c344 <pbuf_cat+0x98>)
 800c2c4:	f240 3259 	movw	r2, #857	; 0x359
 800c2c8:	491f      	ldr	r1, [pc, #124]	; (800c348 <pbuf_cat+0x9c>)
 800c2ca:	4820      	ldr	r0, [pc, #128]	; (800c34c <pbuf_cat+0xa0>)
 800c2cc:	f00b f866 	bl	801739c <iprintf>
 800c2d0:	e034      	b.n	800c33c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e00a      	b.n	800c2ee <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	891a      	ldrh	r2, [r3, #8]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	891b      	ldrh	r3, [r3, #8]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60fb      	str	r3, [r7, #12]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d1f0      	bne.n	800c2d8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	891a      	ldrh	r2, [r3, #8]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	895b      	ldrh	r3, [r3, #10]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d006      	beq.n	800c310 <pbuf_cat+0x64>
 800c302:	4b10      	ldr	r3, [pc, #64]	; (800c344 <pbuf_cat+0x98>)
 800c304:	f240 3262 	movw	r2, #866	; 0x362
 800c308:	4911      	ldr	r1, [pc, #68]	; (800c350 <pbuf_cat+0xa4>)
 800c30a:	4810      	ldr	r0, [pc, #64]	; (800c34c <pbuf_cat+0xa0>)
 800c30c:	f00b f846 	bl	801739c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d006      	beq.n	800c326 <pbuf_cat+0x7a>
 800c318:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <pbuf_cat+0x98>)
 800c31a:	f240 3263 	movw	r2, #867	; 0x363
 800c31e:	490d      	ldr	r1, [pc, #52]	; (800c354 <pbuf_cat+0xa8>)
 800c320:	480a      	ldr	r0, [pc, #40]	; (800c34c <pbuf_cat+0xa0>)
 800c322:	f00b f83b 	bl	801739c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	891a      	ldrh	r2, [r3, #8]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	891b      	ldrh	r3, [r3, #8]
 800c32e:	4413      	add	r3, r2
 800c330:	b29a      	uxth	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	683a      	ldr	r2, [r7, #0]
 800c33a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	08019f5c 	.word	0x08019f5c
 800c348:	0801a150 	.word	0x0801a150
 800c34c:	08019fbc 	.word	0x08019fbc
 800c350:	0801a188 	.word	0x0801a188
 800c354:	0801a1b8 	.word	0x0801a1b8

0800c358 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c362:	6839      	ldr	r1, [r7, #0]
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff ffa1 	bl	800c2ac <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c36a:	6838      	ldr	r0, [r7, #0]
 800c36c:	f7ff ff76 	bl	800c25c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c382:	2300      	movs	r3, #0
 800c384:	617b      	str	r3, [r7, #20]
 800c386:	2300      	movs	r3, #0
 800c388:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d008      	beq.n	800c3a2 <pbuf_copy+0x2a>
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d005      	beq.n	800c3a2 <pbuf_copy+0x2a>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	891a      	ldrh	r2, [r3, #8]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	891b      	ldrh	r3, [r3, #8]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d209      	bcs.n	800c3b6 <pbuf_copy+0x3e>
 800c3a2:	4b57      	ldr	r3, [pc, #348]	; (800c500 <pbuf_copy+0x188>)
 800c3a4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c3a8:	4956      	ldr	r1, [pc, #344]	; (800c504 <pbuf_copy+0x18c>)
 800c3aa:	4857      	ldr	r0, [pc, #348]	; (800c508 <pbuf_copy+0x190>)
 800c3ac:	f00a fff6 	bl	801739c <iprintf>
 800c3b0:	f06f 030f 	mvn.w	r3, #15
 800c3b4:	e09f      	b.n	800c4f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	895b      	ldrh	r3, [r3, #10]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	895b      	ldrh	r3, [r3, #10]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	1acb      	subs	r3, r1, r3
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d306      	bcc.n	800c3dc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	895b      	ldrh	r3, [r3, #10]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e005      	b.n	800c3e8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	895b      	ldrh	r3, [r3, #10]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	18d0      	adds	r0, r2, r3
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f00a fb5a 	bl	8016ab4 <memcpy>
    offset_to += len;
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	4413      	add	r3, r2
 800c40e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	895b      	ldrh	r3, [r3, #10]
 800c414:	461a      	mov	r2, r3
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	4293      	cmp	r3, r2
 800c41a:	d906      	bls.n	800c42a <pbuf_copy+0xb2>
 800c41c:	4b38      	ldr	r3, [pc, #224]	; (800c500 <pbuf_copy+0x188>)
 800c41e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c422:	493a      	ldr	r1, [pc, #232]	; (800c50c <pbuf_copy+0x194>)
 800c424:	4838      	ldr	r0, [pc, #224]	; (800c508 <pbuf_copy+0x190>)
 800c426:	f00a ffb9 	bl	801739c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	895b      	ldrh	r3, [r3, #10]
 800c42e:	461a      	mov	r2, r3
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	4293      	cmp	r3, r2
 800c434:	d906      	bls.n	800c444 <pbuf_copy+0xcc>
 800c436:	4b32      	ldr	r3, [pc, #200]	; (800c500 <pbuf_copy+0x188>)
 800c438:	f240 32da 	movw	r2, #986	; 0x3da
 800c43c:	4934      	ldr	r1, [pc, #208]	; (800c510 <pbuf_copy+0x198>)
 800c43e:	4832      	ldr	r0, [pc, #200]	; (800c508 <pbuf_copy+0x190>)
 800c440:	f00a ffac 	bl	801739c <iprintf>
    if (offset_from >= p_from->len) {
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	895b      	ldrh	r3, [r3, #10]
 800c448:	461a      	mov	r2, r3
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d304      	bcc.n	800c45a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	895b      	ldrh	r3, [r3, #10]
 800c45e:	461a      	mov	r2, r3
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	4293      	cmp	r3, r2
 800c464:	d114      	bne.n	800c490 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10c      	bne.n	800c490 <pbuf_copy+0x118>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d009      	beq.n	800c490 <pbuf_copy+0x118>
 800c47c:	4b20      	ldr	r3, [pc, #128]	; (800c500 <pbuf_copy+0x188>)
 800c47e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c482:	4924      	ldr	r1, [pc, #144]	; (800c514 <pbuf_copy+0x19c>)
 800c484:	4820      	ldr	r0, [pc, #128]	; (800c508 <pbuf_copy+0x190>)
 800c486:	f00a ff89 	bl	801739c <iprintf>
 800c48a:	f06f 030f 	mvn.w	r3, #15
 800c48e:	e032      	b.n	800c4f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d013      	beq.n	800c4be <pbuf_copy+0x146>
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	895a      	ldrh	r2, [r3, #10]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	891b      	ldrh	r3, [r3, #8]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d10d      	bne.n	800c4be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d009      	beq.n	800c4be <pbuf_copy+0x146>
 800c4aa:	4b15      	ldr	r3, [pc, #84]	; (800c500 <pbuf_copy+0x188>)
 800c4ac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c4b0:	4919      	ldr	r1, [pc, #100]	; (800c518 <pbuf_copy+0x1a0>)
 800c4b2:	4815      	ldr	r0, [pc, #84]	; (800c508 <pbuf_copy+0x190>)
 800c4b4:	f00a ff72 	bl	801739c <iprintf>
 800c4b8:	f06f 0305 	mvn.w	r3, #5
 800c4bc:	e01b      	b.n	800c4f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d013      	beq.n	800c4ec <pbuf_copy+0x174>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	895a      	ldrh	r2, [r3, #10]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	891b      	ldrh	r3, [r3, #8]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d10d      	bne.n	800c4ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d009      	beq.n	800c4ec <pbuf_copy+0x174>
 800c4d8:	4b09      	ldr	r3, [pc, #36]	; (800c500 <pbuf_copy+0x188>)
 800c4da:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c4de:	490e      	ldr	r1, [pc, #56]	; (800c518 <pbuf_copy+0x1a0>)
 800c4e0:	4809      	ldr	r0, [pc, #36]	; (800c508 <pbuf_copy+0x190>)
 800c4e2:	f00a ff5b 	bl	801739c <iprintf>
 800c4e6:	f06f 0305 	mvn.w	r3, #5
 800c4ea:	e004      	b.n	800c4f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f47f af61 	bne.w	800c3b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3718      	adds	r7, #24
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	08019f5c 	.word	0x08019f5c
 800c504:	0801a204 	.word	0x0801a204
 800c508:	08019fbc 	.word	0x08019fbc
 800c50c:	0801a234 	.word	0x0801a234
 800c510:	0801a24c 	.word	0x0801a24c
 800c514:	0801a268 	.word	0x0801a268
 800c518:	0801a278 	.word	0x0801a278

0800c51c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	4611      	mov	r1, r2
 800c528:	461a      	mov	r2, r3
 800c52a:	460b      	mov	r3, r1
 800c52c:	80fb      	strh	r3, [r7, #6]
 800c52e:	4613      	mov	r3, r2
 800c530:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d108      	bne.n	800c552 <pbuf_copy_partial+0x36>
 800c540:	4b2b      	ldr	r3, [pc, #172]	; (800c5f0 <pbuf_copy_partial+0xd4>)
 800c542:	f240 420a 	movw	r2, #1034	; 0x40a
 800c546:	492b      	ldr	r1, [pc, #172]	; (800c5f4 <pbuf_copy_partial+0xd8>)
 800c548:	482b      	ldr	r0, [pc, #172]	; (800c5f8 <pbuf_copy_partial+0xdc>)
 800c54a:	f00a ff27 	bl	801739c <iprintf>
 800c54e:	2300      	movs	r3, #0
 800c550:	e04a      	b.n	800c5e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d108      	bne.n	800c56a <pbuf_copy_partial+0x4e>
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <pbuf_copy_partial+0xd4>)
 800c55a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c55e:	4927      	ldr	r1, [pc, #156]	; (800c5fc <pbuf_copy_partial+0xe0>)
 800c560:	4825      	ldr	r0, [pc, #148]	; (800c5f8 <pbuf_copy_partial+0xdc>)
 800c562:	f00a ff1b 	bl	801739c <iprintf>
 800c566:	2300      	movs	r3, #0
 800c568:	e03e      	b.n	800c5e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	61fb      	str	r3, [r7, #28]
 800c56e:	e034      	b.n	800c5da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c570:	88bb      	ldrh	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <pbuf_copy_partial+0x70>
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	895b      	ldrh	r3, [r3, #10]
 800c57a:	88ba      	ldrh	r2, [r7, #4]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d305      	bcc.n	800c58c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	895b      	ldrh	r3, [r3, #10]
 800c584:	88ba      	ldrh	r2, [r7, #4]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	80bb      	strh	r3, [r7, #4]
 800c58a:	e023      	b.n	800c5d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	895a      	ldrh	r2, [r3, #10]
 800c590:	88bb      	ldrh	r3, [r7, #4]
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c596:	8b3a      	ldrh	r2, [r7, #24]
 800c598:	88fb      	ldrh	r3, [r7, #6]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d901      	bls.n	800c5a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c59e:	88fb      	ldrh	r3, [r7, #6]
 800c5a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c5a2:	8b7b      	ldrh	r3, [r7, #26]
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	18d0      	adds	r0, r2, r3
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	88bb      	ldrh	r3, [r7, #4]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	8b3a      	ldrh	r2, [r7, #24]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	f00a fa7e 	bl	8016ab4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c5b8:	8afa      	ldrh	r2, [r7, #22]
 800c5ba:	8b3b      	ldrh	r3, [r7, #24]
 800c5bc:	4413      	add	r3, r2
 800c5be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c5c0:	8b7a      	ldrh	r2, [r7, #26]
 800c5c2:	8b3b      	ldrh	r3, [r7, #24]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c5c8:	88fa      	ldrh	r2, [r7, #6]
 800c5ca:	8b3b      	ldrh	r3, [r7, #24]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	61fb      	str	r3, [r7, #28]
 800c5da:	88fb      	ldrh	r3, [r7, #6]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d002      	beq.n	800c5e6 <pbuf_copy_partial+0xca>
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1c4      	bne.n	800c570 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c5e6:	8afb      	ldrh	r3, [r7, #22]
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3720      	adds	r7, #32
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	08019f5c 	.word	0x08019f5c
 800c5f4:	0801a2a4 	.word	0x0801a2a4
 800c5f8:	08019fbc 	.word	0x08019fbc
 800c5fc:	0801a2c4 	.word	0x0801a2c4

0800c600 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	603a      	str	r2, [r7, #0]
 800c60a:	71fb      	strb	r3, [r7, #7]
 800c60c:	460b      	mov	r3, r1
 800c60e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	8919      	ldrh	r1, [r3, #8]
 800c614:	88ba      	ldrh	r2, [r7, #4]
 800c616:	79fb      	ldrb	r3, [r7, #7]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff fa95 	bl	800bb48 <pbuf_alloc>
 800c61e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <pbuf_clone+0x2a>
    return NULL;
 800c626:	2300      	movs	r3, #0
 800c628:	e011      	b.n	800c64e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7ff fea3 	bl	800c378 <pbuf_copy>
 800c632:	4603      	mov	r3, r0
 800c634:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c636:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d006      	beq.n	800c64c <pbuf_clone+0x4c>
 800c63e:	4b06      	ldr	r3, [pc, #24]	; (800c658 <pbuf_clone+0x58>)
 800c640:	f240 5224 	movw	r2, #1316	; 0x524
 800c644:	4905      	ldr	r1, [pc, #20]	; (800c65c <pbuf_clone+0x5c>)
 800c646:	4806      	ldr	r0, [pc, #24]	; (800c660 <pbuf_clone+0x60>)
 800c648:	f00a fea8 	bl	801739c <iprintf>
  return q;
 800c64c:	68fb      	ldr	r3, [r7, #12]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	08019f5c 	.word	0x08019f5c
 800c65c:	0801a3d0 	.word	0x0801a3d0
 800c660:	08019fbc 	.word	0x08019fbc

0800c664 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c668:	f00a feb0 	bl	80173cc <rand>
 800c66c:	4603      	mov	r3, r0
 800c66e:	b29b      	uxth	r3, r3
 800c670:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c674:	b29b      	uxth	r3, r3
 800c676:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	4b01      	ldr	r3, [pc, #4]	; (800c684 <tcp_init+0x20>)
 800c67e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c680:	bf00      	nop
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20000010 	.word	0x20000010

0800c688 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7d1b      	ldrb	r3, [r3, #20]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d105      	bne.n	800c6a4 <tcp_free+0x1c>
 800c698:	4b06      	ldr	r3, [pc, #24]	; (800c6b4 <tcp_free+0x2c>)
 800c69a:	22d4      	movs	r2, #212	; 0xd4
 800c69c:	4906      	ldr	r1, [pc, #24]	; (800c6b8 <tcp_free+0x30>)
 800c69e:	4807      	ldr	r0, [pc, #28]	; (800c6bc <tcp_free+0x34>)
 800c6a0:	f00a fe7c 	bl	801739c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	2001      	movs	r0, #1
 800c6a8:	f7fe fe82 	bl	800b3b0 <memp_free>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	0801a45c 	.word	0x0801a45c
 800c6b8:	0801a48c 	.word	0x0801a48c
 800c6bc:	0801a4a0 	.word	0x0801a4a0

0800c6c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7d1b      	ldrb	r3, [r3, #20]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d105      	bne.n	800c6dc <tcp_free_listen+0x1c>
 800c6d0:	4b06      	ldr	r3, [pc, #24]	; (800c6ec <tcp_free_listen+0x2c>)
 800c6d2:	22df      	movs	r2, #223	; 0xdf
 800c6d4:	4906      	ldr	r1, [pc, #24]	; (800c6f0 <tcp_free_listen+0x30>)
 800c6d6:	4807      	ldr	r0, [pc, #28]	; (800c6f4 <tcp_free_listen+0x34>)
 800c6d8:	f00a fe60 	bl	801739c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c6dc:	6879      	ldr	r1, [r7, #4]
 800c6de:	2002      	movs	r0, #2
 800c6e0:	f7fe fe66 	bl	800b3b0 <memp_free>
}
 800c6e4:	bf00      	nop
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	0801a45c 	.word	0x0801a45c
 800c6f0:	0801a4c8 	.word	0x0801a4c8
 800c6f4:	0801a4a0 	.word	0x0801a4a0

0800c6f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c6fc:	f000 fea2 	bl	800d444 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <tcp_tmr+0x28>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	3301      	adds	r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	4b05      	ldr	r3, [pc, #20]	; (800c720 <tcp_tmr+0x28>)
 800c70a:	701a      	strb	r2, [r3, #0]
 800c70c:	4b04      	ldr	r3, [pc, #16]	; (800c720 <tcp_tmr+0x28>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c718:	f000 fb54 	bl	800cdc4 <tcp_slowtmr>
  }
}
 800c71c:	bf00      	nop
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	20004b75 	.word	0x20004b75

0800c724 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d105      	bne.n	800c740 <tcp_remove_listener+0x1c>
 800c734:	4b0d      	ldr	r3, [pc, #52]	; (800c76c <tcp_remove_listener+0x48>)
 800c736:	22ff      	movs	r2, #255	; 0xff
 800c738:	490d      	ldr	r1, [pc, #52]	; (800c770 <tcp_remove_listener+0x4c>)
 800c73a:	480e      	ldr	r0, [pc, #56]	; (800c774 <tcp_remove_listener+0x50>)
 800c73c:	f00a fe2e 	bl	801739c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e00a      	b.n	800c75c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c74a:	683a      	ldr	r2, [r7, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d102      	bne.n	800c756 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1f1      	bne.n	800c746 <tcp_remove_listener+0x22>
    }
  }
}
 800c762:	bf00      	nop
 800c764:	bf00      	nop
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	0801a45c 	.word	0x0801a45c
 800c770:	0801a4e4 	.word	0x0801a4e4
 800c774:	0801a4a0 	.word	0x0801a4a0

0800c778 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <tcp_listen_closed+0x1c>
 800c786:	4b14      	ldr	r3, [pc, #80]	; (800c7d8 <tcp_listen_closed+0x60>)
 800c788:	f240 1211 	movw	r2, #273	; 0x111
 800c78c:	4913      	ldr	r1, [pc, #76]	; (800c7dc <tcp_listen_closed+0x64>)
 800c78e:	4814      	ldr	r0, [pc, #80]	; (800c7e0 <tcp_listen_closed+0x68>)
 800c790:	f00a fe04 	bl	801739c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d006      	beq.n	800c7aa <tcp_listen_closed+0x32>
 800c79c:	4b0e      	ldr	r3, [pc, #56]	; (800c7d8 <tcp_listen_closed+0x60>)
 800c79e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c7a2:	4910      	ldr	r1, [pc, #64]	; (800c7e4 <tcp_listen_closed+0x6c>)
 800c7a4:	480e      	ldr	r0, [pc, #56]	; (800c7e0 <tcp_listen_closed+0x68>)
 800c7a6:	f00a fdf9 	bl	801739c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	e00b      	b.n	800c7c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c7b0:	4a0d      	ldr	r2, [pc, #52]	; (800c7e8 <tcp_listen_closed+0x70>)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	6879      	ldr	r1, [r7, #4]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ffb1 	bl	800c724 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	60fb      	str	r3, [r7, #12]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	d9f0      	bls.n	800c7b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c7ce:	bf00      	nop
 800c7d0:	bf00      	nop
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	0801a45c 	.word	0x0801a45c
 800c7dc:	0801a50c 	.word	0x0801a50c
 800c7e0:	0801a4a0 	.word	0x0801a4a0
 800c7e4:	0801a518 	.word	0x0801a518
 800c7e8:	0801c888 	.word	0x0801c888

0800c7ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c7ec:	b5b0      	push	{r4, r5, r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af04      	add	r7, sp, #16
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d106      	bne.n	800c80c <tcp_close_shutdown+0x20>
 800c7fe:	4b63      	ldr	r3, [pc, #396]	; (800c98c <tcp_close_shutdown+0x1a0>)
 800c800:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c804:	4962      	ldr	r1, [pc, #392]	; (800c990 <tcp_close_shutdown+0x1a4>)
 800c806:	4863      	ldr	r0, [pc, #396]	; (800c994 <tcp_close_shutdown+0x1a8>)
 800c808:	f00a fdc8 	bl	801739c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c80c:	78fb      	ldrb	r3, [r7, #3]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d066      	beq.n	800c8e0 <tcp_close_shutdown+0xf4>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7d1b      	ldrb	r3, [r3, #20]
 800c816:	2b04      	cmp	r3, #4
 800c818:	d003      	beq.n	800c822 <tcp_close_shutdown+0x36>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	7d1b      	ldrb	r3, [r3, #20]
 800c81e:	2b07      	cmp	r3, #7
 800c820:	d15e      	bne.n	800c8e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c826:	2b00      	cmp	r3, #0
 800c828:	d104      	bne.n	800c834 <tcp_close_shutdown+0x48>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c82e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c832:	d055      	beq.n	800c8e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	8b5b      	ldrh	r3, [r3, #26]
 800c838:	f003 0310 	and.w	r3, r3, #16
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <tcp_close_shutdown+0x62>
 800c840:	4b52      	ldr	r3, [pc, #328]	; (800c98c <tcp_close_shutdown+0x1a0>)
 800c842:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c846:	4954      	ldr	r1, [pc, #336]	; (800c998 <tcp_close_shutdown+0x1ac>)
 800c848:	4852      	ldr	r0, [pc, #328]	; (800c994 <tcp_close_shutdown+0x1a8>)
 800c84a:	f00a fda7 	bl	801739c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c856:	687d      	ldr	r5, [r7, #4]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3304      	adds	r3, #4
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	8ad2      	ldrh	r2, [r2, #22]
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	8b09      	ldrh	r1, [r1, #24]
 800c864:	9102      	str	r1, [sp, #8]
 800c866:	9201      	str	r2, [sp, #4]
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	462b      	mov	r3, r5
 800c86c:	4622      	mov	r2, r4
 800c86e:	4601      	mov	r1, r0
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f004 fe8d 	bl	8011590 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 f8c6 	bl	800da08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c87c:	4b47      	ldr	r3, [pc, #284]	; (800c99c <tcp_close_shutdown+0x1b0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	429a      	cmp	r2, r3
 800c884:	d105      	bne.n	800c892 <tcp_close_shutdown+0xa6>
 800c886:	4b45      	ldr	r3, [pc, #276]	; (800c99c <tcp_close_shutdown+0x1b0>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	4a43      	ldr	r2, [pc, #268]	; (800c99c <tcp_close_shutdown+0x1b0>)
 800c88e:	6013      	str	r3, [r2, #0]
 800c890:	e013      	b.n	800c8ba <tcp_close_shutdown+0xce>
 800c892:	4b42      	ldr	r3, [pc, #264]	; (800c99c <tcp_close_shutdown+0x1b0>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	e00c      	b.n	800c8b4 <tcp_close_shutdown+0xc8>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d104      	bne.n	800c8ae <tcp_close_shutdown+0xc2>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68da      	ldr	r2, [r3, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	60da      	str	r2, [r3, #12]
 800c8ac:	e005      	b.n	800c8ba <tcp_close_shutdown+0xce>
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1ef      	bne.n	800c89a <tcp_close_shutdown+0xae>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	60da      	str	r2, [r3, #12]
 800c8c0:	4b37      	ldr	r3, [pc, #220]	; (800c9a0 <tcp_close_shutdown+0x1b4>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c8c6:	4b37      	ldr	r3, [pc, #220]	; (800c9a4 <tcp_close_shutdown+0x1b8>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d102      	bne.n	800c8d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c8d0:	f003 fd5a 	bl	8010388 <tcp_trigger_input_pcb_close>
 800c8d4:	e002      	b.n	800c8dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7ff fed6 	bl	800c688 <tcp_free>
      }
      return ERR_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	e050      	b.n	800c982 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	7d1b      	ldrb	r3, [r3, #20]
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d03b      	beq.n	800c960 <tcp_close_shutdown+0x174>
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	dc44      	bgt.n	800c976 <tcp_close_shutdown+0x18a>
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <tcp_close_shutdown+0x10a>
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d02a      	beq.n	800c94a <tcp_close_shutdown+0x15e>
 800c8f4:	e03f      	b.n	800c976 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	8adb      	ldrh	r3, [r3, #22]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d021      	beq.n	800c942 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8fe:	4b2a      	ldr	r3, [pc, #168]	; (800c9a8 <tcp_close_shutdown+0x1bc>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d105      	bne.n	800c914 <tcp_close_shutdown+0x128>
 800c908:	4b27      	ldr	r3, [pc, #156]	; (800c9a8 <tcp_close_shutdown+0x1bc>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	4a26      	ldr	r2, [pc, #152]	; (800c9a8 <tcp_close_shutdown+0x1bc>)
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	e013      	b.n	800c93c <tcp_close_shutdown+0x150>
 800c914:	4b24      	ldr	r3, [pc, #144]	; (800c9a8 <tcp_close_shutdown+0x1bc>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	60bb      	str	r3, [r7, #8]
 800c91a:	e00c      	b.n	800c936 <tcp_close_shutdown+0x14a>
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	429a      	cmp	r2, r3
 800c924:	d104      	bne.n	800c930 <tcp_close_shutdown+0x144>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	60da      	str	r2, [r3, #12]
 800c92e:	e005      	b.n	800c93c <tcp_close_shutdown+0x150>
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	60bb      	str	r3, [r7, #8]
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1ef      	bne.n	800c91c <tcp_close_shutdown+0x130>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fea0 	bl	800c688 <tcp_free>
      break;
 800c948:	e01a      	b.n	800c980 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7ff ff14 	bl	800c778 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c950:	6879      	ldr	r1, [r7, #4]
 800c952:	4816      	ldr	r0, [pc, #88]	; (800c9ac <tcp_close_shutdown+0x1c0>)
 800c954:	f001 f8a8 	bl	800daa8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff feb1 	bl	800c6c0 <tcp_free_listen>
      break;
 800c95e:	e00f      	b.n	800c980 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	480e      	ldr	r0, [pc, #56]	; (800c99c <tcp_close_shutdown+0x1b0>)
 800c964:	f001 f8a0 	bl	800daa8 <tcp_pcb_remove>
 800c968:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <tcp_close_shutdown+0x1b4>)
 800c96a:	2201      	movs	r2, #1
 800c96c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fe8a 	bl	800c688 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c974:	e004      	b.n	800c980 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f81a 	bl	800c9b0 <tcp_close_shutdown_fin>
 800c97c:	4603      	mov	r3, r0
 800c97e:	e000      	b.n	800c982 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bdb0      	pop	{r4, r5, r7, pc}
 800c98a:	bf00      	nop
 800c98c:	0801a45c 	.word	0x0801a45c
 800c990:	0801a530 	.word	0x0801a530
 800c994:	0801a4a0 	.word	0x0801a4a0
 800c998:	0801a550 	.word	0x0801a550
 800c99c:	20012cb4 	.word	0x20012cb4
 800c9a0:	20012cb0 	.word	0x20012cb0
 800c9a4:	20012cc8 	.word	0x20012cc8
 800c9a8:	20012cc0 	.word	0x20012cc0
 800c9ac:	20012cbc 	.word	0x20012cbc

0800c9b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d106      	bne.n	800c9cc <tcp_close_shutdown_fin+0x1c>
 800c9be:	4b2e      	ldr	r3, [pc, #184]	; (800ca78 <tcp_close_shutdown_fin+0xc8>)
 800c9c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c9c4:	492d      	ldr	r1, [pc, #180]	; (800ca7c <tcp_close_shutdown_fin+0xcc>)
 800c9c6:	482e      	ldr	r0, [pc, #184]	; (800ca80 <tcp_close_shutdown_fin+0xd0>)
 800c9c8:	f00a fce8 	bl	801739c <iprintf>

  switch (pcb->state) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	7d1b      	ldrb	r3, [r3, #20]
 800c9d0:	2b07      	cmp	r3, #7
 800c9d2:	d020      	beq.n	800ca16 <tcp_close_shutdown_fin+0x66>
 800c9d4:	2b07      	cmp	r3, #7
 800c9d6:	dc2b      	bgt.n	800ca30 <tcp_close_shutdown_fin+0x80>
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d002      	beq.n	800c9e2 <tcp_close_shutdown_fin+0x32>
 800c9dc:	2b04      	cmp	r3, #4
 800c9de:	d00d      	beq.n	800c9fc <tcp_close_shutdown_fin+0x4c>
 800c9e0:	e026      	b.n	800ca30 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f003 fee2 	bl	80107ac <tcp_send_fin>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d11f      	bne.n	800ca34 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c9fa:	e01b      	b.n	800ca34 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f003 fed5 	bl	80107ac <tcp_send_fin>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d114      	bne.n	800ca38 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2205      	movs	r2, #5
 800ca12:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca14:	e010      	b.n	800ca38 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f003 fec8 	bl	80107ac <tcp_send_fin>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d109      	bne.n	800ca3c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2209      	movs	r2, #9
 800ca2c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca2e:	e005      	b.n	800ca3c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ca30:	2300      	movs	r3, #0
 800ca32:	e01c      	b.n	800ca6e <tcp_close_shutdown_fin+0xbe>
      break;
 800ca34:	bf00      	nop
 800ca36:	e002      	b.n	800ca3e <tcp_close_shutdown_fin+0x8e>
      break;
 800ca38:	bf00      	nop
 800ca3a:	e000      	b.n	800ca3e <tcp_close_shutdown_fin+0x8e>
      break;
 800ca3c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ca3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d103      	bne.n	800ca4e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f003 ffee 	bl	8010a28 <tcp_output>
 800ca4c:	e00d      	b.n	800ca6a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ca4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca56:	d108      	bne.n	800ca6a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	8b5b      	ldrh	r3, [r3, #26]
 800ca5c:	f043 0308 	orr.w	r3, r3, #8
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	e001      	b.n	800ca6e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ca6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	0801a45c 	.word	0x0801a45c
 800ca7c:	0801a50c 	.word	0x0801a50c
 800ca80:	0801a4a0 	.word	0x0801a4a0

0800ca84 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d109      	bne.n	800caa6 <tcp_close+0x22>
 800ca92:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <tcp_close+0x4c>)
 800ca94:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ca98:	490e      	ldr	r1, [pc, #56]	; (800cad4 <tcp_close+0x50>)
 800ca9a:	480f      	ldr	r0, [pc, #60]	; (800cad8 <tcp_close+0x54>)
 800ca9c:	f00a fc7e 	bl	801739c <iprintf>
 800caa0:	f06f 030f 	mvn.w	r3, #15
 800caa4:	e00f      	b.n	800cac6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	7d1b      	ldrb	r3, [r3, #20]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d006      	beq.n	800cabc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	8b5b      	ldrh	r3, [r3, #26]
 800cab2:	f043 0310 	orr.w	r3, r3, #16
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cabc:	2101      	movs	r1, #1
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7ff fe94 	bl	800c7ec <tcp_close_shutdown>
 800cac4:	4603      	mov	r3, r0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3708      	adds	r7, #8
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	0801a45c 	.word	0x0801a45c
 800cad4:	0801a56c 	.word	0x0801a56c
 800cad8:	0801a4a0 	.word	0x0801a4a0

0800cadc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08e      	sub	sp, #56	; 0x38
 800cae0:	af04      	add	r7, sp, #16
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d107      	bne.n	800cafc <tcp_abandon+0x20>
 800caec:	4b52      	ldr	r3, [pc, #328]	; (800cc38 <tcp_abandon+0x15c>)
 800caee:	f240 223d 	movw	r2, #573	; 0x23d
 800caf2:	4952      	ldr	r1, [pc, #328]	; (800cc3c <tcp_abandon+0x160>)
 800caf4:	4852      	ldr	r0, [pc, #328]	; (800cc40 <tcp_abandon+0x164>)
 800caf6:	f00a fc51 	bl	801739c <iprintf>
 800cafa:	e099      	b.n	800cc30 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	7d1b      	ldrb	r3, [r3, #20]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d106      	bne.n	800cb12 <tcp_abandon+0x36>
 800cb04:	4b4c      	ldr	r3, [pc, #304]	; (800cc38 <tcp_abandon+0x15c>)
 800cb06:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cb0a:	494e      	ldr	r1, [pc, #312]	; (800cc44 <tcp_abandon+0x168>)
 800cb0c:	484c      	ldr	r0, [pc, #304]	; (800cc40 <tcp_abandon+0x164>)
 800cb0e:	f00a fc45 	bl	801739c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	7d1b      	ldrb	r3, [r3, #20]
 800cb16:	2b0a      	cmp	r3, #10
 800cb18:	d107      	bne.n	800cb2a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	484a      	ldr	r0, [pc, #296]	; (800cc48 <tcp_abandon+0x16c>)
 800cb1e:	f000 ffc3 	bl	800daa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff fdb0 	bl	800c688 <tcp_free>
 800cb28:	e082      	b.n	800cc30 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb36:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb44:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	7d1b      	ldrb	r3, [r3, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d126      	bne.n	800cba2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	8adb      	ldrh	r3, [r3, #22]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d02e      	beq.n	800cbba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb5c:	4b3b      	ldr	r3, [pc, #236]	; (800cc4c <tcp_abandon+0x170>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d105      	bne.n	800cb72 <tcp_abandon+0x96>
 800cb66:	4b39      	ldr	r3, [pc, #228]	; (800cc4c <tcp_abandon+0x170>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	4a37      	ldr	r2, [pc, #220]	; (800cc4c <tcp_abandon+0x170>)
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	e013      	b.n	800cb9a <tcp_abandon+0xbe>
 800cb72:	4b36      	ldr	r3, [pc, #216]	; (800cc4c <tcp_abandon+0x170>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	61fb      	str	r3, [r7, #28]
 800cb78:	e00c      	b.n	800cb94 <tcp_abandon+0xb8>
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d104      	bne.n	800cb8e <tcp_abandon+0xb2>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68da      	ldr	r2, [r3, #12]
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	60da      	str	r2, [r3, #12]
 800cb8c:	e005      	b.n	800cb9a <tcp_abandon+0xbe>
 800cb8e:	69fb      	ldr	r3, [r7, #28]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	61fb      	str	r3, [r7, #28]
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1ef      	bne.n	800cb7a <tcp_abandon+0x9e>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	60da      	str	r2, [r3, #12]
 800cba0:	e00b      	b.n	800cbba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	8adb      	ldrh	r3, [r3, #22]
 800cbaa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	4828      	ldr	r0, [pc, #160]	; (800cc50 <tcp_abandon+0x174>)
 800cbb0:	f000 ff7a 	bl	800daa8 <tcp_pcb_remove>
 800cbb4:	4b27      	ldr	r3, [pc, #156]	; (800cc54 <tcp_abandon+0x178>)
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d004      	beq.n	800cbcc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 fd1c 	bl	800d604 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 fd13 	bl	800d604 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d004      	beq.n	800cbf0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbea:	4618      	mov	r0, r3
 800cbec:	f000 fd0a 	bl	800d604 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00e      	beq.n	800cc14 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	8b12      	ldrh	r2, [r2, #24]
 800cc00:	9202      	str	r2, [sp, #8]
 800cc02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cc04:	9201      	str	r2, [sp, #4]
 800cc06:	9300      	str	r3, [sp, #0]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	69b9      	ldr	r1, [r7, #24]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f004 fcbe 	bl	8011590 <tcp_rst>
    }
    last_state = pcb->state;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	7d1b      	ldrb	r3, [r3, #20]
 800cc18:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fd34 	bl	800c688 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d004      	beq.n	800cc30 <tcp_abandon+0x154>
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	f06f 010c 	mvn.w	r1, #12
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	4798      	blx	r3
  }
}
 800cc30:	3728      	adds	r7, #40	; 0x28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	0801a45c 	.word	0x0801a45c
 800cc3c:	0801a5a0 	.word	0x0801a5a0
 800cc40:	0801a4a0 	.word	0x0801a4a0
 800cc44:	0801a5bc 	.word	0x0801a5bc
 800cc48:	20012cc4 	.word	0x20012cc4
 800cc4c:	20012cc0 	.word	0x20012cc0
 800cc50:	20012cb4 	.word	0x20012cb4
 800cc54:	20012cb0 	.word	0x20012cb0

0800cc58 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cc60:	2101      	movs	r1, #1
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7ff ff3a 	bl	800cadc <tcp_abandon>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d106      	bne.n	800cc8c <tcp_update_rcv_ann_wnd+0x1c>
 800cc7e:	4b25      	ldr	r3, [pc, #148]	; (800cd14 <tcp_update_rcv_ann_wnd+0xa4>)
 800cc80:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cc84:	4924      	ldr	r1, [pc, #144]	; (800cd18 <tcp_update_rcv_ann_wnd+0xa8>)
 800cc86:	4825      	ldr	r0, [pc, #148]	; (800cd1c <tcp_update_rcv_ann_wnd+0xac>)
 800cc88:	f00a fb88 	bl	801739c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cc94:	4413      	add	r3, r2
 800cc96:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cca0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cca4:	bf28      	it	cs
 800cca6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ccaa:	b292      	uxth	r2, r2
 800ccac:	4413      	add	r3, r2
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	db08      	blt.n	800ccc8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	e020      	b.n	800cd0a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	dd03      	ble.n	800ccde <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ccdc:	e014      	b.n	800cd08 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf0:	d306      	bcc.n	800cd00 <tcp_update_rcv_ann_wnd+0x90>
 800ccf2:	4b08      	ldr	r3, [pc, #32]	; (800cd14 <tcp_update_rcv_ann_wnd+0xa4>)
 800ccf4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ccf8:	4909      	ldr	r1, [pc, #36]	; (800cd20 <tcp_update_rcv_ann_wnd+0xb0>)
 800ccfa:	4808      	ldr	r0, [pc, #32]	; (800cd1c <tcp_update_rcv_ann_wnd+0xac>)
 800ccfc:	f00a fb4e 	bl	801739c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cd08:	2300      	movs	r3, #0
  }
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	0801a45c 	.word	0x0801a45c
 800cd18:	0801a6b8 	.word	0x0801a6b8
 800cd1c:	0801a4a0 	.word	0x0801a4a0
 800cd20:	0801a6dc 	.word	0x0801a6dc

0800cd24 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d107      	bne.n	800cd46 <tcp_recved+0x22>
 800cd36:	4b1f      	ldr	r3, [pc, #124]	; (800cdb4 <tcp_recved+0x90>)
 800cd38:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cd3c:	491e      	ldr	r1, [pc, #120]	; (800cdb8 <tcp_recved+0x94>)
 800cd3e:	481f      	ldr	r0, [pc, #124]	; (800cdbc <tcp_recved+0x98>)
 800cd40:	f00a fb2c 	bl	801739c <iprintf>
 800cd44:	e032      	b.n	800cdac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	7d1b      	ldrb	r3, [r3, #20]
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d106      	bne.n	800cd5c <tcp_recved+0x38>
 800cd4e:	4b19      	ldr	r3, [pc, #100]	; (800cdb4 <tcp_recved+0x90>)
 800cd50:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cd54:	491a      	ldr	r1, [pc, #104]	; (800cdc0 <tcp_recved+0x9c>)
 800cd56:	4819      	ldr	r0, [pc, #100]	; (800cdbc <tcp_recved+0x98>)
 800cd58:	f00a fb20 	bl	801739c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cd60:	887b      	ldrh	r3, [r7, #2]
 800cd62:	4413      	add	r3, r2
 800cd64:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cd66:	89fb      	ldrh	r3, [r7, #14]
 800cd68:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cd6c:	d804      	bhi.n	800cd78 <tcp_recved+0x54>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd72:	89fa      	ldrh	r2, [r7, #14]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d204      	bcs.n	800cd82 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cd7e:	851a      	strh	r2, [r3, #40]	; 0x28
 800cd80:	e002      	b.n	800cd88 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	89fa      	ldrh	r2, [r7, #14]
 800cd86:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff ff71 	bl	800cc70 <tcp_update_rcv_ann_wnd>
 800cd8e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cd96:	d309      	bcc.n	800cdac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	8b5b      	ldrh	r3, [r3, #26]
 800cd9c:	f043 0302 	orr.w	r3, r3, #2
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f003 fe3e 	bl	8010a28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	0801a45c 	.word	0x0801a45c
 800cdb8:	0801a6f8 	.word	0x0801a6f8
 800cdbc:	0801a4a0 	.word	0x0801a4a0
 800cdc0:	0801a710 	.word	0x0801a710

0800cdc4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cdc4:	b5b0      	push	{r4, r5, r7, lr}
 800cdc6:	b090      	sub	sp, #64	; 0x40
 800cdc8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cdd0:	4b94      	ldr	r3, [pc, #592]	; (800d024 <tcp_slowtmr+0x260>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	4a93      	ldr	r2, [pc, #588]	; (800d024 <tcp_slowtmr+0x260>)
 800cdd8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cdda:	4b93      	ldr	r3, [pc, #588]	; (800d028 <tcp_slowtmr+0x264>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	4b91      	ldr	r3, [pc, #580]	; (800d028 <tcp_slowtmr+0x264>)
 800cde4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cdea:	4b90      	ldr	r3, [pc, #576]	; (800d02c <tcp_slowtmr+0x268>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cdf0:	e29d      	b.n	800d32e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf4:	7d1b      	ldrb	r3, [r3, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <tcp_slowtmr+0x44>
 800cdfa:	4b8d      	ldr	r3, [pc, #564]	; (800d030 <tcp_slowtmr+0x26c>)
 800cdfc:	f240 42be 	movw	r2, #1214	; 0x4be
 800ce00:	498c      	ldr	r1, [pc, #560]	; (800d034 <tcp_slowtmr+0x270>)
 800ce02:	488d      	ldr	r0, [pc, #564]	; (800d038 <tcp_slowtmr+0x274>)
 800ce04:	f00a faca 	bl	801739c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	7d1b      	ldrb	r3, [r3, #20]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d106      	bne.n	800ce1e <tcp_slowtmr+0x5a>
 800ce10:	4b87      	ldr	r3, [pc, #540]	; (800d030 <tcp_slowtmr+0x26c>)
 800ce12:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ce16:	4989      	ldr	r1, [pc, #548]	; (800d03c <tcp_slowtmr+0x278>)
 800ce18:	4887      	ldr	r0, [pc, #540]	; (800d038 <tcp_slowtmr+0x274>)
 800ce1a:	f00a fabf 	bl	801739c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	7d1b      	ldrb	r3, [r3, #20]
 800ce22:	2b0a      	cmp	r3, #10
 800ce24:	d106      	bne.n	800ce34 <tcp_slowtmr+0x70>
 800ce26:	4b82      	ldr	r3, [pc, #520]	; (800d030 <tcp_slowtmr+0x26c>)
 800ce28:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ce2c:	4984      	ldr	r1, [pc, #528]	; (800d040 <tcp_slowtmr+0x27c>)
 800ce2e:	4882      	ldr	r0, [pc, #520]	; (800d038 <tcp_slowtmr+0x274>)
 800ce30:	f00a fab4 	bl	801739c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	7f9a      	ldrb	r2, [r3, #30]
 800ce38:	4b7b      	ldr	r3, [pc, #492]	; (800d028 <tcp_slowtmr+0x264>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d105      	bne.n	800ce4c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ce4a:	e270      	b.n	800d32e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ce4c:	4b76      	ldr	r3, [pc, #472]	; (800d028 <tcp_slowtmr+0x264>)
 800ce4e:	781a      	ldrb	r2, [r3, #0]
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ce54:	2300      	movs	r3, #0
 800ce56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d10a      	bne.n	800ce7e <tcp_slowtmr+0xba>
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce6e:	2b05      	cmp	r3, #5
 800ce70:	d905      	bls.n	800ce7e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ce72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce76:	3301      	adds	r3, #1
 800ce78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce7c:	e11e      	b.n	800d0bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ce7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce84:	2b0b      	cmp	r3, #11
 800ce86:	d905      	bls.n	800ce94 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ce88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce92:	e113      	b.n	800d0bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d075      	beq.n	800cf8a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ce9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d006      	beq.n	800ceb4 <tcp_slowtmr+0xf0>
 800cea6:	4b62      	ldr	r3, [pc, #392]	; (800d030 <tcp_slowtmr+0x26c>)
 800cea8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ceac:	4965      	ldr	r1, [pc, #404]	; (800d044 <tcp_slowtmr+0x280>)
 800ceae:	4862      	ldr	r0, [pc, #392]	; (800d038 <tcp_slowtmr+0x274>)
 800ceb0:	f00a fa74 	bl	801739c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ceb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <tcp_slowtmr+0x106>
 800cebc:	4b5c      	ldr	r3, [pc, #368]	; (800d030 <tcp_slowtmr+0x26c>)
 800cebe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cec2:	4961      	ldr	r1, [pc, #388]	; (800d048 <tcp_slowtmr+0x284>)
 800cec4:	485c      	ldr	r0, [pc, #368]	; (800d038 <tcp_slowtmr+0x274>)
 800cec6:	f00a fa69 	bl	801739c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ced0:	2b0b      	cmp	r3, #11
 800ced2:	d905      	bls.n	800cee0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ced4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced8:	3301      	adds	r3, #1
 800ceda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cede:	e0ed      	b.n	800d0bc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cee6:	3b01      	subs	r3, #1
 800cee8:	4a58      	ldr	r2, [pc, #352]	; (800d04c <tcp_slowtmr+0x288>)
 800ceea:	5cd3      	ldrb	r3, [r2, r3]
 800ceec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cef4:	7c7a      	ldrb	r2, [r7, #17]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d907      	bls.n	800cf0a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf00:	3301      	adds	r3, #1
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cf10:	7c7a      	ldrb	r2, [r7, #17]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	f200 80d2 	bhi.w	800d0bc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cf18:	2301      	movs	r3, #1
 800cf1a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d108      	bne.n	800cf38 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cf26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf28:	f004 fc26 	bl	8011778 <tcp_zero_window_probe>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d014      	beq.n	800cf5c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cf32:	2300      	movs	r3, #0
 800cf34:	623b      	str	r3, [r7, #32]
 800cf36:	e011      	b.n	800cf5c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf42:	f003 faeb 	bl	801051c <tcp_split_unsent_seg>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d107      	bne.n	800cf5c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cf4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf4e:	f003 fd6b 	bl	8010a28 <tcp_output>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80ac 	beq.w	800d0bc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf72:	2b06      	cmp	r3, #6
 800cf74:	f200 80a2 	bhi.w	800d0bc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf7e:	3301      	adds	r3, #1
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf84:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cf88:	e098      	b.n	800d0bc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	db0f      	blt.n	800cfb4 <tcp_slowtmr+0x1f0>
 800cf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d008      	beq.n	800cfb4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3301      	adds	r3, #1
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	b21a      	sxth	r2, r3
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	db7b      	blt.n	800d0bc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cfc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc6:	f004 f821 	bl	801100c <tcp_rexmit_rto_prepare>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d007      	beq.n	800cfe0 <tcp_slowtmr+0x21c>
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d171      	bne.n	800d0bc <tcp_slowtmr+0x2f8>
 800cfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d06d      	beq.n	800d0bc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	7d1b      	ldrb	r3, [r3, #20]
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d03a      	beq.n	800d05e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfee:	2b0c      	cmp	r3, #12
 800cff0:	bf28      	it	cs
 800cff2:	230c      	movcs	r3, #12
 800cff4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cffc:	10db      	asrs	r3, r3, #3
 800cffe:	b21b      	sxth	r3, r3
 800d000:	461a      	mov	r2, r3
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d008:	4413      	add	r3, r2
 800d00a:	7efa      	ldrb	r2, [r7, #27]
 800d00c:	4910      	ldr	r1, [pc, #64]	; (800d050 <tcp_slowtmr+0x28c>)
 800d00e:	5c8a      	ldrb	r2, [r1, r2]
 800d010:	4093      	lsls	r3, r2
 800d012:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d01a:	4293      	cmp	r3, r2
 800d01c:	dc1a      	bgt.n	800d054 <tcp_slowtmr+0x290>
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	b21a      	sxth	r2, r3
 800d022:	e019      	b.n	800d058 <tcp_slowtmr+0x294>
 800d024:	20012cb8 	.word	0x20012cb8
 800d028:	20004b76 	.word	0x20004b76
 800d02c:	20012cb4 	.word	0x20012cb4
 800d030:	0801a45c 	.word	0x0801a45c
 800d034:	0801a7a0 	.word	0x0801a7a0
 800d038:	0801a4a0 	.word	0x0801a4a0
 800d03c:	0801a7cc 	.word	0x0801a7cc
 800d040:	0801a7f8 	.word	0x0801a7f8
 800d044:	0801a828 	.word	0x0801a828
 800d048:	0801a85c 	.word	0x0801a85c
 800d04c:	0801c880 	.word	0x0801c880
 800d050:	0801c870 	.word	0x0801c870
 800d054:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	2200      	movs	r2, #0
 800d062:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d070:	4293      	cmp	r3, r2
 800d072:	bf28      	it	cs
 800d074:	4613      	movcs	r3, r2
 800d076:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d078:	8a7b      	ldrh	r3, [r7, #18]
 800d07a:	085b      	lsrs	r3, r3, #1
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d080:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d086:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d08e:	005b      	lsls	r3, r3, #1
 800d090:	b29b      	uxth	r3, r3
 800d092:	429a      	cmp	r2, r3
 800d094:	d206      	bcs.n	800d0a4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d0b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d0b8:	f004 f818 	bl	80110ec <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0be:	7d1b      	ldrb	r3, [r3, #20]
 800d0c0:	2b06      	cmp	r3, #6
 800d0c2:	d111      	bne.n	800d0e8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c6:	8b5b      	ldrh	r3, [r3, #26]
 800d0c8:	f003 0310 	and.w	r3, r3, #16
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00b      	beq.n	800d0e8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0d0:	4b9c      	ldr	r3, [pc, #624]	; (800d344 <tcp_slowtmr+0x580>)
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	6a1b      	ldr	r3, [r3, #32]
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	2b28      	cmp	r3, #40	; 0x28
 800d0dc:	d904      	bls.n	800d0e8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d0de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ea:	7a5b      	ldrb	r3, [r3, #9]
 800d0ec:	f003 0308 	and.w	r3, r3, #8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d04a      	beq.n	800d18a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0f8:	2b04      	cmp	r3, #4
 800d0fa:	d003      	beq.n	800d104 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d100:	2b07      	cmp	r3, #7
 800d102:	d142      	bne.n	800d18a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d104:	4b8f      	ldr	r3, [pc, #572]	; (800d344 <tcp_slowtmr+0x580>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d110:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d114:	4b8c      	ldr	r3, [pc, #560]	; (800d348 <tcp_slowtmr+0x584>)
 800d116:	440b      	add	r3, r1
 800d118:	498c      	ldr	r1, [pc, #560]	; (800d34c <tcp_slowtmr+0x588>)
 800d11a:	fba1 1303 	umull	r1, r3, r1, r3
 800d11e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d120:	429a      	cmp	r2, r3
 800d122:	d90a      	bls.n	800d13a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d128:	3301      	adds	r3, #1
 800d12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d12e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d132:	3301      	adds	r3, #1
 800d134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d138:	e027      	b.n	800d18a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d13a:	4b82      	ldr	r3, [pc, #520]	; (800d344 <tcp_slowtmr+0x580>)
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d14c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d150:	4618      	mov	r0, r3
 800d152:	4b7f      	ldr	r3, [pc, #508]	; (800d350 <tcp_slowtmr+0x58c>)
 800d154:	fb03 f300 	mul.w	r3, r3, r0
 800d158:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d15a:	497c      	ldr	r1, [pc, #496]	; (800d34c <tcp_slowtmr+0x588>)
 800d15c:	fba1 1303 	umull	r1, r3, r1, r3
 800d160:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d162:	429a      	cmp	r2, r3
 800d164:	d911      	bls.n	800d18a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d168:	f004 fac6 	bl	80116f8 <tcp_keepalive>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d172:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d176:	2b00      	cmp	r3, #0
 800d178:	d107      	bne.n	800d18a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d180:	3301      	adds	r3, #1
 800d182:	b2da      	uxtb	r2, r3
 800d184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d186:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d011      	beq.n	800d1b6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d192:	4b6c      	ldr	r3, [pc, #432]	; (800d344 <tcp_slowtmr+0x580>)
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	1ad2      	subs	r2, r2, r3
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	440b      	add	r3, r1
 800d1aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d302      	bcc.n	800d1b6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d1b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1b2:	f000 fddd 	bl	800dd70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b8:	7d1b      	ldrb	r3, [r3, #20]
 800d1ba:	2b03      	cmp	r3, #3
 800d1bc:	d10b      	bne.n	800d1d6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d1be:	4b61      	ldr	r3, [pc, #388]	; (800d344 <tcp_slowtmr+0x580>)
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	2b28      	cmp	r3, #40	; 0x28
 800d1ca:	d904      	bls.n	800d1d6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d8:	7d1b      	ldrb	r3, [r3, #20]
 800d1da:	2b09      	cmp	r3, #9
 800d1dc:	d10b      	bne.n	800d1f6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1de:	4b59      	ldr	r3, [pc, #356]	; (800d344 <tcp_slowtmr+0x580>)
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	2bf0      	cmp	r3, #240	; 0xf0
 800d1ea:	d904      	bls.n	800d1f6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d1f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d060      	beq.n	800d2c0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d204:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d208:	f000 fbfe 	bl	800da08 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d010      	beq.n	800d234 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d212:	4b50      	ldr	r3, [pc, #320]	; (800d354 <tcp_slowtmr+0x590>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d218:	429a      	cmp	r2, r3
 800d21a:	d106      	bne.n	800d22a <tcp_slowtmr+0x466>
 800d21c:	4b4e      	ldr	r3, [pc, #312]	; (800d358 <tcp_slowtmr+0x594>)
 800d21e:	f240 526d 	movw	r2, #1389	; 0x56d
 800d222:	494e      	ldr	r1, [pc, #312]	; (800d35c <tcp_slowtmr+0x598>)
 800d224:	484e      	ldr	r0, [pc, #312]	; (800d360 <tcp_slowtmr+0x59c>)
 800d226:	f00a f8b9 	bl	801739c <iprintf>
        prev->next = pcb->next;
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	68da      	ldr	r2, [r3, #12]
 800d22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d230:	60da      	str	r2, [r3, #12]
 800d232:	e00f      	b.n	800d254 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d234:	4b47      	ldr	r3, [pc, #284]	; (800d354 <tcp_slowtmr+0x590>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d006      	beq.n	800d24c <tcp_slowtmr+0x488>
 800d23e:	4b46      	ldr	r3, [pc, #280]	; (800d358 <tcp_slowtmr+0x594>)
 800d240:	f240 5271 	movw	r2, #1393	; 0x571
 800d244:	4947      	ldr	r1, [pc, #284]	; (800d364 <tcp_slowtmr+0x5a0>)
 800d246:	4846      	ldr	r0, [pc, #280]	; (800d360 <tcp_slowtmr+0x59c>)
 800d248:	f00a f8a8 	bl	801739c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	4a40      	ldr	r2, [pc, #256]	; (800d354 <tcp_slowtmr+0x590>)
 800d252:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d254:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d013      	beq.n	800d284 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d264:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	3304      	adds	r3, #4
 800d26a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d26c:	8ad2      	ldrh	r2, [r2, #22]
 800d26e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d270:	8b09      	ldrh	r1, [r1, #24]
 800d272:	9102      	str	r1, [sp, #8]
 800d274:	9201      	str	r2, [sp, #4]
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	462b      	mov	r3, r5
 800d27a:	4622      	mov	r2, r4
 800d27c:	4601      	mov	r1, r0
 800d27e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d280:	f004 f986 	bl	8011590 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	7d1b      	ldrb	r3, [r3, #20]
 800d28e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d29a:	6838      	ldr	r0, [r7, #0]
 800d29c:	f7ff f9f4 	bl	800c688 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d2a0:	4b31      	ldr	r3, [pc, #196]	; (800d368 <tcp_slowtmr+0x5a4>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <tcp_slowtmr+0x4f2>
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f06f 010c 	mvn.w	r1, #12
 800d2b2:	68b8      	ldr	r0, [r7, #8]
 800d2b4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d2b6:	4b2c      	ldr	r3, [pc, #176]	; (800d368 <tcp_slowtmr+0x5a4>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d037      	beq.n	800d32e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d2be:	e592      	b.n	800cde6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	7f1b      	ldrb	r3, [r3, #28]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d8:	7f1a      	ldrb	r2, [r3, #28]
 800d2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2dc:	7f5b      	ldrb	r3, [r3, #29]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d325      	bcc.n	800d32e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d2e8:	4b1f      	ldr	r3, [pc, #124]	; (800d368 <tcp_slowtmr+0x5a4>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00b      	beq.n	800d310 <tcp_slowtmr+0x54c>
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d300:	6912      	ldr	r2, [r2, #16]
 800d302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d304:	4610      	mov	r0, r2
 800d306:	4798      	blx	r3
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d30e:	e002      	b.n	800d316 <tcp_slowtmr+0x552>
 800d310:	2300      	movs	r3, #0
 800d312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d316:	4b14      	ldr	r3, [pc, #80]	; (800d368 <tcp_slowtmr+0x5a4>)
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d000      	beq.n	800d320 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d31e:	e562      	b.n	800cde6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d320:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d324:	2b00      	cmp	r3, #0
 800d326:	d102      	bne.n	800d32e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d32a:	f003 fb7d 	bl	8010a28 <tcp_output>
  while (pcb != NULL) {
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	2b00      	cmp	r3, #0
 800d332:	f47f ad5e 	bne.w	800cdf2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d336:	2300      	movs	r3, #0
 800d338:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d33a:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <tcp_slowtmr+0x5a8>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d340:	e069      	b.n	800d416 <tcp_slowtmr+0x652>
 800d342:	bf00      	nop
 800d344:	20012cb8 	.word	0x20012cb8
 800d348:	000a4cb8 	.word	0x000a4cb8
 800d34c:	10624dd3 	.word	0x10624dd3
 800d350:	000124f8 	.word	0x000124f8
 800d354:	20012cb4 	.word	0x20012cb4
 800d358:	0801a45c 	.word	0x0801a45c
 800d35c:	0801a894 	.word	0x0801a894
 800d360:	0801a4a0 	.word	0x0801a4a0
 800d364:	0801a8c0 	.word	0x0801a8c0
 800d368:	20012cb0 	.word	0x20012cb0
 800d36c:	20012cc4 	.word	0x20012cc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	7d1b      	ldrb	r3, [r3, #20]
 800d374:	2b0a      	cmp	r3, #10
 800d376:	d006      	beq.n	800d386 <tcp_slowtmr+0x5c2>
 800d378:	4b2b      	ldr	r3, [pc, #172]	; (800d428 <tcp_slowtmr+0x664>)
 800d37a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d37e:	492b      	ldr	r1, [pc, #172]	; (800d42c <tcp_slowtmr+0x668>)
 800d380:	482b      	ldr	r0, [pc, #172]	; (800d430 <tcp_slowtmr+0x66c>)
 800d382:	f00a f80b 	bl	801739c <iprintf>
    pcb_remove = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d38c:	4b29      	ldr	r3, [pc, #164]	; (800d434 <tcp_slowtmr+0x670>)
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	6a1b      	ldr	r3, [r3, #32]
 800d394:	1ad3      	subs	r3, r2, r3
 800d396:	2bf0      	cmp	r3, #240	; 0xf0
 800d398:	d904      	bls.n	800d3a4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d39a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d39e:	3301      	adds	r3, #1
 800d3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d02f      	beq.n	800d40c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d3ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ae:	f000 fb2b 	bl	800da08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d010      	beq.n	800d3da <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d3b8:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <tcp_slowtmr+0x674>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d106      	bne.n	800d3d0 <tcp_slowtmr+0x60c>
 800d3c2:	4b19      	ldr	r3, [pc, #100]	; (800d428 <tcp_slowtmr+0x664>)
 800d3c4:	f240 52af 	movw	r2, #1455	; 0x5af
 800d3c8:	491c      	ldr	r1, [pc, #112]	; (800d43c <tcp_slowtmr+0x678>)
 800d3ca:	4819      	ldr	r0, [pc, #100]	; (800d430 <tcp_slowtmr+0x66c>)
 800d3cc:	f009 ffe6 	bl	801739c <iprintf>
        prev->next = pcb->next;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	68da      	ldr	r2, [r3, #12]
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	60da      	str	r2, [r3, #12]
 800d3d8:	e00f      	b.n	800d3fa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d3da:	4b17      	ldr	r3, [pc, #92]	; (800d438 <tcp_slowtmr+0x674>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d006      	beq.n	800d3f2 <tcp_slowtmr+0x62e>
 800d3e4:	4b10      	ldr	r3, [pc, #64]	; (800d428 <tcp_slowtmr+0x664>)
 800d3e6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d3ea:	4915      	ldr	r1, [pc, #84]	; (800d440 <tcp_slowtmr+0x67c>)
 800d3ec:	4810      	ldr	r0, [pc, #64]	; (800d430 <tcp_slowtmr+0x66c>)
 800d3ee:	f009 ffd5 	bl	801739c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	4a10      	ldr	r2, [pc, #64]	; (800d438 <tcp_slowtmr+0x674>)
 800d3f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d404:	69f8      	ldr	r0, [r7, #28]
 800d406:	f7ff f93f 	bl	800c688 <tcp_free>
 800d40a:	e004      	b.n	800d416 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1a9      	bne.n	800d370 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d41c:	bf00      	nop
 800d41e:	bf00      	nop
 800d420:	3730      	adds	r7, #48	; 0x30
 800d422:	46bd      	mov	sp, r7
 800d424:	bdb0      	pop	{r4, r5, r7, pc}
 800d426:	bf00      	nop
 800d428:	0801a45c 	.word	0x0801a45c
 800d42c:	0801a8ec 	.word	0x0801a8ec
 800d430:	0801a4a0 	.word	0x0801a4a0
 800d434:	20012cb8 	.word	0x20012cb8
 800d438:	20012cc4 	.word	0x20012cc4
 800d43c:	0801a91c 	.word	0x0801a91c
 800d440:	0801a944 	.word	0x0801a944

0800d444 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d44a:	4b2d      	ldr	r3, [pc, #180]	; (800d500 <tcp_fasttmr+0xbc>)
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	3301      	adds	r3, #1
 800d450:	b2da      	uxtb	r2, r3
 800d452:	4b2b      	ldr	r3, [pc, #172]	; (800d500 <tcp_fasttmr+0xbc>)
 800d454:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d456:	4b2b      	ldr	r3, [pc, #172]	; (800d504 <tcp_fasttmr+0xc0>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d45c:	e048      	b.n	800d4f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7f9a      	ldrb	r2, [r3, #30]
 800d462:	4b27      	ldr	r3, [pc, #156]	; (800d500 <tcp_fasttmr+0xbc>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d03f      	beq.n	800d4ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d46a:	4b25      	ldr	r3, [pc, #148]	; (800d500 <tcp_fasttmr+0xbc>)
 800d46c:	781a      	ldrb	r2, [r3, #0]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	8b5b      	ldrh	r3, [r3, #26]
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d010      	beq.n	800d4a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	8b5b      	ldrh	r3, [r3, #26]
 800d482:	f043 0302 	orr.w	r3, r3, #2
 800d486:	b29a      	uxth	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f003 facb 	bl	8010a28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8b5b      	ldrh	r3, [r3, #26]
 800d496:	f023 0303 	bic.w	r3, r3, #3
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	8b5b      	ldrh	r3, [r3, #26]
 800d4a4:	f003 0308 	and.w	r3, r3, #8
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d009      	beq.n	800d4c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	8b5b      	ldrh	r3, [r3, #26]
 800d4b0:	f023 0308 	bic.w	r3, r3, #8
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff fa78 	bl	800c9b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00a      	beq.n	800d4e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d4ce:	4b0e      	ldr	r3, [pc, #56]	; (800d508 <tcp_fasttmr+0xc4>)
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 f819 	bl	800d50c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d4da:	4b0b      	ldr	r3, [pc, #44]	; (800d508 <tcp_fasttmr+0xc4>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d000      	beq.n	800d4e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d4e2:	e7b8      	b.n	800d456 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	607b      	str	r3, [r7, #4]
 800d4e8:	e002      	b.n	800d4f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1b3      	bne.n	800d45e <tcp_fasttmr+0x1a>
    }
  }
}
 800d4f6:	bf00      	nop
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20004b76 	.word	0x20004b76
 800d504:	20012cb4 	.word	0x20012cb4
 800d508:	20012cb0 	.word	0x20012cb0

0800d50c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d50c:	b590      	push	{r4, r7, lr}
 800d50e:	b085      	sub	sp, #20
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d109      	bne.n	800d52e <tcp_process_refused_data+0x22>
 800d51a:	4b37      	ldr	r3, [pc, #220]	; (800d5f8 <tcp_process_refused_data+0xec>)
 800d51c:	f240 6209 	movw	r2, #1545	; 0x609
 800d520:	4936      	ldr	r1, [pc, #216]	; (800d5fc <tcp_process_refused_data+0xf0>)
 800d522:	4837      	ldr	r0, [pc, #220]	; (800d600 <tcp_process_refused_data+0xf4>)
 800d524:	f009 ff3a 	bl	801739c <iprintf>
 800d528:	f06f 030f 	mvn.w	r3, #15
 800d52c:	e060      	b.n	800d5f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d532:	7b5b      	ldrb	r3, [r3, #13]
 800d534:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d53a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00b      	beq.n	800d564 <tcp_process_refused_data+0x58>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6918      	ldr	r0, [r3, #16]
 800d556:	2300      	movs	r3, #0
 800d558:	68ba      	ldr	r2, [r7, #8]
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	47a0      	blx	r4
 800d55e:	4603      	mov	r3, r0
 800d560:	73fb      	strb	r3, [r7, #15]
 800d562:	e007      	b.n	800d574 <tcp_process_refused_data+0x68>
 800d564:	2300      	movs	r3, #0
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	6879      	ldr	r1, [r7, #4]
 800d56a:	2000      	movs	r0, #0
 800d56c:	f000 f8a4 	bl	800d6b8 <tcp_recv_null>
 800d570:	4603      	mov	r3, r0
 800d572:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d12a      	bne.n	800d5d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
 800d57e:	f003 0320 	and.w	r3, r3, #32
 800d582:	2b00      	cmp	r3, #0
 800d584:	d033      	beq.n	800d5ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d58a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d58e:	d005      	beq.n	800d59c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d594:	3301      	adds	r3, #1
 800d596:	b29a      	uxth	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00b      	beq.n	800d5be <tcp_process_refused_data+0xb2>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6918      	ldr	r0, [r3, #16]
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	47a0      	blx	r4
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
 800d5bc:	e001      	b.n	800d5c2 <tcp_process_refused_data+0xb6>
 800d5be:	2300      	movs	r3, #0
 800d5c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c6:	f113 0f0d 	cmn.w	r3, #13
 800d5ca:	d110      	bne.n	800d5ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d5cc:	f06f 030c 	mvn.w	r3, #12
 800d5d0:	e00e      	b.n	800d5f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d6:	f113 0f0d 	cmn.w	r3, #13
 800d5da:	d102      	bne.n	800d5e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d5dc:	f06f 030c 	mvn.w	r3, #12
 800d5e0:	e006      	b.n	800d5f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d5e8:	f06f 0304 	mvn.w	r3, #4
 800d5ec:	e000      	b.n	800d5f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd90      	pop	{r4, r7, pc}
 800d5f8:	0801a45c 	.word	0x0801a45c
 800d5fc:	0801a96c 	.word	0x0801a96c
 800d600:	0801a4a0 	.word	0x0801a4a0

0800d604 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d60c:	e007      	b.n	800d61e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f80a 	bl	800d62e <tcp_seg_free>
    seg = next;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1f4      	bne.n	800d60e <tcp_segs_free+0xa>
  }
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b082      	sub	sp, #8
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00c      	beq.n	800d656 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d004      	beq.n	800d64e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fd61 	bl	800c110 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d64e:	6879      	ldr	r1, [r7, #4]
 800d650:	2003      	movs	r0, #3
 800d652:	f7fd fead 	bl	800b3b0 <memp_free>
  }
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
	...

0800d660 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_seg_copy+0x1c>
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <tcp_seg_copy+0x4c>)
 800d670:	f240 6282 	movw	r2, #1666	; 0x682
 800d674:	490e      	ldr	r1, [pc, #56]	; (800d6b0 <tcp_seg_copy+0x50>)
 800d676:	480f      	ldr	r0, [pc, #60]	; (800d6b4 <tcp_seg_copy+0x54>)
 800d678:	f009 fe90 	bl	801739c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d67c:	2003      	movs	r0, #3
 800d67e:	f7fd fe45 	bl	800b30c <memp_malloc>
 800d682:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <tcp_seg_copy+0x2e>
    return NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e00a      	b.n	800d6a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d68e:	2210      	movs	r2, #16
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f009 fa0e 	bl	8016ab4 <memcpy>
  pbuf_ref(cseg->p);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fe fddd 	bl	800c25c <pbuf_ref>
  return cseg;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	0801a45c 	.word	0x0801a45c
 800d6b0:	0801a9b0 	.word	0x0801a9b0
 800d6b4:	0801a4a0 	.word	0x0801a4a0

0800d6b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d109      	bne.n	800d6e0 <tcp_recv_null+0x28>
 800d6cc:	4b12      	ldr	r3, [pc, #72]	; (800d718 <tcp_recv_null+0x60>)
 800d6ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d6d2:	4912      	ldr	r1, [pc, #72]	; (800d71c <tcp_recv_null+0x64>)
 800d6d4:	4812      	ldr	r0, [pc, #72]	; (800d720 <tcp_recv_null+0x68>)
 800d6d6:	f009 fe61 	bl	801739c <iprintf>
 800d6da:	f06f 030f 	mvn.w	r3, #15
 800d6de:	e016      	b.n	800d70e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d009      	beq.n	800d6fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	891b      	ldrh	r3, [r3, #8]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	68b8      	ldr	r0, [r7, #8]
 800d6ee:	f7ff fb19 	bl	800cd24 <tcp_recved>
    pbuf_free(p);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe fd0c 	bl	800c110 <pbuf_free>
 800d6f8:	e008      	b.n	800d70c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d6fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d104      	bne.n	800d70c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d702:	68b8      	ldr	r0, [r7, #8]
 800d704:	f7ff f9be 	bl	800ca84 <tcp_close>
 800d708:	4603      	mov	r3, r0
 800d70a:	e000      	b.n	800d70e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	0801a45c 	.word	0x0801a45c
 800d71c:	0801a9cc 	.word	0x0801a9cc
 800d720:	0801a4a0 	.word	0x0801a4a0

0800d724 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d732:	2b00      	cmp	r3, #0
 800d734:	db01      	blt.n	800d73a <tcp_kill_prio+0x16>
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	e000      	b.n	800d73c <tcp_kill_prio+0x18>
 800d73a:	237f      	movs	r3, #127	; 0x7f
 800d73c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d73e:	7afb      	ldrb	r3, [r7, #11]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d034      	beq.n	800d7ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d744:	7afb      	ldrb	r3, [r7, #11]
 800d746:	3b01      	subs	r3, #1
 800d748:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d74e:	2300      	movs	r3, #0
 800d750:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d752:	4b19      	ldr	r3, [pc, #100]	; (800d7b8 <tcp_kill_prio+0x94>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	e01f      	b.n	800d79a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	7d5b      	ldrb	r3, [r3, #21]
 800d75e:	7afa      	ldrb	r2, [r7, #11]
 800d760:	429a      	cmp	r2, r3
 800d762:	d80c      	bhi.n	800d77e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d768:	7afa      	ldrb	r2, [r7, #11]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d112      	bne.n	800d794 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d76e:	4b13      	ldr	r3, [pc, #76]	; (800d7bc <tcp_kill_prio+0x98>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d80a      	bhi.n	800d794 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <tcp_kill_prio+0x98>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	7d5b      	ldrb	r3, [r3, #21]
 800d792:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	617b      	str	r3, [r7, #20]
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1dc      	bne.n	800d75a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d004      	beq.n	800d7b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d7a6:	6938      	ldr	r0, [r7, #16]
 800d7a8:	f7ff fa56 	bl	800cc58 <tcp_abort>
 800d7ac:	e000      	b.n	800d7b0 <tcp_kill_prio+0x8c>
    return;
 800d7ae:	bf00      	nop
  }
}
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20012cb4 	.word	0x20012cb4
 800d7bc:	20012cb8 	.word	0x20012cb8

0800d7c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	2b08      	cmp	r3, #8
 800d7ce:	d009      	beq.n	800d7e4 <tcp_kill_state+0x24>
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
 800d7d2:	2b09      	cmp	r3, #9
 800d7d4:	d006      	beq.n	800d7e4 <tcp_kill_state+0x24>
 800d7d6:	4b1a      	ldr	r3, [pc, #104]	; (800d840 <tcp_kill_state+0x80>)
 800d7d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d7dc:	4919      	ldr	r1, [pc, #100]	; (800d844 <tcp_kill_state+0x84>)
 800d7de:	481a      	ldr	r0, [pc, #104]	; (800d848 <tcp_kill_state+0x88>)
 800d7e0:	f009 fddc 	bl	801739c <iprintf>

  inactivity = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7ec:	4b17      	ldr	r3, [pc, #92]	; (800d84c <tcp_kill_state+0x8c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	e017      	b.n	800d824 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	7d1b      	ldrb	r3, [r3, #20]
 800d7f8:	79fa      	ldrb	r2, [r7, #7]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d10f      	bne.n	800d81e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d7fe:	4b14      	ldr	r3, [pc, #80]	; (800d850 <tcp_kill_state+0x90>)
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d807      	bhi.n	800d81e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d80e:	4b10      	ldr	r3, [pc, #64]	; (800d850 <tcp_kill_state+0x90>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e4      	bne.n	800d7f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d830:	2100      	movs	r1, #0
 800d832:	6938      	ldr	r0, [r7, #16]
 800d834:	f7ff f952 	bl	800cadc <tcp_abandon>
  }
}
 800d838:	bf00      	nop
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	0801a45c 	.word	0x0801a45c
 800d844:	0801a9e8 	.word	0x0801a9e8
 800d848:	0801a4a0 	.word	0x0801a4a0
 800d84c:	20012cb4 	.word	0x20012cb4
 800d850:	20012cb8 	.word	0x20012cb8

0800d854 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d862:	4b12      	ldr	r3, [pc, #72]	; (800d8ac <tcp_kill_timewait+0x58>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	e012      	b.n	800d890 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d86a:	4b11      	ldr	r3, [pc, #68]	; (800d8b0 <tcp_kill_timewait+0x5c>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	429a      	cmp	r2, r3
 800d878:	d807      	bhi.n	800d88a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d87a:	4b0d      	ldr	r3, [pc, #52]	; (800d8b0 <tcp_kill_timewait+0x5c>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6a1b      	ldr	r3, [r3, #32]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e9      	bne.n	800d86a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d89c:	68b8      	ldr	r0, [r7, #8]
 800d89e:	f7ff f9db 	bl	800cc58 <tcp_abort>
  }
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	20012cc4 	.word	0x20012cc4
 800d8b0:	20012cb8 	.word	0x20012cb8

0800d8b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d8ba:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <tcp_handle_closepend+0x48>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8c0:	e014      	b.n	800d8ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	8b5b      	ldrh	r3, [r3, #26]
 800d8cc:	f003 0308 	and.w	r3, r3, #8
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d009      	beq.n	800d8e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f023 0308 	bic.w	r3, r3, #8
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7ff f864 	bl	800c9b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e7      	bne.n	800d8c2 <tcp_handle_closepend+0xe>
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	bf00      	nop
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	20012cb4 	.word	0x20012cb4

0800d900 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d90a:	2001      	movs	r0, #1
 800d90c:	f7fd fcfe 	bl	800b30c <memp_malloc>
 800d910:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d126      	bne.n	800d966 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d918:	f7ff ffcc 	bl	800d8b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d91c:	f7ff ff9a 	bl	800d854 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d920:	2001      	movs	r0, #1
 800d922:	f7fd fcf3 	bl	800b30c <memp_malloc>
 800d926:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d11b      	bne.n	800d966 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d92e:	2009      	movs	r0, #9
 800d930:	f7ff ff46 	bl	800d7c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d934:	2001      	movs	r0, #1
 800d936:	f7fd fce9 	bl	800b30c <memp_malloc>
 800d93a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d111      	bne.n	800d966 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d942:	2008      	movs	r0, #8
 800d944:	f7ff ff3c 	bl	800d7c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d948:	2001      	movs	r0, #1
 800d94a:	f7fd fcdf 	bl	800b30c <memp_malloc>
 800d94e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d107      	bne.n	800d966 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fee3 	bl	800d724 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d95e:	2001      	movs	r0, #1
 800d960:	f7fd fcd4 	bl	800b30c <memp_malloc>
 800d964:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d03f      	beq.n	800d9ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d96c:	229c      	movs	r2, #156	; 0x9c
 800d96e:	2100      	movs	r1, #0
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f009 f8c7 	bl	8016b04 <memset>
    pcb->prio = prio;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	79fa      	ldrb	r2, [r7, #7]
 800d97a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d982:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d98c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	22ff      	movs	r2, #255	; 0xff
 800d99a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d9a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2206      	movs	r2, #6
 800d9a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2206      	movs	r2, #6
 800d9b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <tcp_alloc+0xf8>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <tcp_alloc+0xfc>)
 800d9cc:	781a      	ldrb	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d9d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4a08      	ldr	r2, [pc, #32]	; (800da00 <tcp_alloc+0x100>)
 800d9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	4a07      	ldr	r2, [pc, #28]	; (800da04 <tcp_alloc+0x104>)
 800d9e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20012cb8 	.word	0x20012cb8
 800d9fc:	20004b76 	.word	0x20004b76
 800da00:	0800d6b9 	.word	0x0800d6b9
 800da04:	006ddd00 	.word	0x006ddd00

0800da08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d107      	bne.n	800da26 <tcp_pcb_purge+0x1e>
 800da16:	4b21      	ldr	r3, [pc, #132]	; (800da9c <tcp_pcb_purge+0x94>)
 800da18:	f640 0251 	movw	r2, #2129	; 0x851
 800da1c:	4920      	ldr	r1, [pc, #128]	; (800daa0 <tcp_pcb_purge+0x98>)
 800da1e:	4821      	ldr	r0, [pc, #132]	; (800daa4 <tcp_pcb_purge+0x9c>)
 800da20:	f009 fcbc 	bl	801739c <iprintf>
 800da24:	e037      	b.n	800da96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d033      	beq.n	800da96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800da32:	2b0a      	cmp	r3, #10
 800da34:	d02f      	beq.n	800da96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d02b      	beq.n	800da96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da42:	2b00      	cmp	r3, #0
 800da44:	d007      	beq.n	800da56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fb60 	bl	800c110 <pbuf_free>
      pcb->refused_data = NULL;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f986 	bl	800dd70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da6a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	4618      	mov	r0, r3
 800da72:	f7ff fdc7 	bl	800d604 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7ff fdc2 	bl	800d604 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	66da      	str	r2, [r3, #108]	; 0x6c
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	0801a45c 	.word	0x0801a45c
 800daa0:	0801aaa8 	.word	0x0801aaa8
 800daa4:	0801a4a0 	.word	0x0801a4a0

0800daa8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d106      	bne.n	800dac6 <tcp_pcb_remove+0x1e>
 800dab8:	4b3e      	ldr	r3, [pc, #248]	; (800dbb4 <tcp_pcb_remove+0x10c>)
 800daba:	f640 0283 	movw	r2, #2179	; 0x883
 800dabe:	493e      	ldr	r1, [pc, #248]	; (800dbb8 <tcp_pcb_remove+0x110>)
 800dac0:	483e      	ldr	r0, [pc, #248]	; (800dbbc <tcp_pcb_remove+0x114>)
 800dac2:	f009 fc6b 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <tcp_pcb_remove+0x32>
 800dacc:	4b39      	ldr	r3, [pc, #228]	; (800dbb4 <tcp_pcb_remove+0x10c>)
 800dace:	f640 0284 	movw	r2, #2180	; 0x884
 800dad2:	493b      	ldr	r1, [pc, #236]	; (800dbc0 <tcp_pcb_remove+0x118>)
 800dad4:	4839      	ldr	r0, [pc, #228]	; (800dbbc <tcp_pcb_remove+0x114>)
 800dad6:	f009 fc61 	bl	801739c <iprintf>

  TCP_RMV(pcblist, pcb);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	683a      	ldr	r2, [r7, #0]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d105      	bne.n	800daf0 <tcp_pcb_remove+0x48>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	e013      	b.n	800db18 <tcp_pcb_remove+0x70>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	60fb      	str	r3, [r7, #12]
 800daf6:	e00c      	b.n	800db12 <tcp_pcb_remove+0x6a>
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	683a      	ldr	r2, [r7, #0]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d104      	bne.n	800db0c <tcp_pcb_remove+0x64>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	68da      	ldr	r2, [r3, #12]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	60da      	str	r2, [r3, #12]
 800db0a:	e005      	b.n	800db18 <tcp_pcb_remove+0x70>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	60fb      	str	r3, [r7, #12]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1ef      	bne.n	800daf8 <tcp_pcb_remove+0x50>
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	2200      	movs	r2, #0
 800db1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800db1e:	6838      	ldr	r0, [r7, #0]
 800db20:	f7ff ff72 	bl	800da08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	2b0a      	cmp	r3, #10
 800db2a:	d013      	beq.n	800db54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800db30:	2b01      	cmp	r3, #1
 800db32:	d00f      	beq.n	800db54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	8b5b      	ldrh	r3, [r3, #26]
 800db38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	8b5b      	ldrh	r3, [r3, #26]
 800db44:	f043 0302 	orr.w	r3, r3, #2
 800db48:	b29a      	uxth	r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800db4e:	6838      	ldr	r0, [r7, #0]
 800db50:	f002 ff6a 	bl	8010a28 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d020      	beq.n	800db9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db60:	2b00      	cmp	r3, #0
 800db62:	d006      	beq.n	800db72 <tcp_pcb_remove+0xca>
 800db64:	4b13      	ldr	r3, [pc, #76]	; (800dbb4 <tcp_pcb_remove+0x10c>)
 800db66:	f640 0293 	movw	r2, #2195	; 0x893
 800db6a:	4916      	ldr	r1, [pc, #88]	; (800dbc4 <tcp_pcb_remove+0x11c>)
 800db6c:	4813      	ldr	r0, [pc, #76]	; (800dbbc <tcp_pcb_remove+0x114>)
 800db6e:	f009 fc15 	bl	801739c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db76:	2b00      	cmp	r3, #0
 800db78:	d006      	beq.n	800db88 <tcp_pcb_remove+0xe0>
 800db7a:	4b0e      	ldr	r3, [pc, #56]	; (800dbb4 <tcp_pcb_remove+0x10c>)
 800db7c:	f640 0294 	movw	r2, #2196	; 0x894
 800db80:	4911      	ldr	r1, [pc, #68]	; (800dbc8 <tcp_pcb_remove+0x120>)
 800db82:	480e      	ldr	r0, [pc, #56]	; (800dbbc <tcp_pcb_remove+0x114>)
 800db84:	f009 fc0a 	bl	801739c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d006      	beq.n	800db9e <tcp_pcb_remove+0xf6>
 800db90:	4b08      	ldr	r3, [pc, #32]	; (800dbb4 <tcp_pcb_remove+0x10c>)
 800db92:	f640 0296 	movw	r2, #2198	; 0x896
 800db96:	490d      	ldr	r1, [pc, #52]	; (800dbcc <tcp_pcb_remove+0x124>)
 800db98:	4808      	ldr	r0, [pc, #32]	; (800dbbc <tcp_pcb_remove+0x114>)
 800db9a:	f009 fbff 	bl	801739c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2200      	movs	r2, #0
 800dba2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	2200      	movs	r2, #0
 800dba8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dbaa:	bf00      	nop
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	0801a45c 	.word	0x0801a45c
 800dbb8:	0801aac4 	.word	0x0801aac4
 800dbbc:	0801a4a0 	.word	0x0801a4a0
 800dbc0:	0801aae0 	.word	0x0801aae0
 800dbc4:	0801ab00 	.word	0x0801ab00
 800dbc8:	0801ab18 	.word	0x0801ab18
 800dbcc:	0801ab34 	.word	0x0801ab34

0800dbd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d106      	bne.n	800dbec <tcp_next_iss+0x1c>
 800dbde:	4b0a      	ldr	r3, [pc, #40]	; (800dc08 <tcp_next_iss+0x38>)
 800dbe0:	f640 02af 	movw	r2, #2223	; 0x8af
 800dbe4:	4909      	ldr	r1, [pc, #36]	; (800dc0c <tcp_next_iss+0x3c>)
 800dbe6:	480a      	ldr	r0, [pc, #40]	; (800dc10 <tcp_next_iss+0x40>)
 800dbe8:	f009 fbd8 	bl	801739c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dbec:	4b09      	ldr	r3, [pc, #36]	; (800dc14 <tcp_next_iss+0x44>)
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <tcp_next_iss+0x48>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	4a07      	ldr	r2, [pc, #28]	; (800dc14 <tcp_next_iss+0x44>)
 800dbf8:	6013      	str	r3, [r2, #0]
  return iss;
 800dbfa:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <tcp_next_iss+0x44>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	0801a45c 	.word	0x0801a45c
 800dc0c:	0801ab4c 	.word	0x0801ab4c
 800dc10:	0801a4a0 	.word	0x0801a4a0
 800dc14:	20000014 	.word	0x20000014
 800dc18:	20012cb8 	.word	0x20012cb8

0800dc1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	4603      	mov	r3, r0
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d106      	bne.n	800dc3e <tcp_eff_send_mss_netif+0x22>
 800dc30:	4b14      	ldr	r3, [pc, #80]	; (800dc84 <tcp_eff_send_mss_netif+0x68>)
 800dc32:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dc36:	4914      	ldr	r1, [pc, #80]	; (800dc88 <tcp_eff_send_mss_netif+0x6c>)
 800dc38:	4814      	ldr	r0, [pc, #80]	; (800dc8c <tcp_eff_send_mss_netif+0x70>)
 800dc3a:	f009 fbaf 	bl	801739c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dc44:	89fb      	ldrh	r3, [r7, #14]
 800dc46:	e019      	b.n	800dc7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dc4e:	8afb      	ldrh	r3, [r7, #22]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d012      	beq.n	800dc7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dc54:	2328      	movs	r3, #40	; 0x28
 800dc56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dc58:	8afa      	ldrh	r2, [r7, #22]
 800dc5a:	8abb      	ldrh	r3, [r7, #20]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d904      	bls.n	800dc6a <tcp_eff_send_mss_netif+0x4e>
 800dc60:	8afa      	ldrh	r2, [r7, #22]
 800dc62:	8abb      	ldrh	r3, [r7, #20]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	e000      	b.n	800dc6c <tcp_eff_send_mss_netif+0x50>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc6e:	8a7a      	ldrh	r2, [r7, #18]
 800dc70:	89fb      	ldrh	r3, [r7, #14]
 800dc72:	4293      	cmp	r3, r2
 800dc74:	bf28      	it	cs
 800dc76:	4613      	movcs	r3, r2
 800dc78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc7a:	89fb      	ldrh	r3, [r7, #14]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3718      	adds	r7, #24
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	0801a45c 	.word	0x0801a45c
 800dc88:	0801ab68 	.word	0x0801ab68
 800dc8c:	0801a4a0 	.word	0x0801a4a0

0800dc90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d119      	bne.n	800dcd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dca4:	4b10      	ldr	r3, [pc, #64]	; (800dce8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dca6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dcaa:	4910      	ldr	r1, [pc, #64]	; (800dcec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dcac:	4810      	ldr	r0, [pc, #64]	; (800dcf0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dcae:	f009 fb75 	bl	801739c <iprintf>

  while (pcb != NULL) {
 800dcb2:	e011      	b.n	800dcd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d108      	bne.n	800dcd2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7fe ffc6 	bl	800cc58 <tcp_abort>
      pcb = next;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	e002      	b.n	800dcd8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1ea      	bne.n	800dcb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dcde:	bf00      	nop
 800dce0:	bf00      	nop
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	0801a45c 	.word	0x0801a45c
 800dcec:	0801ab90 	.word	0x0801ab90
 800dcf0:	0801a4a0 	.word	0x0801a4a0

0800dcf4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d02a      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d026      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dd0c:	4b15      	ldr	r3, [pc, #84]	; (800dd64 <tcp_netif_ip_addr_changed+0x70>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4619      	mov	r1, r3
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7ff ffbc 	bl	800dc90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dd18:	4b13      	ldr	r3, [pc, #76]	; (800dd68 <tcp_netif_ip_addr_changed+0x74>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff ffb6 	bl	800dc90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d017      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d013      	beq.n	800dd5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd32:	4b0e      	ldr	r3, [pc, #56]	; (800dd6c <tcp_netif_ip_addr_changed+0x78>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e00c      	b.n	800dd54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d103      	bne.n	800dd4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1ef      	bne.n	800dd3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dd5a:	bf00      	nop
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	20012cb4 	.word	0x20012cb4
 800dd68:	20012cc0 	.word	0x20012cc0
 800dd6c:	20012cbc 	.word	0x20012cbc

0800dd70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d007      	beq.n	800dd90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd84:	4618      	mov	r0, r3
 800dd86:	f7ff fc3d 	bl	800d604 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b08d      	sub	sp, #52	; 0x34
 800dd9c:	af04      	add	r7, sp, #16
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <tcp_input+0x1c>
 800dda8:	4b9b      	ldr	r3, [pc, #620]	; (800e018 <tcp_input+0x280>)
 800ddaa:	2283      	movs	r2, #131	; 0x83
 800ddac:	499b      	ldr	r1, [pc, #620]	; (800e01c <tcp_input+0x284>)
 800ddae:	489c      	ldr	r0, [pc, #624]	; (800e020 <tcp_input+0x288>)
 800ddb0:	f009 faf4 	bl	801739c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	4a9a      	ldr	r2, [pc, #616]	; (800e024 <tcp_input+0x28c>)
 800ddba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	2b13      	cmp	r3, #19
 800ddc2:	f240 83c4 	bls.w	800e54e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ddc6:	4b98      	ldr	r3, [pc, #608]	; (800e028 <tcp_input+0x290>)
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	4a97      	ldr	r2, [pc, #604]	; (800e028 <tcp_input+0x290>)
 800ddcc:	6812      	ldr	r2, [r2, #0]
 800ddce:	4611      	mov	r1, r2
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f007 fdfb 	bl	80159cc <ip4_addr_isbroadcast_u32>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f040 83ba 	bne.w	800e552 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ddde:	4b92      	ldr	r3, [pc, #584]	; (800e028 <tcp_input+0x290>)
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dde6:	2be0      	cmp	r3, #224	; 0xe0
 800dde8:	f000 83b3 	beq.w	800e552 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ddec:	4b8d      	ldr	r3, [pc, #564]	; (800e024 <tcp_input+0x28c>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	899b      	ldrh	r3, [r3, #12]
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fc fdd3 	bl	800a9a0 <lwip_htons>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	0b1b      	lsrs	r3, r3, #12
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	b2db      	uxtb	r3, r3
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800de06:	7cbb      	ldrb	r3, [r7, #18]
 800de08:	2b13      	cmp	r3, #19
 800de0a:	f240 83a4 	bls.w	800e556 <tcp_input+0x7be>
 800de0e:	7cbb      	ldrb	r3, [r7, #18]
 800de10:	b29a      	uxth	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	891b      	ldrh	r3, [r3, #8]
 800de16:	429a      	cmp	r2, r3
 800de18:	f200 839d 	bhi.w	800e556 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800de1c:	7cbb      	ldrb	r3, [r7, #18]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	3b14      	subs	r3, #20
 800de22:	b29a      	uxth	r2, r3
 800de24:	4b81      	ldr	r3, [pc, #516]	; (800e02c <tcp_input+0x294>)
 800de26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800de28:	4b81      	ldr	r3, [pc, #516]	; (800e030 <tcp_input+0x298>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	895a      	ldrh	r2, [r3, #10]
 800de32:	7cbb      	ldrb	r3, [r7, #18]
 800de34:	b29b      	uxth	r3, r3
 800de36:	429a      	cmp	r2, r3
 800de38:	d309      	bcc.n	800de4e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800de3a:	4b7c      	ldr	r3, [pc, #496]	; (800e02c <tcp_input+0x294>)
 800de3c:	881a      	ldrh	r2, [r3, #0]
 800de3e:	4b7d      	ldr	r3, [pc, #500]	; (800e034 <tcp_input+0x29c>)
 800de40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800de42:	7cbb      	ldrb	r3, [r7, #18]
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7fe f8dc 	bl	800c004 <pbuf_remove_header>
 800de4c:	e04e      	b.n	800deec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d105      	bne.n	800de62 <tcp_input+0xca>
 800de56:	4b70      	ldr	r3, [pc, #448]	; (800e018 <tcp_input+0x280>)
 800de58:	22c2      	movs	r2, #194	; 0xc2
 800de5a:	4977      	ldr	r1, [pc, #476]	; (800e038 <tcp_input+0x2a0>)
 800de5c:	4870      	ldr	r0, [pc, #448]	; (800e020 <tcp_input+0x288>)
 800de5e:	f009 fa9d 	bl	801739c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de62:	2114      	movs	r1, #20
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f7fe f8cd 	bl	800c004 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	895a      	ldrh	r2, [r3, #10]
 800de6e:	4b71      	ldr	r3, [pc, #452]	; (800e034 <tcp_input+0x29c>)
 800de70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de72:	4b6e      	ldr	r3, [pc, #440]	; (800e02c <tcp_input+0x294>)
 800de74:	881a      	ldrh	r2, [r3, #0]
 800de76:	4b6f      	ldr	r3, [pc, #444]	; (800e034 <tcp_input+0x29c>)
 800de78:	881b      	ldrh	r3, [r3, #0]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de7e:	4b6d      	ldr	r3, [pc, #436]	; (800e034 <tcp_input+0x29c>)
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	4619      	mov	r1, r3
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7fe f8bd 	bl	800c004 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	895b      	ldrh	r3, [r3, #10]
 800de90:	8a3a      	ldrh	r2, [r7, #16]
 800de92:	429a      	cmp	r2, r3
 800de94:	f200 8361 	bhi.w	800e55a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	4a64      	ldr	r2, [pc, #400]	; (800e030 <tcp_input+0x298>)
 800dea0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	8a3a      	ldrh	r2, [r7, #16]
 800dea8:	4611      	mov	r1, r2
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fe f8aa 	bl	800c004 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	891a      	ldrh	r2, [r3, #8]
 800deb4:	8a3b      	ldrh	r3, [r7, #16]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	b29a      	uxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	895b      	ldrh	r3, [r3, #10]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d005      	beq.n	800ded2 <tcp_input+0x13a>
 800dec6:	4b54      	ldr	r3, [pc, #336]	; (800e018 <tcp_input+0x280>)
 800dec8:	22df      	movs	r2, #223	; 0xdf
 800deca:	495c      	ldr	r1, [pc, #368]	; (800e03c <tcp_input+0x2a4>)
 800decc:	4854      	ldr	r0, [pc, #336]	; (800e020 <tcp_input+0x288>)
 800dece:	f009 fa65 	bl	801739c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	891a      	ldrh	r2, [r3, #8]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	891b      	ldrh	r3, [r3, #8]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d005      	beq.n	800deec <tcp_input+0x154>
 800dee0:	4b4d      	ldr	r3, [pc, #308]	; (800e018 <tcp_input+0x280>)
 800dee2:	22e0      	movs	r2, #224	; 0xe0
 800dee4:	4956      	ldr	r1, [pc, #344]	; (800e040 <tcp_input+0x2a8>)
 800dee6:	484e      	ldr	r0, [pc, #312]	; (800e020 <tcp_input+0x288>)
 800dee8:	f009 fa58 	bl	801739c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800deec:	4b4d      	ldr	r3, [pc, #308]	; (800e024 <tcp_input+0x28c>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b29b      	uxth	r3, r3
 800def4:	4a4b      	ldr	r2, [pc, #300]	; (800e024 <tcp_input+0x28c>)
 800def6:	6814      	ldr	r4, [r2, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f7fc fd51 	bl	800a9a0 <lwip_htons>
 800defe:	4603      	mov	r3, r0
 800df00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800df02:	4b48      	ldr	r3, [pc, #288]	; (800e024 <tcp_input+0x28c>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	885b      	ldrh	r3, [r3, #2]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	4a46      	ldr	r2, [pc, #280]	; (800e024 <tcp_input+0x28c>)
 800df0c:	6814      	ldr	r4, [r2, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fc fd46 	bl	800a9a0 <lwip_htons>
 800df14:	4603      	mov	r3, r0
 800df16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800df18:	4b42      	ldr	r3, [pc, #264]	; (800e024 <tcp_input+0x28c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	4a41      	ldr	r2, [pc, #260]	; (800e024 <tcp_input+0x28c>)
 800df20:	6814      	ldr	r4, [r2, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f7fc fd51 	bl	800a9ca <lwip_htonl>
 800df28:	4603      	mov	r3, r0
 800df2a:	6063      	str	r3, [r4, #4]
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	4a45      	ldr	r2, [pc, #276]	; (800e044 <tcp_input+0x2ac>)
 800df30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800df32:	4b3c      	ldr	r3, [pc, #240]	; (800e024 <tcp_input+0x28c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	4a3a      	ldr	r2, [pc, #232]	; (800e024 <tcp_input+0x28c>)
 800df3a:	6814      	ldr	r4, [r2, #0]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fc fd44 	bl	800a9ca <lwip_htonl>
 800df42:	4603      	mov	r3, r0
 800df44:	60a3      	str	r3, [r4, #8]
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	4a3f      	ldr	r2, [pc, #252]	; (800e048 <tcp_input+0x2b0>)
 800df4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800df4c:	4b35      	ldr	r3, [pc, #212]	; (800e024 <tcp_input+0x28c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	89db      	ldrh	r3, [r3, #14]
 800df52:	b29b      	uxth	r3, r3
 800df54:	4a33      	ldr	r2, [pc, #204]	; (800e024 <tcp_input+0x28c>)
 800df56:	6814      	ldr	r4, [r2, #0]
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fc fd21 	bl	800a9a0 <lwip_htons>
 800df5e:	4603      	mov	r3, r0
 800df60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df62:	4b30      	ldr	r3, [pc, #192]	; (800e024 <tcp_input+0x28c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	899b      	ldrh	r3, [r3, #12]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fc fd18 	bl	800a9a0 <lwip_htons>
 800df70:	4603      	mov	r3, r0
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	4b34      	ldr	r3, [pc, #208]	; (800e04c <tcp_input+0x2b4>)
 800df7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	891a      	ldrh	r2, [r3, #8]
 800df82:	4b33      	ldr	r3, [pc, #204]	; (800e050 <tcp_input+0x2b8>)
 800df84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df86:	4b31      	ldr	r3, [pc, #196]	; (800e04c <tcp_input+0x2b4>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	f003 0303 	and.w	r3, r3, #3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00c      	beq.n	800dfac <tcp_input+0x214>
    tcplen++;
 800df92:	4b2f      	ldr	r3, [pc, #188]	; (800e050 <tcp_input+0x2b8>)
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	3301      	adds	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	4b2d      	ldr	r3, [pc, #180]	; (800e050 <tcp_input+0x2b8>)
 800df9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	891a      	ldrh	r2, [r3, #8]
 800dfa2:	4b2b      	ldr	r3, [pc, #172]	; (800e050 <tcp_input+0x2b8>)
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	f200 82d9 	bhi.w	800e55e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dfac:	2300      	movs	r3, #0
 800dfae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfb0:	4b28      	ldr	r3, [pc, #160]	; (800e054 <tcp_input+0x2bc>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	61fb      	str	r3, [r7, #28]
 800dfb6:	e09d      	b.n	800e0f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d105      	bne.n	800dfcc <tcp_input+0x234>
 800dfc0:	4b15      	ldr	r3, [pc, #84]	; (800e018 <tcp_input+0x280>)
 800dfc2:	22fb      	movs	r2, #251	; 0xfb
 800dfc4:	4924      	ldr	r1, [pc, #144]	; (800e058 <tcp_input+0x2c0>)
 800dfc6:	4816      	ldr	r0, [pc, #88]	; (800e020 <tcp_input+0x288>)
 800dfc8:	f009 f9e8 	bl	801739c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	7d1b      	ldrb	r3, [r3, #20]
 800dfd0:	2b0a      	cmp	r3, #10
 800dfd2:	d105      	bne.n	800dfe0 <tcp_input+0x248>
 800dfd4:	4b10      	ldr	r3, [pc, #64]	; (800e018 <tcp_input+0x280>)
 800dfd6:	22fc      	movs	r2, #252	; 0xfc
 800dfd8:	4920      	ldr	r1, [pc, #128]	; (800e05c <tcp_input+0x2c4>)
 800dfda:	4811      	ldr	r0, [pc, #68]	; (800e020 <tcp_input+0x288>)
 800dfdc:	f009 f9de 	bl	801739c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	7d1b      	ldrb	r3, [r3, #20]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d105      	bne.n	800dff4 <tcp_input+0x25c>
 800dfe8:	4b0b      	ldr	r3, [pc, #44]	; (800e018 <tcp_input+0x280>)
 800dfea:	22fd      	movs	r2, #253	; 0xfd
 800dfec:	491c      	ldr	r1, [pc, #112]	; (800e060 <tcp_input+0x2c8>)
 800dfee:	480c      	ldr	r0, [pc, #48]	; (800e020 <tcp_input+0x288>)
 800dff0:	f009 f9d4 	bl	801739c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	7a1b      	ldrb	r3, [r3, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d033      	beq.n	800e064 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	7a1a      	ldrb	r2, [r3, #8]
 800e000:	4b09      	ldr	r3, [pc, #36]	; (800e028 <tcp_input+0x290>)
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e008:	3301      	adds	r3, #1
 800e00a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d029      	beq.n	800e064 <tcp_input+0x2cc>
      prev = pcb;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	61bb      	str	r3, [r7, #24]
      continue;
 800e014:	e06b      	b.n	800e0ee <tcp_input+0x356>
 800e016:	bf00      	nop
 800e018:	0801abc4 	.word	0x0801abc4
 800e01c:	0801abf8 	.word	0x0801abf8
 800e020:	0801ac10 	.word	0x0801ac10
 800e024:	20004b88 	.word	0x20004b88
 800e028:	2000f580 	.word	0x2000f580
 800e02c:	20004b8c 	.word	0x20004b8c
 800e030:	20004b90 	.word	0x20004b90
 800e034:	20004b8e 	.word	0x20004b8e
 800e038:	0801ac38 	.word	0x0801ac38
 800e03c:	0801ac48 	.word	0x0801ac48
 800e040:	0801ac54 	.word	0x0801ac54
 800e044:	20004b98 	.word	0x20004b98
 800e048:	20004b9c 	.word	0x20004b9c
 800e04c:	20004ba4 	.word	0x20004ba4
 800e050:	20004ba2 	.word	0x20004ba2
 800e054:	20012cb4 	.word	0x20012cb4
 800e058:	0801ac74 	.word	0x0801ac74
 800e05c:	0801ac9c 	.word	0x0801ac9c
 800e060:	0801acc8 	.word	0x0801acc8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	8b1a      	ldrh	r2, [r3, #24]
 800e068:	4b94      	ldr	r3, [pc, #592]	; (800e2bc <tcp_input+0x524>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	881b      	ldrh	r3, [r3, #0]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	429a      	cmp	r2, r3
 800e072:	d13a      	bne.n	800e0ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	8ada      	ldrh	r2, [r3, #22]
 800e078:	4b90      	ldr	r3, [pc, #576]	; (800e2bc <tcp_input+0x524>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	885b      	ldrh	r3, [r3, #2]
 800e07e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e080:	429a      	cmp	r2, r3
 800e082:	d132      	bne.n	800e0ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	4b8d      	ldr	r3, [pc, #564]	; (800e2c0 <tcp_input+0x528>)
 800e08a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d12c      	bne.n	800e0ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	4b8a      	ldr	r3, [pc, #552]	; (800e2c0 <tcp_input+0x528>)
 800e096:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e098:	429a      	cmp	r2, r3
 800e09a:	d126      	bne.n	800e0ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	69fa      	ldr	r2, [r7, #28]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d106      	bne.n	800e0b4 <tcp_input+0x31c>
 800e0a6:	4b87      	ldr	r3, [pc, #540]	; (800e2c4 <tcp_input+0x52c>)
 800e0a8:	f240 120d 	movw	r2, #269	; 0x10d
 800e0ac:	4986      	ldr	r1, [pc, #536]	; (800e2c8 <tcp_input+0x530>)
 800e0ae:	4887      	ldr	r0, [pc, #540]	; (800e2cc <tcp_input+0x534>)
 800e0b0:	f009 f974 	bl	801739c <iprintf>
      if (prev != NULL) {
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00a      	beq.n	800e0d0 <tcp_input+0x338>
        prev->next = pcb->next;
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	68da      	ldr	r2, [r3, #12]
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e0c2:	4b83      	ldr	r3, [pc, #524]	; (800e2d0 <tcp_input+0x538>)
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e0ca:	4a81      	ldr	r2, [pc, #516]	; (800e2d0 <tcp_input+0x538>)
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	69fa      	ldr	r2, [r7, #28]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d111      	bne.n	800e0fe <tcp_input+0x366>
 800e0da:	4b7a      	ldr	r3, [pc, #488]	; (800e2c4 <tcp_input+0x52c>)
 800e0dc:	f240 1215 	movw	r2, #277	; 0x115
 800e0e0:	497c      	ldr	r1, [pc, #496]	; (800e2d4 <tcp_input+0x53c>)
 800e0e2:	487a      	ldr	r0, [pc, #488]	; (800e2cc <tcp_input+0x534>)
 800e0e4:	f009 f95a 	bl	801739c <iprintf>
      break;
 800e0e8:	e009      	b.n	800e0fe <tcp_input+0x366>
    }
    prev = pcb;
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f47f af5e 	bne.w	800dfb8 <tcp_input+0x220>
 800e0fc:	e000      	b.n	800e100 <tcp_input+0x368>
      break;
 800e0fe:	bf00      	nop
  }

  if (pcb == NULL) {
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f040 8095 	bne.w	800e232 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e108:	4b73      	ldr	r3, [pc, #460]	; (800e2d8 <tcp_input+0x540>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	61fb      	str	r3, [r7, #28]
 800e10e:	e03f      	b.n	800e190 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	7d1b      	ldrb	r3, [r3, #20]
 800e114:	2b0a      	cmp	r3, #10
 800e116:	d006      	beq.n	800e126 <tcp_input+0x38e>
 800e118:	4b6a      	ldr	r3, [pc, #424]	; (800e2c4 <tcp_input+0x52c>)
 800e11a:	f240 121f 	movw	r2, #287	; 0x11f
 800e11e:	496f      	ldr	r1, [pc, #444]	; (800e2dc <tcp_input+0x544>)
 800e120:	486a      	ldr	r0, [pc, #424]	; (800e2cc <tcp_input+0x534>)
 800e122:	f009 f93b 	bl	801739c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	7a1b      	ldrb	r3, [r3, #8]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d009      	beq.n	800e142 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	7a1a      	ldrb	r2, [r3, #8]
 800e132:	4b63      	ldr	r3, [pc, #396]	; (800e2c0 <tcp_input+0x528>)
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e13a:	3301      	adds	r3, #1
 800e13c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e13e:	429a      	cmp	r2, r3
 800e140:	d122      	bne.n	800e188 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	8b1a      	ldrh	r2, [r3, #24]
 800e146:	4b5d      	ldr	r3, [pc, #372]	; (800e2bc <tcp_input+0x524>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	881b      	ldrh	r3, [r3, #0]
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	429a      	cmp	r2, r3
 800e150:	d11b      	bne.n	800e18a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	8ada      	ldrh	r2, [r3, #22]
 800e156:	4b59      	ldr	r3, [pc, #356]	; (800e2bc <tcp_input+0x524>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	885b      	ldrh	r3, [r3, #2]
 800e15c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e15e:	429a      	cmp	r2, r3
 800e160:	d113      	bne.n	800e18a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	4b56      	ldr	r3, [pc, #344]	; (800e2c0 <tcp_input+0x528>)
 800e168:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d10d      	bne.n	800e18a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	4b53      	ldr	r3, [pc, #332]	; (800e2c0 <tcp_input+0x528>)
 800e174:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e176:	429a      	cmp	r2, r3
 800e178:	d107      	bne.n	800e18a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e17a:	69f8      	ldr	r0, [r7, #28]
 800e17c:	f000 fb54 	bl	800e828 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7fd ffc5 	bl	800c110 <pbuf_free>
        return;
 800e186:	e1f0      	b.n	800e56a <tcp_input+0x7d2>
        continue;
 800e188:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	61fb      	str	r3, [r7, #28]
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1bc      	bne.n	800e110 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e196:	2300      	movs	r3, #0
 800e198:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e19a:	4b51      	ldr	r3, [pc, #324]	; (800e2e0 <tcp_input+0x548>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e02a      	b.n	800e1f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	7a1b      	ldrb	r3, [r3, #8]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00c      	beq.n	800e1c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	7a1a      	ldrb	r2, [r3, #8]
 800e1ae:	4b44      	ldr	r3, [pc, #272]	; (800e2c0 <tcp_input+0x528>)
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d002      	beq.n	800e1c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	61bb      	str	r3, [r7, #24]
        continue;
 800e1c2:	e016      	b.n	800e1f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	8ada      	ldrh	r2, [r3, #22]
 800e1c8:	4b3c      	ldr	r3, [pc, #240]	; (800e2bc <tcp_input+0x524>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	885b      	ldrh	r3, [r3, #2]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d10c      	bne.n	800e1ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	4b39      	ldr	r3, [pc, #228]	; (800e2c0 <tcp_input+0x528>)
 800e1da:	695b      	ldr	r3, [r3, #20]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d00f      	beq.n	800e200 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00d      	beq.n	800e202 <tcp_input+0x46a>
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d009      	beq.n	800e202 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	617b      	str	r3, [r7, #20]
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1d1      	bne.n	800e1a2 <tcp_input+0x40a>
 800e1fe:	e000      	b.n	800e202 <tcp_input+0x46a>
            break;
 800e200:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d014      	beq.n	800e232 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	68da      	ldr	r2, [r3, #12]
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e216:	4b32      	ldr	r3, [pc, #200]	; (800e2e0 <tcp_input+0x548>)
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e21e:	4a30      	ldr	r2, [pc, #192]	; (800e2e0 <tcp_input+0x548>)
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e224:	6978      	ldr	r0, [r7, #20]
 800e226:	f000 fa01 	bl	800e62c <tcp_listen_input>
      }
      pbuf_free(p);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7fd ff70 	bl	800c110 <pbuf_free>
      return;
 800e230:	e19b      	b.n	800e56a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 8160 	beq.w	800e4fa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e23a:	4b2a      	ldr	r3, [pc, #168]	; (800e2e4 <tcp_input+0x54c>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	891a      	ldrh	r2, [r3, #8]
 800e244:	4b27      	ldr	r3, [pc, #156]	; (800e2e4 <tcp_input+0x54c>)
 800e246:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e248:	4a26      	ldr	r2, [pc, #152]	; (800e2e4 <tcp_input+0x54c>)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e24e:	4b1b      	ldr	r3, [pc, #108]	; (800e2bc <tcp_input+0x524>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a24      	ldr	r2, [pc, #144]	; (800e2e4 <tcp_input+0x54c>)
 800e254:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e256:	4b24      	ldr	r3, [pc, #144]	; (800e2e8 <tcp_input+0x550>)
 800e258:	2200      	movs	r2, #0
 800e25a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e25c:	4b23      	ldr	r3, [pc, #140]	; (800e2ec <tcp_input+0x554>)
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e262:	4b23      	ldr	r3, [pc, #140]	; (800e2f0 <tcp_input+0x558>)
 800e264:	2200      	movs	r2, #0
 800e266:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e268:	4b22      	ldr	r3, [pc, #136]	; (800e2f4 <tcp_input+0x55c>)
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	f003 0308 	and.w	r3, r3, #8
 800e270:	2b00      	cmp	r3, #0
 800e272:	d006      	beq.n	800e282 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	7b5b      	ldrb	r3, [r3, #13]
 800e278:	f043 0301 	orr.w	r3, r3, #1
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e286:	2b00      	cmp	r3, #0
 800e288:	d038      	beq.n	800e2fc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e28a:	69f8      	ldr	r0, [r7, #28]
 800e28c:	f7ff f93e 	bl	800d50c <tcp_process_refused_data>
 800e290:	4603      	mov	r3, r0
 800e292:	f113 0f0d 	cmn.w	r3, #13
 800e296:	d007      	beq.n	800e2a8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02d      	beq.n	800e2fc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e2a0:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <tcp_input+0x560>)
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d029      	beq.n	800e2fc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f040 8104 	bne.w	800e4ba <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e2b2:	69f8      	ldr	r0, [r7, #28]
 800e2b4:	f003 f9be 	bl	8011634 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e2b8:	e0ff      	b.n	800e4ba <tcp_input+0x722>
 800e2ba:	bf00      	nop
 800e2bc:	20004b88 	.word	0x20004b88
 800e2c0:	2000f580 	.word	0x2000f580
 800e2c4:	0801abc4 	.word	0x0801abc4
 800e2c8:	0801acf0 	.word	0x0801acf0
 800e2cc:	0801ac10 	.word	0x0801ac10
 800e2d0:	20012cb4 	.word	0x20012cb4
 800e2d4:	0801ad1c 	.word	0x0801ad1c
 800e2d8:	20012cc4 	.word	0x20012cc4
 800e2dc:	0801ad48 	.word	0x0801ad48
 800e2e0:	20012cbc 	.word	0x20012cbc
 800e2e4:	20004b78 	.word	0x20004b78
 800e2e8:	20004ba8 	.word	0x20004ba8
 800e2ec:	20004ba5 	.word	0x20004ba5
 800e2f0:	20004ba0 	.word	0x20004ba0
 800e2f4:	20004ba4 	.word	0x20004ba4
 800e2f8:	20004ba2 	.word	0x20004ba2
      }
    }
    tcp_input_pcb = pcb;
 800e2fc:	4a9c      	ldr	r2, [pc, #624]	; (800e570 <tcp_input+0x7d8>)
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e302:	69f8      	ldr	r0, [r7, #28]
 800e304:	f000 fb0a 	bl	800e91c <tcp_process>
 800e308:	4603      	mov	r3, r0
 800e30a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e30c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e310:	f113 0f0d 	cmn.w	r3, #13
 800e314:	f000 80d3 	beq.w	800e4be <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e318:	4b96      	ldr	r3, [pc, #600]	; (800e574 <tcp_input+0x7dc>)
 800e31a:	781b      	ldrb	r3, [r3, #0]
 800e31c:	f003 0308 	and.w	r3, r3, #8
 800e320:	2b00      	cmp	r3, #0
 800e322:	d015      	beq.n	800e350 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d008      	beq.n	800e340 <tcp_input+0x5a8>
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	6912      	ldr	r2, [r2, #16]
 800e338:	f06f 010d 	mvn.w	r1, #13
 800e33c:	4610      	mov	r0, r2
 800e33e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e340:	69f9      	ldr	r1, [r7, #28]
 800e342:	488d      	ldr	r0, [pc, #564]	; (800e578 <tcp_input+0x7e0>)
 800e344:	f7ff fbb0 	bl	800daa8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e348:	69f8      	ldr	r0, [r7, #28]
 800e34a:	f7fe f99d 	bl	800c688 <tcp_free>
 800e34e:	e0c1      	b.n	800e4d4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e354:	4b89      	ldr	r3, [pc, #548]	; (800e57c <tcp_input+0x7e4>)
 800e356:	881b      	ldrh	r3, [r3, #0]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d01d      	beq.n	800e398 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e35c:	4b87      	ldr	r3, [pc, #540]	; (800e57c <tcp_input+0x7e4>)
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00a      	beq.n	800e382 <tcp_input+0x5ea>
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e372:	69fa      	ldr	r2, [r7, #28]
 800e374:	6910      	ldr	r0, [r2, #16]
 800e376:	89fa      	ldrh	r2, [r7, #14]
 800e378:	69f9      	ldr	r1, [r7, #28]
 800e37a:	4798      	blx	r3
 800e37c:	4603      	mov	r3, r0
 800e37e:	74fb      	strb	r3, [r7, #19]
 800e380:	e001      	b.n	800e386 <tcp_input+0x5ee>
 800e382:	2300      	movs	r3, #0
 800e384:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e386:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e38a:	f113 0f0d 	cmn.w	r3, #13
 800e38e:	f000 8098 	beq.w	800e4c2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e392:	4b7a      	ldr	r3, [pc, #488]	; (800e57c <tcp_input+0x7e4>)
 800e394:	2200      	movs	r2, #0
 800e396:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e398:	69f8      	ldr	r0, [r7, #28]
 800e39a:	f000 f907 	bl	800e5ac <tcp_input_delayed_close>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f040 8090 	bne.w	800e4c6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e3a6:	4b76      	ldr	r3, [pc, #472]	; (800e580 <tcp_input+0x7e8>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d041      	beq.n	800e432 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d006      	beq.n	800e3c4 <tcp_input+0x62c>
 800e3b6:	4b73      	ldr	r3, [pc, #460]	; (800e584 <tcp_input+0x7ec>)
 800e3b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e3bc:	4972      	ldr	r1, [pc, #456]	; (800e588 <tcp_input+0x7f0>)
 800e3be:	4873      	ldr	r0, [pc, #460]	; (800e58c <tcp_input+0x7f4>)
 800e3c0:	f008 ffec 	bl	801739c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	8b5b      	ldrh	r3, [r3, #26]
 800e3c8:	f003 0310 	and.w	r3, r3, #16
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d008      	beq.n	800e3e2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e3d0:	4b6b      	ldr	r3, [pc, #428]	; (800e580 <tcp_input+0x7e8>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fd fe9b 	bl	800c110 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e3da:	69f8      	ldr	r0, [r7, #28]
 800e3dc:	f7fe fc3c 	bl	800cc58 <tcp_abort>
            goto aborted;
 800e3e0:	e078      	b.n	800e4d4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00c      	beq.n	800e406 <tcp_input+0x66e>
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	6918      	ldr	r0, [r3, #16]
 800e3f6:	4b62      	ldr	r3, [pc, #392]	; (800e580 <tcp_input+0x7e8>)
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	69f9      	ldr	r1, [r7, #28]
 800e3fe:	47a0      	blx	r4
 800e400:	4603      	mov	r3, r0
 800e402:	74fb      	strb	r3, [r7, #19]
 800e404:	e008      	b.n	800e418 <tcp_input+0x680>
 800e406:	4b5e      	ldr	r3, [pc, #376]	; (800e580 <tcp_input+0x7e8>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	2300      	movs	r3, #0
 800e40c:	69f9      	ldr	r1, [r7, #28]
 800e40e:	2000      	movs	r0, #0
 800e410:	f7ff f952 	bl	800d6b8 <tcp_recv_null>
 800e414:	4603      	mov	r3, r0
 800e416:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e418:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e41c:	f113 0f0d 	cmn.w	r3, #13
 800e420:	d053      	beq.n	800e4ca <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e422:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d003      	beq.n	800e432 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e42a:	4b55      	ldr	r3, [pc, #340]	; (800e580 <tcp_input+0x7e8>)
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e432:	4b50      	ldr	r3, [pc, #320]	; (800e574 <tcp_input+0x7dc>)
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	f003 0320 	and.w	r3, r3, #32
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d030      	beq.n	800e4a0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e442:	2b00      	cmp	r3, #0
 800e444:	d009      	beq.n	800e45a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e44a:	7b5a      	ldrb	r2, [r3, #13]
 800e44c:	69fb      	ldr	r3, [r7, #28]
 800e44e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e450:	f042 0220 	orr.w	r2, r2, #32
 800e454:	b2d2      	uxtb	r2, r2
 800e456:	735a      	strb	r2, [r3, #13]
 800e458:	e022      	b.n	800e4a0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e45a:	69fb      	ldr	r3, [r7, #28]
 800e45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e45e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e462:	d005      	beq.n	800e470 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e468:	3301      	adds	r3, #1
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00b      	beq.n	800e492 <tcp_input+0x6fa>
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	6918      	ldr	r0, [r3, #16]
 800e484:	2300      	movs	r3, #0
 800e486:	2200      	movs	r2, #0
 800e488:	69f9      	ldr	r1, [r7, #28]
 800e48a:	47a0      	blx	r4
 800e48c:	4603      	mov	r3, r0
 800e48e:	74fb      	strb	r3, [r7, #19]
 800e490:	e001      	b.n	800e496 <tcp_input+0x6fe>
 800e492:	2300      	movs	r3, #0
 800e494:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e496:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e49a:	f113 0f0d 	cmn.w	r3, #13
 800e49e:	d016      	beq.n	800e4ce <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e4a0:	4b33      	ldr	r3, [pc, #204]	; (800e570 <tcp_input+0x7d8>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e4a6:	69f8      	ldr	r0, [r7, #28]
 800e4a8:	f000 f880 	bl	800e5ac <tcp_input_delayed_close>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d10f      	bne.n	800e4d2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e4b2:	69f8      	ldr	r0, [r7, #28]
 800e4b4:	f002 fab8 	bl	8010a28 <tcp_output>
 800e4b8:	e00c      	b.n	800e4d4 <tcp_input+0x73c>
        goto aborted;
 800e4ba:	bf00      	nop
 800e4bc:	e00a      	b.n	800e4d4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e4be:	bf00      	nop
 800e4c0:	e008      	b.n	800e4d4 <tcp_input+0x73c>
              goto aborted;
 800e4c2:	bf00      	nop
 800e4c4:	e006      	b.n	800e4d4 <tcp_input+0x73c>
          goto aborted;
 800e4c6:	bf00      	nop
 800e4c8:	e004      	b.n	800e4d4 <tcp_input+0x73c>
            goto aborted;
 800e4ca:	bf00      	nop
 800e4cc:	e002      	b.n	800e4d4 <tcp_input+0x73c>
              goto aborted;
 800e4ce:	bf00      	nop
 800e4d0:	e000      	b.n	800e4d4 <tcp_input+0x73c>
          goto aborted;
 800e4d2:	bf00      	nop
    tcp_input_pcb = NULL;
 800e4d4:	4b26      	ldr	r3, [pc, #152]	; (800e570 <tcp_input+0x7d8>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e4da:	4b29      	ldr	r3, [pc, #164]	; (800e580 <tcp_input+0x7e8>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e4e0:	4b2b      	ldr	r3, [pc, #172]	; (800e590 <tcp_input+0x7f8>)
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d03f      	beq.n	800e568 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e4e8:	4b29      	ldr	r3, [pc, #164]	; (800e590 <tcp_input+0x7f8>)
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fd fe0f 	bl	800c110 <pbuf_free>
      inseg.p = NULL;
 800e4f2:	4b27      	ldr	r3, [pc, #156]	; (800e590 <tcp_input+0x7f8>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e4f8:	e036      	b.n	800e568 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e4fa:	4b26      	ldr	r3, [pc, #152]	; (800e594 <tcp_input+0x7fc>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	899b      	ldrh	r3, [r3, #12]
 800e500:	b29b      	uxth	r3, r3
 800e502:	4618      	mov	r0, r3
 800e504:	f7fc fa4c 	bl	800a9a0 <lwip_htons>
 800e508:	4603      	mov	r3, r0
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	f003 0304 	and.w	r3, r3, #4
 800e510:	2b00      	cmp	r3, #0
 800e512:	d118      	bne.n	800e546 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e514:	4b20      	ldr	r3, [pc, #128]	; (800e598 <tcp_input+0x800>)
 800e516:	6819      	ldr	r1, [r3, #0]
 800e518:	4b20      	ldr	r3, [pc, #128]	; (800e59c <tcp_input+0x804>)
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	461a      	mov	r2, r3
 800e51e:	4b20      	ldr	r3, [pc, #128]	; (800e5a0 <tcp_input+0x808>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e524:	4b1b      	ldr	r3, [pc, #108]	; (800e594 <tcp_input+0x7fc>)
 800e526:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e528:	885b      	ldrh	r3, [r3, #2]
 800e52a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e52c:	4a19      	ldr	r2, [pc, #100]	; (800e594 <tcp_input+0x7fc>)
 800e52e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e530:	8812      	ldrh	r2, [r2, #0]
 800e532:	b292      	uxth	r2, r2
 800e534:	9202      	str	r2, [sp, #8]
 800e536:	9301      	str	r3, [sp, #4]
 800e538:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <tcp_input+0x80c>)
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	4b1a      	ldr	r3, [pc, #104]	; (800e5a8 <tcp_input+0x810>)
 800e53e:	4602      	mov	r2, r0
 800e540:	2000      	movs	r0, #0
 800e542:	f003 f825 	bl	8011590 <tcp_rst>
    pbuf_free(p);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7fd fde2 	bl	800c110 <pbuf_free>
  return;
 800e54c:	e00c      	b.n	800e568 <tcp_input+0x7d0>
    goto dropped;
 800e54e:	bf00      	nop
 800e550:	e006      	b.n	800e560 <tcp_input+0x7c8>
    goto dropped;
 800e552:	bf00      	nop
 800e554:	e004      	b.n	800e560 <tcp_input+0x7c8>
    goto dropped;
 800e556:	bf00      	nop
 800e558:	e002      	b.n	800e560 <tcp_input+0x7c8>
      goto dropped;
 800e55a:	bf00      	nop
 800e55c:	e000      	b.n	800e560 <tcp_input+0x7c8>
      goto dropped;
 800e55e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7fd fdd5 	bl	800c110 <pbuf_free>
 800e566:	e000      	b.n	800e56a <tcp_input+0x7d2>
  return;
 800e568:	bf00      	nop
}
 800e56a:	3724      	adds	r7, #36	; 0x24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd90      	pop	{r4, r7, pc}
 800e570:	20012cc8 	.word	0x20012cc8
 800e574:	20004ba5 	.word	0x20004ba5
 800e578:	20012cb4 	.word	0x20012cb4
 800e57c:	20004ba0 	.word	0x20004ba0
 800e580:	20004ba8 	.word	0x20004ba8
 800e584:	0801abc4 	.word	0x0801abc4
 800e588:	0801ad78 	.word	0x0801ad78
 800e58c:	0801ac10 	.word	0x0801ac10
 800e590:	20004b78 	.word	0x20004b78
 800e594:	20004b88 	.word	0x20004b88
 800e598:	20004b9c 	.word	0x20004b9c
 800e59c:	20004ba2 	.word	0x20004ba2
 800e5a0:	20004b98 	.word	0x20004b98
 800e5a4:	2000f590 	.word	0x2000f590
 800e5a8:	2000f594 	.word	0x2000f594

0800e5ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d106      	bne.n	800e5c8 <tcp_input_delayed_close+0x1c>
 800e5ba:	4b17      	ldr	r3, [pc, #92]	; (800e618 <tcp_input_delayed_close+0x6c>)
 800e5bc:	f240 225a 	movw	r2, #602	; 0x25a
 800e5c0:	4916      	ldr	r1, [pc, #88]	; (800e61c <tcp_input_delayed_close+0x70>)
 800e5c2:	4817      	ldr	r0, [pc, #92]	; (800e620 <tcp_input_delayed_close+0x74>)
 800e5c4:	f008 feea 	bl	801739c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e5c8:	4b16      	ldr	r3, [pc, #88]	; (800e624 <tcp_input_delayed_close+0x78>)
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	f003 0310 	and.w	r3, r3, #16
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d01c      	beq.n	800e60e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	8b5b      	ldrh	r3, [r3, #26]
 800e5d8:	f003 0310 	and.w	r3, r3, #16
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10d      	bne.n	800e5fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d008      	beq.n	800e5fc <tcp_input_delayed_close+0x50>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	6912      	ldr	r2, [r2, #16]
 800e5f4:	f06f 010e 	mvn.w	r1, #14
 800e5f8:	4610      	mov	r0, r2
 800e5fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	480a      	ldr	r0, [pc, #40]	; (800e628 <tcp_input_delayed_close+0x7c>)
 800e600:	f7ff fa52 	bl	800daa8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f7fe f83f 	bl	800c688 <tcp_free>
    return 1;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e000      	b.n	800e610 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e60e:	2300      	movs	r3, #0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	0801abc4 	.word	0x0801abc4
 800e61c:	0801ad94 	.word	0x0801ad94
 800e620:	0801ac10 	.word	0x0801ac10
 800e624:	20004ba5 	.word	0x20004ba5
 800e628:	20012cb4 	.word	0x20012cb4

0800e62c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b08b      	sub	sp, #44	; 0x2c
 800e630:	af04      	add	r7, sp, #16
 800e632:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e634:	4b6f      	ldr	r3, [pc, #444]	; (800e7f4 <tcp_listen_input+0x1c8>)
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	f003 0304 	and.w	r3, r3, #4
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f040 80d2 	bne.w	800e7e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d106      	bne.n	800e656 <tcp_listen_input+0x2a>
 800e648:	4b6b      	ldr	r3, [pc, #428]	; (800e7f8 <tcp_listen_input+0x1cc>)
 800e64a:	f240 2281 	movw	r2, #641	; 0x281
 800e64e:	496b      	ldr	r1, [pc, #428]	; (800e7fc <tcp_listen_input+0x1d0>)
 800e650:	486b      	ldr	r0, [pc, #428]	; (800e800 <tcp_listen_input+0x1d4>)
 800e652:	f008 fea3 	bl	801739c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e656:	4b67      	ldr	r3, [pc, #412]	; (800e7f4 <tcp_listen_input+0x1c8>)
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	f003 0310 	and.w	r3, r3, #16
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d019      	beq.n	800e696 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e662:	4b68      	ldr	r3, [pc, #416]	; (800e804 <tcp_listen_input+0x1d8>)
 800e664:	6819      	ldr	r1, [r3, #0]
 800e666:	4b68      	ldr	r3, [pc, #416]	; (800e808 <tcp_listen_input+0x1dc>)
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	461a      	mov	r2, r3
 800e66c:	4b67      	ldr	r3, [pc, #412]	; (800e80c <tcp_listen_input+0x1e0>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e672:	4b67      	ldr	r3, [pc, #412]	; (800e810 <tcp_listen_input+0x1e4>)
 800e674:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e676:	885b      	ldrh	r3, [r3, #2]
 800e678:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e67a:	4a65      	ldr	r2, [pc, #404]	; (800e810 <tcp_listen_input+0x1e4>)
 800e67c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e67e:	8812      	ldrh	r2, [r2, #0]
 800e680:	b292      	uxth	r2, r2
 800e682:	9202      	str	r2, [sp, #8]
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	4b63      	ldr	r3, [pc, #396]	; (800e814 <tcp_listen_input+0x1e8>)
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	4b63      	ldr	r3, [pc, #396]	; (800e818 <tcp_listen_input+0x1ec>)
 800e68c:	4602      	mov	r2, r0
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f002 ff7e 	bl	8011590 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e694:	e0a9      	b.n	800e7ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e696:	4b57      	ldr	r3, [pc, #348]	; (800e7f4 <tcp_listen_input+0x1c8>)
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	f003 0302 	and.w	r3, r3, #2
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 80a3 	beq.w	800e7ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7d5b      	ldrb	r3, [r3, #21]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7ff f929 	bl	800d900 <tcp_alloc>
 800e6ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d111      	bne.n	800e6da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <tcp_listen_input+0xa8>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	699b      	ldr	r3, [r3, #24]
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	6910      	ldr	r0, [r2, #16]
 800e6c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	4798      	blx	r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	73bb      	strb	r3, [r7, #14]
      return;
 800e6d2:	e08b      	b.n	800e7ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e6d4:	23f0      	movs	r3, #240	; 0xf0
 800e6d6:	73bb      	strb	r3, [r7, #14]
      return;
 800e6d8:	e088      	b.n	800e7ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e6da:	4b50      	ldr	r3, [pc, #320]	; (800e81c <tcp_listen_input+0x1f0>)
 800e6dc:	695a      	ldr	r2, [r3, #20]
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e6e2:	4b4e      	ldr	r3, [pc, #312]	; (800e81c <tcp_listen_input+0x1f0>)
 800e6e4:	691a      	ldr	r2, [r3, #16]
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	8ada      	ldrh	r2, [r3, #22]
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e6f2:	4b47      	ldr	r3, [pc, #284]	; (800e810 <tcp_listen_input+0x1e4>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	881b      	ldrh	r3, [r3, #0]
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	2203      	movs	r2, #3
 800e702:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e704:	4b41      	ldr	r3, [pc, #260]	; (800e80c <tcp_listen_input+0x1e0>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	1c5a      	adds	r2, r3, #1
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e716:	6978      	ldr	r0, [r7, #20]
 800e718:	f7ff fa5a 	bl	800dbd0 <tcp_next_iss>
 800e71c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	693a      	ldr	r2, [r7, #16]
 800e722:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	693a      	ldr	r2, [r7, #16]
 800e728:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	693a      	ldr	r2, [r7, #16]
 800e72e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e736:	4b35      	ldr	r3, [pc, #212]	; (800e80c <tcp_listen_input+0x1e0>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	1e5a      	subs	r2, r3, #1
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	691a      	ldr	r2, [r3, #16]
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	7a5b      	ldrb	r3, [r3, #9]
 800e752:	f003 030c 	and.w	r3, r3, #12
 800e756:	b2da      	uxtb	r2, r3
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	7a1a      	ldrb	r2, [r3, #8]
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e764:	4b2e      	ldr	r3, [pc, #184]	; (800e820 <tcp_listen_input+0x1f4>)
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	60da      	str	r2, [r3, #12]
 800e76c:	4a2c      	ldr	r2, [pc, #176]	; (800e820 <tcp_listen_input+0x1f4>)
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	6013      	str	r3, [r2, #0]
 800e772:	f003 f8cf 	bl	8011914 <tcp_timer_needed>
 800e776:	4b2b      	ldr	r3, [pc, #172]	; (800e824 <tcp_listen_input+0x1f8>)
 800e778:	2201      	movs	r2, #1
 800e77a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e77c:	6978      	ldr	r0, [r7, #20]
 800e77e:	f001 fd8d 	bl	801029c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e782:	4b23      	ldr	r3, [pc, #140]	; (800e810 <tcp_listen_input+0x1e4>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	89db      	ldrh	r3, [r3, #14]
 800e788:	b29a      	uxth	r2, r3
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f006 fe5d 	bl	8015464 <ip4_route>
 800e7aa:	4601      	mov	r1, r0
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	f7ff fa32 	bl	800dc1c <tcp_eff_send_mss_netif>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e7c0:	2112      	movs	r1, #18
 800e7c2:	6978      	ldr	r0, [r7, #20]
 800e7c4:	f002 f842 	bl	801084c <tcp_enqueue_flags>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d004      	beq.n	800e7de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	6978      	ldr	r0, [r7, #20]
 800e7d8:	f7fe f980 	bl	800cadc <tcp_abandon>
      return;
 800e7dc:	e006      	b.n	800e7ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e7de:	6978      	ldr	r0, [r7, #20]
 800e7e0:	f002 f922 	bl	8010a28 <tcp_output>
  return;
 800e7e4:	e001      	b.n	800e7ea <tcp_listen_input+0x1be>
    return;
 800e7e6:	bf00      	nop
 800e7e8:	e000      	b.n	800e7ec <tcp_listen_input+0x1c0>
  return;
 800e7ea:	bf00      	nop
}
 800e7ec:	371c      	adds	r7, #28
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd90      	pop	{r4, r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20004ba4 	.word	0x20004ba4
 800e7f8:	0801abc4 	.word	0x0801abc4
 800e7fc:	0801adbc 	.word	0x0801adbc
 800e800:	0801ac10 	.word	0x0801ac10
 800e804:	20004b9c 	.word	0x20004b9c
 800e808:	20004ba2 	.word	0x20004ba2
 800e80c:	20004b98 	.word	0x20004b98
 800e810:	20004b88 	.word	0x20004b88
 800e814:	2000f590 	.word	0x2000f590
 800e818:	2000f594 	.word	0x2000f594
 800e81c:	2000f580 	.word	0x2000f580
 800e820:	20012cb4 	.word	0x20012cb4
 800e824:	20012cb0 	.word	0x20012cb0

0800e828 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af04      	add	r7, sp, #16
 800e82e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e830:	4b2f      	ldr	r3, [pc, #188]	; (800e8f0 <tcp_timewait_input+0xc8>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	f003 0304 	and.w	r3, r3, #4
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d153      	bne.n	800e8e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d106      	bne.n	800e850 <tcp_timewait_input+0x28>
 800e842:	4b2c      	ldr	r3, [pc, #176]	; (800e8f4 <tcp_timewait_input+0xcc>)
 800e844:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e848:	492b      	ldr	r1, [pc, #172]	; (800e8f8 <tcp_timewait_input+0xd0>)
 800e84a:	482c      	ldr	r0, [pc, #176]	; (800e8fc <tcp_timewait_input+0xd4>)
 800e84c:	f008 fda6 	bl	801739c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e850:	4b27      	ldr	r3, [pc, #156]	; (800e8f0 <tcp_timewait_input+0xc8>)
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	f003 0302 	and.w	r3, r3, #2
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d02a      	beq.n	800e8b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e85c:	4b28      	ldr	r3, [pc, #160]	; (800e900 <tcp_timewait_input+0xd8>)
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	2b00      	cmp	r3, #0
 800e868:	db2d      	blt.n	800e8c6 <tcp_timewait_input+0x9e>
 800e86a:	4b25      	ldr	r3, [pc, #148]	; (800e900 <tcp_timewait_input+0xd8>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	6879      	ldr	r1, [r7, #4]
 800e874:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e876:	440b      	add	r3, r1
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	dc23      	bgt.n	800e8c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e87e:	4b21      	ldr	r3, [pc, #132]	; (800e904 <tcp_timewait_input+0xdc>)
 800e880:	6819      	ldr	r1, [r3, #0]
 800e882:	4b21      	ldr	r3, [pc, #132]	; (800e908 <tcp_timewait_input+0xe0>)
 800e884:	881b      	ldrh	r3, [r3, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	4b1d      	ldr	r3, [pc, #116]	; (800e900 <tcp_timewait_input+0xd8>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e88e:	4b1f      	ldr	r3, [pc, #124]	; (800e90c <tcp_timewait_input+0xe4>)
 800e890:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e892:	885b      	ldrh	r3, [r3, #2]
 800e894:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e896:	4a1d      	ldr	r2, [pc, #116]	; (800e90c <tcp_timewait_input+0xe4>)
 800e898:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e89a:	8812      	ldrh	r2, [r2, #0]
 800e89c:	b292      	uxth	r2, r2
 800e89e:	9202      	str	r2, [sp, #8]
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	4b1b      	ldr	r3, [pc, #108]	; (800e910 <tcp_timewait_input+0xe8>)
 800e8a4:	9300      	str	r3, [sp, #0]
 800e8a6:	4b1b      	ldr	r3, [pc, #108]	; (800e914 <tcp_timewait_input+0xec>)
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f002 fe70 	bl	8011590 <tcp_rst>
      return;
 800e8b0:	e01b      	b.n	800e8ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e8b2:	4b0f      	ldr	r3, [pc, #60]	; (800e8f0 <tcp_timewait_input+0xc8>)
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	f003 0301 	and.w	r3, r3, #1
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d003      	beq.n	800e8c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e8be:	4b16      	ldr	r3, [pc, #88]	; (800e918 <tcp_timewait_input+0xf0>)
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e8c6:	4b10      	ldr	r3, [pc, #64]	; (800e908 <tcp_timewait_input+0xe0>)
 800e8c8:	881b      	ldrh	r3, [r3, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00c      	beq.n	800e8e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	8b5b      	ldrh	r3, [r3, #26]
 800e8d2:	f043 0302 	orr.w	r3, r3, #2
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f002 f8a3 	bl	8010a28 <tcp_output>
  }
  return;
 800e8e2:	e001      	b.n	800e8e8 <tcp_timewait_input+0xc0>
    return;
 800e8e4:	bf00      	nop
 800e8e6:	e000      	b.n	800e8ea <tcp_timewait_input+0xc2>
  return;
 800e8e8:	bf00      	nop
}
 800e8ea:	3708      	adds	r7, #8
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20004ba4 	.word	0x20004ba4
 800e8f4:	0801abc4 	.word	0x0801abc4
 800e8f8:	0801addc 	.word	0x0801addc
 800e8fc:	0801ac10 	.word	0x0801ac10
 800e900:	20004b98 	.word	0x20004b98
 800e904:	20004b9c 	.word	0x20004b9c
 800e908:	20004ba2 	.word	0x20004ba2
 800e90c:	20004b88 	.word	0x20004b88
 800e910:	2000f590 	.word	0x2000f590
 800e914:	2000f594 	.word	0x2000f594
 800e918:	20012cb8 	.word	0x20012cb8

0800e91c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e91c:	b590      	push	{r4, r7, lr}
 800e91e:	b08d      	sub	sp, #52	; 0x34
 800e920:	af04      	add	r7, sp, #16
 800e922:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e924:	2300      	movs	r3, #0
 800e926:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e928:	2300      	movs	r3, #0
 800e92a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d106      	bne.n	800e940 <tcp_process+0x24>
 800e932:	4ba5      	ldr	r3, [pc, #660]	; (800ebc8 <tcp_process+0x2ac>)
 800e934:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e938:	49a4      	ldr	r1, [pc, #656]	; (800ebcc <tcp_process+0x2b0>)
 800e93a:	48a5      	ldr	r0, [pc, #660]	; (800ebd0 <tcp_process+0x2b4>)
 800e93c:	f008 fd2e 	bl	801739c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e940:	4ba4      	ldr	r3, [pc, #656]	; (800ebd4 <tcp_process+0x2b8>)
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	f003 0304 	and.w	r3, r3, #4
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d04e      	beq.n	800e9ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	7d1b      	ldrb	r3, [r3, #20]
 800e950:	2b02      	cmp	r3, #2
 800e952:	d108      	bne.n	800e966 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e958:	4b9f      	ldr	r3, [pc, #636]	; (800ebd8 <tcp_process+0x2bc>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d123      	bne.n	800e9a8 <tcp_process+0x8c>
        acceptable = 1;
 800e960:	2301      	movs	r3, #1
 800e962:	76fb      	strb	r3, [r7, #27]
 800e964:	e020      	b.n	800e9a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e96a:	4b9c      	ldr	r3, [pc, #624]	; (800ebdc <tcp_process+0x2c0>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d102      	bne.n	800e978 <tcp_process+0x5c>
        acceptable = 1;
 800e972:	2301      	movs	r3, #1
 800e974:	76fb      	strb	r3, [r7, #27]
 800e976:	e017      	b.n	800e9a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e978:	4b98      	ldr	r3, [pc, #608]	; (800ebdc <tcp_process+0x2c0>)
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	db10      	blt.n	800e9a8 <tcp_process+0x8c>
 800e986:	4b95      	ldr	r3, [pc, #596]	; (800ebdc <tcp_process+0x2c0>)
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98e:	6879      	ldr	r1, [r7, #4]
 800e990:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e992:	440b      	add	r3, r1
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	dc06      	bgt.n	800e9a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	8b5b      	ldrh	r3, [r3, #26]
 800e99e:	f043 0302 	orr.w	r3, r3, #2
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e9a8:	7efb      	ldrb	r3, [r7, #27]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d01b      	beq.n	800e9e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	7d1b      	ldrb	r3, [r3, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <tcp_process+0xa8>
 800e9b6:	4b84      	ldr	r3, [pc, #528]	; (800ebc8 <tcp_process+0x2ac>)
 800e9b8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e9bc:	4988      	ldr	r1, [pc, #544]	; (800ebe0 <tcp_process+0x2c4>)
 800e9be:	4884      	ldr	r0, [pc, #528]	; (800ebd0 <tcp_process+0x2b4>)
 800e9c0:	f008 fcec 	bl	801739c <iprintf>
      recv_flags |= TF_RESET;
 800e9c4:	4b87      	ldr	r3, [pc, #540]	; (800ebe4 <tcp_process+0x2c8>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	f043 0308 	orr.w	r3, r3, #8
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	4b85      	ldr	r3, [pc, #532]	; (800ebe4 <tcp_process+0x2c8>)
 800e9d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	8b5b      	ldrh	r3, [r3, #26]
 800e9d6:	f023 0301 	bic.w	r3, r3, #1
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e9e0:	f06f 030d 	mvn.w	r3, #13
 800e9e4:	e37a      	b.n	800f0dc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e378      	b.n	800f0dc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e9ea:	4b7a      	ldr	r3, [pc, #488]	; (800ebd4 <tcp_process+0x2b8>)
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	f003 0302 	and.w	r3, r3, #2
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d010      	beq.n	800ea18 <tcp_process+0xfc>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	7d1b      	ldrb	r3, [r3, #20]
 800e9fa:	2b02      	cmp	r3, #2
 800e9fc:	d00c      	beq.n	800ea18 <tcp_process+0xfc>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	7d1b      	ldrb	r3, [r3, #20]
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d008      	beq.n	800ea18 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	8b5b      	ldrh	r3, [r3, #26]
 800ea0a:	f043 0302 	orr.w	r3, r3, #2
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ea14:	2300      	movs	r3, #0
 800ea16:	e361      	b.n	800f0dc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	8b5b      	ldrh	r3, [r3, #26]
 800ea1c:	f003 0310 	and.w	r3, r3, #16
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d103      	bne.n	800ea2c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ea24:	4b70      	ldr	r3, [pc, #448]	; (800ebe8 <tcp_process+0x2cc>)
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f001 fc2d 	bl	801029c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	7d1b      	ldrb	r3, [r3, #20]
 800ea46:	3b02      	subs	r3, #2
 800ea48:	2b07      	cmp	r3, #7
 800ea4a:	f200 8337 	bhi.w	800f0bc <tcp_process+0x7a0>
 800ea4e:	a201      	add	r2, pc, #4	; (adr r2, 800ea54 <tcp_process+0x138>)
 800ea50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea54:	0800ea75 	.word	0x0800ea75
 800ea58:	0800eca5 	.word	0x0800eca5
 800ea5c:	0800ee1d 	.word	0x0800ee1d
 800ea60:	0800ee47 	.word	0x0800ee47
 800ea64:	0800ef6b 	.word	0x0800ef6b
 800ea68:	0800ee1d 	.word	0x0800ee1d
 800ea6c:	0800eff7 	.word	0x0800eff7
 800ea70:	0800f087 	.word	0x0800f087
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea74:	4b57      	ldr	r3, [pc, #348]	; (800ebd4 <tcp_process+0x2b8>)
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	f003 0310 	and.w	r3, r3, #16
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 80e4 	beq.w	800ec4a <tcp_process+0x32e>
 800ea82:	4b54      	ldr	r3, [pc, #336]	; (800ebd4 <tcp_process+0x2b8>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	f003 0302 	and.w	r3, r3, #2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80dd 	beq.w	800ec4a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	4b50      	ldr	r3, [pc, #320]	; (800ebd8 <tcp_process+0x2bc>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	f040 80d5 	bne.w	800ec4a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800eaa0:	4b4e      	ldr	r3, [pc, #312]	; (800ebdc <tcp_process+0x2c0>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	1c5a      	adds	r2, r3, #1
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800eab2:	4b49      	ldr	r3, [pc, #292]	; (800ebd8 <tcp_process+0x2bc>)
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800eaba:	4b4c      	ldr	r3, [pc, #304]	; (800ebec <tcp_process+0x2d0>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	89db      	ldrh	r3, [r3, #14]
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ead4:	4b41      	ldr	r3, [pc, #260]	; (800ebdc <tcp_process+0x2c0>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	1e5a      	subs	r2, r3, #1
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2204      	movs	r2, #4
 800eae2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	3304      	adds	r3, #4
 800eaec:	4618      	mov	r0, r3
 800eaee:	f006 fcb9 	bl	8015464 <ip4_route>
 800eaf2:	4601      	mov	r1, r0
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4620      	mov	r0, r4
 800eafc:	f7ff f88e 	bl	800dc1c <tcp_eff_send_mss_netif>
 800eb00:	4603      	mov	r3, r0
 800eb02:	461a      	mov	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb0c:	009a      	lsls	r2, r3, #2
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	f241 111c 	movw	r1, #4380	; 0x111c
 800eb18:	428b      	cmp	r3, r1
 800eb1a:	bf38      	it	cc
 800eb1c:	460b      	movcc	r3, r1
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d204      	bcs.n	800eb2c <tcp_process+0x210>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	e00d      	b.n	800eb48 <tcp_process+0x22c>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	f241 121c 	movw	r2, #4380	; 0x111c
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d904      	bls.n	800eb44 <tcp_process+0x228>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb3e:	005b      	lsls	r3, r3, #1
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	e001      	b.n	800eb48 <tcp_process+0x22c>
 800eb44:	f241 131c 	movw	r3, #4380	; 0x111c
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <tcp_process+0x24a>
 800eb58:	4b1b      	ldr	r3, [pc, #108]	; (800ebc8 <tcp_process+0x2ac>)
 800eb5a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eb5e:	4924      	ldr	r1, [pc, #144]	; (800ebf0 <tcp_process+0x2d4>)
 800eb60:	481b      	ldr	r0, [pc, #108]	; (800ebd0 <tcp_process+0x2b4>)
 800eb62:	f008 fc1b 	bl	801739c <iprintf>
        --pcb->snd_queuelen;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d111      	bne.n	800eba6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb86:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <tcp_process+0x280>
 800eb8e:	4b0e      	ldr	r3, [pc, #56]	; (800ebc8 <tcp_process+0x2ac>)
 800eb90:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eb94:	4917      	ldr	r1, [pc, #92]	; (800ebf4 <tcp_process+0x2d8>)
 800eb96:	480e      	ldr	r0, [pc, #56]	; (800ebd0 <tcp_process+0x2b4>)
 800eb98:	f008 fc00 	bl	801739c <iprintf>
          pcb->unsent = rseg->next;
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	66da      	str	r2, [r3, #108]	; 0x6c
 800eba4:	e003      	b.n	800ebae <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ebae:	69f8      	ldr	r0, [r7, #28]
 800ebb0:	f7fe fd3d 	bl	800d62e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d11d      	bne.n	800ebf8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebc2:	861a      	strh	r2, [r3, #48]	; 0x30
 800ebc4:	e01f      	b.n	800ec06 <tcp_process+0x2ea>
 800ebc6:	bf00      	nop
 800ebc8:	0801abc4 	.word	0x0801abc4
 800ebcc:	0801adfc 	.word	0x0801adfc
 800ebd0:	0801ac10 	.word	0x0801ac10
 800ebd4:	20004ba4 	.word	0x20004ba4
 800ebd8:	20004b9c 	.word	0x20004b9c
 800ebdc:	20004b98 	.word	0x20004b98
 800ebe0:	0801ae18 	.word	0x0801ae18
 800ebe4:	20004ba5 	.word	0x20004ba5
 800ebe8:	20012cb8 	.word	0x20012cb8
 800ebec:	20004b88 	.word	0x20004b88
 800ebf0:	0801ae38 	.word	0x0801ae38
 800ebf4:	0801ae50 	.word	0x0801ae50
        } else {
          pcb->rtime = 0;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00a      	beq.n	800ec26 <tcp_process+0x30a>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	6910      	ldr	r0, [r2, #16]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	6879      	ldr	r1, [r7, #4]
 800ec1e:	4798      	blx	r3
 800ec20:	4603      	mov	r3, r0
 800ec22:	76bb      	strb	r3, [r7, #26]
 800ec24:	e001      	b.n	800ec2a <tcp_process+0x30e>
 800ec26:	2300      	movs	r3, #0
 800ec28:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ec2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec2e:	f113 0f0d 	cmn.w	r3, #13
 800ec32:	d102      	bne.n	800ec3a <tcp_process+0x31e>
          return ERR_ABRT;
 800ec34:	f06f 030c 	mvn.w	r3, #12
 800ec38:	e250      	b.n	800f0dc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	8b5b      	ldrh	r3, [r3, #26]
 800ec3e:	f043 0302 	orr.w	r3, r3, #2
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ec48:	e23a      	b.n	800f0c0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ec4a:	4b9d      	ldr	r3, [pc, #628]	; (800eec0 <tcp_process+0x5a4>)
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	f003 0310 	and.w	r3, r3, #16
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f000 8234 	beq.w	800f0c0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec58:	4b9a      	ldr	r3, [pc, #616]	; (800eec4 <tcp_process+0x5a8>)
 800ec5a:	6819      	ldr	r1, [r3, #0]
 800ec5c:	4b9a      	ldr	r3, [pc, #616]	; (800eec8 <tcp_process+0x5ac>)
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	461a      	mov	r2, r3
 800ec62:	4b9a      	ldr	r3, [pc, #616]	; (800eecc <tcp_process+0x5b0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec68:	4b99      	ldr	r3, [pc, #612]	; (800eed0 <tcp_process+0x5b4>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec6c:	885b      	ldrh	r3, [r3, #2]
 800ec6e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec70:	4a97      	ldr	r2, [pc, #604]	; (800eed0 <tcp_process+0x5b4>)
 800ec72:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec74:	8812      	ldrh	r2, [r2, #0]
 800ec76:	b292      	uxth	r2, r2
 800ec78:	9202      	str	r2, [sp, #8]
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	4b95      	ldr	r3, [pc, #596]	; (800eed4 <tcp_process+0x5b8>)
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	4b95      	ldr	r3, [pc, #596]	; (800eed8 <tcp_process+0x5bc>)
 800ec82:	4602      	mov	r2, r0
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f002 fc83 	bl	8011590 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec90:	2b05      	cmp	r3, #5
 800ec92:	f200 8215 	bhi.w	800f0c0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f002 fa4d 	bl	801113c <tcp_rexmit_rto>
      break;
 800eca2:	e20d      	b.n	800f0c0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800eca4:	4b86      	ldr	r3, [pc, #536]	; (800eec0 <tcp_process+0x5a4>)
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	f003 0310 	and.w	r3, r3, #16
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 80a1 	beq.w	800edf4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ecb2:	4b84      	ldr	r3, [pc, #528]	; (800eec4 <tcp_process+0x5a8>)
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	db7e      	blt.n	800edc0 <tcp_process+0x4a4>
 800ecc2:	4b80      	ldr	r3, [pc, #512]	; (800eec4 <tcp_process+0x5a8>)
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dc77      	bgt.n	800edc0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2204      	movs	r2, #4
 800ecd4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d102      	bne.n	800ece4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ecde:	23fa      	movs	r3, #250	; 0xfa
 800ece0:	76bb      	strb	r3, [r7, #26]
 800ece2:	e01d      	b.n	800ed20 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <tcp_process+0x3e0>
 800ecee:	4b7b      	ldr	r3, [pc, #492]	; (800eedc <tcp_process+0x5c0>)
 800ecf0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ecf4:	497a      	ldr	r1, [pc, #488]	; (800eee0 <tcp_process+0x5c4>)
 800ecf6:	487b      	ldr	r0, [pc, #492]	; (800eee4 <tcp_process+0x5c8>)
 800ecf8:	f008 fb50 	bl	801739c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00a      	beq.n	800ed1c <tcp_process+0x400>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed0a:	699b      	ldr	r3, [r3, #24]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	6910      	ldr	r0, [r2, #16]
 800ed10:	2200      	movs	r2, #0
 800ed12:	6879      	ldr	r1, [r7, #4]
 800ed14:	4798      	blx	r3
 800ed16:	4603      	mov	r3, r0
 800ed18:	76bb      	strb	r3, [r7, #26]
 800ed1a:	e001      	b.n	800ed20 <tcp_process+0x404>
 800ed1c:	23f0      	movs	r3, #240	; 0xf0
 800ed1e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ed20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00a      	beq.n	800ed3e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ed28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed2c:	f113 0f0d 	cmn.w	r3, #13
 800ed30:	d002      	beq.n	800ed38 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7fd ff90 	bl	800cc58 <tcp_abort>
            }
            return ERR_ABRT;
 800ed38:	f06f 030c 	mvn.w	r3, #12
 800ed3c:	e1ce      	b.n	800f0dc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fae0 	bl	800f304 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ed44:	4b68      	ldr	r3, [pc, #416]	; (800eee8 <tcp_process+0x5cc>)
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d005      	beq.n	800ed58 <tcp_process+0x43c>
            recv_acked--;
 800ed4c:	4b66      	ldr	r3, [pc, #408]	; (800eee8 <tcp_process+0x5cc>)
 800ed4e:	881b      	ldrh	r3, [r3, #0]
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	4b64      	ldr	r3, [pc, #400]	; (800eee8 <tcp_process+0x5cc>)
 800ed56:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed5c:	009a      	lsls	r2, r3, #2
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	f241 111c 	movw	r1, #4380	; 0x111c
 800ed68:	428b      	cmp	r3, r1
 800ed6a:	bf38      	it	cc
 800ed6c:	460b      	movcc	r3, r1
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d204      	bcs.n	800ed7c <tcp_process+0x460>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	e00d      	b.n	800ed98 <tcp_process+0x47c>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed80:	005b      	lsls	r3, r3, #1
 800ed82:	f241 121c 	movw	r2, #4380	; 0x111c
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d904      	bls.n	800ed94 <tcp_process+0x478>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed8e:	005b      	lsls	r3, r3, #1
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	e001      	b.n	800ed98 <tcp_process+0x47c>
 800ed94:	f241 131c 	movw	r3, #4380	; 0x111c
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ed9e:	4b53      	ldr	r3, [pc, #332]	; (800eeec <tcp_process+0x5d0>)
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	f003 0320 	and.w	r3, r3, #32
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d037      	beq.n	800ee1a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	8b5b      	ldrh	r3, [r3, #26]
 800edae:	f043 0302 	orr.w	r3, r3, #2
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2207      	movs	r2, #7
 800edbc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800edbe:	e02c      	b.n	800ee1a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edc0:	4b40      	ldr	r3, [pc, #256]	; (800eec4 <tcp_process+0x5a8>)
 800edc2:	6819      	ldr	r1, [r3, #0]
 800edc4:	4b40      	ldr	r3, [pc, #256]	; (800eec8 <tcp_process+0x5ac>)
 800edc6:	881b      	ldrh	r3, [r3, #0]
 800edc8:	461a      	mov	r2, r3
 800edca:	4b40      	ldr	r3, [pc, #256]	; (800eecc <tcp_process+0x5b0>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edd0:	4b3f      	ldr	r3, [pc, #252]	; (800eed0 <tcp_process+0x5b4>)
 800edd2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edd4:	885b      	ldrh	r3, [r3, #2]
 800edd6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edd8:	4a3d      	ldr	r2, [pc, #244]	; (800eed0 <tcp_process+0x5b4>)
 800edda:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eddc:	8812      	ldrh	r2, [r2, #0]
 800edde:	b292      	uxth	r2, r2
 800ede0:	9202      	str	r2, [sp, #8]
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	4b3b      	ldr	r3, [pc, #236]	; (800eed4 <tcp_process+0x5b8>)
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	4b3b      	ldr	r3, [pc, #236]	; (800eed8 <tcp_process+0x5bc>)
 800edea:	4602      	mov	r2, r0
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f002 fbcf 	bl	8011590 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800edf2:	e167      	b.n	800f0c4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800edf4:	4b32      	ldr	r3, [pc, #200]	; (800eec0 <tcp_process+0x5a4>)
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	f003 0302 	and.w	r3, r3, #2
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	f000 8161 	beq.w	800f0c4 <tcp_process+0x7a8>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee06:	1e5a      	subs	r2, r3, #1
 800ee08:	4b30      	ldr	r3, [pc, #192]	; (800eecc <tcp_process+0x5b0>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	f040 8159 	bne.w	800f0c4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f002 f9b4 	bl	8011180 <tcp_rexmit>
      break;
 800ee18:	e154      	b.n	800f0c4 <tcp_process+0x7a8>
 800ee1a:	e153      	b.n	800f0c4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 fa71 	bl	800f304 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ee22:	4b32      	ldr	r3, [pc, #200]	; (800eeec <tcp_process+0x5d0>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	f003 0320 	and.w	r3, r3, #32
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f000 814c 	beq.w	800f0c8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	8b5b      	ldrh	r3, [r3, #26]
 800ee34:	f043 0302 	orr.w	r3, r3, #2
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2207      	movs	r2, #7
 800ee42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ee44:	e140      	b.n	800f0c8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 fa5c 	bl	800f304 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee4c:	4b27      	ldr	r3, [pc, #156]	; (800eeec <tcp_process+0x5d0>)
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	f003 0320 	and.w	r3, r3, #32
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d071      	beq.n	800ef3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee58:	4b19      	ldr	r3, [pc, #100]	; (800eec0 <tcp_process+0x5a4>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f003 0310 	and.w	r3, r3, #16
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d060      	beq.n	800ef26 <tcp_process+0x60a>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee68:	4b16      	ldr	r3, [pc, #88]	; (800eec4 <tcp_process+0x5a8>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d15a      	bne.n	800ef26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d156      	bne.n	800ef26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	8b5b      	ldrh	r3, [r3, #26]
 800ee7c:	f043 0302 	orr.w	r3, r3, #2
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7fe fdbe 	bl	800da08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ee8c:	4b18      	ldr	r3, [pc, #96]	; (800eef0 <tcp_process+0x5d4>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d105      	bne.n	800eea2 <tcp_process+0x586>
 800ee96:	4b16      	ldr	r3, [pc, #88]	; (800eef0 <tcp_process+0x5d4>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	4a14      	ldr	r2, [pc, #80]	; (800eef0 <tcp_process+0x5d4>)
 800ee9e:	6013      	str	r3, [r2, #0]
 800eea0:	e02e      	b.n	800ef00 <tcp_process+0x5e4>
 800eea2:	4b13      	ldr	r3, [pc, #76]	; (800eef0 <tcp_process+0x5d4>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	617b      	str	r3, [r7, #20]
 800eea8:	e027      	b.n	800eefa <tcp_process+0x5de>
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d11f      	bne.n	800eef4 <tcp_process+0x5d8>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68da      	ldr	r2, [r3, #12]
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	60da      	str	r2, [r3, #12]
 800eebc:	e020      	b.n	800ef00 <tcp_process+0x5e4>
 800eebe:	bf00      	nop
 800eec0:	20004ba4 	.word	0x20004ba4
 800eec4:	20004b9c 	.word	0x20004b9c
 800eec8:	20004ba2 	.word	0x20004ba2
 800eecc:	20004b98 	.word	0x20004b98
 800eed0:	20004b88 	.word	0x20004b88
 800eed4:	2000f590 	.word	0x2000f590
 800eed8:	2000f594 	.word	0x2000f594
 800eedc:	0801abc4 	.word	0x0801abc4
 800eee0:	0801ae64 	.word	0x0801ae64
 800eee4:	0801ac10 	.word	0x0801ac10
 800eee8:	20004ba0 	.word	0x20004ba0
 800eeec:	20004ba5 	.word	0x20004ba5
 800eef0:	20012cb4 	.word	0x20012cb4
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	617b      	str	r3, [r7, #20]
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1d4      	bne.n	800eeaa <tcp_process+0x58e>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	60da      	str	r2, [r3, #12]
 800ef06:	4b77      	ldr	r3, [pc, #476]	; (800f0e4 <tcp_process+0x7c8>)
 800ef08:	2201      	movs	r2, #1
 800ef0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	220a      	movs	r2, #10
 800ef10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ef12:	4b75      	ldr	r3, [pc, #468]	; (800f0e8 <tcp_process+0x7cc>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	60da      	str	r2, [r3, #12]
 800ef1a:	4a73      	ldr	r2, [pc, #460]	; (800f0e8 <tcp_process+0x7cc>)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6013      	str	r3, [r2, #0]
 800ef20:	f002 fcf8 	bl	8011914 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ef24:	e0d2      	b.n	800f0cc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	8b5b      	ldrh	r3, [r3, #26]
 800ef2a:	f043 0302 	orr.w	r3, r3, #2
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2208      	movs	r2, #8
 800ef38:	751a      	strb	r2, [r3, #20]
      break;
 800ef3a:	e0c7      	b.n	800f0cc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef3c:	4b6b      	ldr	r3, [pc, #428]	; (800f0ec <tcp_process+0x7d0>)
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	f003 0310 	and.w	r3, r3, #16
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 80c1 	beq.w	800f0cc <tcp_process+0x7b0>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef4e:	4b68      	ldr	r3, [pc, #416]	; (800f0f0 <tcp_process+0x7d4>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	f040 80ba 	bne.w	800f0cc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	f040 80b5 	bne.w	800f0cc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2206      	movs	r2, #6
 800ef66:	751a      	strb	r2, [r3, #20]
      break;
 800ef68:	e0b0      	b.n	800f0cc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f9ca 	bl	800f304 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef70:	4b60      	ldr	r3, [pc, #384]	; (800f0f4 <tcp_process+0x7d8>)
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	f003 0320 	and.w	r3, r3, #32
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	f000 80a9 	beq.w	800f0d0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	8b5b      	ldrh	r3, [r3, #26]
 800ef82:	f043 0302 	orr.w	r3, r3, #2
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7fe fd3b 	bl	800da08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef92:	4b59      	ldr	r3, [pc, #356]	; (800f0f8 <tcp_process+0x7dc>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d105      	bne.n	800efa8 <tcp_process+0x68c>
 800ef9c:	4b56      	ldr	r3, [pc, #344]	; (800f0f8 <tcp_process+0x7dc>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	4a55      	ldr	r2, [pc, #340]	; (800f0f8 <tcp_process+0x7dc>)
 800efa4:	6013      	str	r3, [r2, #0]
 800efa6:	e013      	b.n	800efd0 <tcp_process+0x6b4>
 800efa8:	4b53      	ldr	r3, [pc, #332]	; (800f0f8 <tcp_process+0x7dc>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	613b      	str	r3, [r7, #16]
 800efae:	e00c      	b.n	800efca <tcp_process+0x6ae>
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d104      	bne.n	800efc4 <tcp_process+0x6a8>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68da      	ldr	r2, [r3, #12]
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	60da      	str	r2, [r3, #12]
 800efc2:	e005      	b.n	800efd0 <tcp_process+0x6b4>
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	613b      	str	r3, [r7, #16]
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1ef      	bne.n	800efb0 <tcp_process+0x694>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	60da      	str	r2, [r3, #12]
 800efd6:	4b43      	ldr	r3, [pc, #268]	; (800f0e4 <tcp_process+0x7c8>)
 800efd8:	2201      	movs	r2, #1
 800efda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	220a      	movs	r2, #10
 800efe0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efe2:	4b41      	ldr	r3, [pc, #260]	; (800f0e8 <tcp_process+0x7cc>)
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	60da      	str	r2, [r3, #12]
 800efea:	4a3f      	ldr	r2, [pc, #252]	; (800f0e8 <tcp_process+0x7cc>)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	f002 fc90 	bl	8011914 <tcp_timer_needed>
      }
      break;
 800eff4:	e06c      	b.n	800f0d0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f984 	bl	800f304 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800effc:	4b3b      	ldr	r3, [pc, #236]	; (800f0ec <tcp_process+0x7d0>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	f003 0310 	and.w	r3, r3, #16
 800f004:	2b00      	cmp	r3, #0
 800f006:	d065      	beq.n	800f0d4 <tcp_process+0x7b8>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f00c:	4b38      	ldr	r3, [pc, #224]	; (800f0f0 <tcp_process+0x7d4>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d15f      	bne.n	800f0d4 <tcp_process+0x7b8>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d15b      	bne.n	800f0d4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7fe fcf3 	bl	800da08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f022:	4b35      	ldr	r3, [pc, #212]	; (800f0f8 <tcp_process+0x7dc>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d105      	bne.n	800f038 <tcp_process+0x71c>
 800f02c:	4b32      	ldr	r3, [pc, #200]	; (800f0f8 <tcp_process+0x7dc>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	4a31      	ldr	r2, [pc, #196]	; (800f0f8 <tcp_process+0x7dc>)
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	e013      	b.n	800f060 <tcp_process+0x744>
 800f038:	4b2f      	ldr	r3, [pc, #188]	; (800f0f8 <tcp_process+0x7dc>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	60fb      	str	r3, [r7, #12]
 800f03e:	e00c      	b.n	800f05a <tcp_process+0x73e>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	429a      	cmp	r2, r3
 800f048:	d104      	bne.n	800f054 <tcp_process+0x738>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	68da      	ldr	r2, [r3, #12]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	60da      	str	r2, [r3, #12]
 800f052:	e005      	b.n	800f060 <tcp_process+0x744>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	60fb      	str	r3, [r7, #12]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d1ef      	bne.n	800f040 <tcp_process+0x724>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2200      	movs	r2, #0
 800f064:	60da      	str	r2, [r3, #12]
 800f066:	4b1f      	ldr	r3, [pc, #124]	; (800f0e4 <tcp_process+0x7c8>)
 800f068:	2201      	movs	r2, #1
 800f06a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	220a      	movs	r2, #10
 800f070:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f072:	4b1d      	ldr	r3, [pc, #116]	; (800f0e8 <tcp_process+0x7cc>)
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	60da      	str	r2, [r3, #12]
 800f07a:	4a1b      	ldr	r2, [pc, #108]	; (800f0e8 <tcp_process+0x7cc>)
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	f002 fc48 	bl	8011914 <tcp_timer_needed>
      }
      break;
 800f084:	e026      	b.n	800f0d4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f93c 	bl	800f304 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f08c:	4b17      	ldr	r3, [pc, #92]	; (800f0ec <tcp_process+0x7d0>)
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	f003 0310 	and.w	r3, r3, #16
 800f094:	2b00      	cmp	r3, #0
 800f096:	d01f      	beq.n	800f0d8 <tcp_process+0x7bc>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f09c:	4b14      	ldr	r3, [pc, #80]	; (800f0f0 <tcp_process+0x7d4>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d119      	bne.n	800f0d8 <tcp_process+0x7bc>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d115      	bne.n	800f0d8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f0ac:	4b11      	ldr	r3, [pc, #68]	; (800f0f4 <tcp_process+0x7d8>)
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	f043 0310 	orr.w	r3, r3, #16
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	4b0f      	ldr	r3, [pc, #60]	; (800f0f4 <tcp_process+0x7d8>)
 800f0b8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f0ba:	e00d      	b.n	800f0d8 <tcp_process+0x7bc>
    default:
      break;
 800f0bc:	bf00      	nop
 800f0be:	e00c      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0c0:	bf00      	nop
 800f0c2:	e00a      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0c4:	bf00      	nop
 800f0c6:	e008      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0c8:	bf00      	nop
 800f0ca:	e006      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0cc:	bf00      	nop
 800f0ce:	e004      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0d0:	bf00      	nop
 800f0d2:	e002      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0d4:	bf00      	nop
 800f0d6:	e000      	b.n	800f0da <tcp_process+0x7be>
      break;
 800f0d8:	bf00      	nop
  }
  return ERR_OK;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3724      	adds	r7, #36	; 0x24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd90      	pop	{r4, r7, pc}
 800f0e4:	20012cb0 	.word	0x20012cb0
 800f0e8:	20012cc4 	.word	0x20012cc4
 800f0ec:	20004ba4 	.word	0x20004ba4
 800f0f0:	20004b9c 	.word	0x20004b9c
 800f0f4:	20004ba5 	.word	0x20004ba5
 800f0f8:	20012cb4 	.word	0x20012cb4

0800f0fc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f0fc:	b590      	push	{r4, r7, lr}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <tcp_oos_insert_segment+0x1e>
 800f10c:	4b3b      	ldr	r3, [pc, #236]	; (800f1fc <tcp_oos_insert_segment+0x100>)
 800f10e:	f240 421f 	movw	r2, #1055	; 0x41f
 800f112:	493b      	ldr	r1, [pc, #236]	; (800f200 <tcp_oos_insert_segment+0x104>)
 800f114:	483b      	ldr	r0, [pc, #236]	; (800f204 <tcp_oos_insert_segment+0x108>)
 800f116:	f008 f941 	bl	801739c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	68db      	ldr	r3, [r3, #12]
 800f11e:	899b      	ldrh	r3, [r3, #12]
 800f120:	b29b      	uxth	r3, r3
 800f122:	4618      	mov	r0, r3
 800f124:	f7fb fc3c 	bl	800a9a0 <lwip_htons>
 800f128:	4603      	mov	r3, r0
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	d028      	beq.n	800f186 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f134:	6838      	ldr	r0, [r7, #0]
 800f136:	f7fe fa65 	bl	800d604 <tcp_segs_free>
    next = NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	603b      	str	r3, [r7, #0]
 800f13e:	e056      	b.n	800f1ee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	899b      	ldrh	r3, [r3, #12]
 800f146:	b29b      	uxth	r3, r3
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fb fc29 	bl	800a9a0 <lwip_htons>
 800f14e:	4603      	mov	r3, r0
 800f150:	b2db      	uxtb	r3, r3
 800f152:	f003 0301 	and.w	r3, r3, #1
 800f156:	2b00      	cmp	r3, #0
 800f158:	d00d      	beq.n	800f176 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	68db      	ldr	r3, [r3, #12]
 800f15e:	899b      	ldrh	r3, [r3, #12]
 800f160:	b29c      	uxth	r4, r3
 800f162:	2001      	movs	r0, #1
 800f164:	f7fb fc1c 	bl	800a9a0 <lwip_htons>
 800f168:	4603      	mov	r3, r0
 800f16a:	461a      	mov	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	4322      	orrs	r2, r4
 800f172:	b292      	uxth	r2, r2
 800f174:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f7fe fa54 	bl	800d62e <tcp_seg_free>
    while (next &&
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d00e      	beq.n	800f1aa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	891b      	ldrh	r3, [r3, #8]
 800f190:	461a      	mov	r2, r3
 800f192:	4b1d      	ldr	r3, [pc, #116]	; (800f208 <tcp_oos_insert_segment+0x10c>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	441a      	add	r2, r3
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	6839      	ldr	r1, [r7, #0]
 800f1a0:	8909      	ldrh	r1, [r1, #8]
 800f1a2:	440b      	add	r3, r1
 800f1a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	daca      	bge.n	800f140 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d01e      	beq.n	800f1ee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	891b      	ldrh	r3, [r3, #8]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	4b14      	ldr	r3, [pc, #80]	; (800f208 <tcp_oos_insert_segment+0x10c>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	441a      	add	r2, r3
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	dd12      	ble.n	800f1ee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	4b0d      	ldr	r3, [pc, #52]	; (800f208 <tcp_oos_insert_segment+0x10c>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	685a      	ldr	r2, [r3, #4]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	891b      	ldrh	r3, [r3, #8]
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	f7fc fe0b 	bl	800be04 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	683a      	ldr	r2, [r7, #0]
 800f1f2:	601a      	str	r2, [r3, #0]
}
 800f1f4:	bf00      	nop
 800f1f6:	3714      	adds	r7, #20
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd90      	pop	{r4, r7, pc}
 800f1fc:	0801abc4 	.word	0x0801abc4
 800f200:	0801ae84 	.word	0x0801ae84
 800f204:	0801ac10 	.word	0x0801ac10
 800f208:	20004b98 	.word	0x20004b98

0800f20c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f20c:	b5b0      	push	{r4, r5, r7, lr}
 800f20e:	b086      	sub	sp, #24
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f21a:	e03e      	b.n	800f29a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fc fffe 	bl	800c22c <pbuf_clen>
 800f230:	4603      	mov	r3, r0
 800f232:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f23a:	8a7a      	ldrh	r2, [r7, #18]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d906      	bls.n	800f24e <tcp_free_acked_segments+0x42>
 800f240:	4b2a      	ldr	r3, [pc, #168]	; (800f2ec <tcp_free_acked_segments+0xe0>)
 800f242:	f240 4257 	movw	r2, #1111	; 0x457
 800f246:	492a      	ldr	r1, [pc, #168]	; (800f2f0 <tcp_free_acked_segments+0xe4>)
 800f248:	482a      	ldr	r0, [pc, #168]	; (800f2f4 <tcp_free_acked_segments+0xe8>)
 800f24a:	f008 f8a7 	bl	801739c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f254:	8a7b      	ldrh	r3, [r7, #18]
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	b29a      	uxth	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	891a      	ldrh	r2, [r3, #8]
 800f264:	4b24      	ldr	r3, [pc, #144]	; (800f2f8 <tcp_free_acked_segments+0xec>)
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	4413      	add	r3, r2
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	4b22      	ldr	r3, [pc, #136]	; (800f2f8 <tcp_free_acked_segments+0xec>)
 800f26e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f270:	6978      	ldr	r0, [r7, #20]
 800f272:	f7fe f9dc 	bl	800d62e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00c      	beq.n	800f29a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d109      	bne.n	800f29a <tcp_free_acked_segments+0x8e>
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d106      	bne.n	800f29a <tcp_free_acked_segments+0x8e>
 800f28c:	4b17      	ldr	r3, [pc, #92]	; (800f2ec <tcp_free_acked_segments+0xe0>)
 800f28e:	f240 4261 	movw	r2, #1121	; 0x461
 800f292:	491a      	ldr	r1, [pc, #104]	; (800f2fc <tcp_free_acked_segments+0xf0>)
 800f294:	4817      	ldr	r0, [pc, #92]	; (800f2f4 <tcp_free_acked_segments+0xe8>)
 800f296:	f008 f881 	bl	801739c <iprintf>
  while (seg_list != NULL &&
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d020      	beq.n	800f2e2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fb fb8f 	bl	800a9ca <lwip_htonl>
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	891b      	ldrh	r3, [r3, #8]
 800f2b2:	461d      	mov	r5, r3
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	899b      	ldrh	r3, [r3, #12]
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fb fb6f 	bl	800a9a0 <lwip_htons>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	f003 0303 	and.w	r3, r3, #3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <tcp_free_acked_segments+0xc6>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	e000      	b.n	800f2d4 <tcp_free_acked_segments+0xc8>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	442b      	add	r3, r5
 800f2d6:	18e2      	adds	r2, r4, r3
 800f2d8:	4b09      	ldr	r3, [pc, #36]	; (800f300 <tcp_free_acked_segments+0xf4>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dd9c      	ble.n	800f21c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3718      	adds	r7, #24
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f2ec:	0801abc4 	.word	0x0801abc4
 800f2f0:	0801aeac 	.word	0x0801aeac
 800f2f4:	0801ac10 	.word	0x0801ac10
 800f2f8:	20004ba0 	.word	0x20004ba0
 800f2fc:	0801aed4 	.word	0x0801aed4
 800f300:	20004b9c 	.word	0x20004b9c

0800f304 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f304:	b5b0      	push	{r4, r5, r7, lr}
 800f306:	b094      	sub	sp, #80	; 0x50
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f30c:	2300      	movs	r3, #0
 800f30e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d106      	bne.n	800f324 <tcp_receive+0x20>
 800f316:	4ba6      	ldr	r3, [pc, #664]	; (800f5b0 <tcp_receive+0x2ac>)
 800f318:	f240 427b 	movw	r2, #1147	; 0x47b
 800f31c:	49a5      	ldr	r1, [pc, #660]	; (800f5b4 <tcp_receive+0x2b0>)
 800f31e:	48a6      	ldr	r0, [pc, #664]	; (800f5b8 <tcp_receive+0x2b4>)
 800f320:	f008 f83c 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	7d1b      	ldrb	r3, [r3, #20]
 800f328:	2b03      	cmp	r3, #3
 800f32a:	d806      	bhi.n	800f33a <tcp_receive+0x36>
 800f32c:	4ba0      	ldr	r3, [pc, #640]	; (800f5b0 <tcp_receive+0x2ac>)
 800f32e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f332:	49a2      	ldr	r1, [pc, #648]	; (800f5bc <tcp_receive+0x2b8>)
 800f334:	48a0      	ldr	r0, [pc, #640]	; (800f5b8 <tcp_receive+0x2b4>)
 800f336:	f008 f831 	bl	801739c <iprintf>

  if (flags & TCP_ACK) {
 800f33a:	4ba1      	ldr	r3, [pc, #644]	; (800f5c0 <tcp_receive+0x2bc>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	f003 0310 	and.w	r3, r3, #16
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 8263 	beq.w	800f80e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f34e:	461a      	mov	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f354:	4413      	add	r3, r2
 800f356:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f35c:	4b99      	ldr	r3, [pc, #612]	; (800f5c4 <tcp_receive+0x2c0>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	db1b      	blt.n	800f39e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f36a:	4b96      	ldr	r3, [pc, #600]	; (800f5c4 <tcp_receive+0x2c0>)
 800f36c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f36e:	429a      	cmp	r2, r3
 800f370:	d106      	bne.n	800f380 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f376:	4b94      	ldr	r3, [pc, #592]	; (800f5c8 <tcp_receive+0x2c4>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	db0e      	blt.n	800f39e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f384:	4b90      	ldr	r3, [pc, #576]	; (800f5c8 <tcp_receive+0x2c4>)
 800f386:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f388:	429a      	cmp	r2, r3
 800f38a:	d125      	bne.n	800f3d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f38c:	4b8f      	ldr	r3, [pc, #572]	; (800f5cc <tcp_receive+0x2c8>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	89db      	ldrh	r3, [r3, #14]
 800f392:	b29a      	uxth	r2, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d91c      	bls.n	800f3d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f39e:	4b8b      	ldr	r3, [pc, #556]	; (800f5cc <tcp_receive+0x2c8>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	89db      	ldrh	r3, [r3, #14]
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d205      	bcs.n	800f3c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f3c8:	4b7e      	ldr	r3, [pc, #504]	; (800f5c4 <tcp_receive+0x2c0>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f3d0:	4b7d      	ldr	r3, [pc, #500]	; (800f5c8 <tcp_receive+0x2c4>)
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f3d8:	4b7b      	ldr	r3, [pc, #492]	; (800f5c8 <tcp_receive+0x2c4>)
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3e0:	1ad3      	subs	r3, r2, r3
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	dc58      	bgt.n	800f498 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f3e6:	4b7a      	ldr	r3, [pc, #488]	; (800f5d0 <tcp_receive+0x2cc>)
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d14b      	bne.n	800f486 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f3f8:	4413      	add	r3, r2
 800f3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d142      	bne.n	800f486 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f406:	2b00      	cmp	r3, #0
 800f408:	db3d      	blt.n	800f486 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f40e:	4b6e      	ldr	r3, [pc, #440]	; (800f5c8 <tcp_receive+0x2c4>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	429a      	cmp	r2, r3
 800f414:	d137      	bne.n	800f486 <tcp_receive+0x182>
              found_dupack = 1;
 800f416:	2301      	movs	r3, #1
 800f418:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f420:	2bff      	cmp	r3, #255	; 0xff
 800f422:	d007      	beq.n	800f434 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f42a:	3301      	adds	r3, #1
 800f42c:	b2da      	uxtb	r2, r3
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f43a:	2b03      	cmp	r3, #3
 800f43c:	d91b      	bls.n	800f476 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f448:	4413      	add	r3, r2
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f452:	429a      	cmp	r2, r3
 800f454:	d30a      	bcc.n	800f46c <tcp_receive+0x168>
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f460:	4413      	add	r3, r2
 800f462:	b29a      	uxth	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f46a:	e004      	b.n	800f476 <tcp_receive+0x172>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d902      	bls.n	800f486 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f001 fee9 	bl	8011258 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f040 8160 	bne.w	800f74e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f496:	e15a      	b.n	800f74e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f498:	4b4b      	ldr	r3, [pc, #300]	; (800f5c8 <tcp_receive+0x2c4>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f2c0 814d 	blt.w	800f744 <tcp_receive+0x440>
 800f4aa:	4b47      	ldr	r3, [pc, #284]	; (800f5c8 <tcp_receive+0x2c4>)
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f300 8145 	bgt.w	800f744 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	8b5b      	ldrh	r3, [r3, #26]
 800f4be:	f003 0304 	and.w	r3, r3, #4
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d010      	beq.n	800f4e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	8b5b      	ldrh	r3, [r3, #26]
 800f4ca:	f023 0304 	bic.w	r3, r3, #4
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4f6:	10db      	asrs	r3, r3, #3
 800f4f8:	b21b      	sxth	r3, r3
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f502:	b29b      	uxth	r3, r3
 800f504:	4413      	add	r3, r2
 800f506:	b29b      	uxth	r3, r3
 800f508:	b21a      	sxth	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f510:	4b2d      	ldr	r3, [pc, #180]	; (800f5c8 <tcp_receive+0x2c4>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	b29a      	uxth	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f528:	4b27      	ldr	r3, [pc, #156]	; (800f5c8 <tcp_receive+0x2c4>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	7d1b      	ldrb	r3, [r3, #20]
 800f534:	2b03      	cmp	r3, #3
 800f536:	f240 8096 	bls.w	800f666 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f546:	429a      	cmp	r2, r3
 800f548:	d244      	bcs.n	800f5d4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8b5b      	ldrh	r3, [r3, #26]
 800f54e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <tcp_receive+0x256>
 800f556:	2301      	movs	r3, #1
 800f558:	e000      	b.n	800f55c <tcp_receive+0x258>
 800f55a:	2302      	movs	r3, #2
 800f55c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f560:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f56a:	fb12 f303 	smulbb	r3, r2, r3
 800f56e:	b29b      	uxth	r3, r3
 800f570:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f572:	4293      	cmp	r3, r2
 800f574:	bf28      	it	cs
 800f576:	4613      	movcs	r3, r2
 800f578:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f580:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f582:	4413      	add	r3, r2
 800f584:	b29a      	uxth	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d309      	bcc.n	800f5a4 <tcp_receive+0x2a0>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f596:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f598:	4413      	add	r3, r2
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5a2:	e060      	b.n	800f666 <tcp_receive+0x362>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5ae:	e05a      	b.n	800f666 <tcp_receive+0x362>
 800f5b0:	0801abc4 	.word	0x0801abc4
 800f5b4:	0801aef4 	.word	0x0801aef4
 800f5b8:	0801ac10 	.word	0x0801ac10
 800f5bc:	0801af10 	.word	0x0801af10
 800f5c0:	20004ba4 	.word	0x20004ba4
 800f5c4:	20004b98 	.word	0x20004b98
 800f5c8:	20004b9c 	.word	0x20004b9c
 800f5cc:	20004b88 	.word	0x20004b88
 800f5d0:	20004ba2 	.word	0x20004ba2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5dc:	4413      	add	r3, r2
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d309      	bcc.n	800f5fe <tcp_receive+0x2fa>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f5f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5f2:	4413      	add	r3, r2
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5fc:	e004      	b.n	800f608 <tcp_receive+0x304>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f614:	429a      	cmp	r2, r3
 800f616:	d326      	bcc.n	800f666 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	b29a      	uxth	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f638:	4413      	add	r3, r2
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f642:	429a      	cmp	r2, r3
 800f644:	d30a      	bcc.n	800f65c <tcp_receive+0x358>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f650:	4413      	add	r3, r2
 800f652:	b29a      	uxth	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f65a:	e004      	b.n	800f666 <tcp_receive+0x362>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f662:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f66e:	4a98      	ldr	r2, [pc, #608]	; (800f8d0 <tcp_receive+0x5cc>)
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff fdcb 	bl	800f20c <tcp_free_acked_segments>
 800f676:	4602      	mov	r2, r0
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f684:	4a93      	ldr	r2, [pc, #588]	; (800f8d4 <tcp_receive+0x5d0>)
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7ff fdc0 	bl	800f20c <tcp_free_acked_segments>
 800f68c:	4602      	mov	r2, r0
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f696:	2b00      	cmp	r3, #0
 800f698:	d104      	bne.n	800f6a4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6a0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f6a2:	e002      	b.n	800f6aa <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d103      	bne.n	800f6c0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f6c6:	4b84      	ldr	r3, [pc, #528]	; (800f8d8 <tcp_receive+0x5d4>)
 800f6c8:	881b      	ldrh	r3, [r3, #0]
 800f6ca:	4413      	add	r3, r2
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	8b5b      	ldrh	r3, [r3, #26]
 800f6d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d035      	beq.n	800f74c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d118      	bne.n	800f71a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00c      	beq.n	800f70a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fb f964 	bl	800a9ca <lwip_htonl>
 800f702:	4603      	mov	r3, r0
 800f704:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f706:	2b00      	cmp	r3, #0
 800f708:	dc20      	bgt.n	800f74c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	8b5b      	ldrh	r3, [r3, #26]
 800f70e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f712:	b29a      	uxth	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f718:	e018      	b.n	800f74c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	4618      	mov	r0, r3
 800f728:	f7fb f94f 	bl	800a9ca <lwip_htonl>
 800f72c:	4603      	mov	r3, r0
 800f72e:	1ae3      	subs	r3, r4, r3
 800f730:	2b00      	cmp	r3, #0
 800f732:	dc0b      	bgt.n	800f74c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	8b5b      	ldrh	r3, [r3, #26]
 800f738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f742:	e003      	b.n	800f74c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f001 ff75 	bl	8011634 <tcp_send_empty_ack>
 800f74a:	e000      	b.n	800f74e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f74c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f752:	2b00      	cmp	r3, #0
 800f754:	d05b      	beq.n	800f80e <tcp_receive+0x50a>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f75a:	4b60      	ldr	r3, [pc, #384]	; (800f8dc <tcp_receive+0x5d8>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	1ad3      	subs	r3, r2, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	da54      	bge.n	800f80e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f764:	4b5e      	ldr	r3, [pc, #376]	; (800f8e0 <tcp_receive+0x5dc>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	b29a      	uxth	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f76e:	b29b      	uxth	r3, r3
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	b29b      	uxth	r3, r3
 800f774:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f778:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f782:	10db      	asrs	r3, r3, #3
 800f784:	b21b      	sxth	r3, r3
 800f786:	b29b      	uxth	r3, r3
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f796:	b29a      	uxth	r2, r3
 800f798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f79c:	4413      	add	r3, r2
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	b21a      	sxth	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f7a6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	da05      	bge.n	800f7ba <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f7ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7b2:	425b      	negs	r3, r3
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f7ba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7c4:	109b      	asrs	r3, r3, #2
 800f7c6:	b21b      	sxth	r3, r3
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7d8:	b29a      	uxth	r2, r3
 800f7da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f7de:	4413      	add	r3, r2
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	b21a      	sxth	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7ee:	10db      	asrs	r3, r3, #3
 800f7f0:	b21b      	sxth	r3, r3
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	4413      	add	r3, r2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	b21a      	sxth	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2200      	movs	r2, #0
 800f80c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f80e:	4b35      	ldr	r3, [pc, #212]	; (800f8e4 <tcp_receive+0x5e0>)
 800f810:	881b      	ldrh	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	f000 84e1 	beq.w	80101da <tcp_receive+0xed6>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	7d1b      	ldrb	r3, [r3, #20]
 800f81c:	2b06      	cmp	r3, #6
 800f81e:	f200 84dc 	bhi.w	80101da <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f826:	4b30      	ldr	r3, [pc, #192]	; (800f8e8 <tcp_receive+0x5e4>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	1ad3      	subs	r3, r2, r3
 800f82c:	3b01      	subs	r3, #1
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f2c0 808e 	blt.w	800f950 <tcp_receive+0x64c>
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f838:	4b2a      	ldr	r3, [pc, #168]	; (800f8e4 <tcp_receive+0x5e0>)
 800f83a:	881b      	ldrh	r3, [r3, #0]
 800f83c:	4619      	mov	r1, r3
 800f83e:	4b2a      	ldr	r3, [pc, #168]	; (800f8e8 <tcp_receive+0x5e4>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	440b      	add	r3, r1
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	3301      	adds	r3, #1
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f300 8081 	bgt.w	800f950 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f84e:	4b27      	ldr	r3, [pc, #156]	; (800f8ec <tcp_receive+0x5e8>)
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f858:	4b23      	ldr	r3, [pc, #140]	; (800f8e8 <tcp_receive+0x5e4>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f860:	4b22      	ldr	r3, [pc, #136]	; (800f8ec <tcp_receive+0x5e8>)
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d106      	bne.n	800f876 <tcp_receive+0x572>
 800f868:	4b21      	ldr	r3, [pc, #132]	; (800f8f0 <tcp_receive+0x5ec>)
 800f86a:	f240 5294 	movw	r2, #1428	; 0x594
 800f86e:	4921      	ldr	r1, [pc, #132]	; (800f8f4 <tcp_receive+0x5f0>)
 800f870:	4821      	ldr	r0, [pc, #132]	; (800f8f8 <tcp_receive+0x5f4>)
 800f872:	f007 fd93 	bl	801739c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d906      	bls.n	800f88e <tcp_receive+0x58a>
 800f880:	4b1b      	ldr	r3, [pc, #108]	; (800f8f0 <tcp_receive+0x5ec>)
 800f882:	f240 5295 	movw	r2, #1429	; 0x595
 800f886:	491d      	ldr	r1, [pc, #116]	; (800f8fc <tcp_receive+0x5f8>)
 800f888:	481b      	ldr	r0, [pc, #108]	; (800f8f8 <tcp_receive+0x5f4>)
 800f88a:	f007 fd87 	bl	801739c <iprintf>
      off = (u16_t)off32;
 800f88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f890:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f894:	4b15      	ldr	r3, [pc, #84]	; (800f8ec <tcp_receive+0x5e8>)
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	891b      	ldrh	r3, [r3, #8]
 800f89a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d906      	bls.n	800f8b0 <tcp_receive+0x5ac>
 800f8a2:	4b13      	ldr	r3, [pc, #76]	; (800f8f0 <tcp_receive+0x5ec>)
 800f8a4:	f240 5297 	movw	r2, #1431	; 0x597
 800f8a8:	4915      	ldr	r1, [pc, #84]	; (800f900 <tcp_receive+0x5fc>)
 800f8aa:	4813      	ldr	r0, [pc, #76]	; (800f8f8 <tcp_receive+0x5f4>)
 800f8ac:	f007 fd76 	bl	801739c <iprintf>
      inseg.len -= off;
 800f8b0:	4b0e      	ldr	r3, [pc, #56]	; (800f8ec <tcp_receive+0x5e8>)
 800f8b2:	891a      	ldrh	r2, [r3, #8]
 800f8b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	4b0b      	ldr	r3, [pc, #44]	; (800f8ec <tcp_receive+0x5e8>)
 800f8be:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f8c0:	4b0a      	ldr	r3, [pc, #40]	; (800f8ec <tcp_receive+0x5e8>)
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	891a      	ldrh	r2, [r3, #8]
 800f8c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f8ce:	e029      	b.n	800f924 <tcp_receive+0x620>
 800f8d0:	0801af2c 	.word	0x0801af2c
 800f8d4:	0801af34 	.word	0x0801af34
 800f8d8:	20004ba0 	.word	0x20004ba0
 800f8dc:	20004b9c 	.word	0x20004b9c
 800f8e0:	20012cb8 	.word	0x20012cb8
 800f8e4:	20004ba2 	.word	0x20004ba2
 800f8e8:	20004b98 	.word	0x20004b98
 800f8ec:	20004b78 	.word	0x20004b78
 800f8f0:	0801abc4 	.word	0x0801abc4
 800f8f4:	0801af3c 	.word	0x0801af3c
 800f8f8:	0801ac10 	.word	0x0801ac10
 800f8fc:	0801af4c 	.word	0x0801af4c
 800f900:	0801af5c 	.word	0x0801af5c
        off -= p->len;
 800f904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f906:	895b      	ldrh	r3, [r3, #10]
 800f908:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f90c:	1ad3      	subs	r3, r2, r3
 800f90e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f914:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f916:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f91a:	2200      	movs	r2, #0
 800f91c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f91e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f926:	895b      	ldrh	r3, [r3, #10]
 800f928:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d8e9      	bhi.n	800f904 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f930:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f934:	4619      	mov	r1, r3
 800f936:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f938:	f7fc fb64 	bl	800c004 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f940:	4a91      	ldr	r2, [pc, #580]	; (800fb88 <tcp_receive+0x884>)
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	4b91      	ldr	r3, [pc, #580]	; (800fb8c <tcp_receive+0x888>)
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	4a8f      	ldr	r2, [pc, #572]	; (800fb88 <tcp_receive+0x884>)
 800f94a:	6812      	ldr	r2, [r2, #0]
 800f94c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f94e:	e00d      	b.n	800f96c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f950:	4b8d      	ldr	r3, [pc, #564]	; (800fb88 <tcp_receive+0x884>)
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f958:	1ad3      	subs	r3, r2, r3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	da06      	bge.n	800f96c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	8b5b      	ldrh	r3, [r3, #26]
 800f962:	f043 0302 	orr.w	r3, r3, #2
 800f966:	b29a      	uxth	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f96c:	4b86      	ldr	r3, [pc, #536]	; (800fb88 <tcp_receive+0x884>)
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	f2c0 842a 	blt.w	80101d0 <tcp_receive+0xecc>
 800f97c:	4b82      	ldr	r3, [pc, #520]	; (800fb88 <tcp_receive+0x884>)
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f984:	6879      	ldr	r1, [r7, #4]
 800f986:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f988:	440b      	add	r3, r1
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	3301      	adds	r3, #1
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f300 841e 	bgt.w	80101d0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f998:	4b7b      	ldr	r3, [pc, #492]	; (800fb88 <tcp_receive+0x884>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	f040 829a 	bne.w	800fed6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f9a2:	4b7a      	ldr	r3, [pc, #488]	; (800fb8c <tcp_receive+0x888>)
 800f9a4:	891c      	ldrh	r4, [r3, #8]
 800f9a6:	4b79      	ldr	r3, [pc, #484]	; (800fb8c <tcp_receive+0x888>)
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	899b      	ldrh	r3, [r3, #12]
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fa fff6 	bl	800a9a0 <lwip_htons>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	f003 0303 	and.w	r3, r3, #3
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d001      	beq.n	800f9c4 <tcp_receive+0x6c0>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e000      	b.n	800f9c6 <tcp_receive+0x6c2>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	4423      	add	r3, r4
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	4b71      	ldr	r3, [pc, #452]	; (800fb90 <tcp_receive+0x88c>)
 800f9cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9d2:	4b6f      	ldr	r3, [pc, #444]	; (800fb90 <tcp_receive+0x88c>)
 800f9d4:	881b      	ldrh	r3, [r3, #0]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d275      	bcs.n	800fac6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9da:	4b6c      	ldr	r3, [pc, #432]	; (800fb8c <tcp_receive+0x888>)
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	899b      	ldrh	r3, [r3, #12]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fa ffdc 	bl	800a9a0 <lwip_htons>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	f003 0301 	and.w	r3, r3, #1
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d01f      	beq.n	800fa34 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f9f4:	4b65      	ldr	r3, [pc, #404]	; (800fb8c <tcp_receive+0x888>)
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	899b      	ldrh	r3, [r3, #12]
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	b21b      	sxth	r3, r3
 800f9fe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fa02:	b21c      	sxth	r4, r3
 800fa04:	4b61      	ldr	r3, [pc, #388]	; (800fb8c <tcp_receive+0x888>)
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	899b      	ldrh	r3, [r3, #12]
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fa ffc7 	bl	800a9a0 <lwip_htons>
 800fa12:	4603      	mov	r3, r0
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fa ffbe 	bl	800a9a0 <lwip_htons>
 800fa24:	4603      	mov	r3, r0
 800fa26:	b21b      	sxth	r3, r3
 800fa28:	4323      	orrs	r3, r4
 800fa2a:	b21a      	sxth	r2, r3
 800fa2c:	4b57      	ldr	r3, [pc, #348]	; (800fb8c <tcp_receive+0x888>)
 800fa2e:	68db      	ldr	r3, [r3, #12]
 800fa30:	b292      	uxth	r2, r2
 800fa32:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa38:	4b54      	ldr	r3, [pc, #336]	; (800fb8c <tcp_receive+0x888>)
 800fa3a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fa3c:	4b53      	ldr	r3, [pc, #332]	; (800fb8c <tcp_receive+0x888>)
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	899b      	ldrh	r3, [r3, #12]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fa ffab 	bl	800a9a0 <lwip_htons>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	f003 0302 	and.w	r3, r3, #2
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d005      	beq.n	800fa62 <tcp_receive+0x75e>
            inseg.len -= 1;
 800fa56:	4b4d      	ldr	r3, [pc, #308]	; (800fb8c <tcp_receive+0x888>)
 800fa58:	891b      	ldrh	r3, [r3, #8]
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	4b4b      	ldr	r3, [pc, #300]	; (800fb8c <tcp_receive+0x888>)
 800fa60:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa62:	4b4a      	ldr	r3, [pc, #296]	; (800fb8c <tcp_receive+0x888>)
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	4a49      	ldr	r2, [pc, #292]	; (800fb8c <tcp_receive+0x888>)
 800fa68:	8912      	ldrh	r2, [r2, #8]
 800fa6a:	4611      	mov	r1, r2
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7fc f9c9 	bl	800be04 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa72:	4b46      	ldr	r3, [pc, #280]	; (800fb8c <tcp_receive+0x888>)
 800fa74:	891c      	ldrh	r4, [r3, #8]
 800fa76:	4b45      	ldr	r3, [pc, #276]	; (800fb8c <tcp_receive+0x888>)
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	899b      	ldrh	r3, [r3, #12]
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fa ff8e 	bl	800a9a0 <lwip_htons>
 800fa84:	4603      	mov	r3, r0
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f003 0303 	and.w	r3, r3, #3
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d001      	beq.n	800fa94 <tcp_receive+0x790>
 800fa90:	2301      	movs	r3, #1
 800fa92:	e000      	b.n	800fa96 <tcp_receive+0x792>
 800fa94:	2300      	movs	r3, #0
 800fa96:	4423      	add	r3, r4
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	4b3d      	ldr	r3, [pc, #244]	; (800fb90 <tcp_receive+0x88c>)
 800fa9c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa9e:	4b3c      	ldr	r3, [pc, #240]	; (800fb90 <tcp_receive+0x88c>)
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	4b38      	ldr	r3, [pc, #224]	; (800fb88 <tcp_receive+0x884>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	441a      	add	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fab2:	440b      	add	r3, r1
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d006      	beq.n	800fac6 <tcp_receive+0x7c2>
 800fab8:	4b36      	ldr	r3, [pc, #216]	; (800fb94 <tcp_receive+0x890>)
 800faba:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fabe:	4936      	ldr	r1, [pc, #216]	; (800fb98 <tcp_receive+0x894>)
 800fac0:	4836      	ldr	r0, [pc, #216]	; (800fb9c <tcp_receive+0x898>)
 800fac2:	f007 fc6b 	bl	801739c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faca:	2b00      	cmp	r3, #0
 800facc:	f000 80e7 	beq.w	800fc9e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fad0:	4b2e      	ldr	r3, [pc, #184]	; (800fb8c <tcp_receive+0x888>)
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	899b      	ldrh	r3, [r3, #12]
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fa ff61 	bl	800a9a0 <lwip_htons>
 800fade:	4603      	mov	r3, r0
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d010      	beq.n	800fb0c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800faea:	e00a      	b.n	800fb02 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faf0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f7fd fd96 	bl	800d62e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1f0      	bne.n	800faec <tcp_receive+0x7e8>
 800fb0a:	e0c8      	b.n	800fc9e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb10:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fb12:	e052      	b.n	800fbba <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	899b      	ldrh	r3, [r3, #12]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fa ff3f 	bl	800a9a0 <lwip_htons>
 800fb22:	4603      	mov	r3, r0
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d03d      	beq.n	800fbaa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fb2e:	4b17      	ldr	r3, [pc, #92]	; (800fb8c <tcp_receive+0x888>)
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	899b      	ldrh	r3, [r3, #12]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fa ff32 	bl	800a9a0 <lwip_htons>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d130      	bne.n	800fbaa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fb48:	4b10      	ldr	r3, [pc, #64]	; (800fb8c <tcp_receive+0x888>)
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	899b      	ldrh	r3, [r3, #12]
 800fb4e:	b29c      	uxth	r4, r3
 800fb50:	2001      	movs	r0, #1
 800fb52:	f7fa ff25 	bl	800a9a0 <lwip_htons>
 800fb56:	4603      	mov	r3, r0
 800fb58:	461a      	mov	r2, r3
 800fb5a:	4b0c      	ldr	r3, [pc, #48]	; (800fb8c <tcp_receive+0x888>)
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	4322      	orrs	r2, r4
 800fb60:	b292      	uxth	r2, r2
 800fb62:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb64:	4b09      	ldr	r3, [pc, #36]	; (800fb8c <tcp_receive+0x888>)
 800fb66:	891c      	ldrh	r4, [r3, #8]
 800fb68:	4b08      	ldr	r3, [pc, #32]	; (800fb8c <tcp_receive+0x888>)
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	899b      	ldrh	r3, [r3, #12]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fa ff15 	bl	800a9a0 <lwip_htons>
 800fb76:	4603      	mov	r3, r0
 800fb78:	b2db      	uxtb	r3, r3
 800fb7a:	f003 0303 	and.w	r3, r3, #3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d00e      	beq.n	800fba0 <tcp_receive+0x89c>
 800fb82:	2301      	movs	r3, #1
 800fb84:	e00d      	b.n	800fba2 <tcp_receive+0x89e>
 800fb86:	bf00      	nop
 800fb88:	20004b98 	.word	0x20004b98
 800fb8c:	20004b78 	.word	0x20004b78
 800fb90:	20004ba2 	.word	0x20004ba2
 800fb94:	0801abc4 	.word	0x0801abc4
 800fb98:	0801af6c 	.word	0x0801af6c
 800fb9c:	0801ac10 	.word	0x0801ac10
 800fba0:	2300      	movs	r3, #0
 800fba2:	4423      	add	r3, r4
 800fba4:	b29a      	uxth	r2, r3
 800fba6:	4b98      	ldr	r3, [pc, #608]	; (800fe08 <tcp_receive+0xb04>)
 800fba8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbac:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fbb4:	6938      	ldr	r0, [r7, #16]
 800fbb6:	f7fd fd3a 	bl	800d62e <tcp_seg_free>
            while (next &&
 800fbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00e      	beq.n	800fbde <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fbc0:	4b91      	ldr	r3, [pc, #580]	; (800fe08 <tcp_receive+0xb04>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4b91      	ldr	r3, [pc, #580]	; (800fe0c <tcp_receive+0xb08>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	441a      	add	r2, r3
 800fbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fbd4:	8909      	ldrh	r1, [r1, #8]
 800fbd6:	440b      	add	r3, r1
 800fbd8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	da9a      	bge.n	800fb14 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fbde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d059      	beq.n	800fc98 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fbe4:	4b88      	ldr	r3, [pc, #544]	; (800fe08 <tcp_receive+0xb04>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	4b88      	ldr	r3, [pc, #544]	; (800fe0c <tcp_receive+0xb08>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	441a      	add	r2, r3
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	dd4d      	ble.n	800fc98 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	4b81      	ldr	r3, [pc, #516]	; (800fe0c <tcp_receive+0xb08>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	b29b      	uxth	r3, r3
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	4b80      	ldr	r3, [pc, #512]	; (800fe10 <tcp_receive+0xb0c>)
 800fc10:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fc12:	4b7f      	ldr	r3, [pc, #508]	; (800fe10 <tcp_receive+0xb0c>)
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	899b      	ldrh	r3, [r3, #12]
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fa fec0 	bl	800a9a0 <lwip_htons>
 800fc20:	4603      	mov	r3, r0
 800fc22:	b2db      	uxtb	r3, r3
 800fc24:	f003 0302 	and.w	r3, r3, #2
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d005      	beq.n	800fc38 <tcp_receive+0x934>
                inseg.len -= 1;
 800fc2c:	4b78      	ldr	r3, [pc, #480]	; (800fe10 <tcp_receive+0xb0c>)
 800fc2e:	891b      	ldrh	r3, [r3, #8]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	4b76      	ldr	r3, [pc, #472]	; (800fe10 <tcp_receive+0xb0c>)
 800fc36:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fc38:	4b75      	ldr	r3, [pc, #468]	; (800fe10 <tcp_receive+0xb0c>)
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	4a74      	ldr	r2, [pc, #464]	; (800fe10 <tcp_receive+0xb0c>)
 800fc3e:	8912      	ldrh	r2, [r2, #8]
 800fc40:	4611      	mov	r1, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fc f8de 	bl	800be04 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fc48:	4b71      	ldr	r3, [pc, #452]	; (800fe10 <tcp_receive+0xb0c>)
 800fc4a:	891c      	ldrh	r4, [r3, #8]
 800fc4c:	4b70      	ldr	r3, [pc, #448]	; (800fe10 <tcp_receive+0xb0c>)
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	899b      	ldrh	r3, [r3, #12]
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7fa fea3 	bl	800a9a0 <lwip_htons>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	f003 0303 	and.w	r3, r3, #3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <tcp_receive+0x966>
 800fc66:	2301      	movs	r3, #1
 800fc68:	e000      	b.n	800fc6c <tcp_receive+0x968>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	4423      	add	r3, r4
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	4b65      	ldr	r3, [pc, #404]	; (800fe08 <tcp_receive+0xb04>)
 800fc72:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc74:	4b64      	ldr	r3, [pc, #400]	; (800fe08 <tcp_receive+0xb04>)
 800fc76:	881b      	ldrh	r3, [r3, #0]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b64      	ldr	r3, [pc, #400]	; (800fe0c <tcp_receive+0xb08>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	441a      	add	r2, r3
 800fc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d006      	beq.n	800fc98 <tcp_receive+0x994>
 800fc8a:	4b62      	ldr	r3, [pc, #392]	; (800fe14 <tcp_receive+0xb10>)
 800fc8c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fc90:	4961      	ldr	r1, [pc, #388]	; (800fe18 <tcp_receive+0xb14>)
 800fc92:	4862      	ldr	r0, [pc, #392]	; (800fe1c <tcp_receive+0xb18>)
 800fc94:	f007 fb82 	bl	801739c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc9c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fc9e:	4b5a      	ldr	r3, [pc, #360]	; (800fe08 <tcp_receive+0xb04>)
 800fca0:	881b      	ldrh	r3, [r3, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	4b59      	ldr	r3, [pc, #356]	; (800fe0c <tcp_receive+0xb08>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	441a      	add	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcb2:	4b55      	ldr	r3, [pc, #340]	; (800fe08 <tcp_receive+0xb04>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d206      	bcs.n	800fcc8 <tcp_receive+0x9c4>
 800fcba:	4b56      	ldr	r3, [pc, #344]	; (800fe14 <tcp_receive+0xb10>)
 800fcbc:	f240 6207 	movw	r2, #1543	; 0x607
 800fcc0:	4957      	ldr	r1, [pc, #348]	; (800fe20 <tcp_receive+0xb1c>)
 800fcc2:	4856      	ldr	r0, [pc, #344]	; (800fe1c <tcp_receive+0xb18>)
 800fcc4:	f007 fb6a 	bl	801739c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fccc:	4b4e      	ldr	r3, [pc, #312]	; (800fe08 <tcp_receive+0xb04>)
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	1ad3      	subs	r3, r2, r3
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7fc ffc9 	bl	800cc70 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fcde:	4b4c      	ldr	r3, [pc, #304]	; (800fe10 <tcp_receive+0xb0c>)
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	891b      	ldrh	r3, [r3, #8]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d006      	beq.n	800fcf6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fce8:	4b49      	ldr	r3, [pc, #292]	; (800fe10 <tcp_receive+0xb0c>)
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	4a4d      	ldr	r2, [pc, #308]	; (800fe24 <tcp_receive+0xb20>)
 800fcee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fcf0:	4b47      	ldr	r3, [pc, #284]	; (800fe10 <tcp_receive+0xb0c>)
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fcf6:	4b46      	ldr	r3, [pc, #280]	; (800fe10 <tcp_receive+0xb0c>)
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	899b      	ldrh	r3, [r3, #12]
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fa fe4e 	bl	800a9a0 <lwip_htons>
 800fd04:	4603      	mov	r3, r0
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f000 80b8 	beq.w	800fe82 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fd12:	4b45      	ldr	r3, [pc, #276]	; (800fe28 <tcp_receive+0xb24>)
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	f043 0320 	orr.w	r3, r3, #32
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	4b42      	ldr	r3, [pc, #264]	; (800fe28 <tcp_receive+0xb24>)
 800fd1e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fd20:	e0af      	b.n	800fe82 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd26:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	685b      	ldr	r3, [r3, #4]
 800fd30:	4a36      	ldr	r2, [pc, #216]	; (800fe0c <tcp_receive+0xb08>)
 800fd32:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	891b      	ldrh	r3, [r3, #8]
 800fd38:	461c      	mov	r4, r3
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	899b      	ldrh	r3, [r3, #12]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fa fe2c 	bl	800a9a0 <lwip_htons>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	f003 0303 	and.w	r3, r3, #3
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d001      	beq.n	800fd58 <tcp_receive+0xa54>
 800fd54:	2301      	movs	r3, #1
 800fd56:	e000      	b.n	800fd5a <tcp_receive+0xa56>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	191a      	adds	r2, r3, r4
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd60:	441a      	add	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd6a:	461c      	mov	r4, r3
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	891b      	ldrh	r3, [r3, #8]
 800fd70:	461d      	mov	r5, r3
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	899b      	ldrh	r3, [r3, #12]
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fa fe10 	bl	800a9a0 <lwip_htons>
 800fd80:	4603      	mov	r3, r0
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	f003 0303 	and.w	r3, r3, #3
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d001      	beq.n	800fd90 <tcp_receive+0xa8c>
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	e000      	b.n	800fd92 <tcp_receive+0xa8e>
 800fd90:	2300      	movs	r3, #0
 800fd92:	442b      	add	r3, r5
 800fd94:	429c      	cmp	r4, r3
 800fd96:	d206      	bcs.n	800fda6 <tcp_receive+0xaa2>
 800fd98:	4b1e      	ldr	r3, [pc, #120]	; (800fe14 <tcp_receive+0xb10>)
 800fd9a:	f240 622b 	movw	r2, #1579	; 0x62b
 800fd9e:	4923      	ldr	r1, [pc, #140]	; (800fe2c <tcp_receive+0xb28>)
 800fda0:	481e      	ldr	r0, [pc, #120]	; (800fe1c <tcp_receive+0xb18>)
 800fda2:	f007 fafb 	bl	801739c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	891b      	ldrh	r3, [r3, #8]
 800fdaa:	461c      	mov	r4, r3
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	899b      	ldrh	r3, [r3, #12]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fa fdf3 	bl	800a9a0 <lwip_htons>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f003 0303 	and.w	r3, r3, #3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d001      	beq.n	800fdca <tcp_receive+0xac6>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e000      	b.n	800fdcc <tcp_receive+0xac8>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	1919      	adds	r1, r3, r4
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdd2:	b28b      	uxth	r3, r1
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7fc ff47 	bl	800cc70 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	891b      	ldrh	r3, [r3, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d028      	beq.n	800fe3e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fdec:	4b0d      	ldr	r3, [pc, #52]	; (800fe24 <tcp_receive+0xb20>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d01d      	beq.n	800fe30 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fdf4:	4b0b      	ldr	r3, [pc, #44]	; (800fe24 <tcp_receive+0xb20>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	4610      	mov	r0, r2
 800fe00:	f7fc fa54 	bl	800c2ac <pbuf_cat>
 800fe04:	e018      	b.n	800fe38 <tcp_receive+0xb34>
 800fe06:	bf00      	nop
 800fe08:	20004ba2 	.word	0x20004ba2
 800fe0c:	20004b98 	.word	0x20004b98
 800fe10:	20004b78 	.word	0x20004b78
 800fe14:	0801abc4 	.word	0x0801abc4
 800fe18:	0801afa4 	.word	0x0801afa4
 800fe1c:	0801ac10 	.word	0x0801ac10
 800fe20:	0801afe0 	.word	0x0801afe0
 800fe24:	20004ba8 	.word	0x20004ba8
 800fe28:	20004ba5 	.word	0x20004ba5
 800fe2c:	0801b000 	.word	0x0801b000
            } else {
              recv_data = cseg->p;
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	4a70      	ldr	r2, [pc, #448]	; (800fff8 <tcp_receive+0xcf4>)
 800fe36:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	899b      	ldrh	r3, [r3, #12]
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fa fdaa 	bl	800a9a0 <lwip_htons>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	f003 0301 	and.w	r3, r3, #1
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00d      	beq.n	800fe74 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fe58:	4b68      	ldr	r3, [pc, #416]	; (800fffc <tcp_receive+0xcf8>)
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	f043 0320 	orr.w	r3, r3, #32
 800fe60:	b2da      	uxtb	r2, r3
 800fe62:	4b66      	ldr	r3, [pc, #408]	; (800fffc <tcp_receive+0xcf8>)
 800fe64:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	7d1b      	ldrb	r3, [r3, #20]
 800fe6a:	2b04      	cmp	r3, #4
 800fe6c:	d102      	bne.n	800fe74 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2207      	movs	r2, #7
 800fe72:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fe7c:	68b8      	ldr	r0, [r7, #8]
 800fe7e:	f7fd fbd6 	bl	800d62e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d008      	beq.n	800fe9c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fe96:	429a      	cmp	r2, r3
 800fe98:	f43f af43 	beq.w	800fd22 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	8b5b      	ldrh	r3, [r3, #26]
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00e      	beq.n	800fec6 <tcp_receive+0xbc2>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	8b5b      	ldrh	r3, [r3, #26]
 800feac:	f023 0301 	bic.w	r3, r3, #1
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	835a      	strh	r2, [r3, #26]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	8b5b      	ldrh	r3, [r3, #26]
 800feba:	f043 0302 	orr.w	r3, r3, #2
 800febe:	b29a      	uxth	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fec4:	e188      	b.n	80101d8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	8b5b      	ldrh	r3, [r3, #26]
 800feca:	f043 0301 	orr.w	r3, r3, #1
 800fece:	b29a      	uxth	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fed4:	e180      	b.n	80101d8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fede:	4848      	ldr	r0, [pc, #288]	; (8010000 <tcp_receive+0xcfc>)
 800fee0:	f7fd fbbe 	bl	800d660 <tcp_seg_copy>
 800fee4:	4602      	mov	r2, r0
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	675a      	str	r2, [r3, #116]	; 0x74
 800feea:	e16d      	b.n	80101c8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800feec:	2300      	movs	r3, #0
 800feee:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fef4:	63bb      	str	r3, [r7, #56]	; 0x38
 800fef6:	e157      	b.n	80101a8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	4b41      	ldr	r3, [pc, #260]	; (8010004 <tcp_receive+0xd00>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d11d      	bne.n	800ff42 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ff06:	4b3e      	ldr	r3, [pc, #248]	; (8010000 <tcp_receive+0xcfc>)
 800ff08:	891a      	ldrh	r2, [r3, #8]
 800ff0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0c:	891b      	ldrh	r3, [r3, #8]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	f240 814f 	bls.w	80101b2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff14:	483a      	ldr	r0, [pc, #232]	; (8010000 <tcp_receive+0xcfc>)
 800ff16:	f7fd fba3 	bl	800d660 <tcp_seg_copy>
 800ff1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f000 8149 	beq.w	80101b6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800ff24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d003      	beq.n	800ff32 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ff2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2c:	697a      	ldr	r2, [r7, #20]
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	e002      	b.n	800ff38 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	697a      	ldr	r2, [r7, #20]
 800ff36:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ff38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff3a:	6978      	ldr	r0, [r7, #20]
 800ff3c:	f7ff f8de 	bl	800f0fc <tcp_oos_insert_segment>
                }
                break;
 800ff40:	e139      	b.n	80101b6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ff42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d117      	bne.n	800ff78 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ff48:	4b2e      	ldr	r3, [pc, #184]	; (8010004 <tcp_receive+0xd00>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	1ad3      	subs	r3, r2, r3
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	da57      	bge.n	8010008 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff58:	4829      	ldr	r0, [pc, #164]	; (8010000 <tcp_receive+0xcfc>)
 800ff5a:	f7fd fb81 	bl	800d660 <tcp_seg_copy>
 800ff5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff60:	69bb      	ldr	r3, [r7, #24]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f000 8129 	beq.w	80101ba <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	69ba      	ldr	r2, [r7, #24]
 800ff6c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff70:	69b8      	ldr	r0, [r7, #24]
 800ff72:	f7ff f8c3 	bl	800f0fc <tcp_oos_insert_segment>
                  }
                  break;
 800ff76:	e120      	b.n	80101ba <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff78:	4b22      	ldr	r3, [pc, #136]	; (8010004 <tcp_receive+0xd00>)
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	3b01      	subs	r3, #1
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	db3e      	blt.n	8010008 <tcp_receive+0xd04>
 800ff8a:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <tcp_receive+0xd00>)
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	1ad3      	subs	r3, r2, r3
 800ff96:	3301      	adds	r3, #1
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dc35      	bgt.n	8010008 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff9c:	4818      	ldr	r0, [pc, #96]	; (8010000 <tcp_receive+0xcfc>)
 800ff9e:	f7fd fb5f 	bl	800d660 <tcp_seg_copy>
 800ffa2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 8109 	beq.w	80101be <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ffac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffb4:	8912      	ldrh	r2, [r2, #8]
 800ffb6:	441a      	add	r2, r3
 800ffb8:	4b12      	ldr	r3, [pc, #72]	; (8010004 <tcp_receive+0xd00>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	dd12      	ble.n	800ffe8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ffc2:	4b10      	ldr	r3, [pc, #64]	; (8010004 <tcp_receive+0xd00>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	b29a      	uxth	r2, r3
 800ffd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ffd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffda:	685a      	ldr	r2, [r3, #4]
 800ffdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffde:	891b      	ldrh	r3, [r3, #8]
 800ffe0:	4619      	mov	r1, r3
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f7fb ff0e 	bl	800be04 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ffe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffea:	69fa      	ldr	r2, [r7, #28]
 800ffec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ffee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fff0:	69f8      	ldr	r0, [r7, #28]
 800fff2:	f7ff f883 	bl	800f0fc <tcp_oos_insert_segment>
                  }
                  break;
 800fff6:	e0e2      	b.n	80101be <tcp_receive+0xeba>
 800fff8:	20004ba8 	.word	0x20004ba8
 800fffc:	20004ba5 	.word	0x20004ba5
 8010000:	20004b78 	.word	0x20004b78
 8010004:	20004b98 	.word	0x20004b98
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	f040 80c6 	bne.w	80101a2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010016:	4b80      	ldr	r3, [pc, #512]	; (8010218 <tcp_receive+0xf14>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010022:	2b00      	cmp	r3, #0
 8010024:	f340 80bd 	ble.w	80101a2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	899b      	ldrh	r3, [r3, #12]
 801002e:	b29b      	uxth	r3, r3
 8010030:	4618      	mov	r0, r3
 8010032:	f7fa fcb5 	bl	800a9a0 <lwip_htons>
 8010036:	4603      	mov	r3, r0
 8010038:	b2db      	uxtb	r3, r3
 801003a:	f003 0301 	and.w	r3, r3, #1
 801003e:	2b00      	cmp	r3, #0
 8010040:	f040 80bf 	bne.w	80101c2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010044:	4875      	ldr	r0, [pc, #468]	; (801021c <tcp_receive+0xf18>)
 8010046:	f7fd fb0b 	bl	800d660 <tcp_seg_copy>
 801004a:	4602      	mov	r2, r0
 801004c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	f000 80b6 	beq.w	80101c6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010062:	8912      	ldrh	r2, [r2, #8]
 8010064:	441a      	add	r2, r3
 8010066:	4b6c      	ldr	r3, [pc, #432]	; (8010218 <tcp_receive+0xf14>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	2b00      	cmp	r3, #0
 801006e:	dd12      	ble.n	8010096 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010070:	4b69      	ldr	r3, [pc, #420]	; (8010218 <tcp_receive+0xf14>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	b29a      	uxth	r2, r3
 8010076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	b29b      	uxth	r3, r3
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	b29a      	uxth	r2, r3
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010088:	685a      	ldr	r2, [r3, #4]
 801008a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008c:	891b      	ldrh	r3, [r3, #8]
 801008e:	4619      	mov	r1, r3
 8010090:	4610      	mov	r0, r2
 8010092:	f7fb feb7 	bl	800be04 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010096:	4b62      	ldr	r3, [pc, #392]	; (8010220 <tcp_receive+0xf1c>)
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	461a      	mov	r2, r3
 801009c:	4b5e      	ldr	r3, [pc, #376]	; (8010218 <tcp_receive+0xf14>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	441a      	add	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a6:	6879      	ldr	r1, [r7, #4]
 80100a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100aa:	440b      	add	r3, r1
 80100ac:	1ad3      	subs	r3, r2, r3
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f340 8089 	ble.w	80101c6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80100b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	899b      	ldrh	r3, [r3, #12]
 80100bc:	b29b      	uxth	r3, r3
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fa fc6e 	bl	800a9a0 <lwip_htons>
 80100c4:	4603      	mov	r3, r0
 80100c6:	b2db      	uxtb	r3, r3
 80100c8:	f003 0301 	and.w	r3, r3, #1
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d022      	beq.n	8010116 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	899b      	ldrh	r3, [r3, #12]
 80100d8:	b29b      	uxth	r3, r3
 80100da:	b21b      	sxth	r3, r3
 80100dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100e0:	b21c      	sxth	r4, r3
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	899b      	ldrh	r3, [r3, #12]
 80100ea:	b29b      	uxth	r3, r3
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fa fc57 	bl	800a9a0 <lwip_htons>
 80100f2:	4603      	mov	r3, r0
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fa fc4e 	bl	800a9a0 <lwip_htons>
 8010104:	4603      	mov	r3, r0
 8010106:	b21b      	sxth	r3, r3
 8010108:	4323      	orrs	r3, r4
 801010a:	b21a      	sxth	r2, r3
 801010c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	b292      	uxth	r2, r2
 8010114:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011a:	b29a      	uxth	r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010120:	4413      	add	r3, r2
 8010122:	b299      	uxth	r1, r3
 8010124:	4b3c      	ldr	r3, [pc, #240]	; (8010218 <tcp_receive+0xf14>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	b29a      	uxth	r2, r3
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	1a8a      	subs	r2, r1, r2
 8010130:	b292      	uxth	r2, r2
 8010132:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	685a      	ldr	r2, [r3, #4]
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	891b      	ldrh	r3, [r3, #8]
 8010140:	4619      	mov	r1, r3
 8010142:	4610      	mov	r0, r2
 8010144:	f7fb fe5e 	bl	800be04 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	891c      	ldrh	r4, [r3, #8]
 801014e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	899b      	ldrh	r3, [r3, #12]
 8010156:	b29b      	uxth	r3, r3
 8010158:	4618      	mov	r0, r3
 801015a:	f7fa fc21 	bl	800a9a0 <lwip_htons>
 801015e:	4603      	mov	r3, r0
 8010160:	b2db      	uxtb	r3, r3
 8010162:	f003 0303 	and.w	r3, r3, #3
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <tcp_receive+0xe6a>
 801016a:	2301      	movs	r3, #1
 801016c:	e000      	b.n	8010170 <tcp_receive+0xe6c>
 801016e:	2300      	movs	r3, #0
 8010170:	4423      	add	r3, r4
 8010172:	b29a      	uxth	r2, r3
 8010174:	4b2a      	ldr	r3, [pc, #168]	; (8010220 <tcp_receive+0xf1c>)
 8010176:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010178:	4b29      	ldr	r3, [pc, #164]	; (8010220 <tcp_receive+0xf1c>)
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	461a      	mov	r2, r3
 801017e:	4b26      	ldr	r3, [pc, #152]	; (8010218 <tcp_receive+0xf14>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	441a      	add	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010188:	6879      	ldr	r1, [r7, #4]
 801018a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801018c:	440b      	add	r3, r1
 801018e:	429a      	cmp	r2, r3
 8010190:	d019      	beq.n	80101c6 <tcp_receive+0xec2>
 8010192:	4b24      	ldr	r3, [pc, #144]	; (8010224 <tcp_receive+0xf20>)
 8010194:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010198:	4923      	ldr	r1, [pc, #140]	; (8010228 <tcp_receive+0xf24>)
 801019a:	4824      	ldr	r0, [pc, #144]	; (801022c <tcp_receive+0xf28>)
 801019c:	f007 f8fe 	bl	801739c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80101a0:	e011      	b.n	80101c6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80101a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f47f aea4 	bne.w	800fef8 <tcp_receive+0xbf4>
 80101b0:	e00a      	b.n	80101c8 <tcp_receive+0xec4>
                break;
 80101b2:	bf00      	nop
 80101b4:	e008      	b.n	80101c8 <tcp_receive+0xec4>
                break;
 80101b6:	bf00      	nop
 80101b8:	e006      	b.n	80101c8 <tcp_receive+0xec4>
                  break;
 80101ba:	bf00      	nop
 80101bc:	e004      	b.n	80101c8 <tcp_receive+0xec4>
                  break;
 80101be:	bf00      	nop
 80101c0:	e002      	b.n	80101c8 <tcp_receive+0xec4>
                  break;
 80101c2:	bf00      	nop
 80101c4:	e000      	b.n	80101c8 <tcp_receive+0xec4>
                break;
 80101c6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f001 fa33 	bl	8011634 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80101ce:	e003      	b.n	80101d8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f001 fa2f 	bl	8011634 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101d6:	e01a      	b.n	801020e <tcp_receive+0xf0a>
 80101d8:	e019      	b.n	801020e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80101da:	4b0f      	ldr	r3, [pc, #60]	; (8010218 <tcp_receive+0xf14>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e2:	1ad3      	subs	r3, r2, r3
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	db0a      	blt.n	80101fe <tcp_receive+0xefa>
 80101e8:	4b0b      	ldr	r3, [pc, #44]	; (8010218 <tcp_receive+0xf14>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f0:	6879      	ldr	r1, [r7, #4]
 80101f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101f4:	440b      	add	r3, r1
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	3301      	adds	r3, #1
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dd07      	ble.n	801020e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	8b5b      	ldrh	r3, [r3, #26]
 8010202:	f043 0302 	orr.w	r3, r3, #2
 8010206:	b29a      	uxth	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801020c:	e7ff      	b.n	801020e <tcp_receive+0xf0a>
 801020e:	bf00      	nop
 8010210:	3750      	adds	r7, #80	; 0x50
 8010212:	46bd      	mov	sp, r7
 8010214:	bdb0      	pop	{r4, r5, r7, pc}
 8010216:	bf00      	nop
 8010218:	20004b98 	.word	0x20004b98
 801021c:	20004b78 	.word	0x20004b78
 8010220:	20004ba2 	.word	0x20004ba2
 8010224:	0801abc4 	.word	0x0801abc4
 8010228:	0801af6c 	.word	0x0801af6c
 801022c:	0801ac10 	.word	0x0801ac10

08010230 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010236:	4b15      	ldr	r3, [pc, #84]	; (801028c <tcp_get_next_optbyte+0x5c>)
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	1c5a      	adds	r2, r3, #1
 801023c:	b291      	uxth	r1, r2
 801023e:	4a13      	ldr	r2, [pc, #76]	; (801028c <tcp_get_next_optbyte+0x5c>)
 8010240:	8011      	strh	r1, [r2, #0]
 8010242:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010244:	4b12      	ldr	r3, [pc, #72]	; (8010290 <tcp_get_next_optbyte+0x60>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <tcp_get_next_optbyte+0x26>
 801024c:	4b11      	ldr	r3, [pc, #68]	; (8010294 <tcp_get_next_optbyte+0x64>)
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	88fa      	ldrh	r2, [r7, #6]
 8010252:	429a      	cmp	r2, r3
 8010254:	d208      	bcs.n	8010268 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010256:	4b10      	ldr	r3, [pc, #64]	; (8010298 <tcp_get_next_optbyte+0x68>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	3314      	adds	r3, #20
 801025c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801025e:	88fb      	ldrh	r3, [r7, #6]
 8010260:	683a      	ldr	r2, [r7, #0]
 8010262:	4413      	add	r3, r2
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	e00b      	b.n	8010280 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010268:	88fb      	ldrh	r3, [r7, #6]
 801026a:	b2da      	uxtb	r2, r3
 801026c:	4b09      	ldr	r3, [pc, #36]	; (8010294 <tcp_get_next_optbyte+0x64>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	b2db      	uxtb	r3, r3
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010276:	4b06      	ldr	r3, [pc, #24]	; (8010290 <tcp_get_next_optbyte+0x60>)
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	797b      	ldrb	r3, [r7, #5]
 801027c:	4413      	add	r3, r2
 801027e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	20004b94 	.word	0x20004b94
 8010290:	20004b90 	.word	0x20004b90
 8010294:	20004b8e 	.word	0x20004b8e
 8010298:	20004b88 	.word	0x20004b88

0801029c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d106      	bne.n	80102b8 <tcp_parseopt+0x1c>
 80102aa:	4b32      	ldr	r3, [pc, #200]	; (8010374 <tcp_parseopt+0xd8>)
 80102ac:	f240 727d 	movw	r2, #1917	; 0x77d
 80102b0:	4931      	ldr	r1, [pc, #196]	; (8010378 <tcp_parseopt+0xdc>)
 80102b2:	4832      	ldr	r0, [pc, #200]	; (801037c <tcp_parseopt+0xe0>)
 80102b4:	f007 f872 	bl	801739c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80102b8:	4b31      	ldr	r3, [pc, #196]	; (8010380 <tcp_parseopt+0xe4>)
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d055      	beq.n	801036c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102c0:	4b30      	ldr	r3, [pc, #192]	; (8010384 <tcp_parseopt+0xe8>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	801a      	strh	r2, [r3, #0]
 80102c6:	e045      	b.n	8010354 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80102c8:	f7ff ffb2 	bl	8010230 <tcp_get_next_optbyte>
 80102cc:	4603      	mov	r3, r0
 80102ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
 80102d2:	2b02      	cmp	r3, #2
 80102d4:	d006      	beq.n	80102e4 <tcp_parseopt+0x48>
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	dc2b      	bgt.n	8010332 <tcp_parseopt+0x96>
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d041      	beq.n	8010362 <tcp_parseopt+0xc6>
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d127      	bne.n	8010332 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80102e2:	e037      	b.n	8010354 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80102e4:	f7ff ffa4 	bl	8010230 <tcp_get_next_optbyte>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b04      	cmp	r3, #4
 80102ec:	d13b      	bne.n	8010366 <tcp_parseopt+0xca>
 80102ee:	4b25      	ldr	r3, [pc, #148]	; (8010384 <tcp_parseopt+0xe8>)
 80102f0:	881b      	ldrh	r3, [r3, #0]
 80102f2:	3301      	adds	r3, #1
 80102f4:	4a22      	ldr	r2, [pc, #136]	; (8010380 <tcp_parseopt+0xe4>)
 80102f6:	8812      	ldrh	r2, [r2, #0]
 80102f8:	4293      	cmp	r3, r2
 80102fa:	da34      	bge.n	8010366 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80102fc:	f7ff ff98 	bl	8010230 <tcp_get_next_optbyte>
 8010300:	4603      	mov	r3, r0
 8010302:	b29b      	uxth	r3, r3
 8010304:	021b      	lsls	r3, r3, #8
 8010306:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010308:	f7ff ff92 	bl	8010230 <tcp_get_next_optbyte>
 801030c:	4603      	mov	r3, r0
 801030e:	b29a      	uxth	r2, r3
 8010310:	89bb      	ldrh	r3, [r7, #12]
 8010312:	4313      	orrs	r3, r2
 8010314:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010316:	89bb      	ldrh	r3, [r7, #12]
 8010318:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801031c:	d804      	bhi.n	8010328 <tcp_parseopt+0x8c>
 801031e:	89bb      	ldrh	r3, [r7, #12]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d001      	beq.n	8010328 <tcp_parseopt+0x8c>
 8010324:	89ba      	ldrh	r2, [r7, #12]
 8010326:	e001      	b.n	801032c <tcp_parseopt+0x90>
 8010328:	f44f 7206 	mov.w	r2, #536	; 0x218
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010330:	e010      	b.n	8010354 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010332:	f7ff ff7d 	bl	8010230 <tcp_get_next_optbyte>
 8010336:	4603      	mov	r3, r0
 8010338:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801033a:	7afb      	ldrb	r3, [r7, #11]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d914      	bls.n	801036a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010340:	7afb      	ldrb	r3, [r7, #11]
 8010342:	b29a      	uxth	r2, r3
 8010344:	4b0f      	ldr	r3, [pc, #60]	; (8010384 <tcp_parseopt+0xe8>)
 8010346:	881b      	ldrh	r3, [r3, #0]
 8010348:	4413      	add	r3, r2
 801034a:	b29b      	uxth	r3, r3
 801034c:	3b02      	subs	r3, #2
 801034e:	b29a      	uxth	r2, r3
 8010350:	4b0c      	ldr	r3, [pc, #48]	; (8010384 <tcp_parseopt+0xe8>)
 8010352:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010354:	4b0b      	ldr	r3, [pc, #44]	; (8010384 <tcp_parseopt+0xe8>)
 8010356:	881a      	ldrh	r2, [r3, #0]
 8010358:	4b09      	ldr	r3, [pc, #36]	; (8010380 <tcp_parseopt+0xe4>)
 801035a:	881b      	ldrh	r3, [r3, #0]
 801035c:	429a      	cmp	r2, r3
 801035e:	d3b3      	bcc.n	80102c8 <tcp_parseopt+0x2c>
 8010360:	e004      	b.n	801036c <tcp_parseopt+0xd0>
          return;
 8010362:	bf00      	nop
 8010364:	e002      	b.n	801036c <tcp_parseopt+0xd0>
            return;
 8010366:	bf00      	nop
 8010368:	e000      	b.n	801036c <tcp_parseopt+0xd0>
            return;
 801036a:	bf00      	nop
      }
    }
  }
}
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
 8010372:	bf00      	nop
 8010374:	0801abc4 	.word	0x0801abc4
 8010378:	0801b028 	.word	0x0801b028
 801037c:	0801ac10 	.word	0x0801ac10
 8010380:	20004b8c 	.word	0x20004b8c
 8010384:	20004b94 	.word	0x20004b94

08010388 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010388:	b480      	push	{r7}
 801038a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801038c:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <tcp_trigger_input_pcb_close+0x1c>)
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	f043 0310 	orr.w	r3, r3, #16
 8010394:	b2da      	uxtb	r2, r3
 8010396:	4b03      	ldr	r3, [pc, #12]	; (80103a4 <tcp_trigger_input_pcb_close+0x1c>)
 8010398:	701a      	strb	r2, [r3, #0]
}
 801039a:	bf00      	nop
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	20004ba5 	.word	0x20004ba5

080103a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00a      	beq.n	80103d0 <tcp_route+0x28>
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	7a1b      	ldrb	r3, [r3, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d006      	beq.n	80103d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	7a1b      	ldrb	r3, [r3, #8]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fb fb14 	bl	800b9f4 <netif_get_by_index>
 80103cc:	4603      	mov	r3, r0
 80103ce:	e003      	b.n	80103d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f005 f847 	bl	8015464 <ip4_route>
 80103d6:	4603      	mov	r3, r0
  }
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80103e0:	b590      	push	{r4, r7, lr}
 80103e2:	b087      	sub	sp, #28
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	603b      	str	r3, [r7, #0]
 80103ec:	4613      	mov	r3, r2
 80103ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d105      	bne.n	8010402 <tcp_create_segment+0x22>
 80103f6:	4b44      	ldr	r3, [pc, #272]	; (8010508 <tcp_create_segment+0x128>)
 80103f8:	22a3      	movs	r2, #163	; 0xa3
 80103fa:	4944      	ldr	r1, [pc, #272]	; (801050c <tcp_create_segment+0x12c>)
 80103fc:	4844      	ldr	r0, [pc, #272]	; (8010510 <tcp_create_segment+0x130>)
 80103fe:	f006 ffcd 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d105      	bne.n	8010414 <tcp_create_segment+0x34>
 8010408:	4b3f      	ldr	r3, [pc, #252]	; (8010508 <tcp_create_segment+0x128>)
 801040a:	22a4      	movs	r2, #164	; 0xa4
 801040c:	4941      	ldr	r1, [pc, #260]	; (8010514 <tcp_create_segment+0x134>)
 801040e:	4840      	ldr	r0, [pc, #256]	; (8010510 <tcp_create_segment+0x130>)
 8010410:	f006 ffc4 	bl	801739c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	b2db      	uxtb	r3, r3
 801041c:	f003 0304 	and.w	r3, r3, #4
 8010420:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010422:	2003      	movs	r0, #3
 8010424:	f7fa ff72 	bl	800b30c <memp_malloc>
 8010428:	6138      	str	r0, [r7, #16]
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d104      	bne.n	801043a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010430:	68b8      	ldr	r0, [r7, #8]
 8010432:	f7fb fe6d 	bl	800c110 <pbuf_free>
    return NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	e061      	b.n	80104fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010440:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	891a      	ldrh	r2, [r3, #8]
 8010452:	7dfb      	ldrb	r3, [r7, #23]
 8010454:	b29b      	uxth	r3, r3
 8010456:	429a      	cmp	r2, r3
 8010458:	d205      	bcs.n	8010466 <tcp_create_segment+0x86>
 801045a:	4b2b      	ldr	r3, [pc, #172]	; (8010508 <tcp_create_segment+0x128>)
 801045c:	22b0      	movs	r2, #176	; 0xb0
 801045e:	492e      	ldr	r1, [pc, #184]	; (8010518 <tcp_create_segment+0x138>)
 8010460:	482b      	ldr	r0, [pc, #172]	; (8010510 <tcp_create_segment+0x130>)
 8010462:	f006 ff9b 	bl	801739c <iprintf>
  seg->len = p->tot_len - optlen;
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	891a      	ldrh	r2, [r3, #8]
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	b29b      	uxth	r3, r3
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	b29a      	uxth	r2, r3
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010476:	2114      	movs	r1, #20
 8010478:	68b8      	ldr	r0, [r7, #8]
 801047a:	f7fb fdb3 	bl	800bfe4 <pbuf_add_header>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d004      	beq.n	801048e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010484:	6938      	ldr	r0, [r7, #16]
 8010486:	f7fd f8d2 	bl	800d62e <tcp_seg_free>
    return NULL;
 801048a:	2300      	movs	r3, #0
 801048c:	e037      	b.n	80104fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	685a      	ldr	r2, [r3, #4]
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	8ada      	ldrh	r2, [r3, #22]
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	68dc      	ldr	r4, [r3, #12]
 80104a0:	4610      	mov	r0, r2
 80104a2:	f7fa fa7d 	bl	800a9a0 <lwip_htons>
 80104a6:	4603      	mov	r3, r0
 80104a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	8b1a      	ldrh	r2, [r3, #24]
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	68dc      	ldr	r4, [r3, #12]
 80104b2:	4610      	mov	r0, r2
 80104b4:	f7fa fa74 	bl	800a9a0 <lwip_htons>
 80104b8:	4603      	mov	r3, r0
 80104ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	68dc      	ldr	r4, [r3, #12]
 80104c0:	6838      	ldr	r0, [r7, #0]
 80104c2:	f7fa fa82 	bl	800a9ca <lwip_htonl>
 80104c6:	4603      	mov	r3, r0
 80104c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80104ca:	7dfb      	ldrb	r3, [r7, #23]
 80104cc:	089b      	lsrs	r3, r3, #2
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	3305      	adds	r3, #5
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	031b      	lsls	r3, r3, #12
 80104d8:	b29a      	uxth	r2, r3
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	b29b      	uxth	r3, r3
 80104de:	4313      	orrs	r3, r2
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	68dc      	ldr	r4, [r3, #12]
 80104e6:	4610      	mov	r0, r2
 80104e8:	f7fa fa5a 	bl	800a9a0 <lwip_htons>
 80104ec:	4603      	mov	r3, r0
 80104ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	2200      	movs	r2, #0
 80104f6:	749a      	strb	r2, [r3, #18]
 80104f8:	2200      	movs	r2, #0
 80104fa:	74da      	strb	r2, [r3, #19]
  return seg;
 80104fc:	693b      	ldr	r3, [r7, #16]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	371c      	adds	r7, #28
 8010502:	46bd      	mov	sp, r7
 8010504:	bd90      	pop	{r4, r7, pc}
 8010506:	bf00      	nop
 8010508:	0801b044 	.word	0x0801b044
 801050c:	0801b078 	.word	0x0801b078
 8010510:	0801b098 	.word	0x0801b098
 8010514:	0801b0c0 	.word	0x0801b0c0
 8010518:	0801b0e4 	.word	0x0801b0e4

0801051c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801051c:	b590      	push	{r4, r7, lr}
 801051e:	b08b      	sub	sp, #44	; 0x2c
 8010520:	af02      	add	r7, sp, #8
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	460b      	mov	r3, r1
 8010526:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010528:	2300      	movs	r3, #0
 801052a:	61fb      	str	r3, [r7, #28]
 801052c:	2300      	movs	r3, #0
 801052e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010530:	2300      	movs	r3, #0
 8010532:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <tcp_split_unsent_seg+0x2c>
 801053a:	4b95      	ldr	r3, [pc, #596]	; (8010790 <tcp_split_unsent_seg+0x274>)
 801053c:	f240 324b 	movw	r2, #843	; 0x34b
 8010540:	4994      	ldr	r1, [pc, #592]	; (8010794 <tcp_split_unsent_seg+0x278>)
 8010542:	4895      	ldr	r0, [pc, #596]	; (8010798 <tcp_split_unsent_seg+0x27c>)
 8010544:	f006 ff2a 	bl	801739c <iprintf>

  useg = pcb->unsent;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d102      	bne.n	801055a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010558:	e116      	b.n	8010788 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801055a:	887b      	ldrh	r3, [r7, #2]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d109      	bne.n	8010574 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010560:	4b8b      	ldr	r3, [pc, #556]	; (8010790 <tcp_split_unsent_seg+0x274>)
 8010562:	f240 3253 	movw	r2, #851	; 0x353
 8010566:	498d      	ldr	r1, [pc, #564]	; (801079c <tcp_split_unsent_seg+0x280>)
 8010568:	488b      	ldr	r0, [pc, #556]	; (8010798 <tcp_split_unsent_seg+0x27c>)
 801056a:	f006 ff17 	bl	801739c <iprintf>
    return ERR_VAL;
 801056e:	f06f 0305 	mvn.w	r3, #5
 8010572:	e109      	b.n	8010788 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	891b      	ldrh	r3, [r3, #8]
 8010578:	887a      	ldrh	r2, [r7, #2]
 801057a:	429a      	cmp	r2, r3
 801057c:	d301      	bcc.n	8010582 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801057e:	2300      	movs	r3, #0
 8010580:	e102      	b.n	8010788 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010586:	887a      	ldrh	r2, [r7, #2]
 8010588:	429a      	cmp	r2, r3
 801058a:	d906      	bls.n	801059a <tcp_split_unsent_seg+0x7e>
 801058c:	4b80      	ldr	r3, [pc, #512]	; (8010790 <tcp_split_unsent_seg+0x274>)
 801058e:	f240 325b 	movw	r2, #859	; 0x35b
 8010592:	4983      	ldr	r1, [pc, #524]	; (80107a0 <tcp_split_unsent_seg+0x284>)
 8010594:	4880      	ldr	r0, [pc, #512]	; (8010798 <tcp_split_unsent_seg+0x27c>)
 8010596:	f006 ff01 	bl	801739c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	891b      	ldrh	r3, [r3, #8]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d106      	bne.n	80105b0 <tcp_split_unsent_seg+0x94>
 80105a2:	4b7b      	ldr	r3, [pc, #492]	; (8010790 <tcp_split_unsent_seg+0x274>)
 80105a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80105a8:	497e      	ldr	r1, [pc, #504]	; (80107a4 <tcp_split_unsent_seg+0x288>)
 80105aa:	487b      	ldr	r0, [pc, #492]	; (8010798 <tcp_split_unsent_seg+0x27c>)
 80105ac:	f006 fef6 	bl	801739c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	7a9b      	ldrb	r3, [r3, #10]
 80105b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80105b6:	7bfb      	ldrb	r3, [r7, #15]
 80105b8:	009b      	lsls	r3, r3, #2
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	f003 0304 	and.w	r3, r3, #4
 80105c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	891a      	ldrh	r2, [r3, #8]
 80105c6:	887b      	ldrh	r3, [r7, #2]
 80105c8:	1ad3      	subs	r3, r2, r3
 80105ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80105cc:	7bbb      	ldrb	r3, [r7, #14]
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	89bb      	ldrh	r3, [r7, #12]
 80105d2:	4413      	add	r3, r2
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105da:	4619      	mov	r1, r3
 80105dc:	2036      	movs	r0, #54	; 0x36
 80105de:	f7fb fab3 	bl	800bb48 <pbuf_alloc>
 80105e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f000 80b7 	beq.w	801075a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	891a      	ldrh	r2, [r3, #8]
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	891b      	ldrh	r3, [r3, #8]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	887b      	ldrh	r3, [r7, #2]
 80105fc:	4413      	add	r3, r2
 80105fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	6858      	ldr	r0, [r3, #4]
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	685a      	ldr	r2, [r3, #4]
 8010608:	7bbb      	ldrb	r3, [r7, #14]
 801060a:	18d1      	adds	r1, r2, r3
 801060c:	897b      	ldrh	r3, [r7, #10]
 801060e:	89ba      	ldrh	r2, [r7, #12]
 8010610:	f7fb ff84 	bl	800c51c <pbuf_copy_partial>
 8010614:	4603      	mov	r3, r0
 8010616:	461a      	mov	r2, r3
 8010618:	89bb      	ldrh	r3, [r7, #12]
 801061a:	4293      	cmp	r3, r2
 801061c:	f040 809f 	bne.w	801075e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	899b      	ldrh	r3, [r3, #12]
 8010626:	b29b      	uxth	r3, r3
 8010628:	4618      	mov	r0, r3
 801062a:	f7fa f9b9 	bl	800a9a0 <lwip_htons>
 801062e:	4603      	mov	r3, r0
 8010630:	b2db      	uxtb	r3, r3
 8010632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010636:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010638:	2300      	movs	r3, #0
 801063a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801063c:	7efb      	ldrb	r3, [r7, #27]
 801063e:	f003 0308 	and.w	r3, r3, #8
 8010642:	2b00      	cmp	r3, #0
 8010644:	d007      	beq.n	8010656 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010646:	7efb      	ldrb	r3, [r7, #27]
 8010648:	f023 0308 	bic.w	r3, r3, #8
 801064c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801064e:	7ebb      	ldrb	r3, [r7, #26]
 8010650:	f043 0308 	orr.w	r3, r3, #8
 8010654:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010656:	7efb      	ldrb	r3, [r7, #27]
 8010658:	f003 0301 	and.w	r3, r3, #1
 801065c:	2b00      	cmp	r3, #0
 801065e:	d007      	beq.n	8010670 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010660:	7efb      	ldrb	r3, [r7, #27]
 8010662:	f023 0301 	bic.w	r3, r3, #1
 8010666:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010668:	7ebb      	ldrb	r3, [r7, #26]
 801066a:	f043 0301 	orr.w	r3, r3, #1
 801066e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	f7fa f9a7 	bl	800a9ca <lwip_htonl>
 801067c:	4602      	mov	r2, r0
 801067e:	887b      	ldrh	r3, [r7, #2]
 8010680:	18d1      	adds	r1, r2, r3
 8010682:	7eba      	ldrb	r2, [r7, #26]
 8010684:	7bfb      	ldrb	r3, [r7, #15]
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	460b      	mov	r3, r1
 801068a:	6939      	ldr	r1, [r7, #16]
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7ff fea7 	bl	80103e0 <tcp_create_segment>
 8010692:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d063      	beq.n	8010762 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fb fdc4 	bl	800c22c <pbuf_clen>
 80106a4:	4603      	mov	r3, r0
 80106a6:	461a      	mov	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106ae:	1a9b      	subs	r3, r3, r2
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	6858      	ldr	r0, [r3, #4]
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	891a      	ldrh	r2, [r3, #8]
 80106c2:	89bb      	ldrh	r3, [r7, #12]
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	b29b      	uxth	r3, r3
 80106c8:	4619      	mov	r1, r3
 80106ca:	f7fb fb9b 	bl	800be04 <pbuf_realloc>
  useg->len -= remainder;
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	891a      	ldrh	r2, [r3, #8]
 80106d2:	89bb      	ldrh	r3, [r7, #12]
 80106d4:	1ad3      	subs	r3, r2, r3
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	68db      	ldr	r3, [r3, #12]
 80106e0:	899b      	ldrh	r3, [r3, #12]
 80106e2:	b29c      	uxth	r4, r3
 80106e4:	7efb      	ldrb	r3, [r7, #27]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fa f959 	bl	800a9a0 <lwip_htons>
 80106ee:	4603      	mov	r3, r0
 80106f0:	461a      	mov	r2, r3
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	4322      	orrs	r2, r4
 80106f8:	b292      	uxth	r2, r2
 80106fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	4618      	mov	r0, r3
 8010702:	f7fb fd93 	bl	800c22c <pbuf_clen>
 8010706:	4603      	mov	r3, r0
 8010708:	461a      	mov	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010710:	4413      	add	r3, r2
 8010712:	b29a      	uxth	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	685b      	ldr	r3, [r3, #4]
 801071e:	4618      	mov	r0, r3
 8010720:	f7fb fd84 	bl	800c22c <pbuf_clen>
 8010724:	4603      	mov	r3, r0
 8010726:	461a      	mov	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801072e:	4413      	add	r3, r2
 8010730:	b29a      	uxth	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010738:	697b      	ldr	r3, [r7, #20]
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	69fa      	ldr	r2, [r7, #28]
 8010744:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d103      	bne.n	8010756 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010756:	2300      	movs	r3, #0
 8010758:	e016      	b.n	8010788 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801075a:	bf00      	nop
 801075c:	e002      	b.n	8010764 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801075e:	bf00      	nop
 8010760:	e000      	b.n	8010764 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010762:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d006      	beq.n	8010778 <tcp_split_unsent_seg+0x25c>
 801076a:	4b09      	ldr	r3, [pc, #36]	; (8010790 <tcp_split_unsent_seg+0x274>)
 801076c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010770:	490d      	ldr	r1, [pc, #52]	; (80107a8 <tcp_split_unsent_seg+0x28c>)
 8010772:	4809      	ldr	r0, [pc, #36]	; (8010798 <tcp_split_unsent_seg+0x27c>)
 8010774:	f006 fe12 	bl	801739c <iprintf>
  if (p != NULL) {
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d002      	beq.n	8010784 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801077e:	6938      	ldr	r0, [r7, #16]
 8010780:	f7fb fcc6 	bl	800c110 <pbuf_free>
  }

  return ERR_MEM;
 8010784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010788:	4618      	mov	r0, r3
 801078a:	3724      	adds	r7, #36	; 0x24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd90      	pop	{r4, r7, pc}
 8010790:	0801b044 	.word	0x0801b044
 8010794:	0801b3d8 	.word	0x0801b3d8
 8010798:	0801b098 	.word	0x0801b098
 801079c:	0801b3fc 	.word	0x0801b3fc
 80107a0:	0801b420 	.word	0x0801b420
 80107a4:	0801b430 	.word	0x0801b430
 80107a8:	0801b440 	.word	0x0801b440

080107ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80107ac:	b590      	push	{r4, r7, lr}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <tcp_send_fin+0x1c>
 80107ba:	4b21      	ldr	r3, [pc, #132]	; (8010840 <tcp_send_fin+0x94>)
 80107bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80107c0:	4920      	ldr	r1, [pc, #128]	; (8010844 <tcp_send_fin+0x98>)
 80107c2:	4821      	ldr	r0, [pc, #132]	; (8010848 <tcp_send_fin+0x9c>)
 80107c4:	f006 fdea 	bl	801739c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d02e      	beq.n	801082e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107d4:	60fb      	str	r3, [r7, #12]
 80107d6:	e002      	b.n	80107de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1f8      	bne.n	80107d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	68db      	ldr	r3, [r3, #12]
 80107ea:	899b      	ldrh	r3, [r3, #12]
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fa f8d6 	bl	800a9a0 <lwip_htons>
 80107f4:	4603      	mov	r3, r0
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	f003 0307 	and.w	r3, r3, #7
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d116      	bne.n	801082e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	899b      	ldrh	r3, [r3, #12]
 8010806:	b29c      	uxth	r4, r3
 8010808:	2001      	movs	r0, #1
 801080a:	f7fa f8c9 	bl	800a9a0 <lwip_htons>
 801080e:	4603      	mov	r3, r0
 8010810:	461a      	mov	r2, r3
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	4322      	orrs	r2, r4
 8010818:	b292      	uxth	r2, r2
 801081a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	8b5b      	ldrh	r3, [r3, #26]
 8010820:	f043 0320 	orr.w	r3, r3, #32
 8010824:	b29a      	uxth	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801082a:	2300      	movs	r3, #0
 801082c:	e004      	b.n	8010838 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801082e:	2101      	movs	r1, #1
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f80b 	bl	801084c <tcp_enqueue_flags>
 8010836:	4603      	mov	r3, r0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3714      	adds	r7, #20
 801083c:	46bd      	mov	sp, r7
 801083e:	bd90      	pop	{r4, r7, pc}
 8010840:	0801b044 	.word	0x0801b044
 8010844:	0801b44c 	.word	0x0801b44c
 8010848:	0801b098 	.word	0x0801b098

0801084c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b08a      	sub	sp, #40	; 0x28
 8010850:	af02      	add	r7, sp, #8
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	460b      	mov	r3, r1
 8010856:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010858:	2300      	movs	r3, #0
 801085a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801085c:	2300      	movs	r3, #0
 801085e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	f003 0303 	and.w	r3, r3, #3
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <tcp_enqueue_flags+0x2c>
 801086a:	4b67      	ldr	r3, [pc, #412]	; (8010a08 <tcp_enqueue_flags+0x1bc>)
 801086c:	f240 4211 	movw	r2, #1041	; 0x411
 8010870:	4966      	ldr	r1, [pc, #408]	; (8010a0c <tcp_enqueue_flags+0x1c0>)
 8010872:	4867      	ldr	r0, [pc, #412]	; (8010a10 <tcp_enqueue_flags+0x1c4>)
 8010874:	f006 fd92 	bl	801739c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d106      	bne.n	801088c <tcp_enqueue_flags+0x40>
 801087e:	4b62      	ldr	r3, [pc, #392]	; (8010a08 <tcp_enqueue_flags+0x1bc>)
 8010880:	f240 4213 	movw	r2, #1043	; 0x413
 8010884:	4963      	ldr	r1, [pc, #396]	; (8010a14 <tcp_enqueue_flags+0x1c8>)
 8010886:	4862      	ldr	r0, [pc, #392]	; (8010a10 <tcp_enqueue_flags+0x1c4>)
 8010888:	f006 fd88 	bl	801739c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801088c:	78fb      	ldrb	r3, [r7, #3]
 801088e:	f003 0302 	and.w	r3, r3, #2
 8010892:	2b00      	cmp	r3, #0
 8010894:	d001      	beq.n	801089a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010896:	2301      	movs	r3, #1
 8010898:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801089a:	7ffb      	ldrb	r3, [r7, #31]
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	f003 0304 	and.w	r3, r3, #4
 80108a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80108a6:	7dfb      	ldrb	r3, [r7, #23]
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108ae:	4619      	mov	r1, r3
 80108b0:	2036      	movs	r0, #54	; 0x36
 80108b2:	f7fb f949 	bl	800bb48 <pbuf_alloc>
 80108b6:	6138      	str	r0, [r7, #16]
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d109      	bne.n	80108d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	8b5b      	ldrh	r3, [r3, #26]
 80108c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80108cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108d0:	e095      	b.n	80109fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	895a      	ldrh	r2, [r3, #10]
 80108d6:	7dfb      	ldrb	r3, [r7, #23]
 80108d8:	b29b      	uxth	r3, r3
 80108da:	429a      	cmp	r2, r3
 80108dc:	d206      	bcs.n	80108ec <tcp_enqueue_flags+0xa0>
 80108de:	4b4a      	ldr	r3, [pc, #296]	; (8010a08 <tcp_enqueue_flags+0x1bc>)
 80108e0:	f240 4239 	movw	r2, #1081	; 0x439
 80108e4:	494c      	ldr	r1, [pc, #304]	; (8010a18 <tcp_enqueue_flags+0x1cc>)
 80108e6:	484a      	ldr	r0, [pc, #296]	; (8010a10 <tcp_enqueue_flags+0x1c4>)
 80108e8:	f006 fd58 	bl	801739c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80108f0:	78fa      	ldrb	r2, [r7, #3]
 80108f2:	7ffb      	ldrb	r3, [r7, #31]
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	460b      	mov	r3, r1
 80108f8:	6939      	ldr	r1, [r7, #16]
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f7ff fd70 	bl	80103e0 <tcp_create_segment>
 8010900:	60f8      	str	r0, [r7, #12]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d109      	bne.n	801091c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	8b5b      	ldrh	r3, [r3, #26]
 801090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010910:	b29a      	uxth	r2, r3
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801091a:	e070      	b.n	80109fe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	f003 0303 	and.w	r3, r3, #3
 8010924:	2b00      	cmp	r3, #0
 8010926:	d006      	beq.n	8010936 <tcp_enqueue_flags+0xea>
 8010928:	4b37      	ldr	r3, [pc, #220]	; (8010a08 <tcp_enqueue_flags+0x1bc>)
 801092a:	f240 4242 	movw	r2, #1090	; 0x442
 801092e:	493b      	ldr	r1, [pc, #236]	; (8010a1c <tcp_enqueue_flags+0x1d0>)
 8010930:	4837      	ldr	r0, [pc, #220]	; (8010a10 <tcp_enqueue_flags+0x1c4>)
 8010932:	f006 fd33 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	891b      	ldrh	r3, [r3, #8]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d006      	beq.n	801094c <tcp_enqueue_flags+0x100>
 801093e:	4b32      	ldr	r3, [pc, #200]	; (8010a08 <tcp_enqueue_flags+0x1bc>)
 8010940:	f240 4243 	movw	r2, #1091	; 0x443
 8010944:	4936      	ldr	r1, [pc, #216]	; (8010a20 <tcp_enqueue_flags+0x1d4>)
 8010946:	4832      	ldr	r0, [pc, #200]	; (8010a10 <tcp_enqueue_flags+0x1c4>)
 8010948:	f006 fd28 	bl	801739c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010950:	2b00      	cmp	r3, #0
 8010952:	d103      	bne.n	801095c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	66da      	str	r2, [r3, #108]	; 0x6c
 801095a:	e00d      	b.n	8010978 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010960:	61bb      	str	r3, [r7, #24]
 8010962:	e002      	b.n	801096a <tcp_enqueue_flags+0x11e>
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	61bb      	str	r3, [r7, #24]
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1f8      	bne.n	8010964 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010980:	78fb      	ldrb	r3, [r7, #3]
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b00      	cmp	r3, #0
 8010988:	d104      	bne.n	8010994 <tcp_enqueue_flags+0x148>
 801098a:	78fb      	ldrb	r3, [r7, #3]
 801098c:	f003 0301 	and.w	r3, r3, #1
 8010990:	2b00      	cmp	r3, #0
 8010992:	d004      	beq.n	801099e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010998:	1c5a      	adds	r2, r3, #1
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801099e:	78fb      	ldrb	r3, [r7, #3]
 80109a0:	f003 0301 	and.w	r3, r3, #1
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d006      	beq.n	80109b6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	8b5b      	ldrh	r3, [r3, #26]
 80109ac:	f043 0320 	orr.w	r3, r3, #32
 80109b0:	b29a      	uxth	r2, r3
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fb fc36 	bl	800c22c <pbuf_clen>
 80109c0:	4603      	mov	r3, r0
 80109c2:	461a      	mov	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109ca:	4413      	add	r3, r2
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d00e      	beq.n	80109fc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10a      	bne.n	80109fc <tcp_enqueue_flags+0x1b0>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d106      	bne.n	80109fc <tcp_enqueue_flags+0x1b0>
 80109ee:	4b06      	ldr	r3, [pc, #24]	; (8010a08 <tcp_enqueue_flags+0x1bc>)
 80109f0:	f240 4265 	movw	r2, #1125	; 0x465
 80109f4:	490b      	ldr	r1, [pc, #44]	; (8010a24 <tcp_enqueue_flags+0x1d8>)
 80109f6:	4806      	ldr	r0, [pc, #24]	; (8010a10 <tcp_enqueue_flags+0x1c4>)
 80109f8:	f006 fcd0 	bl	801739c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	0801b044 	.word	0x0801b044
 8010a0c:	0801b468 	.word	0x0801b468
 8010a10:	0801b098 	.word	0x0801b098
 8010a14:	0801b4c0 	.word	0x0801b4c0
 8010a18:	0801b4e0 	.word	0x0801b4e0
 8010a1c:	0801b51c 	.word	0x0801b51c
 8010a20:	0801b534 	.word	0x0801b534
 8010a24:	0801b560 	.word	0x0801b560

08010a28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010a28:	b5b0      	push	{r4, r5, r7, lr}
 8010a2a:	b08a      	sub	sp, #40	; 0x28
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d106      	bne.n	8010a44 <tcp_output+0x1c>
 8010a36:	4b9e      	ldr	r3, [pc, #632]	; (8010cb0 <tcp_output+0x288>)
 8010a38:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010a3c:	499d      	ldr	r1, [pc, #628]	; (8010cb4 <tcp_output+0x28c>)
 8010a3e:	489e      	ldr	r0, [pc, #632]	; (8010cb8 <tcp_output+0x290>)
 8010a40:	f006 fcac 	bl	801739c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	7d1b      	ldrb	r3, [r3, #20]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d106      	bne.n	8010a5a <tcp_output+0x32>
 8010a4c:	4b98      	ldr	r3, [pc, #608]	; (8010cb0 <tcp_output+0x288>)
 8010a4e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010a52:	499a      	ldr	r1, [pc, #616]	; (8010cbc <tcp_output+0x294>)
 8010a54:	4898      	ldr	r0, [pc, #608]	; (8010cb8 <tcp_output+0x290>)
 8010a56:	f006 fca1 	bl	801739c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010a5a:	4b99      	ldr	r3, [pc, #612]	; (8010cc0 <tcp_output+0x298>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d101      	bne.n	8010a68 <tcp_output+0x40>
    return ERR_OK;
 8010a64:	2300      	movs	r3, #0
 8010a66:	e1ce      	b.n	8010e06 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a74:	4293      	cmp	r3, r2
 8010a76:	bf28      	it	cs
 8010a78:	4613      	movcs	r3, r2
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a82:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d10b      	bne.n	8010aa2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8b5b      	ldrh	r3, [r3, #26]
 8010a8e:	f003 0302 	and.w	r3, r3, #2
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f000 81aa 	beq.w	8010dec <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 fdcb 	bl	8011634 <tcp_send_empty_ack>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	e1b1      	b.n	8010e06 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010aa2:	6879      	ldr	r1, [r7, #4]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7ff fc7c 	bl	80103a8 <tcp_route>
 8010ab0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d102      	bne.n	8010abe <tcp_output+0x96>
    return ERR_RTE;
 8010ab8:	f06f 0303 	mvn.w	r3, #3
 8010abc:	e1a3      	b.n	8010e06 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d003      	beq.n	8010acc <tcp_output+0xa4>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d111      	bne.n	8010af0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d002      	beq.n	8010ad8 <tcp_output+0xb0>
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	3304      	adds	r3, #4
 8010ad6:	e000      	b.n	8010ada <tcp_output+0xb2>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d102      	bne.n	8010ae8 <tcp_output+0xc0>
      return ERR_RTE;
 8010ae2:	f06f 0303 	mvn.w	r3, #3
 8010ae6:	e18e      	b.n	8010e06 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7f9 ff67 	bl	800a9ca <lwip_htonl>
 8010afc:	4602      	mov	r2, r0
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b06:	8912      	ldrh	r2, [r2, #8]
 8010b08:	4413      	add	r3, r2
 8010b0a:	69ba      	ldr	r2, [r7, #24]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d227      	bcs.n	8010b60 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b16:	461a      	mov	r2, r3
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d114      	bne.n	8010b48 <tcp_output+0x120>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d110      	bne.n	8010b48 <tcp_output+0x120>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d10b      	bne.n	8010b48 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	8b5b      	ldrh	r3, [r3, #26]
 8010b4c:	f003 0302 	and.w	r3, r3, #2
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 814d 	beq.w	8010df0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 fd6c 	bl	8011634 <tcp_send_empty_ack>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	e152      	b.n	8010e06 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b6c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010b6e:	6a3b      	ldr	r3, [r7, #32]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f000 811c 	beq.w	8010dae <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010b76:	e002      	b.n	8010b7e <tcp_output+0x156>
 8010b78:	6a3b      	ldr	r3, [r7, #32]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	623b      	str	r3, [r7, #32]
 8010b7e:	6a3b      	ldr	r3, [r7, #32]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d1f8      	bne.n	8010b78 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010b86:	e112      	b.n	8010dae <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	899b      	ldrh	r3, [r3, #12]
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7f9 ff05 	bl	800a9a0 <lwip_htons>
 8010b96:	4603      	mov	r3, r0
 8010b98:	b2db      	uxtb	r3, r3
 8010b9a:	f003 0304 	and.w	r3, r3, #4
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d006      	beq.n	8010bb0 <tcp_output+0x188>
 8010ba2:	4b43      	ldr	r3, [pc, #268]	; (8010cb0 <tcp_output+0x288>)
 8010ba4:	f240 5236 	movw	r2, #1334	; 0x536
 8010ba8:	4946      	ldr	r1, [pc, #280]	; (8010cc4 <tcp_output+0x29c>)
 8010baa:	4843      	ldr	r0, [pc, #268]	; (8010cb8 <tcp_output+0x290>)
 8010bac:	f006 fbf6 	bl	801739c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d01f      	beq.n	8010bf8 <tcp_output+0x1d0>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	8b5b      	ldrh	r3, [r3, #26]
 8010bbc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d119      	bne.n	8010bf8 <tcp_output+0x1d0>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d00b      	beq.n	8010be4 <tcp_output+0x1bc>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d110      	bne.n	8010bf8 <tcp_output+0x1d0>
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bda:	891a      	ldrh	r2, [r3, #8]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d209      	bcs.n	8010bf8 <tcp_output+0x1d0>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d004      	beq.n	8010bf8 <tcp_output+0x1d0>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bf4:	2b08      	cmp	r3, #8
 8010bf6:	d901      	bls.n	8010bfc <tcp_output+0x1d4>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e000      	b.n	8010bfe <tcp_output+0x1d6>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	8b5b      	ldrh	r3, [r3, #26]
 8010c06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f000 80e4 	beq.w	8010dd8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7d1b      	ldrb	r3, [r3, #20]
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	d00d      	beq.n	8010c34 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	899b      	ldrh	r3, [r3, #12]
 8010c1e:	b29c      	uxth	r4, r3
 8010c20:	2010      	movs	r0, #16
 8010c22:	f7f9 febd 	bl	800a9a0 <lwip_htons>
 8010c26:	4603      	mov	r3, r0
 8010c28:	461a      	mov	r2, r3
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	4322      	orrs	r2, r4
 8010c30:	b292      	uxth	r2, r2
 8010c32:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010c34:	697a      	ldr	r2, [r7, #20]
 8010c36:	6879      	ldr	r1, [r7, #4]
 8010c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c3a:	f000 f909 	bl	8010e50 <tcp_output_segment>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d009      	beq.n	8010c5e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8b5b      	ldrh	r3, [r3, #26]
 8010c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	835a      	strh	r2, [r3, #26]
      return err;
 8010c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c5c:	e0d3      	b.n	8010e06 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	7d1b      	ldrb	r3, [r3, #20]
 8010c6a:	2b02      	cmp	r3, #2
 8010c6c:	d006      	beq.n	8010c7c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	8b5b      	ldrh	r3, [r3, #26]
 8010c72:	f023 0303 	bic.w	r3, r3, #3
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7f9 fea1 	bl	800a9ca <lwip_htonl>
 8010c88:	4604      	mov	r4, r0
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8c:	891b      	ldrh	r3, [r3, #8]
 8010c8e:	461d      	mov	r5, r3
 8010c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	899b      	ldrh	r3, [r3, #12]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7f9 fe81 	bl	800a9a0 <lwip_htons>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	f003 0303 	and.w	r3, r3, #3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d00e      	beq.n	8010cc8 <tcp_output+0x2a0>
 8010caa:	2301      	movs	r3, #1
 8010cac:	e00d      	b.n	8010cca <tcp_output+0x2a2>
 8010cae:	bf00      	nop
 8010cb0:	0801b044 	.word	0x0801b044
 8010cb4:	0801b588 	.word	0x0801b588
 8010cb8:	0801b098 	.word	0x0801b098
 8010cbc:	0801b5a0 	.word	0x0801b5a0
 8010cc0:	20012cc8 	.word	0x20012cc8
 8010cc4:	0801b5c8 	.word	0x0801b5c8
 8010cc8:	2300      	movs	r3, #0
 8010cca:	442b      	add	r3, r5
 8010ccc:	4423      	add	r3, r4
 8010cce:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	da02      	bge.n	8010ce2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce4:	891b      	ldrh	r3, [r3, #8]
 8010ce6:	461c      	mov	r4, r3
 8010ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	899b      	ldrh	r3, [r3, #12]
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7f9 fe55 	bl	800a9a0 <lwip_htons>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	b2db      	uxtb	r3, r3
 8010cfa:	f003 0303 	and.w	r3, r3, #3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d001      	beq.n	8010d06 <tcp_output+0x2de>
 8010d02:	2301      	movs	r3, #1
 8010d04:	e000      	b.n	8010d08 <tcp_output+0x2e0>
 8010d06:	2300      	movs	r3, #0
 8010d08:	4423      	add	r3, r4
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d049      	beq.n	8010da2 <tcp_output+0x37a>
      seg->next = NULL;
 8010d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d105      	bne.n	8010d28 <tcp_output+0x300>
        pcb->unacked = seg;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d20:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	623b      	str	r3, [r7, #32]
 8010d26:	e03f      	b.n	8010da8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2a:	68db      	ldr	r3, [r3, #12]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7f9 fe4b 	bl	800a9ca <lwip_htonl>
 8010d34:	4604      	mov	r4, r0
 8010d36:	6a3b      	ldr	r3, [r7, #32]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7f9 fe44 	bl	800a9ca <lwip_htonl>
 8010d42:	4603      	mov	r3, r0
 8010d44:	1ae3      	subs	r3, r4, r3
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	da24      	bge.n	8010d94 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	3370      	adds	r3, #112	; 0x70
 8010d4e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d50:	e002      	b.n	8010d58 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d011      	beq.n	8010d84 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010d60:	69fb      	ldr	r3, [r7, #28]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7f9 fe2e 	bl	800a9ca <lwip_htonl>
 8010d6e:	4604      	mov	r4, r0
 8010d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7f9 fe27 	bl	800a9ca <lwip_htonl>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	dbe6      	blt.n	8010d52 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	681a      	ldr	r2, [r3, #0]
 8010d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010d8c:	69fb      	ldr	r3, [r7, #28]
 8010d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d90:	601a      	str	r2, [r3, #0]
 8010d92:	e009      	b.n	8010da8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010d94:	6a3b      	ldr	r3, [r7, #32]
 8010d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d98:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010d9a:	6a3b      	ldr	r3, [r7, #32]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	623b      	str	r3, [r7, #32]
 8010da0:	e002      	b.n	8010da8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010da4:	f7fc fc43 	bl	800d62e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dac:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d012      	beq.n	8010dda <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7f9 fe05 	bl	800a9ca <lwip_htonl>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dca:	8912      	ldrh	r2, [r2, #8]
 8010dcc:	4413      	add	r3, r2
  while (seg != NULL &&
 8010dce:	69ba      	ldr	r2, [r7, #24]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	f4bf aed9 	bcs.w	8010b88 <tcp_output+0x160>
 8010dd6:	e000      	b.n	8010dda <tcp_output+0x3b2>
      break;
 8010dd8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d108      	bne.n	8010df4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010dea:	e004      	b.n	8010df6 <tcp_output+0x3ce>
    goto output_done;
 8010dec:	bf00      	nop
 8010dee:	e002      	b.n	8010df6 <tcp_output+0x3ce>
    goto output_done;
 8010df0:	bf00      	nop
 8010df2:	e000      	b.n	8010df6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010df4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	8b5b      	ldrh	r3, [r3, #26]
 8010dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3728      	adds	r7, #40	; 0x28
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e0e:	bf00      	nop

08010e10 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b082      	sub	sp, #8
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d106      	bne.n	8010e2c <tcp_output_segment_busy+0x1c>
 8010e1e:	4b09      	ldr	r3, [pc, #36]	; (8010e44 <tcp_output_segment_busy+0x34>)
 8010e20:	f240 529a 	movw	r2, #1434	; 0x59a
 8010e24:	4908      	ldr	r1, [pc, #32]	; (8010e48 <tcp_output_segment_busy+0x38>)
 8010e26:	4809      	ldr	r0, [pc, #36]	; (8010e4c <tcp_output_segment_busy+0x3c>)
 8010e28:	f006 fab8 	bl	801739c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	7b9b      	ldrb	r3, [r3, #14]
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d001      	beq.n	8010e3a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e000      	b.n	8010e3c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010e3a:	2300      	movs	r3, #0
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	0801b044 	.word	0x0801b044
 8010e48:	0801b5e0 	.word	0x0801b5e0
 8010e4c:	0801b098 	.word	0x0801b098

08010e50 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010e50:	b5b0      	push	{r4, r5, r7, lr}
 8010e52:	b08c      	sub	sp, #48	; 0x30
 8010e54:	af04      	add	r7, sp, #16
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d106      	bne.n	8010e70 <tcp_output_segment+0x20>
 8010e62:	4b63      	ldr	r3, [pc, #396]	; (8010ff0 <tcp_output_segment+0x1a0>)
 8010e64:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010e68:	4962      	ldr	r1, [pc, #392]	; (8010ff4 <tcp_output_segment+0x1a4>)
 8010e6a:	4863      	ldr	r0, [pc, #396]	; (8010ff8 <tcp_output_segment+0x1a8>)
 8010e6c:	f006 fa96 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d106      	bne.n	8010e84 <tcp_output_segment+0x34>
 8010e76:	4b5e      	ldr	r3, [pc, #376]	; (8010ff0 <tcp_output_segment+0x1a0>)
 8010e78:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010e7c:	495f      	ldr	r1, [pc, #380]	; (8010ffc <tcp_output_segment+0x1ac>)
 8010e7e:	485e      	ldr	r0, [pc, #376]	; (8010ff8 <tcp_output_segment+0x1a8>)
 8010e80:	f006 fa8c 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d106      	bne.n	8010e98 <tcp_output_segment+0x48>
 8010e8a:	4b59      	ldr	r3, [pc, #356]	; (8010ff0 <tcp_output_segment+0x1a0>)
 8010e8c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010e90:	495b      	ldr	r1, [pc, #364]	; (8011000 <tcp_output_segment+0x1b0>)
 8010e92:	4859      	ldr	r0, [pc, #356]	; (8010ff8 <tcp_output_segment+0x1a8>)
 8010e94:	f006 fa82 	bl	801739c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f7ff ffb9 	bl	8010e10 <tcp_output_segment_busy>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d001      	beq.n	8010ea8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e09f      	b.n	8010fe8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	68dc      	ldr	r4, [r3, #12]
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	f7f9 fd8a 	bl	800a9ca <lwip_htonl>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	68dc      	ldr	r4, [r3, #12]
 8010ec2:	4610      	mov	r0, r2
 8010ec4:	f7f9 fd6c 	bl	800a9a0 <lwip_htons>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ed0:	68ba      	ldr	r2, [r7, #8]
 8010ed2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010ed4:	441a      	add	r2, r3
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	3314      	adds	r3, #20
 8010ee0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	7a9b      	ldrb	r3, [r3, #10]
 8010ee6:	f003 0301 	and.w	r3, r3, #1
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d015      	beq.n	8010f1a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	6879      	ldr	r1, [r7, #4]
 8010ef6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010efa:	f7fc fe8f 	bl	800dc1c <tcp_eff_send_mss_netif>
 8010efe:	4603      	mov	r3, r0
 8010f00:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010f02:	8b7b      	ldrh	r3, [r7, #26]
 8010f04:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7f9 fd5e 	bl	800a9ca <lwip_htonl>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	3304      	adds	r3, #4
 8010f18:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	da02      	bge.n	8010f2a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	2200      	movs	r2, #0
 8010f28:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d10c      	bne.n	8010f4c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010f32:	4b34      	ldr	r3, [pc, #208]	; (8011004 <tcp_output_segment+0x1b4>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7f9 fd42 	bl	800a9ca <lwip_htonl>
 8010f46:	4602      	mov	r2, r0
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	68da      	ldr	r2, [r3, #12]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	685b      	ldr	r3, [r3, #4]
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	8959      	ldrh	r1, [r3, #10]
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	8b3a      	ldrh	r2, [r7, #24]
 8010f66:	1a8a      	subs	r2, r1, r2
 8010f68:	b292      	uxth	r2, r2
 8010f6a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	8919      	ldrh	r1, [r3, #8]
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	8b3a      	ldrh	r2, [r7, #24]
 8010f78:	1a8a      	subs	r2, r1, r2
 8010f7a:	b292      	uxth	r2, r2
 8010f7c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	68fa      	ldr	r2, [r7, #12]
 8010f84:	68d2      	ldr	r2, [r2, #12]
 8010f86:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	741a      	strb	r2, [r3, #16]
 8010f90:	2200      	movs	r2, #0
 8010f92:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	f103 0214 	add.w	r2, r3, #20
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	7a9b      	ldrb	r3, [r3, #10]
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	f003 0304 	and.w	r3, r3, #4
 8010fa6:	4413      	add	r3, r2
 8010fa8:	69fa      	ldr	r2, [r7, #28]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d006      	beq.n	8010fbc <tcp_output_segment+0x16c>
 8010fae:	4b10      	ldr	r3, [pc, #64]	; (8010ff0 <tcp_output_segment+0x1a0>)
 8010fb0:	f240 621c 	movw	r2, #1564	; 0x61c
 8010fb4:	4914      	ldr	r1, [pc, #80]	; (8011008 <tcp_output_segment+0x1b8>)
 8010fb6:	4810      	ldr	r0, [pc, #64]	; (8010ff8 <tcp_output_segment+0x1a8>)
 8010fb8:	f006 f9f0 	bl	801739c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6858      	ldr	r0, [r3, #4]
 8010fc0:	68b9      	ldr	r1, [r7, #8]
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	1d1c      	adds	r4, r3, #4
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	7add      	ldrb	r5, [r3, #11]
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	7a9b      	ldrb	r3, [r3, #10]
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	9202      	str	r2, [sp, #8]
 8010fd2:	2206      	movs	r2, #6
 8010fd4:	9201      	str	r2, [sp, #4]
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	462b      	mov	r3, r5
 8010fda:	4622      	mov	r2, r4
 8010fdc:	f004 fc1e 	bl	801581c <ip4_output_if>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3720      	adds	r7, #32
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bdb0      	pop	{r4, r5, r7, pc}
 8010ff0:	0801b044 	.word	0x0801b044
 8010ff4:	0801b608 	.word	0x0801b608
 8010ff8:	0801b098 	.word	0x0801b098
 8010ffc:	0801b628 	.word	0x0801b628
 8011000:	0801b648 	.word	0x0801b648
 8011004:	20012cb8 	.word	0x20012cb8
 8011008:	0801b66c 	.word	0x0801b66c

0801100c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801100c:	b5b0      	push	{r4, r5, r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d106      	bne.n	8011028 <tcp_rexmit_rto_prepare+0x1c>
 801101a:	4b31      	ldr	r3, [pc, #196]	; (80110e0 <tcp_rexmit_rto_prepare+0xd4>)
 801101c:	f240 6263 	movw	r2, #1635	; 0x663
 8011020:	4930      	ldr	r1, [pc, #192]	; (80110e4 <tcp_rexmit_rto_prepare+0xd8>)
 8011022:	4831      	ldr	r0, [pc, #196]	; (80110e8 <tcp_rexmit_rto_prepare+0xdc>)
 8011024:	f006 f9ba 	bl	801739c <iprintf>

  if (pcb->unacked == NULL) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801102c:	2b00      	cmp	r3, #0
 801102e:	d102      	bne.n	8011036 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011030:	f06f 0305 	mvn.w	r3, #5
 8011034:	e050      	b.n	80110d8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801103a:	60fb      	str	r3, [r7, #12]
 801103c:	e00b      	b.n	8011056 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7ff fee6 	bl	8010e10 <tcp_output_segment_busy>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d002      	beq.n	8011050 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801104a:	f06f 0305 	mvn.w	r3, #5
 801104e:	e043      	b.n	80110d8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	60fb      	str	r3, [r7, #12]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1ef      	bne.n	801103e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801105e:	68f8      	ldr	r0, [r7, #12]
 8011060:	f7ff fed6 	bl	8010e10 <tcp_output_segment_busy>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d002      	beq.n	8011070 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801106a:	f06f 0305 	mvn.w	r3, #5
 801106e:	e033      	b.n	80110d8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	8b5b      	ldrh	r3, [r3, #26]
 801108a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801108e:	b29a      	uxth	r2, r3
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	4618      	mov	r0, r3
 801109c:	f7f9 fc95 	bl	800a9ca <lwip_htonl>
 80110a0:	4604      	mov	r4, r0
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	891b      	ldrh	r3, [r3, #8]
 80110a6:	461d      	mov	r5, r3
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7f9 fc75 	bl	800a9a0 <lwip_htons>
 80110b6:	4603      	mov	r3, r0
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	f003 0303 	and.w	r3, r3, #3
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <tcp_rexmit_rto_prepare+0xba>
 80110c2:	2301      	movs	r3, #1
 80110c4:	e000      	b.n	80110c8 <tcp_rexmit_rto_prepare+0xbc>
 80110c6:	2300      	movs	r3, #0
 80110c8:	442b      	add	r3, r5
 80110ca:	18e2      	adds	r2, r4, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2200      	movs	r2, #0
 80110d4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80110d6:	2300      	movs	r3, #0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3710      	adds	r7, #16
 80110dc:	46bd      	mov	sp, r7
 80110de:	bdb0      	pop	{r4, r5, r7, pc}
 80110e0:	0801b044 	.word	0x0801b044
 80110e4:	0801b680 	.word	0x0801b680
 80110e8:	0801b098 	.word	0x0801b098

080110ec <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <tcp_rexmit_rto_commit+0x1c>
 80110fa:	4b0d      	ldr	r3, [pc, #52]	; (8011130 <tcp_rexmit_rto_commit+0x44>)
 80110fc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011100:	490c      	ldr	r1, [pc, #48]	; (8011134 <tcp_rexmit_rto_commit+0x48>)
 8011102:	480d      	ldr	r0, [pc, #52]	; (8011138 <tcp_rexmit_rto_commit+0x4c>)
 8011104:	f006 f94a 	bl	801739c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801110e:	2bff      	cmp	r3, #255	; 0xff
 8011110:	d007      	beq.n	8011122 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011118:	3301      	adds	r3, #1
 801111a:	b2da      	uxtb	r2, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f7ff fc80 	bl	8010a28 <tcp_output>
}
 8011128:	bf00      	nop
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}
 8011130:	0801b044 	.word	0x0801b044
 8011134:	0801b6a4 	.word	0x0801b6a4
 8011138:	0801b098 	.word	0x0801b098

0801113c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d106      	bne.n	8011158 <tcp_rexmit_rto+0x1c>
 801114a:	4b0a      	ldr	r3, [pc, #40]	; (8011174 <tcp_rexmit_rto+0x38>)
 801114c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011150:	4909      	ldr	r1, [pc, #36]	; (8011178 <tcp_rexmit_rto+0x3c>)
 8011152:	480a      	ldr	r0, [pc, #40]	; (801117c <tcp_rexmit_rto+0x40>)
 8011154:	f006 f922 	bl	801739c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f7ff ff57 	bl	801100c <tcp_rexmit_rto_prepare>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	d102      	bne.n	801116a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff ffc1 	bl	80110ec <tcp_rexmit_rto_commit>
  }
}
 801116a:	bf00      	nop
 801116c:	3708      	adds	r7, #8
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	0801b044 	.word	0x0801b044
 8011178:	0801b6c8 	.word	0x0801b6c8
 801117c:	0801b098 	.word	0x0801b098

08011180 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011180:	b590      	push	{r4, r7, lr}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <tcp_rexmit+0x1c>
 801118e:	4b2f      	ldr	r3, [pc, #188]	; (801124c <tcp_rexmit+0xcc>)
 8011190:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011194:	492e      	ldr	r1, [pc, #184]	; (8011250 <tcp_rexmit+0xd0>)
 8011196:	482f      	ldr	r0, [pc, #188]	; (8011254 <tcp_rexmit+0xd4>)
 8011198:	f006 f900 	bl	801739c <iprintf>

  if (pcb->unacked == NULL) {
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d102      	bne.n	80111aa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80111a4:	f06f 0305 	mvn.w	r3, #5
 80111a8:	e04c      	b.n	8011244 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111ae:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80111b0:	68b8      	ldr	r0, [r7, #8]
 80111b2:	f7ff fe2d 	bl	8010e10 <tcp_output_segment_busy>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d002      	beq.n	80111c2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80111bc:	f06f 0305 	mvn.w	r3, #5
 80111c0:	e040      	b.n	8011244 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	336c      	adds	r3, #108	; 0x6c
 80111ce:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80111d0:	e002      	b.n	80111d8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d011      	beq.n	8011204 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7f9 fbee 	bl	800a9ca <lwip_htonl>
 80111ee:	4604      	mov	r4, r0
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f9 fbe7 	bl	800a9ca <lwip_htonl>
 80111fc:	4603      	mov	r3, r0
 80111fe:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011200:	2b00      	cmp	r3, #0
 8011202:	dbe6      	blt.n	80111d2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681a      	ldr	r2, [r3, #0]
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	68ba      	ldr	r2, [r7, #8]
 8011210:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d103      	bne.n	8011222 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2200      	movs	r2, #0
 801121e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011228:	2bff      	cmp	r3, #255	; 0xff
 801122a:	d007      	beq.n	801123c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011232:	3301      	adds	r3, #1
 8011234:	b2da      	uxtb	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2200      	movs	r2, #0
 8011240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	3714      	adds	r7, #20
 8011248:	46bd      	mov	sp, r7
 801124a:	bd90      	pop	{r4, r7, pc}
 801124c:	0801b044 	.word	0x0801b044
 8011250:	0801b6e4 	.word	0x0801b6e4
 8011254:	0801b098 	.word	0x0801b098

08011258 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d106      	bne.n	8011274 <tcp_rexmit_fast+0x1c>
 8011266:	4b2a      	ldr	r3, [pc, #168]	; (8011310 <tcp_rexmit_fast+0xb8>)
 8011268:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801126c:	4929      	ldr	r1, [pc, #164]	; (8011314 <tcp_rexmit_fast+0xbc>)
 801126e:	482a      	ldr	r0, [pc, #168]	; (8011318 <tcp_rexmit_fast+0xc0>)
 8011270:	f006 f894 	bl	801739c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011278:	2b00      	cmp	r3, #0
 801127a:	d045      	beq.n	8011308 <tcp_rexmit_fast+0xb0>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	8b5b      	ldrh	r3, [r3, #26]
 8011280:	f003 0304 	and.w	r3, r3, #4
 8011284:	2b00      	cmp	r3, #0
 8011286:	d13f      	bne.n	8011308 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff ff79 	bl	8011180 <tcp_rexmit>
 801128e:	4603      	mov	r3, r0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d139      	bne.n	8011308 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112a0:	4293      	cmp	r3, r2
 80112a2:	bf28      	it	cs
 80112a4:	4613      	movcs	r3, r2
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	da00      	bge.n	80112ae <tcp_rexmit_fast+0x56>
 80112ac:	3301      	adds	r3, #1
 80112ae:	105b      	asrs	r3, r3, #1
 80112b0:	b29a      	uxth	r2, r3
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80112be:	461a      	mov	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d206      	bcs.n	80112d8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112ce:	005b      	lsls	r3, r3, #1
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112e2:	4619      	mov	r1, r3
 80112e4:	0049      	lsls	r1, r1, #1
 80112e6:	440b      	add	r3, r1
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	4413      	add	r3, r2
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	8b5b      	ldrh	r3, [r3, #26]
 80112f8:	f043 0304 	orr.w	r3, r3, #4
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	0801b044 	.word	0x0801b044
 8011314:	0801b6fc 	.word	0x0801b6fc
 8011318:	0801b098 	.word	0x0801b098

0801131c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	607b      	str	r3, [r7, #4]
 8011326:	460b      	mov	r3, r1
 8011328:	817b      	strh	r3, [r7, #10]
 801132a:	4613      	mov	r3, r2
 801132c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801132e:	897a      	ldrh	r2, [r7, #10]
 8011330:	893b      	ldrh	r3, [r7, #8]
 8011332:	4413      	add	r3, r2
 8011334:	b29b      	uxth	r3, r3
 8011336:	3314      	adds	r3, #20
 8011338:	b29b      	uxth	r3, r3
 801133a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801133e:	4619      	mov	r1, r3
 8011340:	2022      	movs	r0, #34	; 0x22
 8011342:	f7fa fc01 	bl	800bb48 <pbuf_alloc>
 8011346:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d04d      	beq.n	80113ea <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801134e:	897b      	ldrh	r3, [r7, #10]
 8011350:	3313      	adds	r3, #19
 8011352:	697a      	ldr	r2, [r7, #20]
 8011354:	8952      	ldrh	r2, [r2, #10]
 8011356:	4293      	cmp	r3, r2
 8011358:	db06      	blt.n	8011368 <tcp_output_alloc_header_common+0x4c>
 801135a:	4b26      	ldr	r3, [pc, #152]	; (80113f4 <tcp_output_alloc_header_common+0xd8>)
 801135c:	f240 7223 	movw	r2, #1827	; 0x723
 8011360:	4925      	ldr	r1, [pc, #148]	; (80113f8 <tcp_output_alloc_header_common+0xdc>)
 8011362:	4826      	ldr	r0, [pc, #152]	; (80113fc <tcp_output_alloc_header_common+0xe0>)
 8011364:	f006 f81a 	bl	801739c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801136e:	8c3b      	ldrh	r3, [r7, #32]
 8011370:	4618      	mov	r0, r3
 8011372:	f7f9 fb15 	bl	800a9a0 <lwip_htons>
 8011376:	4603      	mov	r3, r0
 8011378:	461a      	mov	r2, r3
 801137a:	693b      	ldr	r3, [r7, #16]
 801137c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801137e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011380:	4618      	mov	r0, r3
 8011382:	f7f9 fb0d 	bl	800a9a0 <lwip_htons>
 8011386:	4603      	mov	r3, r0
 8011388:	461a      	mov	r2, r3
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	687a      	ldr	r2, [r7, #4]
 8011392:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f7f9 fb18 	bl	800a9ca <lwip_htonl>
 801139a:	4602      	mov	r2, r0
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80113a0:	897b      	ldrh	r3, [r7, #10]
 80113a2:	089b      	lsrs	r3, r3, #2
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	3305      	adds	r3, #5
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	031b      	lsls	r3, r3, #12
 80113ac:	b29a      	uxth	r2, r3
 80113ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	4313      	orrs	r3, r2
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7f9 faf1 	bl	800a9a0 <lwip_htons>
 80113be:	4603      	mov	r3, r0
 80113c0:	461a      	mov	r2, r3
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80113c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7f9 fae9 	bl	800a9a0 <lwip_htons>
 80113ce:	4603      	mov	r3, r0
 80113d0:	461a      	mov	r2, r3
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	2200      	movs	r2, #0
 80113da:	741a      	strb	r2, [r3, #16]
 80113dc:	2200      	movs	r2, #0
 80113de:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	2200      	movs	r2, #0
 80113e4:	749a      	strb	r2, [r3, #18]
 80113e6:	2200      	movs	r2, #0
 80113e8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80113ea:	697b      	ldr	r3, [r7, #20]
}
 80113ec:	4618      	mov	r0, r3
 80113ee:	3718      	adds	r7, #24
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}
 80113f4:	0801b044 	.word	0x0801b044
 80113f8:	0801b71c 	.word	0x0801b71c
 80113fc:	0801b098 	.word	0x0801b098

08011400 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011400:	b5b0      	push	{r4, r5, r7, lr}
 8011402:	b08a      	sub	sp, #40	; 0x28
 8011404:	af04      	add	r7, sp, #16
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	607b      	str	r3, [r7, #4]
 801140a:	460b      	mov	r3, r1
 801140c:	817b      	strh	r3, [r7, #10]
 801140e:	4613      	mov	r3, r2
 8011410:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d106      	bne.n	8011426 <tcp_output_alloc_header+0x26>
 8011418:	4b15      	ldr	r3, [pc, #84]	; (8011470 <tcp_output_alloc_header+0x70>)
 801141a:	f240 7242 	movw	r2, #1858	; 0x742
 801141e:	4915      	ldr	r1, [pc, #84]	; (8011474 <tcp_output_alloc_header+0x74>)
 8011420:	4815      	ldr	r0, [pc, #84]	; (8011478 <tcp_output_alloc_header+0x78>)
 8011422:	f005 ffbb 	bl	801739c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	8adb      	ldrh	r3, [r3, #22]
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	8b12      	ldrh	r2, [r2, #24]
 8011432:	68f9      	ldr	r1, [r7, #12]
 8011434:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011436:	893d      	ldrh	r5, [r7, #8]
 8011438:	897c      	ldrh	r4, [r7, #10]
 801143a:	9103      	str	r1, [sp, #12]
 801143c:	2110      	movs	r1, #16
 801143e:	9102      	str	r1, [sp, #8]
 8011440:	9201      	str	r2, [sp, #4]
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	462a      	mov	r2, r5
 8011448:	4621      	mov	r1, r4
 801144a:	f7ff ff67 	bl	801131c <tcp_output_alloc_header_common>
 801144e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d006      	beq.n	8011464 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145a:	68fa      	ldr	r2, [r7, #12]
 801145c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801145e:	441a      	add	r2, r3
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011464:	697b      	ldr	r3, [r7, #20]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bdb0      	pop	{r4, r5, r7, pc}
 801146e:	bf00      	nop
 8011470:	0801b044 	.word	0x0801b044
 8011474:	0801b74c 	.word	0x0801b74c
 8011478:	0801b098 	.word	0x0801b098

0801147c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b088      	sub	sp, #32
 8011480:	af00      	add	r7, sp, #0
 8011482:	60f8      	str	r0, [r7, #12]
 8011484:	60b9      	str	r1, [r7, #8]
 8011486:	4611      	mov	r1, r2
 8011488:	461a      	mov	r2, r3
 801148a:	460b      	mov	r3, r1
 801148c:	71fb      	strb	r3, [r7, #7]
 801148e:	4613      	mov	r3, r2
 8011490:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011492:	2300      	movs	r3, #0
 8011494:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d106      	bne.n	80114aa <tcp_output_fill_options+0x2e>
 801149c:	4b13      	ldr	r3, [pc, #76]	; (80114ec <tcp_output_fill_options+0x70>)
 801149e:	f240 7256 	movw	r2, #1878	; 0x756
 80114a2:	4913      	ldr	r1, [pc, #76]	; (80114f0 <tcp_output_fill_options+0x74>)
 80114a4:	4813      	ldr	r0, [pc, #76]	; (80114f4 <tcp_output_fill_options+0x78>)
 80114a6:	f005 ff79 	bl	801739c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	3314      	adds	r3, #20
 80114b4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	f103 0214 	add.w	r2, r3, #20
 80114bc:	8bfb      	ldrh	r3, [r7, #30]
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	4619      	mov	r1, r3
 80114c2:	79fb      	ldrb	r3, [r7, #7]
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	f003 0304 	and.w	r3, r3, #4
 80114ca:	440b      	add	r3, r1
 80114cc:	4413      	add	r3, r2
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d006      	beq.n	80114e2 <tcp_output_fill_options+0x66>
 80114d4:	4b05      	ldr	r3, [pc, #20]	; (80114ec <tcp_output_fill_options+0x70>)
 80114d6:	f240 7275 	movw	r2, #1909	; 0x775
 80114da:	4907      	ldr	r1, [pc, #28]	; (80114f8 <tcp_output_fill_options+0x7c>)
 80114dc:	4805      	ldr	r0, [pc, #20]	; (80114f4 <tcp_output_fill_options+0x78>)
 80114de:	f005 ff5d 	bl	801739c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80114e2:	bf00      	nop
 80114e4:	3720      	adds	r7, #32
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	0801b044 	.word	0x0801b044
 80114f0:	0801b774 	.word	0x0801b774
 80114f4:	0801b098 	.word	0x0801b098
 80114f8:	0801b66c 	.word	0x0801b66c

080114fc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08a      	sub	sp, #40	; 0x28
 8011500:	af04      	add	r7, sp, #16
 8011502:	60f8      	str	r0, [r7, #12]
 8011504:	60b9      	str	r1, [r7, #8]
 8011506:	607a      	str	r2, [r7, #4]
 8011508:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d106      	bne.n	801151e <tcp_output_control_segment+0x22>
 8011510:	4b1c      	ldr	r3, [pc, #112]	; (8011584 <tcp_output_control_segment+0x88>)
 8011512:	f240 7287 	movw	r2, #1927	; 0x787
 8011516:	491c      	ldr	r1, [pc, #112]	; (8011588 <tcp_output_control_segment+0x8c>)
 8011518:	481c      	ldr	r0, [pc, #112]	; (801158c <tcp_output_control_segment+0x90>)
 801151a:	f005 ff3f 	bl	801739c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801151e:	683a      	ldr	r2, [r7, #0]
 8011520:	6879      	ldr	r1, [r7, #4]
 8011522:	68f8      	ldr	r0, [r7, #12]
 8011524:	f7fe ff40 	bl	80103a8 <tcp_route>
 8011528:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d102      	bne.n	8011536 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011530:	23fc      	movs	r3, #252	; 0xfc
 8011532:	75fb      	strb	r3, [r7, #23]
 8011534:	e01c      	b.n	8011570 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d006      	beq.n	801154a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	7adb      	ldrb	r3, [r3, #11]
 8011540:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	7a9b      	ldrb	r3, [r3, #10]
 8011546:	757b      	strb	r3, [r7, #21]
 8011548:	e003      	b.n	8011552 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801154a:	23ff      	movs	r3, #255	; 0xff
 801154c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011552:	7dba      	ldrb	r2, [r7, #22]
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	9302      	str	r3, [sp, #8]
 8011558:	2306      	movs	r3, #6
 801155a:	9301      	str	r3, [sp, #4]
 801155c:	7d7b      	ldrb	r3, [r7, #21]
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	4613      	mov	r3, r2
 8011562:	683a      	ldr	r2, [r7, #0]
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	68b8      	ldr	r0, [r7, #8]
 8011568:	f004 f958 	bl	801581c <ip4_output_if>
 801156c:	4603      	mov	r3, r0
 801156e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011570:	68b8      	ldr	r0, [r7, #8]
 8011572:	f7fa fdcd 	bl	800c110 <pbuf_free>
  return err;
 8011576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3718      	adds	r7, #24
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	0801b044 	.word	0x0801b044
 8011588:	0801b79c 	.word	0x0801b79c
 801158c:	0801b098 	.word	0x0801b098

08011590 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b08b      	sub	sp, #44	; 0x2c
 8011594:	af04      	add	r7, sp, #16
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
 801159c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d106      	bne.n	80115b2 <tcp_rst+0x22>
 80115a4:	4b1f      	ldr	r3, [pc, #124]	; (8011624 <tcp_rst+0x94>)
 80115a6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80115aa:	491f      	ldr	r1, [pc, #124]	; (8011628 <tcp_rst+0x98>)
 80115ac:	481f      	ldr	r0, [pc, #124]	; (801162c <tcp_rst+0x9c>)
 80115ae:	f005 fef5 	bl	801739c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d106      	bne.n	80115c6 <tcp_rst+0x36>
 80115b8:	4b1a      	ldr	r3, [pc, #104]	; (8011624 <tcp_rst+0x94>)
 80115ba:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80115be:	491c      	ldr	r1, [pc, #112]	; (8011630 <tcp_rst+0xa0>)
 80115c0:	481a      	ldr	r0, [pc, #104]	; (801162c <tcp_rst+0x9c>)
 80115c2:	f005 feeb 	bl	801739c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80115c6:	2300      	movs	r3, #0
 80115c8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80115ca:	f246 0308 	movw	r3, #24584	; 0x6008
 80115ce:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80115d0:	7dfb      	ldrb	r3, [r7, #23]
 80115d2:	b29c      	uxth	r4, r3
 80115d4:	68b8      	ldr	r0, [r7, #8]
 80115d6:	f7f9 f9f8 	bl	800a9ca <lwip_htonl>
 80115da:	4602      	mov	r2, r0
 80115dc:	8abb      	ldrh	r3, [r7, #20]
 80115de:	9303      	str	r3, [sp, #12]
 80115e0:	2314      	movs	r3, #20
 80115e2:	9302      	str	r3, [sp, #8]
 80115e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80115e6:	9301      	str	r3, [sp, #4]
 80115e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80115ea:	9300      	str	r3, [sp, #0]
 80115ec:	4613      	mov	r3, r2
 80115ee:	2200      	movs	r2, #0
 80115f0:	4621      	mov	r1, r4
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f7ff fe92 	bl	801131c <tcp_output_alloc_header_common>
 80115f8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d00c      	beq.n	801161a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011600:	7dfb      	ldrb	r3, [r7, #23]
 8011602:	2200      	movs	r2, #0
 8011604:	6939      	ldr	r1, [r7, #16]
 8011606:	68f8      	ldr	r0, [r7, #12]
 8011608:	f7ff ff38 	bl	801147c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160e:	683a      	ldr	r2, [r7, #0]
 8011610:	6939      	ldr	r1, [r7, #16]
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f7ff ff72 	bl	80114fc <tcp_output_control_segment>
 8011618:	e000      	b.n	801161c <tcp_rst+0x8c>
    return;
 801161a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	bd90      	pop	{r4, r7, pc}
 8011622:	bf00      	nop
 8011624:	0801b044 	.word	0x0801b044
 8011628:	0801b7c8 	.word	0x0801b7c8
 801162c:	0801b098 	.word	0x0801b098
 8011630:	0801b7e4 	.word	0x0801b7e4

08011634 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011634:	b590      	push	{r4, r7, lr}
 8011636:	b087      	sub	sp, #28
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d106      	bne.n	8011658 <tcp_send_empty_ack+0x24>
 801164a:	4b28      	ldr	r3, [pc, #160]	; (80116ec <tcp_send_empty_ack+0xb8>)
 801164c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011650:	4927      	ldr	r1, [pc, #156]	; (80116f0 <tcp_send_empty_ack+0xbc>)
 8011652:	4828      	ldr	r0, [pc, #160]	; (80116f4 <tcp_send_empty_ack+0xc0>)
 8011654:	f005 fea2 	bl	801739c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011658:	7dfb      	ldrb	r3, [r7, #23]
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	b2db      	uxtb	r3, r3
 801165e:	f003 0304 	and.w	r3, r3, #4
 8011662:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011664:	7d7b      	ldrb	r3, [r7, #21]
 8011666:	b29c      	uxth	r4, r3
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801166c:	4618      	mov	r0, r3
 801166e:	f7f9 f9ac 	bl	800a9ca <lwip_htonl>
 8011672:	4603      	mov	r3, r0
 8011674:	2200      	movs	r2, #0
 8011676:	4621      	mov	r1, r4
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f7ff fec1 	bl	8011400 <tcp_output_alloc_header>
 801167e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d109      	bne.n	801169a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	8b5b      	ldrh	r3, [r3, #26]
 801168a:	f043 0303 	orr.w	r3, r3, #3
 801168e:	b29a      	uxth	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011694:	f06f 0301 	mvn.w	r3, #1
 8011698:	e023      	b.n	80116e2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801169a:	7dbb      	ldrb	r3, [r7, #22]
 801169c:	7dfa      	ldrb	r2, [r7, #23]
 801169e:	6939      	ldr	r1, [r7, #16]
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f7ff feeb 	bl	801147c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	3304      	adds	r3, #4
 80116ac:	6939      	ldr	r1, [r7, #16]
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7ff ff24 	bl	80114fc <tcp_output_control_segment>
 80116b4:	4603      	mov	r3, r0
 80116b6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80116b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d007      	beq.n	80116d0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	8b5b      	ldrh	r3, [r3, #26]
 80116c4:	f043 0303 	orr.w	r3, r3, #3
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	835a      	strh	r2, [r3, #26]
 80116ce:	e006      	b.n	80116de <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	8b5b      	ldrh	r3, [r3, #26]
 80116d4:	f023 0303 	bic.w	r3, r3, #3
 80116d8:	b29a      	uxth	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80116de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	371c      	adds	r7, #28
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd90      	pop	{r4, r7, pc}
 80116ea:	bf00      	nop
 80116ec:	0801b044 	.word	0x0801b044
 80116f0:	0801b800 	.word	0x0801b800
 80116f4:	0801b098 	.word	0x0801b098

080116f8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b087      	sub	sp, #28
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011700:	2300      	movs	r3, #0
 8011702:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d106      	bne.n	8011718 <tcp_keepalive+0x20>
 801170a:	4b18      	ldr	r3, [pc, #96]	; (801176c <tcp_keepalive+0x74>)
 801170c:	f640 0224 	movw	r2, #2084	; 0x824
 8011710:	4917      	ldr	r1, [pc, #92]	; (8011770 <tcp_keepalive+0x78>)
 8011712:	4818      	ldr	r0, [pc, #96]	; (8011774 <tcp_keepalive+0x7c>)
 8011714:	f005 fe42 	bl	801739c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011718:	7dfb      	ldrb	r3, [r7, #23]
 801171a:	b29c      	uxth	r4, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011720:	3b01      	subs	r3, #1
 8011722:	4618      	mov	r0, r3
 8011724:	f7f9 f951 	bl	800a9ca <lwip_htonl>
 8011728:	4603      	mov	r3, r0
 801172a:	2200      	movs	r2, #0
 801172c:	4621      	mov	r1, r4
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f7ff fe66 	bl	8011400 <tcp_output_alloc_header>
 8011734:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d102      	bne.n	8011742 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801173c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011740:	e010      	b.n	8011764 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011742:	7dfb      	ldrb	r3, [r7, #23]
 8011744:	2200      	movs	r2, #0
 8011746:	6939      	ldr	r1, [r7, #16]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff fe97 	bl	801147c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3304      	adds	r3, #4
 8011754:	6939      	ldr	r1, [r7, #16]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7ff fed0 	bl	80114fc <tcp_output_control_segment>
 801175c:	4603      	mov	r3, r0
 801175e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011764:	4618      	mov	r0, r3
 8011766:	371c      	adds	r7, #28
 8011768:	46bd      	mov	sp, r7
 801176a:	bd90      	pop	{r4, r7, pc}
 801176c:	0801b044 	.word	0x0801b044
 8011770:	0801b820 	.word	0x0801b820
 8011774:	0801b098 	.word	0x0801b098

08011778 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011778:	b590      	push	{r4, r7, lr}
 801177a:	b08b      	sub	sp, #44	; 0x2c
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011780:	2300      	movs	r3, #0
 8011782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d106      	bne.n	801179a <tcp_zero_window_probe+0x22>
 801178c:	4b4c      	ldr	r3, [pc, #304]	; (80118c0 <tcp_zero_window_probe+0x148>)
 801178e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011792:	494c      	ldr	r1, [pc, #304]	; (80118c4 <tcp_zero_window_probe+0x14c>)
 8011794:	484c      	ldr	r0, [pc, #304]	; (80118c8 <tcp_zero_window_probe+0x150>)
 8011796:	f005 fe01 	bl	801739c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801179e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d101      	bne.n	80117aa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80117a6:	2300      	movs	r3, #0
 80117a8:	e086      	b.n	80118b8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117b0:	2bff      	cmp	r3, #255	; 0xff
 80117b2:	d007      	beq.n	80117c4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117ba:	3301      	adds	r3, #1
 80117bc:	b2da      	uxtb	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80117c4:	6a3b      	ldr	r3, [r7, #32]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	899b      	ldrh	r3, [r3, #12]
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7f9 f8e7 	bl	800a9a0 <lwip_htons>
 80117d2:	4603      	mov	r3, r0
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	f003 0301 	and.w	r3, r3, #1
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d005      	beq.n	80117ea <tcp_zero_window_probe+0x72>
 80117de:	6a3b      	ldr	r3, [r7, #32]
 80117e0:	891b      	ldrh	r3, [r3, #8]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d101      	bne.n	80117ea <tcp_zero_window_probe+0x72>
 80117e6:	2301      	movs	r3, #1
 80117e8:	e000      	b.n	80117ec <tcp_zero_window_probe+0x74>
 80117ea:	2300      	movs	r3, #0
 80117ec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80117ee:	7ffb      	ldrb	r3, [r7, #31]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	bf0c      	ite	eq
 80117f4:	2301      	moveq	r3, #1
 80117f6:	2300      	movne	r3, #0
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80117fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011800:	b299      	uxth	r1, r3
 8011802:	6a3b      	ldr	r3, [r7, #32]
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	8bba      	ldrh	r2, [r7, #28]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff fdf8 	bl	8011400 <tcp_output_alloc_header>
 8011810:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d102      	bne.n	801181e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801181c:	e04c      	b.n	80118b8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011824:	7ffb      	ldrb	r3, [r7, #31]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d011      	beq.n	801184e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	899b      	ldrh	r3, [r3, #12]
 801182e:	b29b      	uxth	r3, r3
 8011830:	b21b      	sxth	r3, r3
 8011832:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011836:	b21c      	sxth	r4, r3
 8011838:	2011      	movs	r0, #17
 801183a:	f7f9 f8b1 	bl	800a9a0 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	b21b      	sxth	r3, r3
 8011842:	4323      	orrs	r3, r4
 8011844:	b21b      	sxth	r3, r3
 8011846:	b29a      	uxth	r2, r3
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	819a      	strh	r2, [r3, #12]
 801184c:	e010      	b.n	8011870 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	3314      	adds	r3, #20
 8011854:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	6858      	ldr	r0, [r3, #4]
 801185a:	6a3b      	ldr	r3, [r7, #32]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	891a      	ldrh	r2, [r3, #8]
 8011860:	6a3b      	ldr	r3, [r7, #32]
 8011862:	891b      	ldrh	r3, [r3, #8]
 8011864:	1ad3      	subs	r3, r2, r3
 8011866:	b29b      	uxth	r3, r3
 8011868:	2201      	movs	r2, #1
 801186a:	6939      	ldr	r1, [r7, #16]
 801186c:	f7fa fe56 	bl	800c51c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011870:	6a3b      	ldr	r3, [r7, #32]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	4618      	mov	r0, r3
 8011878:	f7f9 f8a7 	bl	800a9ca <lwip_htonl>
 801187c:	4603      	mov	r3, r0
 801187e:	3301      	adds	r3, #1
 8011880:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	2b00      	cmp	r3, #0
 801188c:	da02      	bge.n	8011894 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011898:	2200      	movs	r2, #0
 801189a:	69b9      	ldr	r1, [r7, #24]
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f7ff fded 	bl	801147c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3304      	adds	r3, #4
 80118a8:	69b9      	ldr	r1, [r7, #24]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f7ff fe26 	bl	80114fc <tcp_output_control_segment>
 80118b0:	4603      	mov	r3, r0
 80118b2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80118b4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	372c      	adds	r7, #44	; 0x2c
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd90      	pop	{r4, r7, pc}
 80118c0:	0801b044 	.word	0x0801b044
 80118c4:	0801b83c 	.word	0x0801b83c
 80118c8:	0801b098 	.word	0x0801b098

080118cc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80118d4:	f7fa ff10 	bl	800c6f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80118d8:	4b0a      	ldr	r3, [pc, #40]	; (8011904 <tcpip_tcp_timer+0x38>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d103      	bne.n	80118e8 <tcpip_tcp_timer+0x1c>
 80118e0:	4b09      	ldr	r3, [pc, #36]	; (8011908 <tcpip_tcp_timer+0x3c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d005      	beq.n	80118f4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80118e8:	2200      	movs	r2, #0
 80118ea:	4908      	ldr	r1, [pc, #32]	; (801190c <tcpip_tcp_timer+0x40>)
 80118ec:	20fa      	movs	r0, #250	; 0xfa
 80118ee:	f000 f8f3 	bl	8011ad8 <sys_timeout>
 80118f2:	e003      	b.n	80118fc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80118f4:	4b06      	ldr	r3, [pc, #24]	; (8011910 <tcpip_tcp_timer+0x44>)
 80118f6:	2200      	movs	r2, #0
 80118f8:	601a      	str	r2, [r3, #0]
  }
}
 80118fa:	bf00      	nop
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	20012cb4 	.word	0x20012cb4
 8011908:	20012cc4 	.word	0x20012cc4
 801190c:	080118cd 	.word	0x080118cd
 8011910:	20004bb4 	.word	0x20004bb4

08011914 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011918:	4b0a      	ldr	r3, [pc, #40]	; (8011944 <tcp_timer_needed+0x30>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10f      	bne.n	8011940 <tcp_timer_needed+0x2c>
 8011920:	4b09      	ldr	r3, [pc, #36]	; (8011948 <tcp_timer_needed+0x34>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d103      	bne.n	8011930 <tcp_timer_needed+0x1c>
 8011928:	4b08      	ldr	r3, [pc, #32]	; (801194c <tcp_timer_needed+0x38>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d007      	beq.n	8011940 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011930:	4b04      	ldr	r3, [pc, #16]	; (8011944 <tcp_timer_needed+0x30>)
 8011932:	2201      	movs	r2, #1
 8011934:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011936:	2200      	movs	r2, #0
 8011938:	4905      	ldr	r1, [pc, #20]	; (8011950 <tcp_timer_needed+0x3c>)
 801193a:	20fa      	movs	r0, #250	; 0xfa
 801193c:	f000 f8cc 	bl	8011ad8 <sys_timeout>
  }
}
 8011940:	bf00      	nop
 8011942:	bd80      	pop	{r7, pc}
 8011944:	20004bb4 	.word	0x20004bb4
 8011948:	20012cb4 	.word	0x20012cb4
 801194c:	20012cc4 	.word	0x20012cc4
 8011950:	080118cd 	.word	0x080118cd

08011954 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011960:	200a      	movs	r0, #10
 8011962:	f7f9 fcd3 	bl	800b30c <memp_malloc>
 8011966:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d109      	bne.n	8011982 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d151      	bne.n	8011a18 <sys_timeout_abs+0xc4>
 8011974:	4b2a      	ldr	r3, [pc, #168]	; (8011a20 <sys_timeout_abs+0xcc>)
 8011976:	22be      	movs	r2, #190	; 0xbe
 8011978:	492a      	ldr	r1, [pc, #168]	; (8011a24 <sys_timeout_abs+0xd0>)
 801197a:	482b      	ldr	r0, [pc, #172]	; (8011a28 <sys_timeout_abs+0xd4>)
 801197c:	f005 fd0e 	bl	801739c <iprintf>
    return;
 8011980:	e04a      	b.n	8011a18 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011982:	693b      	ldr	r3, [r7, #16]
 8011984:	2200      	movs	r2, #0
 8011986:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	68ba      	ldr	r2, [r7, #8]
 801198c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801199a:	4b24      	ldr	r3, [pc, #144]	; (8011a2c <sys_timeout_abs+0xd8>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d103      	bne.n	80119aa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80119a2:	4a22      	ldr	r2, [pc, #136]	; (8011a2c <sys_timeout_abs+0xd8>)
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	6013      	str	r3, [r2, #0]
    return;
 80119a8:	e037      	b.n	8011a1a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	685a      	ldr	r2, [r3, #4]
 80119ae:	4b1f      	ldr	r3, [pc, #124]	; (8011a2c <sys_timeout_abs+0xd8>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	685b      	ldr	r3, [r3, #4]
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	0fdb      	lsrs	r3, r3, #31
 80119b8:	f003 0301 	and.w	r3, r3, #1
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d007      	beq.n	80119d2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80119c2:	4b1a      	ldr	r3, [pc, #104]	; (8011a2c <sys_timeout_abs+0xd8>)
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80119ca:	4a18      	ldr	r2, [pc, #96]	; (8011a2c <sys_timeout_abs+0xd8>)
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	6013      	str	r3, [r2, #0]
 80119d0:	e023      	b.n	8011a1a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80119d2:	4b16      	ldr	r3, [pc, #88]	; (8011a2c <sys_timeout_abs+0xd8>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	617b      	str	r3, [r7, #20]
 80119d8:	e01a      	b.n	8011a10 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80119da:	697b      	ldr	r3, [r7, #20]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00b      	beq.n	80119fa <sys_timeout_abs+0xa6>
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	685a      	ldr	r2, [r3, #4]
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	0fdb      	lsrs	r3, r3, #31
 80119f0:	f003 0301 	and.w	r3, r3, #1
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d007      	beq.n	8011a0a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	681a      	ldr	r2, [r3, #0]
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	693a      	ldr	r2, [r7, #16]
 8011a06:	601a      	str	r2, [r3, #0]
        break;
 8011a08:	e007      	b.n	8011a1a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	617b      	str	r3, [r7, #20]
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d1e1      	bne.n	80119da <sys_timeout_abs+0x86>
 8011a16:	e000      	b.n	8011a1a <sys_timeout_abs+0xc6>
    return;
 8011a18:	bf00      	nop
      }
    }
  }
}
 8011a1a:	3718      	adds	r7, #24
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}
 8011a20:	0801b860 	.word	0x0801b860
 8011a24:	0801b894 	.word	0x0801b894
 8011a28:	0801b8d4 	.word	0x0801b8d4
 8011a2c:	20004bac 	.word	0x20004bac

08011a30 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b086      	sub	sp, #24
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	4798      	blx	r3

  now = sys_now();
 8011a42:	f7f4 fd2d 	bl	80064a0 <sys_now>
 8011a46:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	4b0f      	ldr	r3, [pc, #60]	; (8011a8c <lwip_cyclic_timer+0x5c>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4413      	add	r3, r2
 8011a52:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011a54:	68fa      	ldr	r2, [r7, #12]
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	0fdb      	lsrs	r3, r3, #31
 8011a5c:	f003 0301 	and.w	r3, r3, #1
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d009      	beq.n	8011a7a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	4907      	ldr	r1, [pc, #28]	; (8011a90 <lwip_cyclic_timer+0x60>)
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7ff ff6e 	bl	8011954 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011a78:	e004      	b.n	8011a84 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	4904      	ldr	r1, [pc, #16]	; (8011a90 <lwip_cyclic_timer+0x60>)
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	f7ff ff68 	bl	8011954 <sys_timeout_abs>
}
 8011a84:	bf00      	nop
 8011a86:	3718      	adds	r7, #24
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	20004bb0 	.word	0x20004bb0
 8011a90:	08011a31 	.word	0x08011a31

08011a94 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	607b      	str	r3, [r7, #4]
 8011a9e:	e00e      	b.n	8011abe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011aa0:	4a0b      	ldr	r2, [pc, #44]	; (8011ad0 <sys_timeouts_init+0x3c>)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	4a08      	ldr	r2, [pc, #32]	; (8011ad0 <sys_timeouts_init+0x3c>)
 8011aae:	4413      	add	r3, r2
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	4908      	ldr	r1, [pc, #32]	; (8011ad4 <sys_timeouts_init+0x40>)
 8011ab4:	f000 f810 	bl	8011ad8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	3301      	adds	r3, #1
 8011abc:	607b      	str	r3, [r7, #4]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2b04      	cmp	r3, #4
 8011ac2:	d9ed      	bls.n	8011aa0 <sys_timeouts_init+0xc>
  }
}
 8011ac4:	bf00      	nop
 8011ac6:	bf00      	nop
 8011ac8:	3708      	adds	r7, #8
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	0801c898 	.word	0x0801c898
 8011ad4:	08011a31 	.word	0x08011a31

08011ad8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b086      	sub	sp, #24
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aea:	d306      	bcc.n	8011afa <sys_timeout+0x22>
 8011aec:	4b0a      	ldr	r3, [pc, #40]	; (8011b18 <sys_timeout+0x40>)
 8011aee:	f240 1229 	movw	r2, #297	; 0x129
 8011af2:	490a      	ldr	r1, [pc, #40]	; (8011b1c <sys_timeout+0x44>)
 8011af4:	480a      	ldr	r0, [pc, #40]	; (8011b20 <sys_timeout+0x48>)
 8011af6:	f005 fc51 	bl	801739c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011afa:	f7f4 fcd1 	bl	80064a0 <sys_now>
 8011afe:	4602      	mov	r2, r0
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	4413      	add	r3, r2
 8011b04:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	68b9      	ldr	r1, [r7, #8]
 8011b0a:	6978      	ldr	r0, [r7, #20]
 8011b0c:	f7ff ff22 	bl	8011954 <sys_timeout_abs>
#endif
}
 8011b10:	bf00      	nop
 8011b12:	3718      	adds	r7, #24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	0801b860 	.word	0x0801b860
 8011b1c:	0801b8fc 	.word	0x0801b8fc
 8011b20:	0801b8d4 	.word	0x0801b8d4

08011b24 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b084      	sub	sp, #16
 8011b28:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011b2a:	f7f4 fcb9 	bl	80064a0 <sys_now>
 8011b2e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011b30:	4b17      	ldr	r3, [pc, #92]	; (8011b90 <sys_check_timeouts+0x6c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d022      	beq.n	8011b82 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	0fdb      	lsrs	r3, r3, #31
 8011b46:	f003 0301 	and.w	r3, r3, #1
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d11a      	bne.n	8011b86 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a0e      	ldr	r2, [pc, #56]	; (8011b90 <sys_check_timeouts+0x6c>)
 8011b56:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	689b      	ldr	r3, [r3, #8]
 8011b5c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	68db      	ldr	r3, [r3, #12]
 8011b62:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	685b      	ldr	r3, [r3, #4]
 8011b68:	4a0a      	ldr	r2, [pc, #40]	; (8011b94 <sys_check_timeouts+0x70>)
 8011b6a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011b6c:	68b9      	ldr	r1, [r7, #8]
 8011b6e:	200a      	movs	r0, #10
 8011b70:	f7f9 fc1e 	bl	800b3b0 <memp_free>
    if (handler != NULL) {
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d0da      	beq.n	8011b30 <sys_check_timeouts+0xc>
      handler(arg);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6838      	ldr	r0, [r7, #0]
 8011b7e:	4798      	blx	r3
  do {
 8011b80:	e7d6      	b.n	8011b30 <sys_check_timeouts+0xc>
      return;
 8011b82:	bf00      	nop
 8011b84:	e000      	b.n	8011b88 <sys_check_timeouts+0x64>
      return;
 8011b86:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	20004bac 	.word	0x20004bac
 8011b94:	20004bb0 	.word	0x20004bb0

08011b98 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011b9e:	4b16      	ldr	r3, [pc, #88]	; (8011bf8 <sys_timeouts_sleeptime+0x60>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d102      	bne.n	8011bac <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011baa:	e020      	b.n	8011bee <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011bac:	f7f4 fc78 	bl	80064a0 <sys_now>
 8011bb0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011bb2:	4b11      	ldr	r3, [pc, #68]	; (8011bf8 <sys_timeouts_sleeptime+0x60>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	685a      	ldr	r2, [r3, #4]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	0fdb      	lsrs	r3, r3, #31
 8011bbe:	f003 0301 	and.w	r3, r3, #1
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d001      	beq.n	8011bcc <sys_timeouts_sleeptime+0x34>
    return 0;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	e010      	b.n	8011bee <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011bcc:	4b0a      	ldr	r3, [pc, #40]	; (8011bf8 <sys_timeouts_sleeptime+0x60>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	685a      	ldr	r2, [r3, #4]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	1ad3      	subs	r3, r2, r3
 8011bd6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	da06      	bge.n	8011bec <sys_timeouts_sleeptime+0x54>
 8011bde:	4b07      	ldr	r3, [pc, #28]	; (8011bfc <sys_timeouts_sleeptime+0x64>)
 8011be0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011be4:	4906      	ldr	r1, [pc, #24]	; (8011c00 <sys_timeouts_sleeptime+0x68>)
 8011be6:	4807      	ldr	r0, [pc, #28]	; (8011c04 <sys_timeouts_sleeptime+0x6c>)
 8011be8:	f005 fbd8 	bl	801739c <iprintf>
    return ret;
 8011bec:	683b      	ldr	r3, [r7, #0]
  }
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3708      	adds	r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	20004bac 	.word	0x20004bac
 8011bfc:	0801b860 	.word	0x0801b860
 8011c00:	0801b934 	.word	0x0801b934
 8011c04:	0801b8d4 	.word	0x0801b8d4

08011c08 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011c0c:	f005 fbde 	bl	80173cc <rand>
 8011c10:	4603      	mov	r3, r0
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011c18:	b29b      	uxth	r3, r3
 8011c1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	4b01      	ldr	r3, [pc, #4]	; (8011c28 <udp_init+0x20>)
 8011c22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011c24:	bf00      	nop
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	20000018 	.word	0x20000018

08011c2c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011c2c:	b480      	push	{r7}
 8011c2e:	b083      	sub	sp, #12
 8011c30:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011c36:	4b17      	ldr	r3, [pc, #92]	; (8011c94 <udp_new_port+0x68>)
 8011c38:	881b      	ldrh	r3, [r3, #0]
 8011c3a:	1c5a      	adds	r2, r3, #1
 8011c3c:	b291      	uxth	r1, r2
 8011c3e:	4a15      	ldr	r2, [pc, #84]	; (8011c94 <udp_new_port+0x68>)
 8011c40:	8011      	strh	r1, [r2, #0]
 8011c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c46:	4293      	cmp	r3, r2
 8011c48:	d103      	bne.n	8011c52 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011c4a:	4b12      	ldr	r3, [pc, #72]	; (8011c94 <udp_new_port+0x68>)
 8011c4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011c50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c52:	4b11      	ldr	r3, [pc, #68]	; (8011c98 <udp_new_port+0x6c>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	603b      	str	r3, [r7, #0]
 8011c58:	e011      	b.n	8011c7e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	8a5a      	ldrh	r2, [r3, #18]
 8011c5e:	4b0d      	ldr	r3, [pc, #52]	; (8011c94 <udp_new_port+0x68>)
 8011c60:	881b      	ldrh	r3, [r3, #0]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d108      	bne.n	8011c78 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011c66:	88fb      	ldrh	r3, [r7, #6]
 8011c68:	3301      	adds	r3, #1
 8011c6a:	80fb      	strh	r3, [r7, #6]
 8011c6c:	88fb      	ldrh	r3, [r7, #6]
 8011c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c72:	d3e0      	bcc.n	8011c36 <udp_new_port+0xa>
        return 0;
 8011c74:	2300      	movs	r3, #0
 8011c76:	e007      	b.n	8011c88 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	603b      	str	r3, [r7, #0]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d1ea      	bne.n	8011c5a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011c84:	4b03      	ldr	r3, [pc, #12]	; (8011c94 <udp_new_port+0x68>)
 8011c86:	881b      	ldrh	r3, [r3, #0]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	20000018 	.word	0x20000018
 8011c98:	20012ccc 	.word	0x20012ccc

08011c9c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b084      	sub	sp, #16
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	4613      	mov	r3, r2
 8011ca8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d105      	bne.n	8011cbc <udp_input_local_match+0x20>
 8011cb0:	4b27      	ldr	r3, [pc, #156]	; (8011d50 <udp_input_local_match+0xb4>)
 8011cb2:	2287      	movs	r2, #135	; 0x87
 8011cb4:	4927      	ldr	r1, [pc, #156]	; (8011d54 <udp_input_local_match+0xb8>)
 8011cb6:	4828      	ldr	r0, [pc, #160]	; (8011d58 <udp_input_local_match+0xbc>)
 8011cb8:	f005 fb70 	bl	801739c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d105      	bne.n	8011cce <udp_input_local_match+0x32>
 8011cc2:	4b23      	ldr	r3, [pc, #140]	; (8011d50 <udp_input_local_match+0xb4>)
 8011cc4:	2288      	movs	r2, #136	; 0x88
 8011cc6:	4925      	ldr	r1, [pc, #148]	; (8011d5c <udp_input_local_match+0xc0>)
 8011cc8:	4823      	ldr	r0, [pc, #140]	; (8011d58 <udp_input_local_match+0xbc>)
 8011cca:	f005 fb67 	bl	801739c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7a1b      	ldrb	r3, [r3, #8]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00b      	beq.n	8011cee <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	7a1a      	ldrb	r2, [r3, #8]
 8011cda:	4b21      	ldr	r3, [pc, #132]	; (8011d60 <udp_input_local_match+0xc4>)
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d001      	beq.n	8011cee <udp_input_local_match+0x52>
    return 0;
 8011cea:	2300      	movs	r3, #0
 8011cec:	e02b      	b.n	8011d46 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011cee:	79fb      	ldrb	r3, [r7, #7]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d018      	beq.n	8011d26 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d013      	beq.n	8011d22 <udp_input_local_match+0x86>
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00f      	beq.n	8011d22 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d02:	4b17      	ldr	r3, [pc, #92]	; (8011d60 <udp_input_local_match+0xc4>)
 8011d04:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d0a:	d00a      	beq.n	8011d22 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	4b13      	ldr	r3, [pc, #76]	; (8011d60 <udp_input_local_match+0xc4>)
 8011d12:	695b      	ldr	r3, [r3, #20]
 8011d14:	405a      	eors	r2, r3
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	3308      	adds	r3, #8
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d110      	bne.n	8011d44 <udp_input_local_match+0xa8>
          return 1;
 8011d22:	2301      	movs	r3, #1
 8011d24:	e00f      	b.n	8011d46 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d009      	beq.n	8011d40 <udp_input_local_match+0xa4>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d005      	beq.n	8011d40 <udp_input_local_match+0xa4>
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681a      	ldr	r2, [r3, #0]
 8011d38:	4b09      	ldr	r3, [pc, #36]	; (8011d60 <udp_input_local_match+0xc4>)
 8011d3a:	695b      	ldr	r3, [r3, #20]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d101      	bne.n	8011d44 <udp_input_local_match+0xa8>
        return 1;
 8011d40:	2301      	movs	r3, #1
 8011d42:	e000      	b.n	8011d46 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011d44:	2300      	movs	r3, #0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	0801b948 	.word	0x0801b948
 8011d54:	0801b978 	.word	0x0801b978
 8011d58:	0801b99c 	.word	0x0801b99c
 8011d5c:	0801b9c4 	.word	0x0801b9c4
 8011d60:	2000f580 	.word	0x2000f580

08011d64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011d64:	b590      	push	{r4, r7, lr}
 8011d66:	b08d      	sub	sp, #52	; 0x34
 8011d68:	af02      	add	r7, sp, #8
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d105      	bne.n	8011d84 <udp_input+0x20>
 8011d78:	4b7c      	ldr	r3, [pc, #496]	; (8011f6c <udp_input+0x208>)
 8011d7a:	22cf      	movs	r2, #207	; 0xcf
 8011d7c:	497c      	ldr	r1, [pc, #496]	; (8011f70 <udp_input+0x20c>)
 8011d7e:	487d      	ldr	r0, [pc, #500]	; (8011f74 <udp_input+0x210>)
 8011d80:	f005 fb0c 	bl	801739c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d105      	bne.n	8011d96 <udp_input+0x32>
 8011d8a:	4b78      	ldr	r3, [pc, #480]	; (8011f6c <udp_input+0x208>)
 8011d8c:	22d0      	movs	r2, #208	; 0xd0
 8011d8e:	497a      	ldr	r1, [pc, #488]	; (8011f78 <udp_input+0x214>)
 8011d90:	4878      	ldr	r0, [pc, #480]	; (8011f74 <udp_input+0x210>)
 8011d92:	f005 fb03 	bl	801739c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	895b      	ldrh	r3, [r3, #10]
 8011d9a:	2b07      	cmp	r3, #7
 8011d9c:	d803      	bhi.n	8011da6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7fa f9b6 	bl	800c110 <pbuf_free>
    goto end;
 8011da4:	e0de      	b.n	8011f64 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011dac:	4b73      	ldr	r3, [pc, #460]	; (8011f7c <udp_input+0x218>)
 8011dae:	695b      	ldr	r3, [r3, #20]
 8011db0:	4a72      	ldr	r2, [pc, #456]	; (8011f7c <udp_input+0x218>)
 8011db2:	6812      	ldr	r2, [r2, #0]
 8011db4:	4611      	mov	r1, r2
 8011db6:	4618      	mov	r0, r3
 8011db8:	f003 fe08 	bl	80159cc <ip4_addr_isbroadcast_u32>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7f8 fdea 	bl	800a9a0 <lwip_htons>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	885b      	ldrh	r3, [r3, #2]
 8011dd4:	b29b      	uxth	r3, r3
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7f8 fde2 	bl	800a9a0 <lwip_htons>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011de0:	2300      	movs	r3, #0
 8011de2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011de4:	2300      	movs	r3, #0
 8011de6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011de8:	2300      	movs	r3, #0
 8011dea:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dec:	4b64      	ldr	r3, [pc, #400]	; (8011f80 <udp_input+0x21c>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	627b      	str	r3, [r7, #36]	; 0x24
 8011df2:	e054      	b.n	8011e9e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df6:	8a5b      	ldrh	r3, [r3, #18]
 8011df8:	89fa      	ldrh	r2, [r7, #14]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d14a      	bne.n	8011e94 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011dfe:	7cfb      	ldrb	r3, [r7, #19]
 8011e00:	461a      	mov	r2, r3
 8011e02:	6839      	ldr	r1, [r7, #0]
 8011e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e06:	f7ff ff49 	bl	8011c9c <udp_input_local_match>
 8011e0a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d041      	beq.n	8011e94 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	7c1b      	ldrb	r3, [r3, #16]
 8011e14:	f003 0304 	and.w	r3, r3, #4
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d11d      	bne.n	8011e58 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d102      	bne.n	8011e28 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e24:	61fb      	str	r3, [r7, #28]
 8011e26:	e017      	b.n	8011e58 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011e28:	7cfb      	ldrb	r3, [r7, #19]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d014      	beq.n	8011e58 <udp_input+0xf4>
 8011e2e:	4b53      	ldr	r3, [pc, #332]	; (8011f7c <udp_input+0x218>)
 8011e30:	695b      	ldr	r3, [r3, #20]
 8011e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e36:	d10f      	bne.n	8011e58 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	3304      	adds	r3, #4
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d008      	beq.n	8011e58 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	3304      	adds	r3, #4
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	d101      	bne.n	8011e58 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e56:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5a:	8a9b      	ldrh	r3, [r3, #20]
 8011e5c:	8a3a      	ldrh	r2, [r7, #16]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d118      	bne.n	8011e94 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e64:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d005      	beq.n	8011e76 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	685a      	ldr	r2, [r3, #4]
 8011e6e:	4b43      	ldr	r3, [pc, #268]	; (8011f7c <udp_input+0x218>)
 8011e70:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d10e      	bne.n	8011e94 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d014      	beq.n	8011ea6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7e:	68da      	ldr	r2, [r3, #12]
 8011e80:	6a3b      	ldr	r3, [r7, #32]
 8011e82:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011e84:	4b3e      	ldr	r3, [pc, #248]	; (8011f80 <udp_input+0x21c>)
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011e8c:	4a3c      	ldr	r2, [pc, #240]	; (8011f80 <udp_input+0x21c>)
 8011e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e90:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011e92:	e008      	b.n	8011ea6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8011e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d1a7      	bne.n	8011df4 <udp_input+0x90>
 8011ea4:	e000      	b.n	8011ea8 <udp_input+0x144>
        break;
 8011ea6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d101      	bne.n	8011eb2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d002      	beq.n	8011ebe <udp_input+0x15a>
    for_us = 1;
 8011eb8:	2301      	movs	r3, #1
 8011eba:	76fb      	strb	r3, [r7, #27]
 8011ebc:	e00a      	b.n	8011ed4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	3304      	adds	r3, #4
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	4b2d      	ldr	r3, [pc, #180]	; (8011f7c <udp_input+0x218>)
 8011ec6:	695b      	ldr	r3, [r3, #20]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	bf0c      	ite	eq
 8011ecc:	2301      	moveq	r3, #1
 8011ece:	2300      	movne	r3, #0
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011ed4:	7efb      	ldrb	r3, [r7, #27]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d041      	beq.n	8011f5e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011eda:	2108      	movs	r1, #8
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7fa f891 	bl	800c004 <pbuf_remove_header>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00a      	beq.n	8011efe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011ee8:	4b20      	ldr	r3, [pc, #128]	; (8011f6c <udp_input+0x208>)
 8011eea:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011eee:	4925      	ldr	r1, [pc, #148]	; (8011f84 <udp_input+0x220>)
 8011ef0:	4820      	ldr	r0, [pc, #128]	; (8011f74 <udp_input+0x210>)
 8011ef2:	f005 fa53 	bl	801739c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7fa f90a 	bl	800c110 <pbuf_free>
      goto end;
 8011efc:	e032      	b.n	8011f64 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d012      	beq.n	8011f2a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f06:	699b      	ldr	r3, [r3, #24]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00a      	beq.n	8011f22 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0e:	699c      	ldr	r4, [r3, #24]
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	69d8      	ldr	r0, [r3, #28]
 8011f14:	8a3b      	ldrh	r3, [r7, #16]
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	4b1b      	ldr	r3, [pc, #108]	; (8011f88 <udp_input+0x224>)
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f1e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011f20:	e021      	b.n	8011f66 <udp_input+0x202>
        pbuf_free(p);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7fa f8f4 	bl	800c110 <pbuf_free>
        goto end;
 8011f28:	e01c      	b.n	8011f64 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f2a:	7cfb      	ldrb	r3, [r7, #19]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d112      	bne.n	8011f56 <udp_input+0x1f2>
 8011f30:	4b12      	ldr	r3, [pc, #72]	; (8011f7c <udp_input+0x218>)
 8011f32:	695b      	ldr	r3, [r3, #20]
 8011f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f38:	2be0      	cmp	r3, #224	; 0xe0
 8011f3a:	d00c      	beq.n	8011f56 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011f3c:	4b0f      	ldr	r3, [pc, #60]	; (8011f7c <udp_input+0x218>)
 8011f3e:	899b      	ldrh	r3, [r3, #12]
 8011f40:	3308      	adds	r3, #8
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	b21b      	sxth	r3, r3
 8011f46:	4619      	mov	r1, r3
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7fa f8ce 	bl	800c0ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011f4e:	2103      	movs	r1, #3
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f003 f9fd 	bl	8015350 <icmp_dest_unreach>
      pbuf_free(p);
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7fa f8da 	bl	800c110 <pbuf_free>
  return;
 8011f5c:	e003      	b.n	8011f66 <udp_input+0x202>
    pbuf_free(p);
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7fa f8d6 	bl	800c110 <pbuf_free>
  return;
 8011f64:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011f66:	372c      	adds	r7, #44	; 0x2c
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd90      	pop	{r4, r7, pc}
 8011f6c:	0801b948 	.word	0x0801b948
 8011f70:	0801b9ec 	.word	0x0801b9ec
 8011f74:	0801b99c 	.word	0x0801b99c
 8011f78:	0801ba04 	.word	0x0801ba04
 8011f7c:	2000f580 	.word	0x2000f580
 8011f80:	20012ccc 	.word	0x20012ccc
 8011f84:	0801ba20 	.word	0x0801ba20
 8011f88:	2000f590 	.word	0x2000f590

08011f8c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b088      	sub	sp, #32
 8011f90:	af02      	add	r7, sp, #8
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
 8011f98:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d109      	bne.n	8011fb4 <udp_sendto_if+0x28>
 8011fa0:	4b2e      	ldr	r3, [pc, #184]	; (801205c <udp_sendto_if+0xd0>)
 8011fa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fa6:	492e      	ldr	r1, [pc, #184]	; (8012060 <udp_sendto_if+0xd4>)
 8011fa8:	482e      	ldr	r0, [pc, #184]	; (8012064 <udp_sendto_if+0xd8>)
 8011faa:	f005 f9f7 	bl	801739c <iprintf>
 8011fae:	f06f 030f 	mvn.w	r3, #15
 8011fb2:	e04f      	b.n	8012054 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d109      	bne.n	8011fce <udp_sendto_if+0x42>
 8011fba:	4b28      	ldr	r3, [pc, #160]	; (801205c <udp_sendto_if+0xd0>)
 8011fbc:	f240 2281 	movw	r2, #641	; 0x281
 8011fc0:	4929      	ldr	r1, [pc, #164]	; (8012068 <udp_sendto_if+0xdc>)
 8011fc2:	4828      	ldr	r0, [pc, #160]	; (8012064 <udp_sendto_if+0xd8>)
 8011fc4:	f005 f9ea 	bl	801739c <iprintf>
 8011fc8:	f06f 030f 	mvn.w	r3, #15
 8011fcc:	e042      	b.n	8012054 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d109      	bne.n	8011fe8 <udp_sendto_if+0x5c>
 8011fd4:	4b21      	ldr	r3, [pc, #132]	; (801205c <udp_sendto_if+0xd0>)
 8011fd6:	f240 2282 	movw	r2, #642	; 0x282
 8011fda:	4924      	ldr	r1, [pc, #144]	; (801206c <udp_sendto_if+0xe0>)
 8011fdc:	4821      	ldr	r0, [pc, #132]	; (8012064 <udp_sendto_if+0xd8>)
 8011fde:	f005 f9dd 	bl	801739c <iprintf>
 8011fe2:	f06f 030f 	mvn.w	r3, #15
 8011fe6:	e035      	b.n	8012054 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011fe8:	6a3b      	ldr	r3, [r7, #32]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d109      	bne.n	8012002 <udp_sendto_if+0x76>
 8011fee:	4b1b      	ldr	r3, [pc, #108]	; (801205c <udp_sendto_if+0xd0>)
 8011ff0:	f240 2283 	movw	r2, #643	; 0x283
 8011ff4:	491e      	ldr	r1, [pc, #120]	; (8012070 <udp_sendto_if+0xe4>)
 8011ff6:	481b      	ldr	r0, [pc, #108]	; (8012064 <udp_sendto_if+0xd8>)
 8011ff8:	f005 f9d0 	bl	801739c <iprintf>
 8011ffc:	f06f 030f 	mvn.w	r3, #15
 8012000:	e028      	b.n	8012054 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d009      	beq.n	801201c <udp_sendto_if+0x90>
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d005      	beq.n	801201c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012018:	2be0      	cmp	r3, #224	; 0xe0
 801201a:	d103      	bne.n	8012024 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	3304      	adds	r3, #4
 8012020:	617b      	str	r3, [r7, #20]
 8012022:	e00b      	b.n	801203c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	6a3b      	ldr	r3, [r7, #32]
 801202a:	3304      	adds	r3, #4
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	429a      	cmp	r2, r3
 8012030:	d002      	beq.n	8012038 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012032:	f06f 0303 	mvn.w	r3, #3
 8012036:	e00d      	b.n	8012054 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801203c:	887a      	ldrh	r2, [r7, #2]
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	9301      	str	r3, [sp, #4]
 8012042:	6a3b      	ldr	r3, [r7, #32]
 8012044:	9300      	str	r3, [sp, #0]
 8012046:	4613      	mov	r3, r2
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	68b9      	ldr	r1, [r7, #8]
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f000 f811 	bl	8012074 <udp_sendto_if_src>
 8012052:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012054:	4618      	mov	r0, r3
 8012056:	3718      	adds	r7, #24
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	0801b948 	.word	0x0801b948
 8012060:	0801babc 	.word	0x0801babc
 8012064:	0801b99c 	.word	0x0801b99c
 8012068:	0801bad8 	.word	0x0801bad8
 801206c:	0801baf4 	.word	0x0801baf4
 8012070:	0801bb14 	.word	0x0801bb14

08012074 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b08c      	sub	sp, #48	; 0x30
 8012078:	af04      	add	r7, sp, #16
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	607a      	str	r2, [r7, #4]
 8012080:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d109      	bne.n	801209c <udp_sendto_if_src+0x28>
 8012088:	4b65      	ldr	r3, [pc, #404]	; (8012220 <udp_sendto_if_src+0x1ac>)
 801208a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801208e:	4965      	ldr	r1, [pc, #404]	; (8012224 <udp_sendto_if_src+0x1b0>)
 8012090:	4865      	ldr	r0, [pc, #404]	; (8012228 <udp_sendto_if_src+0x1b4>)
 8012092:	f005 f983 	bl	801739c <iprintf>
 8012096:	f06f 030f 	mvn.w	r3, #15
 801209a:	e0bc      	b.n	8012216 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d109      	bne.n	80120b6 <udp_sendto_if_src+0x42>
 80120a2:	4b5f      	ldr	r3, [pc, #380]	; (8012220 <udp_sendto_if_src+0x1ac>)
 80120a4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80120a8:	4960      	ldr	r1, [pc, #384]	; (801222c <udp_sendto_if_src+0x1b8>)
 80120aa:	485f      	ldr	r0, [pc, #380]	; (8012228 <udp_sendto_if_src+0x1b4>)
 80120ac:	f005 f976 	bl	801739c <iprintf>
 80120b0:	f06f 030f 	mvn.w	r3, #15
 80120b4:	e0af      	b.n	8012216 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d109      	bne.n	80120d0 <udp_sendto_if_src+0x5c>
 80120bc:	4b58      	ldr	r3, [pc, #352]	; (8012220 <udp_sendto_if_src+0x1ac>)
 80120be:	f240 22d3 	movw	r2, #723	; 0x2d3
 80120c2:	495b      	ldr	r1, [pc, #364]	; (8012230 <udp_sendto_if_src+0x1bc>)
 80120c4:	4858      	ldr	r0, [pc, #352]	; (8012228 <udp_sendto_if_src+0x1b4>)
 80120c6:	f005 f969 	bl	801739c <iprintf>
 80120ca:	f06f 030f 	mvn.w	r3, #15
 80120ce:	e0a2      	b.n	8012216 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80120d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d109      	bne.n	80120ea <udp_sendto_if_src+0x76>
 80120d6:	4b52      	ldr	r3, [pc, #328]	; (8012220 <udp_sendto_if_src+0x1ac>)
 80120d8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80120dc:	4955      	ldr	r1, [pc, #340]	; (8012234 <udp_sendto_if_src+0x1c0>)
 80120de:	4852      	ldr	r0, [pc, #328]	; (8012228 <udp_sendto_if_src+0x1b4>)
 80120e0:	f005 f95c 	bl	801739c <iprintf>
 80120e4:	f06f 030f 	mvn.w	r3, #15
 80120e8:	e095      	b.n	8012216 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80120ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d109      	bne.n	8012104 <udp_sendto_if_src+0x90>
 80120f0:	4b4b      	ldr	r3, [pc, #300]	; (8012220 <udp_sendto_if_src+0x1ac>)
 80120f2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80120f6:	4950      	ldr	r1, [pc, #320]	; (8012238 <udp_sendto_if_src+0x1c4>)
 80120f8:	484b      	ldr	r0, [pc, #300]	; (8012228 <udp_sendto_if_src+0x1b4>)
 80120fa:	f005 f94f 	bl	801739c <iprintf>
 80120fe:	f06f 030f 	mvn.w	r3, #15
 8012102:	e088      	b.n	8012216 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	8a5b      	ldrh	r3, [r3, #18]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d10f      	bne.n	801212c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801210c:	68f9      	ldr	r1, [r7, #12]
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	8a5b      	ldrh	r3, [r3, #18]
 8012112:	461a      	mov	r2, r3
 8012114:	68f8      	ldr	r0, [r7, #12]
 8012116:	f000 f893 	bl	8012240 <udp_bind>
 801211a:	4603      	mov	r3, r0
 801211c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801211e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d002      	beq.n	801212c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012126:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801212a:	e074      	b.n	8012216 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	891b      	ldrh	r3, [r3, #8]
 8012130:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012134:	4293      	cmp	r3, r2
 8012136:	d902      	bls.n	801213e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801213c:	e06b      	b.n	8012216 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801213e:	2108      	movs	r1, #8
 8012140:	68b8      	ldr	r0, [r7, #8]
 8012142:	f7f9 ff4f 	bl	800bfe4 <pbuf_add_header>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d015      	beq.n	8012178 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801214c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012150:	2108      	movs	r1, #8
 8012152:	2022      	movs	r0, #34	; 0x22
 8012154:	f7f9 fcf8 	bl	800bb48 <pbuf_alloc>
 8012158:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d102      	bne.n	8012166 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012164:	e057      	b.n	8012216 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	891b      	ldrh	r3, [r3, #8]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d006      	beq.n	801217c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801216e:	68b9      	ldr	r1, [r7, #8]
 8012170:	69f8      	ldr	r0, [r7, #28]
 8012172:	f7fa f8f1 	bl	800c358 <pbuf_chain>
 8012176:	e001      	b.n	801217c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	895b      	ldrh	r3, [r3, #10]
 8012180:	2b07      	cmp	r3, #7
 8012182:	d806      	bhi.n	8012192 <udp_sendto_if_src+0x11e>
 8012184:	4b26      	ldr	r3, [pc, #152]	; (8012220 <udp_sendto_if_src+0x1ac>)
 8012186:	f240 320d 	movw	r2, #781	; 0x30d
 801218a:	492c      	ldr	r1, [pc, #176]	; (801223c <udp_sendto_if_src+0x1c8>)
 801218c:	4826      	ldr	r0, [pc, #152]	; (8012228 <udp_sendto_if_src+0x1b4>)
 801218e:	f005 f905 	bl	801739c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	8a5b      	ldrh	r3, [r3, #18]
 801219c:	4618      	mov	r0, r3
 801219e:	f7f8 fbff 	bl	800a9a0 <lwip_htons>
 80121a2:	4603      	mov	r3, r0
 80121a4:	461a      	mov	r2, r3
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80121aa:	887b      	ldrh	r3, [r7, #2]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f8 fbf7 	bl	800a9a0 <lwip_htons>
 80121b2:	4603      	mov	r3, r0
 80121b4:	461a      	mov	r2, r3
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2200      	movs	r2, #0
 80121be:	719a      	strb	r2, [r3, #6]
 80121c0:	2200      	movs	r2, #0
 80121c2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	891b      	ldrh	r3, [r3, #8]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f8 fbe9 	bl	800a9a0 <lwip_htons>
 80121ce:	4603      	mov	r3, r0
 80121d0:	461a      	mov	r2, r3
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80121d6:	2311      	movs	r3, #17
 80121d8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	7adb      	ldrb	r3, [r3, #11]
 80121de:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	7a9b      	ldrb	r3, [r3, #10]
 80121e4:	7cb9      	ldrb	r1, [r7, #18]
 80121e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121e8:	9202      	str	r2, [sp, #8]
 80121ea:	7cfa      	ldrb	r2, [r7, #19]
 80121ec:	9201      	str	r2, [sp, #4]
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	460b      	mov	r3, r1
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121f6:	69f8      	ldr	r0, [r7, #28]
 80121f8:	f003 fb3a 	bl	8015870 <ip4_output_if_src>
 80121fc:	4603      	mov	r3, r0
 80121fe:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012200:	69fa      	ldr	r2, [r7, #28]
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	429a      	cmp	r2, r3
 8012206:	d004      	beq.n	8012212 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012208:	69f8      	ldr	r0, [r7, #28]
 801220a:	f7f9 ff81 	bl	800c110 <pbuf_free>
    q = NULL;
 801220e:	2300      	movs	r3, #0
 8012210:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012212:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3720      	adds	r7, #32
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	0801b948 	.word	0x0801b948
 8012224:	0801bb34 	.word	0x0801bb34
 8012228:	0801b99c 	.word	0x0801b99c
 801222c:	0801bb54 	.word	0x0801bb54
 8012230:	0801bb74 	.word	0x0801bb74
 8012234:	0801bb98 	.word	0x0801bb98
 8012238:	0801bbbc 	.word	0x0801bbbc
 801223c:	0801bbe0 	.word	0x0801bbe0

08012240 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	4613      	mov	r3, r2
 801224c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d101      	bne.n	8012258 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012254:	4b39      	ldr	r3, [pc, #228]	; (801233c <udp_bind+0xfc>)
 8012256:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d109      	bne.n	8012272 <udp_bind+0x32>
 801225e:	4b38      	ldr	r3, [pc, #224]	; (8012340 <udp_bind+0x100>)
 8012260:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012264:	4937      	ldr	r1, [pc, #220]	; (8012344 <udp_bind+0x104>)
 8012266:	4838      	ldr	r0, [pc, #224]	; (8012348 <udp_bind+0x108>)
 8012268:	f005 f898 	bl	801739c <iprintf>
 801226c:	f06f 030f 	mvn.w	r3, #15
 8012270:	e060      	b.n	8012334 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012276:	4b35      	ldr	r3, [pc, #212]	; (801234c <udp_bind+0x10c>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	617b      	str	r3, [r7, #20]
 801227c:	e009      	b.n	8012292 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	429a      	cmp	r2, r3
 8012284:	d102      	bne.n	801228c <udp_bind+0x4c>
      rebind = 1;
 8012286:	2301      	movs	r3, #1
 8012288:	74fb      	strb	r3, [r7, #19]
      break;
 801228a:	e005      	b.n	8012298 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	68db      	ldr	r3, [r3, #12]
 8012290:	617b      	str	r3, [r7, #20]
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1f2      	bne.n	801227e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012298:	88fb      	ldrh	r3, [r7, #6]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d109      	bne.n	80122b2 <udp_bind+0x72>
    port = udp_new_port();
 801229e:	f7ff fcc5 	bl	8011c2c <udp_new_port>
 80122a2:	4603      	mov	r3, r0
 80122a4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80122a6:	88fb      	ldrh	r3, [r7, #6]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d12c      	bne.n	8012306 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80122ac:	f06f 0307 	mvn.w	r3, #7
 80122b0:	e040      	b.n	8012334 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122b2:	4b26      	ldr	r3, [pc, #152]	; (801234c <udp_bind+0x10c>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	617b      	str	r3, [r7, #20]
 80122b8:	e022      	b.n	8012300 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80122ba:	68fa      	ldr	r2, [r7, #12]
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d01b      	beq.n	80122fa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	8a5b      	ldrh	r3, [r3, #18]
 80122c6:	88fa      	ldrh	r2, [r7, #6]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d116      	bne.n	80122fa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d00d      	beq.n	80122f4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00a      	beq.n	80122f4 <udp_bind+0xb4>
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d006      	beq.n	80122f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80122e6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d003      	beq.n	80122f4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d102      	bne.n	80122fa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80122f4:	f06f 0307 	mvn.w	r3, #7
 80122f8:	e01c      	b.n	8012334 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	68db      	ldr	r3, [r3, #12]
 80122fe:	617b      	str	r3, [r7, #20]
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d1d9      	bne.n	80122ba <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d002      	beq.n	8012312 <udp_bind+0xd2>
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	e000      	b.n	8012314 <udp_bind+0xd4>
 8012312:	2300      	movs	r3, #0
 8012314:	68fa      	ldr	r2, [r7, #12]
 8012316:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	88fa      	ldrh	r2, [r7, #6]
 801231c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801231e:	7cfb      	ldrb	r3, [r7, #19]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d106      	bne.n	8012332 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012324:	4b09      	ldr	r3, [pc, #36]	; (801234c <udp_bind+0x10c>)
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801232c:	4a07      	ldr	r2, [pc, #28]	; (801234c <udp_bind+0x10c>)
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012332:	2300      	movs	r3, #0
}
 8012334:	4618      	mov	r0, r3
 8012336:	3718      	adds	r7, #24
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	0801c8c0 	.word	0x0801c8c0
 8012340:	0801b948 	.word	0x0801b948
 8012344:	0801bc10 	.word	0x0801bc10
 8012348:	0801b99c 	.word	0x0801b99c
 801234c:	20012ccc 	.word	0x20012ccc

08012350 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	4613      	mov	r3, r2
 801235c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d109      	bne.n	8012378 <udp_connect+0x28>
 8012364:	4b2c      	ldr	r3, [pc, #176]	; (8012418 <udp_connect+0xc8>)
 8012366:	f240 4235 	movw	r2, #1077	; 0x435
 801236a:	492c      	ldr	r1, [pc, #176]	; (801241c <udp_connect+0xcc>)
 801236c:	482c      	ldr	r0, [pc, #176]	; (8012420 <udp_connect+0xd0>)
 801236e:	f005 f815 	bl	801739c <iprintf>
 8012372:	f06f 030f 	mvn.w	r3, #15
 8012376:	e04b      	b.n	8012410 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d109      	bne.n	8012392 <udp_connect+0x42>
 801237e:	4b26      	ldr	r3, [pc, #152]	; (8012418 <udp_connect+0xc8>)
 8012380:	f240 4236 	movw	r2, #1078	; 0x436
 8012384:	4927      	ldr	r1, [pc, #156]	; (8012424 <udp_connect+0xd4>)
 8012386:	4826      	ldr	r0, [pc, #152]	; (8012420 <udp_connect+0xd0>)
 8012388:	f005 f808 	bl	801739c <iprintf>
 801238c:	f06f 030f 	mvn.w	r3, #15
 8012390:	e03e      	b.n	8012410 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	8a5b      	ldrh	r3, [r3, #18]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d10f      	bne.n	80123ba <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801239a:	68f9      	ldr	r1, [r7, #12]
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	8a5b      	ldrh	r3, [r3, #18]
 80123a0:	461a      	mov	r2, r3
 80123a2:	68f8      	ldr	r0, [r7, #12]
 80123a4:	f7ff ff4c 	bl	8012240 <udp_bind>
 80123a8:	4603      	mov	r3, r0
 80123aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80123ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d002      	beq.n	80123ba <udp_connect+0x6a>
      return err;
 80123b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123b8:	e02a      	b.n	8012410 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d002      	beq.n	80123c6 <udp_connect+0x76>
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	e000      	b.n	80123c8 <udp_connect+0x78>
 80123c6:	2300      	movs	r3, #0
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	88fa      	ldrh	r2, [r7, #6]
 80123d0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	7c1b      	ldrb	r3, [r3, #16]
 80123d6:	f043 0304 	orr.w	r3, r3, #4
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123e0:	4b11      	ldr	r3, [pc, #68]	; (8012428 <udp_connect+0xd8>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	617b      	str	r3, [r7, #20]
 80123e6:	e008      	b.n	80123fa <udp_connect+0xaa>
    if (pcb == ipcb) {
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d101      	bne.n	80123f4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80123f0:	2300      	movs	r3, #0
 80123f2:	e00d      	b.n	8012410 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1f3      	bne.n	80123e8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012400:	4b09      	ldr	r3, [pc, #36]	; (8012428 <udp_connect+0xd8>)
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012408:	4a07      	ldr	r2, [pc, #28]	; (8012428 <udp_connect+0xd8>)
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801240e:	2300      	movs	r3, #0
}
 8012410:	4618      	mov	r0, r3
 8012412:	3718      	adds	r7, #24
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	0801b948 	.word	0x0801b948
 801241c:	0801bc28 	.word	0x0801bc28
 8012420:	0801b99c 	.word	0x0801b99c
 8012424:	0801bc44 	.word	0x0801bc44
 8012428:	20012ccc 	.word	0x20012ccc

0801242c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d107      	bne.n	801244e <udp_recv+0x22>
 801243e:	4b08      	ldr	r3, [pc, #32]	; (8012460 <udp_recv+0x34>)
 8012440:	f240 428a 	movw	r2, #1162	; 0x48a
 8012444:	4907      	ldr	r1, [pc, #28]	; (8012464 <udp_recv+0x38>)
 8012446:	4808      	ldr	r0, [pc, #32]	; (8012468 <udp_recv+0x3c>)
 8012448:	f004 ffa8 	bl	801739c <iprintf>
 801244c:	e005      	b.n	801245a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	687a      	ldr	r2, [r7, #4]
 8012458:	61da      	str	r2, [r3, #28]
}
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	0801b948 	.word	0x0801b948
 8012464:	0801bc7c 	.word	0x0801bc7c
 8012468:	0801b99c 	.word	0x0801b99c

0801246c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d107      	bne.n	801248a <udp_remove+0x1e>
 801247a:	4b19      	ldr	r3, [pc, #100]	; (80124e0 <udp_remove+0x74>)
 801247c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012480:	4918      	ldr	r1, [pc, #96]	; (80124e4 <udp_remove+0x78>)
 8012482:	4819      	ldr	r0, [pc, #100]	; (80124e8 <udp_remove+0x7c>)
 8012484:	f004 ff8a 	bl	801739c <iprintf>
 8012488:	e026      	b.n	80124d8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801248a:	4b18      	ldr	r3, [pc, #96]	; (80124ec <udp_remove+0x80>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	429a      	cmp	r2, r3
 8012492:	d105      	bne.n	80124a0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012494:	4b15      	ldr	r3, [pc, #84]	; (80124ec <udp_remove+0x80>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	4a14      	ldr	r2, [pc, #80]	; (80124ec <udp_remove+0x80>)
 801249c:	6013      	str	r3, [r2, #0]
 801249e:	e017      	b.n	80124d0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80124a0:	4b12      	ldr	r3, [pc, #72]	; (80124ec <udp_remove+0x80>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	60fb      	str	r3, [r7, #12]
 80124a6:	e010      	b.n	80124ca <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d009      	beq.n	80124c4 <udp_remove+0x58>
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d104      	bne.n	80124c4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	68da      	ldr	r2, [r3, #12]
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	60da      	str	r2, [r3, #12]
        break;
 80124c2:	e005      	b.n	80124d0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	60fb      	str	r3, [r7, #12]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d1eb      	bne.n	80124a8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	2000      	movs	r0, #0
 80124d4:	f7f8 ff6c 	bl	800b3b0 <memp_free>
}
 80124d8:	3710      	adds	r7, #16
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	bf00      	nop
 80124e0:	0801b948 	.word	0x0801b948
 80124e4:	0801bc94 	.word	0x0801bc94
 80124e8:	0801b99c 	.word	0x0801b99c
 80124ec:	20012ccc 	.word	0x20012ccc

080124f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80124f6:	2000      	movs	r0, #0
 80124f8:	f7f8 ff08 	bl	800b30c <memp_malloc>
 80124fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d007      	beq.n	8012514 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012504:	2220      	movs	r2, #32
 8012506:	2100      	movs	r1, #0
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f004 fafb 	bl	8016b04 <memset>
    pcb->ttl = UDP_TTL;
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	22ff      	movs	r2, #255	; 0xff
 8012512:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012514:	687b      	ldr	r3, [r7, #4]
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
	...

08012520 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
 8012528:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d01e      	beq.n	801256e <udp_netif_ip_addr_changed+0x4e>
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d01a      	beq.n	801256e <udp_netif_ip_addr_changed+0x4e>
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d017      	beq.n	801256e <udp_netif_ip_addr_changed+0x4e>
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d013      	beq.n	801256e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012546:	4b0d      	ldr	r3, [pc, #52]	; (801257c <udp_netif_ip_addr_changed+0x5c>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	60fb      	str	r3, [r7, #12]
 801254c:	e00c      	b.n	8012568 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	429a      	cmp	r2, r3
 8012558:	d103      	bne.n	8012562 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	60fb      	str	r3, [r7, #12]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d1ef      	bne.n	801254e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801256e:	bf00      	nop
 8012570:	3714      	adds	r7, #20
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	20012ccc 	.word	0x20012ccc

08012580 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012584:	4b20      	ldr	r3, [pc, #128]	; (8012608 <dhcp_inc_pcb_refcount+0x88>)
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d133      	bne.n	80125f4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801258c:	4b1f      	ldr	r3, [pc, #124]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d005      	beq.n	80125a0 <dhcp_inc_pcb_refcount+0x20>
 8012594:	4b1e      	ldr	r3, [pc, #120]	; (8012610 <dhcp_inc_pcb_refcount+0x90>)
 8012596:	22e5      	movs	r2, #229	; 0xe5
 8012598:	491e      	ldr	r1, [pc, #120]	; (8012614 <dhcp_inc_pcb_refcount+0x94>)
 801259a:	481f      	ldr	r0, [pc, #124]	; (8012618 <dhcp_inc_pcb_refcount+0x98>)
 801259c:	f004 fefe 	bl	801739c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80125a0:	f7ff ffa6 	bl	80124f0 <udp_new>
 80125a4:	4603      	mov	r3, r0
 80125a6:	4a19      	ldr	r2, [pc, #100]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125a8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80125aa:	4b18      	ldr	r3, [pc, #96]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d102      	bne.n	80125b8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80125b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125b6:	e024      	b.n	8012602 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80125b8:	4b14      	ldr	r3, [pc, #80]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	7a5a      	ldrb	r2, [r3, #9]
 80125be:	4b13      	ldr	r3, [pc, #76]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f042 0220 	orr.w	r2, r2, #32
 80125c6:	b2d2      	uxtb	r2, r2
 80125c8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80125ca:	4b10      	ldr	r3, [pc, #64]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2244      	movs	r2, #68	; 0x44
 80125d0:	4912      	ldr	r1, [pc, #72]	; (801261c <dhcp_inc_pcb_refcount+0x9c>)
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7ff fe34 	bl	8012240 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80125d8:	4b0c      	ldr	r3, [pc, #48]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2243      	movs	r2, #67	; 0x43
 80125de:	490f      	ldr	r1, [pc, #60]	; (801261c <dhcp_inc_pcb_refcount+0x9c>)
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ff feb5 	bl	8012350 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80125e6:	4b09      	ldr	r3, [pc, #36]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2200      	movs	r2, #0
 80125ec:	490c      	ldr	r1, [pc, #48]	; (8012620 <dhcp_inc_pcb_refcount+0xa0>)
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7ff ff1c 	bl	801242c <udp_recv>
  }

  dhcp_pcb_refcount++;
 80125f4:	4b04      	ldr	r3, [pc, #16]	; (8012608 <dhcp_inc_pcb_refcount+0x88>)
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	3301      	adds	r3, #1
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	4b02      	ldr	r3, [pc, #8]	; (8012608 <dhcp_inc_pcb_refcount+0x88>)
 80125fe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	20004bbc 	.word	0x20004bbc
 801260c:	20004bb8 	.word	0x20004bb8
 8012610:	0801bcac 	.word	0x0801bcac
 8012614:	0801bce4 	.word	0x0801bce4
 8012618:	0801bd0c 	.word	0x0801bd0c
 801261c:	0801c8c0 	.word	0x0801c8c0
 8012620:	08013eb9 	.word	0x08013eb9

08012624 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012628:	4b0e      	ldr	r3, [pc, #56]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d105      	bne.n	801263c <dhcp_dec_pcb_refcount+0x18>
 8012630:	4b0d      	ldr	r3, [pc, #52]	; (8012668 <dhcp_dec_pcb_refcount+0x44>)
 8012632:	22ff      	movs	r2, #255	; 0xff
 8012634:	490d      	ldr	r1, [pc, #52]	; (801266c <dhcp_dec_pcb_refcount+0x48>)
 8012636:	480e      	ldr	r0, [pc, #56]	; (8012670 <dhcp_dec_pcb_refcount+0x4c>)
 8012638:	f004 feb0 	bl	801739c <iprintf>
  dhcp_pcb_refcount--;
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	3b01      	subs	r3, #1
 8012642:	b2da      	uxtb	r2, r3
 8012644:	4b07      	ldr	r3, [pc, #28]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 8012646:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012648:	4b06      	ldr	r3, [pc, #24]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d107      	bne.n	8012660 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012650:	4b08      	ldr	r3, [pc, #32]	; (8012674 <dhcp_dec_pcb_refcount+0x50>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4618      	mov	r0, r3
 8012656:	f7ff ff09 	bl	801246c <udp_remove>
    dhcp_pcb = NULL;
 801265a:	4b06      	ldr	r3, [pc, #24]	; (8012674 <dhcp_dec_pcb_refcount+0x50>)
 801265c:	2200      	movs	r2, #0
 801265e:	601a      	str	r2, [r3, #0]
  }
}
 8012660:	bf00      	nop
 8012662:	bd80      	pop	{r7, pc}
 8012664:	20004bbc 	.word	0x20004bbc
 8012668:	0801bcac 	.word	0x0801bcac
 801266c:	0801bd34 	.word	0x0801bd34
 8012670:	0801bd0c 	.word	0x0801bd0c
 8012674:	20004bb8 	.word	0x20004bb8

08012678 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012684:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012686:	210c      	movs	r1, #12
 8012688:	68f8      	ldr	r0, [r7, #12]
 801268a:	f001 f857 	bl	801373c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801268e:	4b06      	ldr	r3, [pc, #24]	; (80126a8 <dhcp_handle_nak+0x30>)
 8012690:	4a05      	ldr	r2, [pc, #20]	; (80126a8 <dhcp_handle_nak+0x30>)
 8012692:	4905      	ldr	r1, [pc, #20]	; (80126a8 <dhcp_handle_nak+0x30>)
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7f9 f82d 	bl	800b6f4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f000 fc4a 	bl	8012f34 <dhcp_discover>
}
 80126a0:	bf00      	nop
 80126a2:	3710      	adds	r7, #16
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	0801c8c0 	.word	0x0801c8c0

080126ac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80126ba:	2108      	movs	r1, #8
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f001 f83d 	bl	801373c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	331c      	adds	r3, #28
 80126c6:	2200      	movs	r2, #0
 80126c8:	4619      	mov	r1, r3
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f002 fb3e 	bl	8014d4c <etharp_query>
 80126d0:	4603      	mov	r3, r0
 80126d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	799b      	ldrb	r3, [r3, #6]
 80126d8:	2bff      	cmp	r3, #255	; 0xff
 80126da:	d005      	beq.n	80126e8 <dhcp_check+0x3c>
    dhcp->tries++;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	799b      	ldrb	r3, [r3, #6]
 80126e0:	3301      	adds	r3, #1
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80126e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80126ec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80126ee:	893b      	ldrh	r3, [r7, #8]
 80126f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80126f4:	4a06      	ldr	r2, [pc, #24]	; (8012710 <dhcp_check+0x64>)
 80126f6:	fb82 1203 	smull	r1, r2, r2, r3
 80126fa:	1152      	asrs	r2, r2, #5
 80126fc:	17db      	asrs	r3, r3, #31
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	b29a      	uxth	r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012706:	bf00      	nop
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	10624dd3 	.word	0x10624dd3

08012714 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012722:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012724:	4b0c      	ldr	r3, [pc, #48]	; (8012758 <dhcp_handle_offer+0x44>)
 8012726:	789b      	ldrb	r3, [r3, #2]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d011      	beq.n	8012750 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2200      	movs	r2, #0
 8012730:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012732:	4b0a      	ldr	r3, [pc, #40]	; (801275c <dhcp_handle_offer+0x48>)
 8012734:	689b      	ldr	r3, [r3, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f7f8 f947 	bl	800a9ca <lwip_htonl>
 801273c:	4602      	mov	r2, r0
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	691a      	ldr	r2, [r3, #16]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f808 	bl	8012760 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012750:	bf00      	nop
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	20012cd0 	.word	0x20012cd0
 801275c:	20012cd8 	.word	0x20012cd8

08012760 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012760:	b5b0      	push	{r4, r5, r7, lr}
 8012762:	b08a      	sub	sp, #40	; 0x28
 8012764:	af02      	add	r7, sp, #8
 8012766:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d109      	bne.n	8012782 <dhcp_select+0x22>
 801276e:	4b71      	ldr	r3, [pc, #452]	; (8012934 <dhcp_select+0x1d4>)
 8012770:	f240 1277 	movw	r2, #375	; 0x177
 8012774:	4970      	ldr	r1, [pc, #448]	; (8012938 <dhcp_select+0x1d8>)
 8012776:	4871      	ldr	r0, [pc, #452]	; (801293c <dhcp_select+0x1dc>)
 8012778:	f004 fe10 	bl	801739c <iprintf>
 801277c:	f06f 030f 	mvn.w	r3, #15
 8012780:	e0d3      	b.n	801292a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012786:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d109      	bne.n	80127a2 <dhcp_select+0x42>
 801278e:	4b69      	ldr	r3, [pc, #420]	; (8012934 <dhcp_select+0x1d4>)
 8012790:	f240 1279 	movw	r2, #377	; 0x179
 8012794:	496a      	ldr	r1, [pc, #424]	; (8012940 <dhcp_select+0x1e0>)
 8012796:	4869      	ldr	r0, [pc, #420]	; (801293c <dhcp_select+0x1dc>)
 8012798:	f004 fe00 	bl	801739c <iprintf>
 801279c:	f06f 0305 	mvn.w	r3, #5
 80127a0:	e0c3      	b.n	801292a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80127a2:	2101      	movs	r1, #1
 80127a4:	69b8      	ldr	r0, [r7, #24]
 80127a6:	f000 ffc9 	bl	801373c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80127aa:	f107 030c 	add.w	r3, r7, #12
 80127ae:	2203      	movs	r2, #3
 80127b0:	69b9      	ldr	r1, [r7, #24]
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f001 fc4e 	bl	8014054 <dhcp_create_msg>
 80127b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f000 8085 	beq.w	80128cc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80127c8:	89b8      	ldrh	r0, [r7, #12]
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127d0:	2302      	movs	r3, #2
 80127d2:	2239      	movs	r2, #57	; 0x39
 80127d4:	f000 ffcc 	bl	8013770 <dhcp_option>
 80127d8:	4603      	mov	r3, r0
 80127da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80127dc:	89b8      	ldrh	r0, [r7, #12]
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127e8:	461a      	mov	r2, r3
 80127ea:	f001 f81b 	bl	8013824 <dhcp_option_short>
 80127ee:	4603      	mov	r3, r0
 80127f0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80127f2:	89b8      	ldrh	r0, [r7, #12]
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127fa:	2304      	movs	r3, #4
 80127fc:	2232      	movs	r2, #50	; 0x32
 80127fe:	f000 ffb7 	bl	8013770 <dhcp_option>
 8012802:	4603      	mov	r3, r0
 8012804:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012806:	89bc      	ldrh	r4, [r7, #12]
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	69db      	ldr	r3, [r3, #28]
 8012812:	4618      	mov	r0, r3
 8012814:	f7f8 f8d9 	bl	800a9ca <lwip_htonl>
 8012818:	4603      	mov	r3, r0
 801281a:	461a      	mov	r2, r3
 801281c:	4629      	mov	r1, r5
 801281e:	4620      	mov	r0, r4
 8012820:	f001 f832 	bl	8013888 <dhcp_option_long>
 8012824:	4603      	mov	r3, r0
 8012826:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012828:	89b8      	ldrh	r0, [r7, #12]
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012830:	2304      	movs	r3, #4
 8012832:	2236      	movs	r2, #54	; 0x36
 8012834:	f000 ff9c 	bl	8013770 <dhcp_option>
 8012838:	4603      	mov	r3, r0
 801283a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801283c:	89bc      	ldrh	r4, [r7, #12]
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	699b      	ldr	r3, [r3, #24]
 8012848:	4618      	mov	r0, r3
 801284a:	f7f8 f8be 	bl	800a9ca <lwip_htonl>
 801284e:	4603      	mov	r3, r0
 8012850:	461a      	mov	r2, r3
 8012852:	4629      	mov	r1, r5
 8012854:	4620      	mov	r0, r4
 8012856:	f001 f817 	bl	8013888 <dhcp_option_long>
 801285a:	4603      	mov	r3, r0
 801285c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801285e:	89b8      	ldrh	r0, [r7, #12]
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012866:	2303      	movs	r3, #3
 8012868:	2237      	movs	r2, #55	; 0x37
 801286a:	f000 ff81 	bl	8013770 <dhcp_option>
 801286e:	4603      	mov	r3, r0
 8012870:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012872:	2300      	movs	r3, #0
 8012874:	77bb      	strb	r3, [r7, #30]
 8012876:	e00e      	b.n	8012896 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012878:	89b8      	ldrh	r0, [r7, #12]
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012880:	7fbb      	ldrb	r3, [r7, #30]
 8012882:	4a30      	ldr	r2, [pc, #192]	; (8012944 <dhcp_select+0x1e4>)
 8012884:	5cd3      	ldrb	r3, [r2, r3]
 8012886:	461a      	mov	r2, r3
 8012888:	f000 ffa6 	bl	80137d8 <dhcp_option_byte>
 801288c:	4603      	mov	r3, r0
 801288e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012890:	7fbb      	ldrb	r3, [r7, #30]
 8012892:	3301      	adds	r3, #1
 8012894:	77bb      	strb	r3, [r7, #30]
 8012896:	7fbb      	ldrb	r3, [r7, #30]
 8012898:	2b02      	cmp	r3, #2
 801289a:	d9ed      	bls.n	8012878 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801289c:	89b8      	ldrh	r0, [r7, #12]
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	33f0      	adds	r3, #240	; 0xf0
 80128a2:	697a      	ldr	r2, [r7, #20]
 80128a4:	4619      	mov	r1, r3
 80128a6:	f001 fcab 	bl	8014200 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80128aa:	4b27      	ldr	r3, [pc, #156]	; (8012948 <dhcp_select+0x1e8>)
 80128ac:	6818      	ldr	r0, [r3, #0]
 80128ae:	4b27      	ldr	r3, [pc, #156]	; (801294c <dhcp_select+0x1ec>)
 80128b0:	9301      	str	r3, [sp, #4]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	2343      	movs	r3, #67	; 0x43
 80128b8:	4a25      	ldr	r2, [pc, #148]	; (8012950 <dhcp_select+0x1f0>)
 80128ba:	6979      	ldr	r1, [r7, #20]
 80128bc:	f7ff fbda 	bl	8012074 <udp_sendto_if_src>
 80128c0:	4603      	mov	r3, r0
 80128c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80128c4:	6978      	ldr	r0, [r7, #20]
 80128c6:	f7f9 fc23 	bl	800c110 <pbuf_free>
 80128ca:	e001      	b.n	80128d0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80128cc:	23ff      	movs	r3, #255	; 0xff
 80128ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	799b      	ldrb	r3, [r3, #6]
 80128d4:	2bff      	cmp	r3, #255	; 0xff
 80128d6:	d005      	beq.n	80128e4 <dhcp_select+0x184>
    dhcp->tries++;
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	799b      	ldrb	r3, [r3, #6]
 80128dc:	3301      	adds	r3, #1
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	799b      	ldrb	r3, [r3, #6]
 80128e8:	2b05      	cmp	r3, #5
 80128ea:	d80d      	bhi.n	8012908 <dhcp_select+0x1a8>
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	799b      	ldrb	r3, [r3, #6]
 80128f0:	461a      	mov	r2, r3
 80128f2:	2301      	movs	r3, #1
 80128f4:	4093      	lsls	r3, r2
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	461a      	mov	r2, r3
 80128fa:	0152      	lsls	r2, r2, #5
 80128fc:	1ad2      	subs	r2, r2, r3
 80128fe:	0092      	lsls	r2, r2, #2
 8012900:	4413      	add	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	b29b      	uxth	r3, r3
 8012906:	e001      	b.n	801290c <dhcp_select+0x1ac>
 8012908:	f64e 2360 	movw	r3, #60000	; 0xea60
 801290c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801290e:	89fb      	ldrh	r3, [r7, #14]
 8012910:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012914:	4a0f      	ldr	r2, [pc, #60]	; (8012954 <dhcp_select+0x1f4>)
 8012916:	fb82 1203 	smull	r1, r2, r2, r3
 801291a:	1152      	asrs	r2, r2, #5
 801291c:	17db      	asrs	r3, r3, #31
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	b29a      	uxth	r2, r3
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012926:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3720      	adds	r7, #32
 801292e:	46bd      	mov	sp, r7
 8012930:	bdb0      	pop	{r4, r5, r7, pc}
 8012932:	bf00      	nop
 8012934:	0801bcac 	.word	0x0801bcac
 8012938:	0801bd58 	.word	0x0801bd58
 801293c:	0801bd0c 	.word	0x0801bd0c
 8012940:	0801bd74 	.word	0x0801bd74
 8012944:	2000001c 	.word	0x2000001c
 8012948:	20004bb8 	.word	0x20004bb8
 801294c:	0801c8c0 	.word	0x0801c8c0
 8012950:	0801c8c4 	.word	0x0801c8c4
 8012954:	10624dd3 	.word	0x10624dd3

08012958 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801295e:	4b27      	ldr	r3, [pc, #156]	; (80129fc <dhcp_coarse_tmr+0xa4>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	607b      	str	r3, [r7, #4]
 8012964:	e042      	b.n	80129ec <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d039      	beq.n	80129e6 <dhcp_coarse_tmr+0x8e>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	795b      	ldrb	r3, [r3, #5]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d035      	beq.n	80129e6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	8a9b      	ldrh	r3, [r3, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d012      	beq.n	80129a8 <dhcp_coarse_tmr+0x50>
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	8a5b      	ldrh	r3, [r3, #18]
 8012986:	3301      	adds	r3, #1
 8012988:	b29a      	uxth	r2, r3
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	825a      	strh	r2, [r3, #18]
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	8a5a      	ldrh	r2, [r3, #18]
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	8a9b      	ldrh	r3, [r3, #20]
 8012996:	429a      	cmp	r2, r3
 8012998:	d106      	bne.n	80129a8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 fe34 	bl	8013608 <dhcp_release_and_stop>
        dhcp_start(netif);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 f96b 	bl	8012c7c <dhcp_start>
 80129a6:	e01e      	b.n	80129e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	8a1b      	ldrh	r3, [r3, #16]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00b      	beq.n	80129c8 <dhcp_coarse_tmr+0x70>
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	8a1b      	ldrh	r3, [r3, #16]
 80129b4:	1e5a      	subs	r2, r3, #1
 80129b6:	b291      	uxth	r1, r2
 80129b8:	683a      	ldr	r2, [r7, #0]
 80129ba:	8211      	strh	r1, [r2, #16]
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d103      	bne.n	80129c8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 f8c7 	bl	8012b54 <dhcp_t2_timeout>
 80129c6:	e00e      	b.n	80129e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	89db      	ldrh	r3, [r3, #14]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d00a      	beq.n	80129e6 <dhcp_coarse_tmr+0x8e>
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	89db      	ldrh	r3, [r3, #14]
 80129d4:	1e5a      	subs	r2, r3, #1
 80129d6:	b291      	uxth	r1, r2
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	81d1      	strh	r1, [r2, #14]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d102      	bne.n	80129e6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 f888 	bl	8012af6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	607b      	str	r3, [r7, #4]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1b9      	bne.n	8012966 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80129f2:	bf00      	nop
 80129f4:	bf00      	nop
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	20012ca4 	.word	0x20012ca4

08012a00 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012a06:	4b16      	ldr	r3, [pc, #88]	; (8012a60 <dhcp_fine_tmr+0x60>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	607b      	str	r3, [r7, #4]
 8012a0c:	e020      	b.n	8012a50 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a12:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d017      	beq.n	8012a4a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	891b      	ldrh	r3, [r3, #8]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d906      	bls.n	8012a30 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	891b      	ldrh	r3, [r3, #8]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	811a      	strh	r2, [r3, #8]
 8012a2e:	e00c      	b.n	8012a4a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	891b      	ldrh	r3, [r3, #8]
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d108      	bne.n	8012a4a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	891b      	ldrh	r3, [r3, #8]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 f80d 	bl	8012a64 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	607b      	str	r3, [r7, #4]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1db      	bne.n	8012a0e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012a56:	bf00      	nop
 8012a58:	bf00      	nop
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	20012ca4 	.word	0x20012ca4

08012a64 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a70:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	795b      	ldrb	r3, [r3, #5]
 8012a76:	2b0c      	cmp	r3, #12
 8012a78:	d003      	beq.n	8012a82 <dhcp_timeout+0x1e>
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	795b      	ldrb	r3, [r3, #5]
 8012a7e:	2b06      	cmp	r3, #6
 8012a80:	d103      	bne.n	8012a8a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fa56 	bl	8012f34 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012a88:	e031      	b.n	8012aee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	795b      	ldrb	r3, [r3, #5]
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d10e      	bne.n	8012ab0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	799b      	ldrb	r3, [r3, #6]
 8012a96:	2b05      	cmp	r3, #5
 8012a98:	d803      	bhi.n	8012aa2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7ff fe60 	bl	8012760 <dhcp_select>
}
 8012aa0:	e025      	b.n	8012aee <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f000 fdb0 	bl	8013608 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f8e7 	bl	8012c7c <dhcp_start>
}
 8012aae:	e01e      	b.n	8012aee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	795b      	ldrb	r3, [r3, #5]
 8012ab4:	2b08      	cmp	r3, #8
 8012ab6:	d10b      	bne.n	8012ad0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	799b      	ldrb	r3, [r3, #6]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d803      	bhi.n	8012ac8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff fdf3 	bl	80126ac <dhcp_check>
}
 8012ac6:	e012      	b.n	8012aee <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 fad5 	bl	8013078 <dhcp_bind>
}
 8012ace:	e00e      	b.n	8012aee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	795b      	ldrb	r3, [r3, #5]
 8012ad4:	2b03      	cmp	r3, #3
 8012ad6:	d10a      	bne.n	8012aee <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	799b      	ldrb	r3, [r3, #6]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d803      	bhi.n	8012ae8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f000 fcdb 	bl	801349c <dhcp_reboot>
}
 8012ae6:	e002      	b.n	8012aee <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f000 fa23 	bl	8012f34 <dhcp_discover>
}
 8012aee:	bf00      	nop
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b084      	sub	sp, #16
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b02:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	795b      	ldrb	r3, [r3, #5]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d007      	beq.n	8012b1c <dhcp_t1_timeout+0x26>
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	795b      	ldrb	r3, [r3, #5]
 8012b10:	2b0a      	cmp	r3, #10
 8012b12:	d003      	beq.n	8012b1c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b18:	2b05      	cmp	r3, #5
 8012b1a:	d117      	bne.n	8012b4c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 fb85 	bl	801322c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	899b      	ldrh	r3, [r3, #12]
 8012b26:	461a      	mov	r2, r3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	8a5b      	ldrh	r3, [r3, #18]
 8012b2c:	1ad3      	subs	r3, r2, r3
 8012b2e:	2b01      	cmp	r3, #1
 8012b30:	dd0c      	ble.n	8012b4c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	899b      	ldrh	r3, [r3, #12]
 8012b36:	461a      	mov	r2, r3
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	8a5b      	ldrh	r3, [r3, #18]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	da00      	bge.n	8012b44 <dhcp_t1_timeout+0x4e>
 8012b42:	3301      	adds	r3, #1
 8012b44:	105b      	asrs	r3, r3, #1
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012b4c:	bf00      	nop
 8012b4e:	3710      	adds	r7, #16
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}

08012b54 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b60:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	795b      	ldrb	r3, [r3, #5]
 8012b66:	2b01      	cmp	r3, #1
 8012b68:	d00b      	beq.n	8012b82 <dhcp_t2_timeout+0x2e>
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	795b      	ldrb	r3, [r3, #5]
 8012b6e:	2b0a      	cmp	r3, #10
 8012b70:	d007      	beq.n	8012b82 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b76:	2b05      	cmp	r3, #5
 8012b78:	d003      	beq.n	8012b82 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	795b      	ldrb	r3, [r3, #5]
 8012b7e:	2b04      	cmp	r3, #4
 8012b80:	d117      	bne.n	8012bb2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f000 fbee 	bl	8013364 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	8a9b      	ldrh	r3, [r3, #20]
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	8a5b      	ldrh	r3, [r3, #18]
 8012b92:	1ad3      	subs	r3, r2, r3
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	dd0c      	ble.n	8012bb2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	8a9b      	ldrh	r3, [r3, #20]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	8a5b      	ldrh	r3, [r3, #18]
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	da00      	bge.n	8012baa <dhcp_t2_timeout+0x56>
 8012ba8:	3301      	adds	r3, #1
 8012baa:	105b      	asrs	r3, r3, #1
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012bb2:	bf00      	nop
 8012bb4:	3710      	adds	r7, #16
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
	...

08012bbc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bca:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012bd8:	4b26      	ldr	r3, [pc, #152]	; (8012c74 <dhcp_handle_ack+0xb8>)
 8012bda:	78db      	ldrb	r3, [r3, #3]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d003      	beq.n	8012be8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012be0:	4b25      	ldr	r3, [pc, #148]	; (8012c78 <dhcp_handle_ack+0xbc>)
 8012be2:	68da      	ldr	r2, [r3, #12]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012be8:	4b22      	ldr	r3, [pc, #136]	; (8012c74 <dhcp_handle_ack+0xb8>)
 8012bea:	791b      	ldrb	r3, [r3, #4]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d004      	beq.n	8012bfa <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012bf0:	4b21      	ldr	r3, [pc, #132]	; (8012c78 <dhcp_handle_ack+0xbc>)
 8012bf2:	691a      	ldr	r2, [r3, #16]
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8012bf8:	e004      	b.n	8012c04 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bfe:	085a      	lsrs	r2, r3, #1
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012c04:	4b1b      	ldr	r3, [pc, #108]	; (8012c74 <dhcp_handle_ack+0xb8>)
 8012c06:	795b      	ldrb	r3, [r3, #5]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d004      	beq.n	8012c16 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012c0c:	4b1a      	ldr	r3, [pc, #104]	; (8012c78 <dhcp_handle_ack+0xbc>)
 8012c0e:	695a      	ldr	r2, [r3, #20]
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	631a      	str	r2, [r3, #48]	; 0x30
 8012c14:	e007      	b.n	8012c26 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	00db      	lsls	r3, r3, #3
 8012c1e:	1a9b      	subs	r3, r3, r2
 8012c20:	08da      	lsrs	r2, r3, #3
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	691a      	ldr	r2, [r3, #16]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012c2e:	4b11      	ldr	r3, [pc, #68]	; (8012c74 <dhcp_handle_ack+0xb8>)
 8012c30:	799b      	ldrb	r3, [r3, #6]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00b      	beq.n	8012c4e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012c36:	4b10      	ldr	r3, [pc, #64]	; (8012c78 <dhcp_handle_ack+0xbc>)
 8012c38:	699b      	ldr	r3, [r3, #24]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7f7 fec5 	bl	800a9ca <lwip_htonl>
 8012c40:	4602      	mov	r2, r0
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	2201      	movs	r2, #1
 8012c4a:	71da      	strb	r2, [r3, #7]
 8012c4c:	e002      	b.n	8012c54 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	2200      	movs	r2, #0
 8012c52:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012c54:	4b07      	ldr	r3, [pc, #28]	; (8012c74 <dhcp_handle_ack+0xb8>)
 8012c56:	79db      	ldrb	r3, [r3, #7]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d007      	beq.n	8012c6c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012c5c:	4b06      	ldr	r3, [pc, #24]	; (8012c78 <dhcp_handle_ack+0xbc>)
 8012c5e:	69db      	ldr	r3, [r3, #28]
 8012c60:	4618      	mov	r0, r3
 8012c62:	f7f7 feb2 	bl	800a9ca <lwip_htonl>
 8012c66:	4602      	mov	r2, r0
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012c6c:	bf00      	nop
 8012c6e:	3710      	adds	r7, #16
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	20012cd0 	.word	0x20012cd0
 8012c78:	20012cd8 	.word	0x20012cd8

08012c7c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b084      	sub	sp, #16
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d109      	bne.n	8012c9e <dhcp_start+0x22>
 8012c8a:	4b37      	ldr	r3, [pc, #220]	; (8012d68 <dhcp_start+0xec>)
 8012c8c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012c90:	4936      	ldr	r1, [pc, #216]	; (8012d6c <dhcp_start+0xf0>)
 8012c92:	4837      	ldr	r0, [pc, #220]	; (8012d70 <dhcp_start+0xf4>)
 8012c94:	f004 fb82 	bl	801739c <iprintf>
 8012c98:	f06f 030f 	mvn.w	r3, #15
 8012c9c:	e060      	b.n	8012d60 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ca4:	f003 0301 	and.w	r3, r3, #1
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d109      	bne.n	8012cc0 <dhcp_start+0x44>
 8012cac:	4b2e      	ldr	r3, [pc, #184]	; (8012d68 <dhcp_start+0xec>)
 8012cae:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012cb2:	4930      	ldr	r1, [pc, #192]	; (8012d74 <dhcp_start+0xf8>)
 8012cb4:	482e      	ldr	r0, [pc, #184]	; (8012d70 <dhcp_start+0xf4>)
 8012cb6:	f004 fb71 	bl	801739c <iprintf>
 8012cba:	f06f 030f 	mvn.w	r3, #15
 8012cbe:	e04f      	b.n	8012d60 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cc4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cca:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012cce:	d202      	bcs.n	8012cd6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cd4:	e044      	b.n	8012d60 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d10d      	bne.n	8012cf8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012cdc:	2034      	movs	r0, #52	; 0x34
 8012cde:	f7f8 f993 	bl	800b008 <mem_malloc>
 8012ce2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d102      	bne.n	8012cf0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cee:	e037      	b.n	8012d60 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	68fa      	ldr	r2, [r7, #12]
 8012cf4:	625a      	str	r2, [r3, #36]	; 0x24
 8012cf6:	e005      	b.n	8012d04 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	791b      	ldrb	r3, [r3, #4]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d001      	beq.n	8012d04 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012d00:	f7ff fc90 	bl	8012624 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012d04:	2234      	movs	r2, #52	; 0x34
 8012d06:	2100      	movs	r1, #0
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f003 fefb 	bl	8016b04 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012d0e:	f7ff fc37 	bl	8012580 <dhcp_inc_pcb_refcount>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d002      	beq.n	8012d1e <dhcp_start+0xa2>
    return ERR_MEM;
 8012d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d1c:	e020      	b.n	8012d60 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	2201      	movs	r2, #1
 8012d22:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012d2a:	f003 0304 	and.w	r3, r3, #4
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d105      	bne.n	8012d3e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012d32:	2102      	movs	r1, #2
 8012d34:	68f8      	ldr	r0, [r7, #12]
 8012d36:	f000 fd01 	bl	801373c <dhcp_set_state>
    return ERR_OK;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	e010      	b.n	8012d60 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f000 f8f8 	bl	8012f34 <dhcp_discover>
 8012d44:	4603      	mov	r3, r0
 8012d46:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012d48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d005      	beq.n	8012d5c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012d50:	6878      	ldr	r0, [r7, #4]
 8012d52:	f000 fc59 	bl	8013608 <dhcp_release_and_stop>
    return ERR_MEM;
 8012d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d5a:	e001      	b.n	8012d60 <dhcp_start+0xe4>
  }
  return result;
 8012d5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3710      	adds	r7, #16
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	0801bcac 	.word	0x0801bcac
 8012d6c:	0801bd90 	.word	0x0801bd90
 8012d70:	0801bd0c 	.word	0x0801bd0c
 8012d74:	0801bdd4 	.word	0x0801bdd4

08012d78 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d84:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d025      	beq.n	8012dd8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	795b      	ldrb	r3, [r3, #5]
 8012d90:	2b0a      	cmp	r3, #10
 8012d92:	d008      	beq.n	8012da6 <dhcp_network_changed+0x2e>
 8012d94:	2b0a      	cmp	r3, #10
 8012d96:	dc0d      	bgt.n	8012db4 <dhcp_network_changed+0x3c>
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d01f      	beq.n	8012ddc <dhcp_network_changed+0x64>
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	db09      	blt.n	8012db4 <dhcp_network_changed+0x3c>
 8012da0:	3b03      	subs	r3, #3
 8012da2:	2b02      	cmp	r3, #2
 8012da4:	d806      	bhi.n	8012db4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2200      	movs	r2, #0
 8012daa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 fb75 	bl	801349c <dhcp_reboot>
      break;
 8012db2:	e014      	b.n	8012dde <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	795b      	ldrb	r3, [r3, #5]
 8012db8:	2b0c      	cmp	r3, #12
 8012dba:	d906      	bls.n	8012dca <dhcp_network_changed+0x52>
 8012dbc:	4b09      	ldr	r3, [pc, #36]	; (8012de4 <dhcp_network_changed+0x6c>)
 8012dbe:	f240 326d 	movw	r2, #877	; 0x36d
 8012dc2:	4909      	ldr	r1, [pc, #36]	; (8012de8 <dhcp_network_changed+0x70>)
 8012dc4:	4809      	ldr	r0, [pc, #36]	; (8012dec <dhcp_network_changed+0x74>)
 8012dc6:	f004 fae9 	bl	801739c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f000 f8af 	bl	8012f34 <dhcp_discover>
      break;
 8012dd6:	e002      	b.n	8012dde <dhcp_network_changed+0x66>
    return;
 8012dd8:	bf00      	nop
 8012dda:	e000      	b.n	8012dde <dhcp_network_changed+0x66>
      break;
 8012ddc:	bf00      	nop
  }
}
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	0801bcac 	.word	0x0801bcac
 8012de8:	0801bdf8 	.word	0x0801bdf8
 8012dec:	0801bd0c 	.word	0x0801bd0c

08012df0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
 8012df8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d107      	bne.n	8012e10 <dhcp_arp_reply+0x20>
 8012e00:	4b0e      	ldr	r3, [pc, #56]	; (8012e3c <dhcp_arp_reply+0x4c>)
 8012e02:	f240 328b 	movw	r2, #907	; 0x38b
 8012e06:	490e      	ldr	r1, [pc, #56]	; (8012e40 <dhcp_arp_reply+0x50>)
 8012e08:	480e      	ldr	r0, [pc, #56]	; (8012e44 <dhcp_arp_reply+0x54>)
 8012e0a:	f004 fac7 	bl	801739c <iprintf>
 8012e0e:	e012      	b.n	8012e36 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d00c      	beq.n	8012e36 <dhcp_arp_reply+0x46>
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	795b      	ldrb	r3, [r3, #5]
 8012e20:	2b08      	cmp	r3, #8
 8012e22:	d108      	bne.n	8012e36 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	69db      	ldr	r3, [r3, #28]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d102      	bne.n	8012e36 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 f809 	bl	8012e48 <dhcp_decline>
    }
  }
}
 8012e36:	3710      	adds	r7, #16
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	0801bcac 	.word	0x0801bcac
 8012e40:	0801bd90 	.word	0x0801bd90
 8012e44:	0801bd0c 	.word	0x0801bd0c

08012e48 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012e48:	b5b0      	push	{r4, r5, r7, lr}
 8012e4a:	b08a      	sub	sp, #40	; 0x28
 8012e4c:	af02      	add	r7, sp, #8
 8012e4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e54:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012e56:	210c      	movs	r1, #12
 8012e58:	69b8      	ldr	r0, [r7, #24]
 8012e5a:	f000 fc6f 	bl	801373c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012e5e:	f107 030c 	add.w	r3, r7, #12
 8012e62:	2204      	movs	r2, #4
 8012e64:	69b9      	ldr	r1, [r7, #24]
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f001 f8f4 	bl	8014054 <dhcp_create_msg>
 8012e6c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d035      	beq.n	8012ee0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012e7a:	89b8      	ldrh	r0, [r7, #12]
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e82:	2304      	movs	r3, #4
 8012e84:	2232      	movs	r2, #50	; 0x32
 8012e86:	f000 fc73 	bl	8013770 <dhcp_option>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012e8e:	89bc      	ldrh	r4, [r7, #12]
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	69db      	ldr	r3, [r3, #28]
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7f7 fd95 	bl	800a9ca <lwip_htonl>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	461a      	mov	r2, r3
 8012ea4:	4629      	mov	r1, r5
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	f000 fcee 	bl	8013888 <dhcp_option_long>
 8012eac:	4603      	mov	r3, r0
 8012eae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012eb0:	89b8      	ldrh	r0, [r7, #12]
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	33f0      	adds	r3, #240	; 0xf0
 8012eb6:	697a      	ldr	r2, [r7, #20]
 8012eb8:	4619      	mov	r1, r3
 8012eba:	f001 f9a1 	bl	8014200 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012ebe:	4b19      	ldr	r3, [pc, #100]	; (8012f24 <dhcp_decline+0xdc>)
 8012ec0:	6818      	ldr	r0, [r3, #0]
 8012ec2:	4b19      	ldr	r3, [pc, #100]	; (8012f28 <dhcp_decline+0xe0>)
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	2343      	movs	r3, #67	; 0x43
 8012ecc:	4a17      	ldr	r2, [pc, #92]	; (8012f2c <dhcp_decline+0xe4>)
 8012ece:	6979      	ldr	r1, [r7, #20]
 8012ed0:	f7ff f8d0 	bl	8012074 <udp_sendto_if_src>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ed8:	6978      	ldr	r0, [r7, #20]
 8012eda:	f7f9 f919 	bl	800c110 <pbuf_free>
 8012ede:	e001      	b.n	8012ee4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012ee0:	23ff      	movs	r3, #255	; 0xff
 8012ee2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	799b      	ldrb	r3, [r3, #6]
 8012ee8:	2bff      	cmp	r3, #255	; 0xff
 8012eea:	d005      	beq.n	8012ef8 <dhcp_decline+0xb0>
    dhcp->tries++;
 8012eec:	69bb      	ldr	r3, [r7, #24]
 8012eee:	799b      	ldrb	r3, [r3, #6]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	b2da      	uxtb	r2, r3
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012ef8:	f242 7310 	movw	r3, #10000	; 0x2710
 8012efc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012efe:	89fb      	ldrh	r3, [r7, #14]
 8012f00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012f04:	4a0a      	ldr	r2, [pc, #40]	; (8012f30 <dhcp_decline+0xe8>)
 8012f06:	fb82 1203 	smull	r1, r2, r2, r3
 8012f0a:	1152      	asrs	r2, r2, #5
 8012f0c:	17db      	asrs	r3, r3, #31
 8012f0e:	1ad3      	subs	r3, r2, r3
 8012f10:	b29a      	uxth	r2, r3
 8012f12:	69bb      	ldr	r3, [r7, #24]
 8012f14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012f16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3720      	adds	r7, #32
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bdb0      	pop	{r4, r5, r7, pc}
 8012f22:	bf00      	nop
 8012f24:	20004bb8 	.word	0x20004bb8
 8012f28:	0801c8c0 	.word	0x0801c8c0
 8012f2c:	0801c8c4 	.word	0x0801c8c4
 8012f30:	10624dd3 	.word	0x10624dd3

08012f34 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b08a      	sub	sp, #40	; 0x28
 8012f38:	af02      	add	r7, sp, #8
 8012f3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f40:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012f42:	2300      	movs	r3, #0
 8012f44:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012f4c:	2106      	movs	r1, #6
 8012f4e:	69b8      	ldr	r0, [r7, #24]
 8012f50:	f000 fbf4 	bl	801373c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012f54:	f107 0308 	add.w	r3, r7, #8
 8012f58:	2201      	movs	r2, #1
 8012f5a:	69b9      	ldr	r1, [r7, #24]
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f001 f879 	bl	8014054 <dhcp_create_msg>
 8012f62:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d04b      	beq.n	8013002 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012f70:	8938      	ldrh	r0, [r7, #8]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f78:	2302      	movs	r3, #2
 8012f7a:	2239      	movs	r2, #57	; 0x39
 8012f7c:	f000 fbf8 	bl	8013770 <dhcp_option>
 8012f80:	4603      	mov	r3, r0
 8012f82:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012f84:	8938      	ldrh	r0, [r7, #8]
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f90:	461a      	mov	r2, r3
 8012f92:	f000 fc47 	bl	8013824 <dhcp_option_short>
 8012f96:	4603      	mov	r3, r0
 8012f98:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f9a:	8938      	ldrh	r0, [r7, #8]
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012fa2:	2303      	movs	r3, #3
 8012fa4:	2237      	movs	r2, #55	; 0x37
 8012fa6:	f000 fbe3 	bl	8013770 <dhcp_option>
 8012faa:	4603      	mov	r3, r0
 8012fac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012fae:	2300      	movs	r3, #0
 8012fb0:	77fb      	strb	r3, [r7, #31]
 8012fb2:	e00e      	b.n	8012fd2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012fb4:	8938      	ldrh	r0, [r7, #8]
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012fbc:	7ffb      	ldrb	r3, [r7, #31]
 8012fbe:	4a29      	ldr	r2, [pc, #164]	; (8013064 <dhcp_discover+0x130>)
 8012fc0:	5cd3      	ldrb	r3, [r2, r3]
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	f000 fc08 	bl	80137d8 <dhcp_option_byte>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012fcc:	7ffb      	ldrb	r3, [r7, #31]
 8012fce:	3301      	adds	r3, #1
 8012fd0:	77fb      	strb	r3, [r7, #31]
 8012fd2:	7ffb      	ldrb	r3, [r7, #31]
 8012fd4:	2b02      	cmp	r3, #2
 8012fd6:	d9ed      	bls.n	8012fb4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012fd8:	8938      	ldrh	r0, [r7, #8]
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	33f0      	adds	r3, #240	; 0xf0
 8012fde:	693a      	ldr	r2, [r7, #16]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	f001 f90d 	bl	8014200 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012fe6:	4b20      	ldr	r3, [pc, #128]	; (8013068 <dhcp_discover+0x134>)
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	4b20      	ldr	r3, [pc, #128]	; (801306c <dhcp_discover+0x138>)
 8012fec:	9301      	str	r3, [sp, #4]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	9300      	str	r3, [sp, #0]
 8012ff2:	2343      	movs	r3, #67	; 0x43
 8012ff4:	4a1e      	ldr	r2, [pc, #120]	; (8013070 <dhcp_discover+0x13c>)
 8012ff6:	6939      	ldr	r1, [r7, #16]
 8012ff8:	f7ff f83c 	bl	8012074 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012ffc:	6938      	ldr	r0, [r7, #16]
 8012ffe:	f7f9 f887 	bl	800c110 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	799b      	ldrb	r3, [r3, #6]
 8013006:	2bff      	cmp	r3, #255	; 0xff
 8013008:	d005      	beq.n	8013016 <dhcp_discover+0xe2>
    dhcp->tries++;
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	799b      	ldrb	r3, [r3, #6]
 801300e:	3301      	adds	r3, #1
 8013010:	b2da      	uxtb	r2, r3
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	799b      	ldrb	r3, [r3, #6]
 801301a:	2b05      	cmp	r3, #5
 801301c:	d80d      	bhi.n	801303a <dhcp_discover+0x106>
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	799b      	ldrb	r3, [r3, #6]
 8013022:	461a      	mov	r2, r3
 8013024:	2301      	movs	r3, #1
 8013026:	4093      	lsls	r3, r2
 8013028:	b29b      	uxth	r3, r3
 801302a:	461a      	mov	r2, r3
 801302c:	0152      	lsls	r2, r2, #5
 801302e:	1ad2      	subs	r2, r2, r3
 8013030:	0092      	lsls	r2, r2, #2
 8013032:	4413      	add	r3, r2
 8013034:	00db      	lsls	r3, r3, #3
 8013036:	b29b      	uxth	r3, r3
 8013038:	e001      	b.n	801303e <dhcp_discover+0x10a>
 801303a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801303e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013040:	897b      	ldrh	r3, [r7, #10]
 8013042:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013046:	4a0b      	ldr	r2, [pc, #44]	; (8013074 <dhcp_discover+0x140>)
 8013048:	fb82 1203 	smull	r1, r2, r2, r3
 801304c:	1152      	asrs	r2, r2, #5
 801304e:	17db      	asrs	r3, r3, #31
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	b29a      	uxth	r2, r3
 8013054:	69bb      	ldr	r3, [r7, #24]
 8013056:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801305c:	4618      	mov	r0, r3
 801305e:	3720      	adds	r7, #32
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	2000001c 	.word	0x2000001c
 8013068:	20004bb8 	.word	0x20004bb8
 801306c:	0801c8c0 	.word	0x0801c8c0
 8013070:	0801c8c4 	.word	0x0801c8c4
 8013074:	10624dd3 	.word	0x10624dd3

08013078 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b088      	sub	sp, #32
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d107      	bne.n	8013096 <dhcp_bind+0x1e>
 8013086:	4b64      	ldr	r3, [pc, #400]	; (8013218 <dhcp_bind+0x1a0>)
 8013088:	f240 4215 	movw	r2, #1045	; 0x415
 801308c:	4963      	ldr	r1, [pc, #396]	; (801321c <dhcp_bind+0x1a4>)
 801308e:	4864      	ldr	r0, [pc, #400]	; (8013220 <dhcp_bind+0x1a8>)
 8013090:	f004 f984 	bl	801739c <iprintf>
 8013094:	e0bc      	b.n	8013210 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801309a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801309c:	69bb      	ldr	r3, [r7, #24]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d107      	bne.n	80130b2 <dhcp_bind+0x3a>
 80130a2:	4b5d      	ldr	r3, [pc, #372]	; (8013218 <dhcp_bind+0x1a0>)
 80130a4:	f240 4217 	movw	r2, #1047	; 0x417
 80130a8:	495e      	ldr	r1, [pc, #376]	; (8013224 <dhcp_bind+0x1ac>)
 80130aa:	485d      	ldr	r0, [pc, #372]	; (8013220 <dhcp_bind+0x1a8>)
 80130ac:	f004 f976 	bl	801739c <iprintf>
 80130b0:	e0ae      	b.n	8013210 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	2200      	movs	r2, #0
 80130b6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130c0:	d019      	beq.n	80130f6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130c6:	331e      	adds	r3, #30
 80130c8:	4a57      	ldr	r2, [pc, #348]	; (8013228 <dhcp_bind+0x1b0>)
 80130ca:	fba2 2303 	umull	r2, r3, r2, r3
 80130ce:	095b      	lsrs	r3, r3, #5
 80130d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130d8:	d302      	bcc.n	80130e0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80130da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	b29a      	uxth	r2, r3
 80130e4:	69bb      	ldr	r3, [r7, #24]
 80130e6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	8a9b      	ldrh	r3, [r3, #20]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d102      	bne.n	80130f6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	2201      	movs	r2, #1
 80130f4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130fe:	d01d      	beq.n	801313c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013100:	69bb      	ldr	r3, [r7, #24]
 8013102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013104:	331e      	adds	r3, #30
 8013106:	4a48      	ldr	r2, [pc, #288]	; (8013228 <dhcp_bind+0x1b0>)
 8013108:	fba2 2303 	umull	r2, r3, r2, r3
 801310c:	095b      	lsrs	r3, r3, #5
 801310e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013110:	69fb      	ldr	r3, [r7, #28]
 8013112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013116:	d302      	bcc.n	801311e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801311c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801311e:	69fb      	ldr	r3, [r7, #28]
 8013120:	b29a      	uxth	r2, r3
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013126:	69bb      	ldr	r3, [r7, #24]
 8013128:	895b      	ldrh	r3, [r3, #10]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d102      	bne.n	8013134 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	2201      	movs	r2, #1
 8013132:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013134:	69bb      	ldr	r3, [r7, #24]
 8013136:	895a      	ldrh	r2, [r3, #10]
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801313c:	69bb      	ldr	r3, [r7, #24]
 801313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013144:	d01d      	beq.n	8013182 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801314a:	331e      	adds	r3, #30
 801314c:	4a36      	ldr	r2, [pc, #216]	; (8013228 <dhcp_bind+0x1b0>)
 801314e:	fba2 2303 	umull	r2, r3, r2, r3
 8013152:	095b      	lsrs	r3, r3, #5
 8013154:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801315c:	d302      	bcc.n	8013164 <dhcp_bind+0xec>
      timeout = 0xffff;
 801315e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013162:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	b29a      	uxth	r2, r3
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	899b      	ldrh	r3, [r3, #12]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d102      	bne.n	801317a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	2201      	movs	r2, #1
 8013178:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	899a      	ldrh	r2, [r3, #12]
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	895a      	ldrh	r2, [r3, #10]
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	899b      	ldrh	r3, [r3, #12]
 801318a:	429a      	cmp	r2, r3
 801318c:	d306      	bcc.n	801319c <dhcp_bind+0x124>
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	899b      	ldrh	r3, [r3, #12]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d002      	beq.n	801319c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	2200      	movs	r2, #0
 801319a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	79db      	ldrb	r3, [r3, #7]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d003      	beq.n	80131ac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	6a1b      	ldr	r3, [r3, #32]
 80131a8:	613b      	str	r3, [r7, #16]
 80131aa:	e014      	b.n	80131d6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	331c      	adds	r3, #28
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80131b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	db02      	blt.n	80131c2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80131bc:	23ff      	movs	r3, #255	; 0xff
 80131be:	613b      	str	r3, [r7, #16]
 80131c0:	e009      	b.n	80131d6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80131c2:	7dfb      	ldrb	r3, [r7, #23]
 80131c4:	2bbf      	cmp	r3, #191	; 0xbf
 80131c6:	d903      	bls.n	80131d0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80131c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80131cc:	613b      	str	r3, [r7, #16]
 80131ce:	e002      	b.n	80131d6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80131d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80131d4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131da:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d108      	bne.n	80131f4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	69da      	ldr	r2, [r3, #28]
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	4013      	ands	r3, r2
 80131ea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80131f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80131f4:	210a      	movs	r1, #10
 80131f6:	69b8      	ldr	r0, [r7, #24]
 80131f8:	f000 faa0 	bl	801373c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	f103 011c 	add.w	r1, r3, #28
 8013202:	f107 030c 	add.w	r3, r7, #12
 8013206:	f107 0210 	add.w	r2, r7, #16
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7f8 fa72 	bl	800b6f4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013210:	3720      	adds	r7, #32
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	0801bcac 	.word	0x0801bcac
 801321c:	0801be0c 	.word	0x0801be0c
 8013220:	0801bd0c 	.word	0x0801bd0c
 8013224:	0801be28 	.word	0x0801be28
 8013228:	88888889 	.word	0x88888889

0801322c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b08a      	sub	sp, #40	; 0x28
 8013230:	af02      	add	r7, sp, #8
 8013232:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013238:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801323a:	2105      	movs	r1, #5
 801323c:	69b8      	ldr	r0, [r7, #24]
 801323e:	f000 fa7d 	bl	801373c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013242:	f107 030c 	add.w	r3, r7, #12
 8013246:	2203      	movs	r2, #3
 8013248:	69b9      	ldr	r1, [r7, #24]
 801324a:	6878      	ldr	r0, [r7, #4]
 801324c:	f000 ff02 	bl	8014054 <dhcp_create_msg>
 8013250:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d04e      	beq.n	80132f6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801325e:	89b8      	ldrh	r0, [r7, #12]
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013266:	2302      	movs	r3, #2
 8013268:	2239      	movs	r2, #57	; 0x39
 801326a:	f000 fa81 	bl	8013770 <dhcp_option>
 801326e:	4603      	mov	r3, r0
 8013270:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013272:	89b8      	ldrh	r0, [r7, #12]
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801327e:	461a      	mov	r2, r3
 8013280:	f000 fad0 	bl	8013824 <dhcp_option_short>
 8013284:	4603      	mov	r3, r0
 8013286:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013288:	89b8      	ldrh	r0, [r7, #12]
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013290:	2303      	movs	r3, #3
 8013292:	2237      	movs	r2, #55	; 0x37
 8013294:	f000 fa6c 	bl	8013770 <dhcp_option>
 8013298:	4603      	mov	r3, r0
 801329a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801329c:	2300      	movs	r3, #0
 801329e:	77bb      	strb	r3, [r7, #30]
 80132a0:	e00e      	b.n	80132c0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80132a2:	89b8      	ldrh	r0, [r7, #12]
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80132aa:	7fbb      	ldrb	r3, [r7, #30]
 80132ac:	4a2a      	ldr	r2, [pc, #168]	; (8013358 <dhcp_renew+0x12c>)
 80132ae:	5cd3      	ldrb	r3, [r2, r3]
 80132b0:	461a      	mov	r2, r3
 80132b2:	f000 fa91 	bl	80137d8 <dhcp_option_byte>
 80132b6:	4603      	mov	r3, r0
 80132b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80132ba:	7fbb      	ldrb	r3, [r7, #30]
 80132bc:	3301      	adds	r3, #1
 80132be:	77bb      	strb	r3, [r7, #30]
 80132c0:	7fbb      	ldrb	r3, [r7, #30]
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d9ed      	bls.n	80132a2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80132c6:	89b8      	ldrh	r0, [r7, #12]
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	33f0      	adds	r3, #240	; 0xf0
 80132cc:	697a      	ldr	r2, [r7, #20]
 80132ce:	4619      	mov	r1, r3
 80132d0:	f000 ff96 	bl	8014200 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80132d4:	4b21      	ldr	r3, [pc, #132]	; (801335c <dhcp_renew+0x130>)
 80132d6:	6818      	ldr	r0, [r3, #0]
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	f103 0218 	add.w	r2, r3, #24
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	9300      	str	r3, [sp, #0]
 80132e2:	2343      	movs	r3, #67	; 0x43
 80132e4:	6979      	ldr	r1, [r7, #20]
 80132e6:	f7fe fe51 	bl	8011f8c <udp_sendto_if>
 80132ea:	4603      	mov	r3, r0
 80132ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80132ee:	6978      	ldr	r0, [r7, #20]
 80132f0:	f7f8 ff0e 	bl	800c110 <pbuf_free>
 80132f4:	e001      	b.n	80132fa <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80132f6:	23ff      	movs	r3, #255	; 0xff
 80132f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	799b      	ldrb	r3, [r3, #6]
 80132fe:	2bff      	cmp	r3, #255	; 0xff
 8013300:	d005      	beq.n	801330e <dhcp_renew+0xe2>
    dhcp->tries++;
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	799b      	ldrb	r3, [r3, #6]
 8013306:	3301      	adds	r3, #1
 8013308:	b2da      	uxtb	r2, r3
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	799b      	ldrb	r3, [r3, #6]
 8013312:	2b09      	cmp	r3, #9
 8013314:	d80a      	bhi.n	801332c <dhcp_renew+0x100>
 8013316:	69bb      	ldr	r3, [r7, #24]
 8013318:	799b      	ldrb	r3, [r3, #6]
 801331a:	b29b      	uxth	r3, r3
 801331c:	461a      	mov	r2, r3
 801331e:	0152      	lsls	r2, r2, #5
 8013320:	1ad2      	subs	r2, r2, r3
 8013322:	0092      	lsls	r2, r2, #2
 8013324:	4413      	add	r3, r2
 8013326:	011b      	lsls	r3, r3, #4
 8013328:	b29b      	uxth	r3, r3
 801332a:	e001      	b.n	8013330 <dhcp_renew+0x104>
 801332c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013330:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013332:	89fb      	ldrh	r3, [r7, #14]
 8013334:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013338:	4a09      	ldr	r2, [pc, #36]	; (8013360 <dhcp_renew+0x134>)
 801333a:	fb82 1203 	smull	r1, r2, r2, r3
 801333e:	1152      	asrs	r2, r2, #5
 8013340:	17db      	asrs	r3, r3, #31
 8013342:	1ad3      	subs	r3, r2, r3
 8013344:	b29a      	uxth	r2, r3
 8013346:	69bb      	ldr	r3, [r7, #24]
 8013348:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801334a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801334e:	4618      	mov	r0, r3
 8013350:	3720      	adds	r7, #32
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	2000001c 	.word	0x2000001c
 801335c:	20004bb8 	.word	0x20004bb8
 8013360:	10624dd3 	.word	0x10624dd3

08013364 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08a      	sub	sp, #40	; 0x28
 8013368:	af02      	add	r7, sp, #8
 801336a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013370:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013372:	2104      	movs	r1, #4
 8013374:	69b8      	ldr	r0, [r7, #24]
 8013376:	f000 f9e1 	bl	801373c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801337a:	f107 030c 	add.w	r3, r7, #12
 801337e:	2203      	movs	r2, #3
 8013380:	69b9      	ldr	r1, [r7, #24]
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 fe66 	bl	8014054 <dhcp_create_msg>
 8013388:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d04c      	beq.n	801342a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013396:	89b8      	ldrh	r0, [r7, #12]
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801339e:	2302      	movs	r3, #2
 80133a0:	2239      	movs	r2, #57	; 0x39
 80133a2:	f000 f9e5 	bl	8013770 <dhcp_option>
 80133a6:	4603      	mov	r3, r0
 80133a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80133aa:	89b8      	ldrh	r0, [r7, #12]
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133b6:	461a      	mov	r2, r3
 80133b8:	f000 fa34 	bl	8013824 <dhcp_option_short>
 80133bc:	4603      	mov	r3, r0
 80133be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80133c0:	89b8      	ldrh	r0, [r7, #12]
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133c8:	2303      	movs	r3, #3
 80133ca:	2237      	movs	r2, #55	; 0x37
 80133cc:	f000 f9d0 	bl	8013770 <dhcp_option>
 80133d0:	4603      	mov	r3, r0
 80133d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80133d4:	2300      	movs	r3, #0
 80133d6:	77bb      	strb	r3, [r7, #30]
 80133d8:	e00e      	b.n	80133f8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80133da:	89b8      	ldrh	r0, [r7, #12]
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133e2:	7fbb      	ldrb	r3, [r7, #30]
 80133e4:	4a29      	ldr	r2, [pc, #164]	; (801348c <dhcp_rebind+0x128>)
 80133e6:	5cd3      	ldrb	r3, [r2, r3]
 80133e8:	461a      	mov	r2, r3
 80133ea:	f000 f9f5 	bl	80137d8 <dhcp_option_byte>
 80133ee:	4603      	mov	r3, r0
 80133f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80133f2:	7fbb      	ldrb	r3, [r7, #30]
 80133f4:	3301      	adds	r3, #1
 80133f6:	77bb      	strb	r3, [r7, #30]
 80133f8:	7fbb      	ldrb	r3, [r7, #30]
 80133fa:	2b02      	cmp	r3, #2
 80133fc:	d9ed      	bls.n	80133da <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80133fe:	89b8      	ldrh	r0, [r7, #12]
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	33f0      	adds	r3, #240	; 0xf0
 8013404:	697a      	ldr	r2, [r7, #20]
 8013406:	4619      	mov	r1, r3
 8013408:	f000 fefa 	bl	8014200 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801340c:	4b20      	ldr	r3, [pc, #128]	; (8013490 <dhcp_rebind+0x12c>)
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	2343      	movs	r3, #67	; 0x43
 8013416:	4a1f      	ldr	r2, [pc, #124]	; (8013494 <dhcp_rebind+0x130>)
 8013418:	6979      	ldr	r1, [r7, #20]
 801341a:	f7fe fdb7 	bl	8011f8c <udp_sendto_if>
 801341e:	4603      	mov	r3, r0
 8013420:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013422:	6978      	ldr	r0, [r7, #20]
 8013424:	f7f8 fe74 	bl	800c110 <pbuf_free>
 8013428:	e001      	b.n	801342e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801342a:	23ff      	movs	r3, #255	; 0xff
 801342c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	799b      	ldrb	r3, [r3, #6]
 8013432:	2bff      	cmp	r3, #255	; 0xff
 8013434:	d005      	beq.n	8013442 <dhcp_rebind+0xde>
    dhcp->tries++;
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	799b      	ldrb	r3, [r3, #6]
 801343a:	3301      	adds	r3, #1
 801343c:	b2da      	uxtb	r2, r3
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	799b      	ldrb	r3, [r3, #6]
 8013446:	2b09      	cmp	r3, #9
 8013448:	d80a      	bhi.n	8013460 <dhcp_rebind+0xfc>
 801344a:	69bb      	ldr	r3, [r7, #24]
 801344c:	799b      	ldrb	r3, [r3, #6]
 801344e:	b29b      	uxth	r3, r3
 8013450:	461a      	mov	r2, r3
 8013452:	0152      	lsls	r2, r2, #5
 8013454:	1ad2      	subs	r2, r2, r3
 8013456:	0092      	lsls	r2, r2, #2
 8013458:	4413      	add	r3, r2
 801345a:	00db      	lsls	r3, r3, #3
 801345c:	b29b      	uxth	r3, r3
 801345e:	e001      	b.n	8013464 <dhcp_rebind+0x100>
 8013460:	f242 7310 	movw	r3, #10000	; 0x2710
 8013464:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013466:	89fb      	ldrh	r3, [r7, #14]
 8013468:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801346c:	4a0a      	ldr	r2, [pc, #40]	; (8013498 <dhcp_rebind+0x134>)
 801346e:	fb82 1203 	smull	r1, r2, r2, r3
 8013472:	1152      	asrs	r2, r2, #5
 8013474:	17db      	asrs	r3, r3, #31
 8013476:	1ad3      	subs	r3, r2, r3
 8013478:	b29a      	uxth	r2, r3
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801347e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013482:	4618      	mov	r0, r3
 8013484:	3720      	adds	r7, #32
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	2000001c 	.word	0x2000001c
 8013490:	20004bb8 	.word	0x20004bb8
 8013494:	0801c8c4 	.word	0x0801c8c4
 8013498:	10624dd3 	.word	0x10624dd3

0801349c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801349c:	b5b0      	push	{r4, r5, r7, lr}
 801349e:	b08a      	sub	sp, #40	; 0x28
 80134a0:	af02      	add	r7, sp, #8
 80134a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80134aa:	2103      	movs	r1, #3
 80134ac:	69b8      	ldr	r0, [r7, #24]
 80134ae:	f000 f945 	bl	801373c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80134b2:	f107 030c 	add.w	r3, r7, #12
 80134b6:	2203      	movs	r2, #3
 80134b8:	69b9      	ldr	r1, [r7, #24]
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 fdca 	bl	8014054 <dhcp_create_msg>
 80134c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d066      	beq.n	8013596 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	685b      	ldr	r3, [r3, #4]
 80134cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80134ce:	89b8      	ldrh	r0, [r7, #12]
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134d6:	2302      	movs	r3, #2
 80134d8:	2239      	movs	r2, #57	; 0x39
 80134da:	f000 f949 	bl	8013770 <dhcp_option>
 80134de:	4603      	mov	r3, r0
 80134e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80134e2:	89b8      	ldrh	r0, [r7, #12]
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	33f0      	adds	r3, #240	; 0xf0
 80134e8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80134ec:	4619      	mov	r1, r3
 80134ee:	f000 f999 	bl	8013824 <dhcp_option_short>
 80134f2:	4603      	mov	r3, r0
 80134f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80134f6:	89b8      	ldrh	r0, [r7, #12]
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134fe:	2304      	movs	r3, #4
 8013500:	2232      	movs	r2, #50	; 0x32
 8013502:	f000 f935 	bl	8013770 <dhcp_option>
 8013506:	4603      	mov	r3, r0
 8013508:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801350a:	89bc      	ldrh	r4, [r7, #12]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	69db      	ldr	r3, [r3, #28]
 8013516:	4618      	mov	r0, r3
 8013518:	f7f7 fa57 	bl	800a9ca <lwip_htonl>
 801351c:	4603      	mov	r3, r0
 801351e:	461a      	mov	r2, r3
 8013520:	4629      	mov	r1, r5
 8013522:	4620      	mov	r0, r4
 8013524:	f000 f9b0 	bl	8013888 <dhcp_option_long>
 8013528:	4603      	mov	r3, r0
 801352a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801352c:	89b8      	ldrh	r0, [r7, #12]
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013534:	2303      	movs	r3, #3
 8013536:	2237      	movs	r2, #55	; 0x37
 8013538:	f000 f91a 	bl	8013770 <dhcp_option>
 801353c:	4603      	mov	r3, r0
 801353e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013540:	2300      	movs	r3, #0
 8013542:	77bb      	strb	r3, [r7, #30]
 8013544:	e00e      	b.n	8013564 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013546:	89b8      	ldrh	r0, [r7, #12]
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801354e:	7fbb      	ldrb	r3, [r7, #30]
 8013550:	4a29      	ldr	r2, [pc, #164]	; (80135f8 <dhcp_reboot+0x15c>)
 8013552:	5cd3      	ldrb	r3, [r2, r3]
 8013554:	461a      	mov	r2, r3
 8013556:	f000 f93f 	bl	80137d8 <dhcp_option_byte>
 801355a:	4603      	mov	r3, r0
 801355c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801355e:	7fbb      	ldrb	r3, [r7, #30]
 8013560:	3301      	adds	r3, #1
 8013562:	77bb      	strb	r3, [r7, #30]
 8013564:	7fbb      	ldrb	r3, [r7, #30]
 8013566:	2b02      	cmp	r3, #2
 8013568:	d9ed      	bls.n	8013546 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801356a:	89b8      	ldrh	r0, [r7, #12]
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	33f0      	adds	r3, #240	; 0xf0
 8013570:	697a      	ldr	r2, [r7, #20]
 8013572:	4619      	mov	r1, r3
 8013574:	f000 fe44 	bl	8014200 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013578:	4b20      	ldr	r3, [pc, #128]	; (80135fc <dhcp_reboot+0x160>)
 801357a:	6818      	ldr	r0, [r3, #0]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	9300      	str	r3, [sp, #0]
 8013580:	2343      	movs	r3, #67	; 0x43
 8013582:	4a1f      	ldr	r2, [pc, #124]	; (8013600 <dhcp_reboot+0x164>)
 8013584:	6979      	ldr	r1, [r7, #20]
 8013586:	f7fe fd01 	bl	8011f8c <udp_sendto_if>
 801358a:	4603      	mov	r3, r0
 801358c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801358e:	6978      	ldr	r0, [r7, #20]
 8013590:	f7f8 fdbe 	bl	800c110 <pbuf_free>
 8013594:	e001      	b.n	801359a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013596:	23ff      	movs	r3, #255	; 0xff
 8013598:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	799b      	ldrb	r3, [r3, #6]
 801359e:	2bff      	cmp	r3, #255	; 0xff
 80135a0:	d005      	beq.n	80135ae <dhcp_reboot+0x112>
    dhcp->tries++;
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	799b      	ldrb	r3, [r3, #6]
 80135a6:	3301      	adds	r3, #1
 80135a8:	b2da      	uxtb	r2, r3
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80135ae:	69bb      	ldr	r3, [r7, #24]
 80135b0:	799b      	ldrb	r3, [r3, #6]
 80135b2:	2b09      	cmp	r3, #9
 80135b4:	d80a      	bhi.n	80135cc <dhcp_reboot+0x130>
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	799b      	ldrb	r3, [r3, #6]
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	461a      	mov	r2, r3
 80135be:	0152      	lsls	r2, r2, #5
 80135c0:	1ad2      	subs	r2, r2, r3
 80135c2:	0092      	lsls	r2, r2, #2
 80135c4:	4413      	add	r3, r2
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	e001      	b.n	80135d0 <dhcp_reboot+0x134>
 80135cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80135d0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80135d2:	89fb      	ldrh	r3, [r7, #14]
 80135d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135d8:	4a0a      	ldr	r2, [pc, #40]	; (8013604 <dhcp_reboot+0x168>)
 80135da:	fb82 1203 	smull	r1, r2, r2, r3
 80135de:	1152      	asrs	r2, r2, #5
 80135e0:	17db      	asrs	r3, r3, #31
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80135ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3720      	adds	r7, #32
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bdb0      	pop	{r4, r5, r7, pc}
 80135f6:	bf00      	nop
 80135f8:	2000001c 	.word	0x2000001c
 80135fc:	20004bb8 	.word	0x20004bb8
 8013600:	0801c8c4 	.word	0x0801c8c4
 8013604:	10624dd3 	.word	0x10624dd3

08013608 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013608:	b5b0      	push	{r4, r5, r7, lr}
 801360a:	b08a      	sub	sp, #40	; 0x28
 801360c:	af02      	add	r7, sp, #8
 801360e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013614:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 8084 	beq.w	8013726 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	795b      	ldrb	r3, [r3, #5]
 8013622:	2b00      	cmp	r3, #0
 8013624:	f000 8081 	beq.w	801372a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	699b      	ldr	r3, [r3, #24]
 801362c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	2200      	movs	r2, #0
 8013632:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	2200      	movs	r2, #0
 8013638:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801363a:	69fb      	ldr	r3, [r7, #28]
 801363c:	2200      	movs	r2, #0
 801363e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013640:	69fb      	ldr	r3, [r7, #28]
 8013642:	2200      	movs	r2, #0
 8013644:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	2200      	movs	r2, #0
 801364a:	631a      	str	r2, [r3, #48]	; 0x30
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	62da      	str	r2, [r3, #44]	; 0x2c
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013658:	69fb      	ldr	r3, [r7, #28]
 801365a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	2200      	movs	r2, #0
 8013660:	829a      	strh	r2, [r3, #20]
 8013662:	69fb      	ldr	r3, [r7, #28]
 8013664:	8a9a      	ldrh	r2, [r3, #20]
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	825a      	strh	r2, [r3, #18]
 801366a:	69fb      	ldr	r3, [r7, #28]
 801366c:	8a5a      	ldrh	r2, [r3, #18]
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	821a      	strh	r2, [r3, #16]
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	8a1a      	ldrh	r2, [r3, #16]
 8013676:	69fb      	ldr	r3, [r7, #28]
 8013678:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f000 fdee 	bl	801425c <dhcp_supplied_address>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d03b      	beq.n	80136fe <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013686:	f107 030e 	add.w	r3, r7, #14
 801368a:	2207      	movs	r2, #7
 801368c:	69f9      	ldr	r1, [r7, #28]
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f000 fce0 	bl	8014054 <dhcp_create_msg>
 8013694:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d030      	beq.n	80136fe <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80136a2:	89f8      	ldrh	r0, [r7, #14]
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136aa:	2304      	movs	r3, #4
 80136ac:	2236      	movs	r2, #54	; 0x36
 80136ae:	f000 f85f 	bl	8013770 <dhcp_option>
 80136b2:	4603      	mov	r3, r0
 80136b4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80136b6:	89fc      	ldrh	r4, [r7, #14]
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	4618      	mov	r0, r3
 80136c2:	f7f7 f982 	bl	800a9ca <lwip_htonl>
 80136c6:	4603      	mov	r3, r0
 80136c8:	461a      	mov	r2, r3
 80136ca:	4629      	mov	r1, r5
 80136cc:	4620      	mov	r0, r4
 80136ce:	f000 f8db 	bl	8013888 <dhcp_option_long>
 80136d2:	4603      	mov	r3, r0
 80136d4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80136d6:	89f8      	ldrh	r0, [r7, #14]
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	33f0      	adds	r3, #240	; 0xf0
 80136dc:	69ba      	ldr	r2, [r7, #24]
 80136de:	4619      	mov	r1, r3
 80136e0:	f000 fd8e 	bl	8014200 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80136e4:	4b13      	ldr	r3, [pc, #76]	; (8013734 <dhcp_release_and_stop+0x12c>)
 80136e6:	6818      	ldr	r0, [r3, #0]
 80136e8:	f107 0210 	add.w	r2, r7, #16
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	2343      	movs	r3, #67	; 0x43
 80136f2:	69b9      	ldr	r1, [r7, #24]
 80136f4:	f7fe fc4a 	bl	8011f8c <udp_sendto_if>
      pbuf_free(p_out);
 80136f8:	69b8      	ldr	r0, [r7, #24]
 80136fa:	f7f8 fd09 	bl	800c110 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80136fe:	4b0e      	ldr	r3, [pc, #56]	; (8013738 <dhcp_release_and_stop+0x130>)
 8013700:	4a0d      	ldr	r2, [pc, #52]	; (8013738 <dhcp_release_and_stop+0x130>)
 8013702:	490d      	ldr	r1, [pc, #52]	; (8013738 <dhcp_release_and_stop+0x130>)
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7f7 fff5 	bl	800b6f4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801370a:	2100      	movs	r1, #0
 801370c:	69f8      	ldr	r0, [r7, #28]
 801370e:	f000 f815 	bl	801373c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	791b      	ldrb	r3, [r3, #4]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d008      	beq.n	801372c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801371a:	f7fe ff83 	bl	8012624 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	2200      	movs	r2, #0
 8013722:	711a      	strb	r2, [r3, #4]
 8013724:	e002      	b.n	801372c <dhcp_release_and_stop+0x124>
    return;
 8013726:	bf00      	nop
 8013728:	e000      	b.n	801372c <dhcp_release_and_stop+0x124>
    return;
 801372a:	bf00      	nop
  }
}
 801372c:	3720      	adds	r7, #32
 801372e:	46bd      	mov	sp, r7
 8013730:	bdb0      	pop	{r4, r5, r7, pc}
 8013732:	bf00      	nop
 8013734:	20004bb8 	.word	0x20004bb8
 8013738:	0801c8c0 	.word	0x0801c8c0

0801373c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801373c:	b480      	push	{r7}
 801373e:	b083      	sub	sp, #12
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	795b      	ldrb	r3, [r3, #5]
 801374c:	78fa      	ldrb	r2, [r7, #3]
 801374e:	429a      	cmp	r2, r3
 8013750:	d008      	beq.n	8013764 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	78fa      	ldrb	r2, [r7, #3]
 8013756:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2200      	movs	r2, #0
 801375c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2200      	movs	r2, #0
 8013762:	811a      	strh	r2, [r3, #8]
  }
}
 8013764:	bf00      	nop
 8013766:	370c      	adds	r7, #12
 8013768:	46bd      	mov	sp, r7
 801376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376e:	4770      	bx	lr

08013770 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6039      	str	r1, [r7, #0]
 8013778:	4611      	mov	r1, r2
 801377a:	461a      	mov	r2, r3
 801377c:	4603      	mov	r3, r0
 801377e:	80fb      	strh	r3, [r7, #6]
 8013780:	460b      	mov	r3, r1
 8013782:	717b      	strb	r3, [r7, #5]
 8013784:	4613      	mov	r3, r2
 8013786:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013788:	88fa      	ldrh	r2, [r7, #6]
 801378a:	793b      	ldrb	r3, [r7, #4]
 801378c:	4413      	add	r3, r2
 801378e:	3302      	adds	r3, #2
 8013790:	2b44      	cmp	r3, #68	; 0x44
 8013792:	d906      	bls.n	80137a2 <dhcp_option+0x32>
 8013794:	4b0d      	ldr	r3, [pc, #52]	; (80137cc <dhcp_option+0x5c>)
 8013796:	f240 529a 	movw	r2, #1434	; 0x59a
 801379a:	490d      	ldr	r1, [pc, #52]	; (80137d0 <dhcp_option+0x60>)
 801379c:	480d      	ldr	r0, [pc, #52]	; (80137d4 <dhcp_option+0x64>)
 801379e:	f003 fdfd 	bl	801739c <iprintf>
  options[options_out_len++] = option_type;
 80137a2:	88fb      	ldrh	r3, [r7, #6]
 80137a4:	1c5a      	adds	r2, r3, #1
 80137a6:	80fa      	strh	r2, [r7, #6]
 80137a8:	461a      	mov	r2, r3
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	4413      	add	r3, r2
 80137ae:	797a      	ldrb	r2, [r7, #5]
 80137b0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80137b2:	88fb      	ldrh	r3, [r7, #6]
 80137b4:	1c5a      	adds	r2, r3, #1
 80137b6:	80fa      	strh	r2, [r7, #6]
 80137b8:	461a      	mov	r2, r3
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	4413      	add	r3, r2
 80137be:	793a      	ldrb	r2, [r7, #4]
 80137c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80137c2:	88fb      	ldrh	r3, [r7, #6]
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	3708      	adds	r7, #8
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd80      	pop	{r7, pc}
 80137cc:	0801bcac 	.word	0x0801bcac
 80137d0:	0801be40 	.word	0x0801be40
 80137d4:	0801bd0c 	.word	0x0801bd0c

080137d8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b082      	sub	sp, #8
 80137dc:	af00      	add	r7, sp, #0
 80137de:	4603      	mov	r3, r0
 80137e0:	6039      	str	r1, [r7, #0]
 80137e2:	80fb      	strh	r3, [r7, #6]
 80137e4:	4613      	mov	r3, r2
 80137e6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80137e8:	88fb      	ldrh	r3, [r7, #6]
 80137ea:	2b43      	cmp	r3, #67	; 0x43
 80137ec:	d906      	bls.n	80137fc <dhcp_option_byte+0x24>
 80137ee:	4b0a      	ldr	r3, [pc, #40]	; (8013818 <dhcp_option_byte+0x40>)
 80137f0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80137f4:	4909      	ldr	r1, [pc, #36]	; (801381c <dhcp_option_byte+0x44>)
 80137f6:	480a      	ldr	r0, [pc, #40]	; (8013820 <dhcp_option_byte+0x48>)
 80137f8:	f003 fdd0 	bl	801739c <iprintf>
  options[options_out_len++] = value;
 80137fc:	88fb      	ldrh	r3, [r7, #6]
 80137fe:	1c5a      	adds	r2, r3, #1
 8013800:	80fa      	strh	r2, [r7, #6]
 8013802:	461a      	mov	r2, r3
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	4413      	add	r3, r2
 8013808:	797a      	ldrb	r2, [r7, #5]
 801380a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801380c:	88fb      	ldrh	r3, [r7, #6]
}
 801380e:	4618      	mov	r0, r3
 8013810:	3708      	adds	r7, #8
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
 8013816:	bf00      	nop
 8013818:	0801bcac 	.word	0x0801bcac
 801381c:	0801be84 	.word	0x0801be84
 8013820:	0801bd0c 	.word	0x0801bd0c

08013824 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	4603      	mov	r3, r0
 801382c:	6039      	str	r1, [r7, #0]
 801382e:	80fb      	strh	r3, [r7, #6]
 8013830:	4613      	mov	r3, r2
 8013832:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013834:	88fb      	ldrh	r3, [r7, #6]
 8013836:	3302      	adds	r3, #2
 8013838:	2b44      	cmp	r3, #68	; 0x44
 801383a:	d906      	bls.n	801384a <dhcp_option_short+0x26>
 801383c:	4b0f      	ldr	r3, [pc, #60]	; (801387c <dhcp_option_short+0x58>)
 801383e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013842:	490f      	ldr	r1, [pc, #60]	; (8013880 <dhcp_option_short+0x5c>)
 8013844:	480f      	ldr	r0, [pc, #60]	; (8013884 <dhcp_option_short+0x60>)
 8013846:	f003 fda9 	bl	801739c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801384a:	88bb      	ldrh	r3, [r7, #4]
 801384c:	0a1b      	lsrs	r3, r3, #8
 801384e:	b29a      	uxth	r2, r3
 8013850:	88fb      	ldrh	r3, [r7, #6]
 8013852:	1c59      	adds	r1, r3, #1
 8013854:	80f9      	strh	r1, [r7, #6]
 8013856:	4619      	mov	r1, r3
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	440b      	add	r3, r1
 801385c:	b2d2      	uxtb	r2, r2
 801385e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013860:	88fb      	ldrh	r3, [r7, #6]
 8013862:	1c5a      	adds	r2, r3, #1
 8013864:	80fa      	strh	r2, [r7, #6]
 8013866:	461a      	mov	r2, r3
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	4413      	add	r3, r2
 801386c:	88ba      	ldrh	r2, [r7, #4]
 801386e:	b2d2      	uxtb	r2, r2
 8013870:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013872:	88fb      	ldrh	r3, [r7, #6]
}
 8013874:	4618      	mov	r0, r3
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}
 801387c:	0801bcac 	.word	0x0801bcac
 8013880:	0801bebc 	.word	0x0801bebc
 8013884:	0801bd0c 	.word	0x0801bd0c

08013888 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	4603      	mov	r3, r0
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013896:	89fb      	ldrh	r3, [r7, #14]
 8013898:	3304      	adds	r3, #4
 801389a:	2b44      	cmp	r3, #68	; 0x44
 801389c:	d906      	bls.n	80138ac <dhcp_option_long+0x24>
 801389e:	4b19      	ldr	r3, [pc, #100]	; (8013904 <dhcp_option_long+0x7c>)
 80138a0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80138a4:	4918      	ldr	r1, [pc, #96]	; (8013908 <dhcp_option_long+0x80>)
 80138a6:	4819      	ldr	r0, [pc, #100]	; (801390c <dhcp_option_long+0x84>)
 80138a8:	f003 fd78 	bl	801739c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	0e1a      	lsrs	r2, r3, #24
 80138b0:	89fb      	ldrh	r3, [r7, #14]
 80138b2:	1c59      	adds	r1, r3, #1
 80138b4:	81f9      	strh	r1, [r7, #14]
 80138b6:	4619      	mov	r1, r3
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	440b      	add	r3, r1
 80138bc:	b2d2      	uxtb	r2, r2
 80138be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	0c1a      	lsrs	r2, r3, #16
 80138c4:	89fb      	ldrh	r3, [r7, #14]
 80138c6:	1c59      	adds	r1, r3, #1
 80138c8:	81f9      	strh	r1, [r7, #14]
 80138ca:	4619      	mov	r1, r3
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	440b      	add	r3, r1
 80138d0:	b2d2      	uxtb	r2, r2
 80138d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	0a1a      	lsrs	r2, r3, #8
 80138d8:	89fb      	ldrh	r3, [r7, #14]
 80138da:	1c59      	adds	r1, r3, #1
 80138dc:	81f9      	strh	r1, [r7, #14]
 80138de:	4619      	mov	r1, r3
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	440b      	add	r3, r1
 80138e4:	b2d2      	uxtb	r2, r2
 80138e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80138e8:	89fb      	ldrh	r3, [r7, #14]
 80138ea:	1c5a      	adds	r2, r3, #1
 80138ec:	81fa      	strh	r2, [r7, #14]
 80138ee:	461a      	mov	r2, r3
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	4413      	add	r3, r2
 80138f4:	687a      	ldr	r2, [r7, #4]
 80138f6:	b2d2      	uxtb	r2, r2
 80138f8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80138fa:	89fb      	ldrh	r3, [r7, #14]
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3710      	adds	r7, #16
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	0801bcac 	.word	0x0801bcac
 8013908:	0801bef8 	.word	0x0801bef8
 801390c:	0801bd0c 	.word	0x0801bd0c

08013910 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b090      	sub	sp, #64	; 0x40
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801391e:	2300      	movs	r3, #0
 8013920:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013922:	2208      	movs	r2, #8
 8013924:	2100      	movs	r1, #0
 8013926:	48be      	ldr	r0, [pc, #760]	; (8013c20 <dhcp_parse_reply+0x310>)
 8013928:	f003 f8ec 	bl	8016b04 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	895b      	ldrh	r3, [r3, #10]
 8013930:	2b2b      	cmp	r3, #43	; 0x2b
 8013932:	d802      	bhi.n	801393a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013934:	f06f 0301 	mvn.w	r3, #1
 8013938:	e2a8      	b.n	8013e8c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013940:	23f0      	movs	r3, #240	; 0xf0
 8013942:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	891b      	ldrh	r3, [r3, #8]
 8013948:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801394e:	e00c      	b.n	801396a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013952:	895b      	ldrh	r3, [r3, #10]
 8013954:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013956:	1ad3      	subs	r3, r2, r3
 8013958:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395c:	895b      	ldrh	r3, [r3, #10]
 801395e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013960:	1ad3      	subs	r3, r2, r3
 8013962:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	2b00      	cmp	r3, #0
 801396e:	d004      	beq.n	801397a <dhcp_parse_reply+0x6a>
 8013970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013972:	895b      	ldrh	r3, [r3, #10]
 8013974:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013976:	429a      	cmp	r2, r3
 8013978:	d2ea      	bcs.n	8013950 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	2b00      	cmp	r3, #0
 801397e:	d102      	bne.n	8013986 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013980:	f06f 0301 	mvn.w	r3, #1
 8013984:	e282      	b.n	8013e8c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013986:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013988:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801398a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801398c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013994:	e23a      	b.n	8013e0c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013996:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801399a:	4413      	add	r3, r2
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80139a0:	2300      	movs	r3, #0
 80139a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80139a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139aa:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80139ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139ae:	3302      	adds	r3, #2
 80139b0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80139b2:	8bfa      	ldrh	r2, [r7, #30]
 80139b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d202      	bcs.n	80139c0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80139ba:	f06f 0301 	mvn.w	r3, #1
 80139be:	e265      	b.n	8013e8c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80139c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139c2:	3301      	adds	r3, #1
 80139c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139c6:	8952      	ldrh	r2, [r2, #10]
 80139c8:	4293      	cmp	r3, r2
 80139ca:	da07      	bge.n	80139dc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80139cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139ce:	3301      	adds	r3, #1
 80139d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139d2:	4413      	add	r3, r2
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80139da:	e00b      	b.n	80139f4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80139dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d004      	beq.n	80139ee <dhcp_parse_reply+0xde>
 80139e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	e000      	b.n	80139f0 <dhcp_parse_reply+0xe0>
 80139ee:	2300      	movs	r3, #0
 80139f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80139f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80139fc:	7dfb      	ldrb	r3, [r7, #23]
 80139fe:	2b3b      	cmp	r3, #59	; 0x3b
 8013a00:	f200 812d 	bhi.w	8013c5e <dhcp_parse_reply+0x34e>
 8013a04:	a201      	add	r2, pc, #4	; (adr r2, 8013a0c <dhcp_parse_reply+0xfc>)
 8013a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a0a:	bf00      	nop
 8013a0c:	08013afd 	.word	0x08013afd
 8013a10:	08013b0d 	.word	0x08013b0d
 8013a14:	08013c5f 	.word	0x08013c5f
 8013a18:	08013b2f 	.word	0x08013b2f
 8013a1c:	08013c5f 	.word	0x08013c5f
 8013a20:	08013c5f 	.word	0x08013c5f
 8013a24:	08013c5f 	.word	0x08013c5f
 8013a28:	08013c5f 	.word	0x08013c5f
 8013a2c:	08013c5f 	.word	0x08013c5f
 8013a30:	08013c5f 	.word	0x08013c5f
 8013a34:	08013c5f 	.word	0x08013c5f
 8013a38:	08013c5f 	.word	0x08013c5f
 8013a3c:	08013c5f 	.word	0x08013c5f
 8013a40:	08013c5f 	.word	0x08013c5f
 8013a44:	08013c5f 	.word	0x08013c5f
 8013a48:	08013c5f 	.word	0x08013c5f
 8013a4c:	08013c5f 	.word	0x08013c5f
 8013a50:	08013c5f 	.word	0x08013c5f
 8013a54:	08013c5f 	.word	0x08013c5f
 8013a58:	08013c5f 	.word	0x08013c5f
 8013a5c:	08013c5f 	.word	0x08013c5f
 8013a60:	08013c5f 	.word	0x08013c5f
 8013a64:	08013c5f 	.word	0x08013c5f
 8013a68:	08013c5f 	.word	0x08013c5f
 8013a6c:	08013c5f 	.word	0x08013c5f
 8013a70:	08013c5f 	.word	0x08013c5f
 8013a74:	08013c5f 	.word	0x08013c5f
 8013a78:	08013c5f 	.word	0x08013c5f
 8013a7c:	08013c5f 	.word	0x08013c5f
 8013a80:	08013c5f 	.word	0x08013c5f
 8013a84:	08013c5f 	.word	0x08013c5f
 8013a88:	08013c5f 	.word	0x08013c5f
 8013a8c:	08013c5f 	.word	0x08013c5f
 8013a90:	08013c5f 	.word	0x08013c5f
 8013a94:	08013c5f 	.word	0x08013c5f
 8013a98:	08013c5f 	.word	0x08013c5f
 8013a9c:	08013c5f 	.word	0x08013c5f
 8013aa0:	08013c5f 	.word	0x08013c5f
 8013aa4:	08013c5f 	.word	0x08013c5f
 8013aa8:	08013c5f 	.word	0x08013c5f
 8013aac:	08013c5f 	.word	0x08013c5f
 8013ab0:	08013c5f 	.word	0x08013c5f
 8013ab4:	08013c5f 	.word	0x08013c5f
 8013ab8:	08013c5f 	.word	0x08013c5f
 8013abc:	08013c5f 	.word	0x08013c5f
 8013ac0:	08013c5f 	.word	0x08013c5f
 8013ac4:	08013c5f 	.word	0x08013c5f
 8013ac8:	08013c5f 	.word	0x08013c5f
 8013acc:	08013c5f 	.word	0x08013c5f
 8013ad0:	08013c5f 	.word	0x08013c5f
 8013ad4:	08013c5f 	.word	0x08013c5f
 8013ad8:	08013b5b 	.word	0x08013b5b
 8013adc:	08013b7d 	.word	0x08013b7d
 8013ae0:	08013bb9 	.word	0x08013bb9
 8013ae4:	08013bdb 	.word	0x08013bdb
 8013ae8:	08013c5f 	.word	0x08013c5f
 8013aec:	08013c5f 	.word	0x08013c5f
 8013af0:	08013c5f 	.word	0x08013c5f
 8013af4:	08013bfd 	.word	0x08013bfd
 8013af8:	08013c3d 	.word	0x08013c3d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013afc:	2300      	movs	r3, #0
 8013afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013b0a:	e0ac      	b.n	8013c66 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b10:	2b04      	cmp	r3, #4
 8013b12:	d009      	beq.n	8013b28 <dhcp_parse_reply+0x218>
 8013b14:	4b43      	ldr	r3, [pc, #268]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013b16:	f240 622e 	movw	r2, #1582	; 0x62e
 8013b1a:	4943      	ldr	r1, [pc, #268]	; (8013c28 <dhcp_parse_reply+0x318>)
 8013b1c:	4843      	ldr	r0, [pc, #268]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013b1e:	f003 fc3d 	bl	801739c <iprintf>
 8013b22:	f06f 0305 	mvn.w	r3, #5
 8013b26:	e1b1      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013b28:	2306      	movs	r3, #6
 8013b2a:	623b      	str	r3, [r7, #32]
        break;
 8013b2c:	e09b      	b.n	8013c66 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013b2e:	2304      	movs	r3, #4
 8013b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013b34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013b38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d209      	bcs.n	8013b54 <dhcp_parse_reply+0x244>
 8013b40:	4b38      	ldr	r3, [pc, #224]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013b42:	f240 6233 	movw	r2, #1587	; 0x633
 8013b46:	493a      	ldr	r1, [pc, #232]	; (8013c30 <dhcp_parse_reply+0x320>)
 8013b48:	4838      	ldr	r0, [pc, #224]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013b4a:	f003 fc27 	bl	801739c <iprintf>
 8013b4e:	f06f 0305 	mvn.w	r3, #5
 8013b52:	e19b      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013b54:	2307      	movs	r3, #7
 8013b56:	623b      	str	r3, [r7, #32]
        break;
 8013b58:	e085      	b.n	8013c66 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b5e:	2b04      	cmp	r3, #4
 8013b60:	d009      	beq.n	8013b76 <dhcp_parse_reply+0x266>
 8013b62:	4b30      	ldr	r3, [pc, #192]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013b64:	f240 6241 	movw	r2, #1601	; 0x641
 8013b68:	492f      	ldr	r1, [pc, #188]	; (8013c28 <dhcp_parse_reply+0x318>)
 8013b6a:	4830      	ldr	r0, [pc, #192]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013b6c:	f003 fc16 	bl	801739c <iprintf>
 8013b70:	f06f 0305 	mvn.w	r3, #5
 8013b74:	e18a      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013b76:	2303      	movs	r3, #3
 8013b78:	623b      	str	r3, [r7, #32]
        break;
 8013b7a:	e074      	b.n	8013c66 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d009      	beq.n	8013b98 <dhcp_parse_reply+0x288>
 8013b84:	4b27      	ldr	r3, [pc, #156]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013b86:	f240 624f 	movw	r2, #1615	; 0x64f
 8013b8a:	492a      	ldr	r1, [pc, #168]	; (8013c34 <dhcp_parse_reply+0x324>)
 8013b8c:	4827      	ldr	r0, [pc, #156]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013b8e:	f003 fc05 	bl	801739c <iprintf>
 8013b92:	f06f 0305 	mvn.w	r3, #5
 8013b96:	e179      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013b98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013b9a:	2bf0      	cmp	r3, #240	; 0xf0
 8013b9c:	d009      	beq.n	8013bb2 <dhcp_parse_reply+0x2a2>
 8013b9e:	4b21      	ldr	r3, [pc, #132]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013ba0:	f240 6251 	movw	r2, #1617	; 0x651
 8013ba4:	4924      	ldr	r1, [pc, #144]	; (8013c38 <dhcp_parse_reply+0x328>)
 8013ba6:	4821      	ldr	r0, [pc, #132]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013ba8:	f003 fbf8 	bl	801739c <iprintf>
 8013bac:	f06f 0305 	mvn.w	r3, #5
 8013bb0:	e16c      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	623b      	str	r3, [r7, #32]
        break;
 8013bb6:	e056      	b.n	8013c66 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	d009      	beq.n	8013bd4 <dhcp_parse_reply+0x2c4>
 8013bc0:	4b18      	ldr	r3, [pc, #96]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013bc2:	f240 6255 	movw	r2, #1621	; 0x655
 8013bc6:	491b      	ldr	r1, [pc, #108]	; (8013c34 <dhcp_parse_reply+0x324>)
 8013bc8:	4818      	ldr	r0, [pc, #96]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013bca:	f003 fbe7 	bl	801739c <iprintf>
 8013bce:	f06f 0305 	mvn.w	r3, #5
 8013bd2:	e15b      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	623b      	str	r3, [r7, #32]
        break;
 8013bd8:	e045      	b.n	8013c66 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bde:	2b04      	cmp	r3, #4
 8013be0:	d009      	beq.n	8013bf6 <dhcp_parse_reply+0x2e6>
 8013be2:	4b10      	ldr	r3, [pc, #64]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013be4:	f240 6259 	movw	r2, #1625	; 0x659
 8013be8:	490f      	ldr	r1, [pc, #60]	; (8013c28 <dhcp_parse_reply+0x318>)
 8013bea:	4810      	ldr	r0, [pc, #64]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013bec:	f003 fbd6 	bl	801739c <iprintf>
 8013bf0:	f06f 0305 	mvn.w	r3, #5
 8013bf4:	e14a      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013bf6:	2302      	movs	r3, #2
 8013bf8:	623b      	str	r3, [r7, #32]
        break;
 8013bfa:	e034      	b.n	8013c66 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c00:	2b04      	cmp	r3, #4
 8013c02:	d009      	beq.n	8013c18 <dhcp_parse_reply+0x308>
 8013c04:	4b07      	ldr	r3, [pc, #28]	; (8013c24 <dhcp_parse_reply+0x314>)
 8013c06:	f240 625d 	movw	r2, #1629	; 0x65d
 8013c0a:	4907      	ldr	r1, [pc, #28]	; (8013c28 <dhcp_parse_reply+0x318>)
 8013c0c:	4807      	ldr	r0, [pc, #28]	; (8013c2c <dhcp_parse_reply+0x31c>)
 8013c0e:	f003 fbc5 	bl	801739c <iprintf>
 8013c12:	f06f 0305 	mvn.w	r3, #5
 8013c16:	e139      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013c18:	2304      	movs	r3, #4
 8013c1a:	623b      	str	r3, [r7, #32]
        break;
 8013c1c:	e023      	b.n	8013c66 <dhcp_parse_reply+0x356>
 8013c1e:	bf00      	nop
 8013c20:	20012cd0 	.word	0x20012cd0
 8013c24:	0801bcac 	.word	0x0801bcac
 8013c28:	0801bf34 	.word	0x0801bf34
 8013c2c:	0801bd0c 	.word	0x0801bd0c
 8013c30:	0801bf40 	.word	0x0801bf40
 8013c34:	0801bf54 	.word	0x0801bf54
 8013c38:	0801bf60 	.word	0x0801bf60
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c40:	2b04      	cmp	r3, #4
 8013c42:	d009      	beq.n	8013c58 <dhcp_parse_reply+0x348>
 8013c44:	4b93      	ldr	r3, [pc, #588]	; (8013e94 <dhcp_parse_reply+0x584>)
 8013c46:	f240 6261 	movw	r2, #1633	; 0x661
 8013c4a:	4993      	ldr	r1, [pc, #588]	; (8013e98 <dhcp_parse_reply+0x588>)
 8013c4c:	4893      	ldr	r0, [pc, #588]	; (8013e9c <dhcp_parse_reply+0x58c>)
 8013c4e:	f003 fba5 	bl	801739c <iprintf>
 8013c52:	f06f 0305 	mvn.w	r3, #5
 8013c56:	e119      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013c58:	2305      	movs	r3, #5
 8013c5a:	623b      	str	r3, [r7, #32]
        break;
 8013c5c:	e003      	b.n	8013c66 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013c64:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d103      	bne.n	8013c74 <dhcp_parse_reply+0x364>
      offset++;
 8013c6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c6e:	3301      	adds	r3, #1
 8013c70:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013c72:	e0a1      	b.n	8013db8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013c74:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c7a:	4413      	add	r3, r2
 8013c7c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013c80:	4293      	cmp	r3, r2
 8013c82:	dd02      	ble.n	8013c8a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013c84:	f06f 0301 	mvn.w	r3, #1
 8013c88:	e100      	b.n	8013e8c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c8e:	b29a      	uxth	r2, r3
 8013c90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c92:	4413      	add	r3, r2
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	3302      	adds	r3, #2
 8013c98:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	f000 808a 	beq.w	8013db8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013ca8:	6a3b      	ldr	r3, [r7, #32]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	db02      	blt.n	8013cb4 <dhcp_parse_reply+0x3a4>
 8013cae:	6a3b      	ldr	r3, [r7, #32]
 8013cb0:	2b07      	cmp	r3, #7
 8013cb2:	dd06      	ble.n	8013cc2 <dhcp_parse_reply+0x3b2>
 8013cb4:	4b77      	ldr	r3, [pc, #476]	; (8013e94 <dhcp_parse_reply+0x584>)
 8013cb6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013cba:	4979      	ldr	r1, [pc, #484]	; (8013ea0 <dhcp_parse_reply+0x590>)
 8013cbc:	4877      	ldr	r0, [pc, #476]	; (8013e9c <dhcp_parse_reply+0x58c>)
 8013cbe:	f003 fb6d 	bl	801739c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013cc2:	4a78      	ldr	r2, [pc, #480]	; (8013ea4 <dhcp_parse_reply+0x594>)
 8013cc4:	6a3b      	ldr	r3, [r7, #32]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	781b      	ldrb	r3, [r3, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d174      	bne.n	8013db8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013cce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013cd2:	2b04      	cmp	r3, #4
 8013cd4:	bf28      	it	cs
 8013cd6:	2304      	movcs	r3, #4
 8013cd8:	b2db      	uxtb	r3, r3
 8013cda:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013cdc:	8bfb      	ldrh	r3, [r7, #30]
 8013cde:	8aba      	ldrh	r2, [r7, #20]
 8013ce0:	f107 0108 	add.w	r1, r7, #8
 8013ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ce6:	f7f8 fc19 	bl	800c51c <pbuf_copy_partial>
 8013cea:	4603      	mov	r3, r0
 8013cec:	461a      	mov	r2, r3
 8013cee:	8abb      	ldrh	r3, [r7, #20]
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d002      	beq.n	8013cfa <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013cf4:	f06f 0301 	mvn.w	r3, #1
 8013cf8:	e0c8      	b.n	8013e8c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013cfe:	2b04      	cmp	r3, #4
 8013d00:	d933      	bls.n	8013d6a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d06:	f003 0303 	and.w	r3, r3, #3
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d009      	beq.n	8013d24 <dhcp_parse_reply+0x414>
 8013d10:	4b60      	ldr	r3, [pc, #384]	; (8013e94 <dhcp_parse_reply+0x584>)
 8013d12:	f240 6281 	movw	r2, #1665	; 0x681
 8013d16:	4964      	ldr	r1, [pc, #400]	; (8013ea8 <dhcp_parse_reply+0x598>)
 8013d18:	4860      	ldr	r0, [pc, #384]	; (8013e9c <dhcp_parse_reply+0x58c>)
 8013d1a:	f003 fb3f 	bl	801739c <iprintf>
 8013d1e:	f06f 0305 	mvn.w	r3, #5
 8013d22:	e0b3      	b.n	8013e8c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013d24:	4a5f      	ldr	r2, [pc, #380]	; (8013ea4 <dhcp_parse_reply+0x594>)
 8013d26:	6a3b      	ldr	r3, [r7, #32]
 8013d28:	4413      	add	r3, r2
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7f6 fe4a 	bl	800a9ca <lwip_htonl>
 8013d36:	4602      	mov	r2, r0
 8013d38:	495c      	ldr	r1, [pc, #368]	; (8013eac <dhcp_parse_reply+0x59c>)
 8013d3a:	6a3b      	ldr	r3, [r7, #32]
 8013d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013d40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d44:	3b04      	subs	r3, #4
 8013d46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013d4a:	8bfb      	ldrh	r3, [r7, #30]
 8013d4c:	3304      	adds	r3, #4
 8013d4e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013d50:	8a7a      	ldrh	r2, [r7, #18]
 8013d52:	8bfb      	ldrh	r3, [r7, #30]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d202      	bcs.n	8013d5e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013d58:	f06f 0301 	mvn.w	r3, #1
 8013d5c:	e096      	b.n	8013e8c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013d5e:	8a7b      	ldrh	r3, [r7, #18]
 8013d60:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013d62:	6a3b      	ldr	r3, [r7, #32]
 8013d64:	3301      	adds	r3, #1
 8013d66:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013d68:	e79e      	b.n	8013ca8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d6e:	2b04      	cmp	r3, #4
 8013d70:	d106      	bne.n	8013d80 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7f6 fe28 	bl	800a9ca <lwip_htonl>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	60bb      	str	r3, [r7, #8]
 8013d7e:	e011      	b.n	8013da4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013d80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d009      	beq.n	8013d9c <dhcp_parse_reply+0x48c>
 8013d88:	4b42      	ldr	r3, [pc, #264]	; (8013e94 <dhcp_parse_reply+0x584>)
 8013d8a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013d8e:	4948      	ldr	r1, [pc, #288]	; (8013eb0 <dhcp_parse_reply+0x5a0>)
 8013d90:	4842      	ldr	r0, [pc, #264]	; (8013e9c <dhcp_parse_reply+0x58c>)
 8013d92:	f003 fb03 	bl	801739c <iprintf>
 8013d96:	f06f 0305 	mvn.w	r3, #5
 8013d9a:	e077      	b.n	8013e8c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013d9c:	f107 0308 	add.w	r3, r7, #8
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013da4:	4a3f      	ldr	r2, [pc, #252]	; (8013ea4 <dhcp_parse_reply+0x594>)
 8013da6:	6a3b      	ldr	r3, [r7, #32]
 8013da8:	4413      	add	r3, r2
 8013daa:	2201      	movs	r2, #1
 8013dac:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013dae:	68ba      	ldr	r2, [r7, #8]
 8013db0:	493e      	ldr	r1, [pc, #248]	; (8013eac <dhcp_parse_reply+0x59c>)
 8013db2:	6a3b      	ldr	r3, [r7, #32]
 8013db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dba:	895b      	ldrh	r3, [r3, #10]
 8013dbc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d324      	bcc.n	8013e0c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc4:	895b      	ldrh	r3, [r3, #10]
 8013dc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dce:	895b      	ldrh	r3, [r3, #10]
 8013dd0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013dd2:	1ad3      	subs	r3, r2, r3
 8013dd4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013dd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013dd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d213      	bcs.n	8013e06 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d109      	bne.n	8013dfe <dhcp_parse_reply+0x4ee>
 8013dea:	4b2a      	ldr	r3, [pc, #168]	; (8013e94 <dhcp_parse_reply+0x584>)
 8013dec:	f240 629d 	movw	r2, #1693	; 0x69d
 8013df0:	4930      	ldr	r1, [pc, #192]	; (8013eb4 <dhcp_parse_reply+0x5a4>)
 8013df2:	482a      	ldr	r0, [pc, #168]	; (8013e9c <dhcp_parse_reply+0x58c>)
 8013df4:	f003 fad2 	bl	801739c <iprintf>
 8013df8:	f06f 0305 	mvn.w	r3, #5
 8013dfc:	e046      	b.n	8013e8c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8013dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e00:	685b      	ldr	r3, [r3, #4]
 8013e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013e04:	e002      	b.n	8013e0c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013e06:	f06f 0301 	mvn.w	r3, #1
 8013e0a:	e03f      	b.n	8013e8c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d00a      	beq.n	8013e28 <dhcp_parse_reply+0x518>
 8013e12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013e14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d206      	bcs.n	8013e28 <dhcp_parse_reply+0x518>
 8013e1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e1e:	4413      	add	r3, r2
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	2bff      	cmp	r3, #255	; 0xff
 8013e24:	f47f adb7 	bne.w	8013996 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013e28:	4b1e      	ldr	r3, [pc, #120]	; (8013ea4 <dhcp_parse_reply+0x594>)
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d018      	beq.n	8013e62 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013e30:	4b1e      	ldr	r3, [pc, #120]	; (8013eac <dhcp_parse_reply+0x59c>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013e36:	4b1b      	ldr	r3, [pc, #108]	; (8013ea4 <dhcp_parse_reply+0x594>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2b01      	cmp	r3, #1
 8013e40:	d102      	bne.n	8013e48 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8013e42:	2301      	movs	r3, #1
 8013e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e46:	e00c      	b.n	8013e62 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b02      	cmp	r3, #2
 8013e4c:	d102      	bne.n	8013e54 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e52:	e006      	b.n	8013e62 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	2b03      	cmp	r3, #3
 8013e58:	d103      	bne.n	8013e62 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013e5e:	2301      	movs	r3, #1
 8013e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d006      	beq.n	8013e76 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013e6c:	236c      	movs	r3, #108	; 0x6c
 8013e6e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013e70:	23ec      	movs	r3, #236	; 0xec
 8013e72:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013e74:	e569      	b.n	801394a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d006      	beq.n	8013e8a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013e80:	232c      	movs	r3, #44	; 0x2c
 8013e82:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013e84:	236c      	movs	r3, #108	; 0x6c
 8013e86:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013e88:	e55f      	b.n	801394a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013e8a:	2300      	movs	r3, #0
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3740      	adds	r7, #64	; 0x40
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}
 8013e94:	0801bcac 	.word	0x0801bcac
 8013e98:	0801bf34 	.word	0x0801bf34
 8013e9c:	0801bd0c 	.word	0x0801bd0c
 8013ea0:	0801bf78 	.word	0x0801bf78
 8013ea4:	20012cd0 	.word	0x20012cd0
 8013ea8:	0801bf8c 	.word	0x0801bf8c
 8013eac:	20012cd8 	.word	0x20012cd8
 8013eb0:	0801bfa4 	.word	0x0801bfa4
 8013eb4:	0801bfb8 	.word	0x0801bfb8

08013eb8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b08a      	sub	sp, #40	; 0x28
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	607a      	str	r2, [r7, #4]
 8013ec4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013ec6:	4b60      	ldr	r3, [pc, #384]	; (8014048 <dhcp_recv+0x190>)
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ecc:	6a3b      	ldr	r3, [r7, #32]
 8013ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ed0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	685b      	ldr	r3, [r3, #4]
 8013ed6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	f000 809d 	beq.w	801401a <dhcp_recv+0x162>
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	791b      	ldrb	r3, [r3, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	f000 8098 	beq.w	801401a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	895b      	ldrh	r3, [r3, #10]
 8013eee:	2b2b      	cmp	r3, #43	; 0x2b
 8013ef0:	f240 8095 	bls.w	801401e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013ef4:	69bb      	ldr	r3, [r7, #24]
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	2b02      	cmp	r3, #2
 8013efa:	f040 8092 	bne.w	8014022 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013efe:	2300      	movs	r3, #0
 8013f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f04:	e012      	b.n	8013f2c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f0a:	6a3a      	ldr	r2, [r7, #32]
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f16:	69b9      	ldr	r1, [r7, #24]
 8013f18:	440b      	add	r3, r1
 8013f1a:	7f1b      	ldrb	r3, [r3, #28]
 8013f1c:	429a      	cmp	r2, r3
 8013f1e:	f040 8082 	bne.w	8014026 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f26:	3301      	adds	r3, #1
 8013f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013f2c:	6a3b      	ldr	r3, [r7, #32]
 8013f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d203      	bcs.n	8013f42 <dhcp_recv+0x8a>
 8013f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f3e:	2b05      	cmp	r3, #5
 8013f40:	d9e1      	bls.n	8013f06 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	685b      	ldr	r3, [r3, #4]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7f6 fd3f 	bl	800a9ca <lwip_htonl>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	69fb      	ldr	r3, [r7, #28]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d169      	bne.n	801402a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013f56:	69f9      	ldr	r1, [r7, #28]
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f7ff fcd9 	bl	8013910 <dhcp_parse_reply>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d164      	bne.n	801402e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013f64:	4b39      	ldr	r3, [pc, #228]	; (801404c <dhcp_recv+0x194>)
 8013f66:	785b      	ldrb	r3, [r3, #1]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d062      	beq.n	8014032 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013f72:	4b37      	ldr	r3, [pc, #220]	; (8014050 <dhcp_recv+0x198>)
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013f78:	7cfb      	ldrb	r3, [r7, #19]
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d12a      	bne.n	8013fd4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	795b      	ldrb	r3, [r3, #5]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d112      	bne.n	8013fac <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013f86:	6979      	ldr	r1, [r7, #20]
 8013f88:	6a38      	ldr	r0, [r7, #32]
 8013f8a:	f7fe fe17 	bl	8012bbc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013f8e:	6a3b      	ldr	r3, [r7, #32]
 8013f90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f94:	f003 0308 	and.w	r3, r3, #8
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d003      	beq.n	8013fa4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013f9c:	6a38      	ldr	r0, [r7, #32]
 8013f9e:	f7fe fb85 	bl	80126ac <dhcp_check>
 8013fa2:	e049      	b.n	8014038 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013fa4:	6a38      	ldr	r0, [r7, #32]
 8013fa6:	f7ff f867 	bl	8013078 <dhcp_bind>
 8013faa:	e045      	b.n	8014038 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	795b      	ldrb	r3, [r3, #5]
 8013fb0:	2b03      	cmp	r3, #3
 8013fb2:	d007      	beq.n	8013fc4 <dhcp_recv+0x10c>
 8013fb4:	69fb      	ldr	r3, [r7, #28]
 8013fb6:	795b      	ldrb	r3, [r3, #5]
 8013fb8:	2b04      	cmp	r3, #4
 8013fba:	d003      	beq.n	8013fc4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013fc0:	2b05      	cmp	r3, #5
 8013fc2:	d139      	bne.n	8014038 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013fc4:	6979      	ldr	r1, [r7, #20]
 8013fc6:	6a38      	ldr	r0, [r7, #32]
 8013fc8:	f7fe fdf8 	bl	8012bbc <dhcp_handle_ack>
      dhcp_bind(netif);
 8013fcc:	6a38      	ldr	r0, [r7, #32]
 8013fce:	f7ff f853 	bl	8013078 <dhcp_bind>
 8013fd2:	e031      	b.n	8014038 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013fd4:	7cfb      	ldrb	r3, [r7, #19]
 8013fd6:	2b06      	cmp	r3, #6
 8013fd8:	d113      	bne.n	8014002 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013fda:	69fb      	ldr	r3, [r7, #28]
 8013fdc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013fde:	2b03      	cmp	r3, #3
 8013fe0:	d00b      	beq.n	8013ffa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	795b      	ldrb	r3, [r3, #5]
 8013fe6:	2b01      	cmp	r3, #1
 8013fe8:	d007      	beq.n	8013ffa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013fea:	69fb      	ldr	r3, [r7, #28]
 8013fec:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013fee:	2b04      	cmp	r3, #4
 8013ff0:	d003      	beq.n	8013ffa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013ff2:	69fb      	ldr	r3, [r7, #28]
 8013ff4:	795b      	ldrb	r3, [r3, #5]
 8013ff6:	2b05      	cmp	r3, #5
 8013ff8:	d103      	bne.n	8014002 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013ffa:	6a38      	ldr	r0, [r7, #32]
 8013ffc:	f7fe fb3c 	bl	8012678 <dhcp_handle_nak>
 8014000:	e01a      	b.n	8014038 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014002:	7cfb      	ldrb	r3, [r7, #19]
 8014004:	2b02      	cmp	r3, #2
 8014006:	d116      	bne.n	8014036 <dhcp_recv+0x17e>
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	795b      	ldrb	r3, [r3, #5]
 801400c:	2b06      	cmp	r3, #6
 801400e:	d112      	bne.n	8014036 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014010:	6979      	ldr	r1, [r7, #20]
 8014012:	6a38      	ldr	r0, [r7, #32]
 8014014:	f7fe fb7e 	bl	8012714 <dhcp_handle_offer>
 8014018:	e00e      	b.n	8014038 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801401a:	bf00      	nop
 801401c:	e00c      	b.n	8014038 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801401e:	bf00      	nop
 8014020:	e00a      	b.n	8014038 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014022:	bf00      	nop
 8014024:	e008      	b.n	8014038 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014026:	bf00      	nop
 8014028:	e006      	b.n	8014038 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801402a:	bf00      	nop
 801402c:	e004      	b.n	8014038 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801402e:	bf00      	nop
 8014030:	e002      	b.n	8014038 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014032:	bf00      	nop
 8014034:	e000      	b.n	8014038 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014036:	bf00      	nop
  pbuf_free(p);
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7f8 f869 	bl	800c110 <pbuf_free>
}
 801403e:	bf00      	nop
 8014040:	3728      	adds	r7, #40	; 0x28
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	2000f580 	.word	0x2000f580
 801404c:	20012cd0 	.word	0x20012cd0
 8014050:	20012cd8 	.word	0x20012cd8

08014054 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b088      	sub	sp, #32
 8014058:	af00      	add	r7, sp, #0
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	60b9      	str	r1, [r7, #8]
 801405e:	603b      	str	r3, [r7, #0]
 8014060:	4613      	mov	r3, r2
 8014062:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d108      	bne.n	801407c <dhcp_create_msg+0x28>
 801406a:	4b5f      	ldr	r3, [pc, #380]	; (80141e8 <dhcp_create_msg+0x194>)
 801406c:	f240 7269 	movw	r2, #1897	; 0x769
 8014070:	495e      	ldr	r1, [pc, #376]	; (80141ec <dhcp_create_msg+0x198>)
 8014072:	485f      	ldr	r0, [pc, #380]	; (80141f0 <dhcp_create_msg+0x19c>)
 8014074:	f003 f992 	bl	801739c <iprintf>
 8014078:	2300      	movs	r3, #0
 801407a:	e0b1      	b.n	80141e0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d108      	bne.n	8014094 <dhcp_create_msg+0x40>
 8014082:	4b59      	ldr	r3, [pc, #356]	; (80141e8 <dhcp_create_msg+0x194>)
 8014084:	f240 726a 	movw	r2, #1898	; 0x76a
 8014088:	495a      	ldr	r1, [pc, #360]	; (80141f4 <dhcp_create_msg+0x1a0>)
 801408a:	4859      	ldr	r0, [pc, #356]	; (80141f0 <dhcp_create_msg+0x19c>)
 801408c:	f003 f986 	bl	801739c <iprintf>
 8014090:	2300      	movs	r3, #0
 8014092:	e0a5      	b.n	80141e0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014094:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014098:	f44f 719a 	mov.w	r1, #308	; 0x134
 801409c:	2036      	movs	r0, #54	; 0x36
 801409e:	f7f7 fd53 	bl	800bb48 <pbuf_alloc>
 80140a2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80140a4:	69bb      	ldr	r3, [r7, #24]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d101      	bne.n	80140ae <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80140aa:	2300      	movs	r3, #0
 80140ac:	e098      	b.n	80141e0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	895b      	ldrh	r3, [r3, #10]
 80140b2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80140b6:	d206      	bcs.n	80140c6 <dhcp_create_msg+0x72>
 80140b8:	4b4b      	ldr	r3, [pc, #300]	; (80141e8 <dhcp_create_msg+0x194>)
 80140ba:	f240 7271 	movw	r2, #1905	; 0x771
 80140be:	494e      	ldr	r1, [pc, #312]	; (80141f8 <dhcp_create_msg+0x1a4>)
 80140c0:	484b      	ldr	r0, [pc, #300]	; (80141f0 <dhcp_create_msg+0x19c>)
 80140c2:	f003 f96b 	bl	801739c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80140c6:	79fb      	ldrb	r3, [r7, #7]
 80140c8:	2b03      	cmp	r3, #3
 80140ca:	d103      	bne.n	80140d4 <dhcp_create_msg+0x80>
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	795b      	ldrb	r3, [r3, #5]
 80140d0:	2b03      	cmp	r3, #3
 80140d2:	d10d      	bne.n	80140f0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	799b      	ldrb	r3, [r3, #6]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d105      	bne.n	80140e8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80140dc:	f003 f976 	bl	80173cc <rand>
 80140e0:	4603      	mov	r3, r0
 80140e2:	461a      	mov	r2, r3
 80140e4:	4b45      	ldr	r3, [pc, #276]	; (80141fc <dhcp_create_msg+0x1a8>)
 80140e6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80140e8:	4b44      	ldr	r3, [pc, #272]	; (80141fc <dhcp_create_msg+0x1a8>)
 80140ea:	681a      	ldr	r2, [r3, #0]
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80140f6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80140fa:	2100      	movs	r1, #0
 80140fc:	6978      	ldr	r0, [r7, #20]
 80140fe:	f002 fd01 	bl	8016b04 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	2201      	movs	r2, #1
 8014106:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	2201      	movs	r2, #1
 801410c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4618      	mov	r0, r3
 801411e:	f7f6 fc54 	bl	800a9ca <lwip_htonl>
 8014122:	4602      	mov	r2, r0
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014128:	79fb      	ldrb	r3, [r7, #7]
 801412a:	2b08      	cmp	r3, #8
 801412c:	d010      	beq.n	8014150 <dhcp_create_msg+0xfc>
 801412e:	79fb      	ldrb	r3, [r7, #7]
 8014130:	2b04      	cmp	r3, #4
 8014132:	d00d      	beq.n	8014150 <dhcp_create_msg+0xfc>
 8014134:	79fb      	ldrb	r3, [r7, #7]
 8014136:	2b07      	cmp	r3, #7
 8014138:	d00a      	beq.n	8014150 <dhcp_create_msg+0xfc>
 801413a:	79fb      	ldrb	r3, [r7, #7]
 801413c:	2b03      	cmp	r3, #3
 801413e:	d10c      	bne.n	801415a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014144:	2b05      	cmp	r3, #5
 8014146:	d003      	beq.n	8014150 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	795b      	ldrb	r3, [r3, #5]
 801414c:	2b04      	cmp	r3, #4
 801414e:	d104      	bne.n	801415a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	3304      	adds	r3, #4
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801415a:	2300      	movs	r3, #0
 801415c:	83fb      	strh	r3, [r7, #30]
 801415e:	e00c      	b.n	801417a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014160:	8bfa      	ldrh	r2, [r7, #30]
 8014162:	8bfb      	ldrh	r3, [r7, #30]
 8014164:	68f9      	ldr	r1, [r7, #12]
 8014166:	440a      	add	r2, r1
 8014168:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801416c:	697a      	ldr	r2, [r7, #20]
 801416e:	4413      	add	r3, r2
 8014170:	460a      	mov	r2, r1
 8014172:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014174:	8bfb      	ldrh	r3, [r7, #30]
 8014176:	3301      	adds	r3, #1
 8014178:	83fb      	strh	r3, [r7, #30]
 801417a:	8bfb      	ldrh	r3, [r7, #30]
 801417c:	2b05      	cmp	r3, #5
 801417e:	d9ef      	bls.n	8014160 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	2200      	movs	r2, #0
 8014184:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801418c:	2200      	movs	r2, #0
 801418e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8014192:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8014196:	2200      	movs	r2, #0
 8014198:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801419c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80141a0:	2200      	movs	r2, #0
 80141a2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80141a6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141b0:	2301      	movs	r3, #1
 80141b2:	2235      	movs	r2, #53	; 0x35
 80141b4:	2000      	movs	r0, #0
 80141b6:	f7ff fadb 	bl	8013770 <dhcp_option>
 80141ba:	4603      	mov	r3, r0
 80141bc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80141c4:	79fa      	ldrb	r2, [r7, #7]
 80141c6:	8a7b      	ldrh	r3, [r7, #18]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7ff fb05 	bl	80137d8 <dhcp_option_byte>
 80141ce:	4603      	mov	r3, r0
 80141d0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d002      	beq.n	80141de <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	8a7a      	ldrh	r2, [r7, #18]
 80141dc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80141de:	69bb      	ldr	r3, [r7, #24]
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3720      	adds	r7, #32
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}
 80141e8:	0801bcac 	.word	0x0801bcac
 80141ec:	0801bfcc 	.word	0x0801bfcc
 80141f0:	0801bd0c 	.word	0x0801bd0c
 80141f4:	0801bfec 	.word	0x0801bfec
 80141f8:	0801c00c 	.word	0x0801c00c
 80141fc:	20004bc0 	.word	0x20004bc0

08014200 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b084      	sub	sp, #16
 8014204:	af00      	add	r7, sp, #0
 8014206:	4603      	mov	r3, r0
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	607a      	str	r2, [r7, #4]
 801420c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801420e:	89fb      	ldrh	r3, [r7, #14]
 8014210:	1c5a      	adds	r2, r3, #1
 8014212:	81fa      	strh	r2, [r7, #14]
 8014214:	461a      	mov	r2, r3
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	4413      	add	r3, r2
 801421a:	22ff      	movs	r2, #255	; 0xff
 801421c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801421e:	e007      	b.n	8014230 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014220:	89fb      	ldrh	r3, [r7, #14]
 8014222:	1c5a      	adds	r2, r3, #1
 8014224:	81fa      	strh	r2, [r7, #14]
 8014226:	461a      	mov	r2, r3
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	4413      	add	r3, r2
 801422c:	2200      	movs	r2, #0
 801422e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014230:	89fb      	ldrh	r3, [r7, #14]
 8014232:	2b43      	cmp	r3, #67	; 0x43
 8014234:	d904      	bls.n	8014240 <dhcp_option_trailer+0x40>
 8014236:	89fb      	ldrh	r3, [r7, #14]
 8014238:	f003 0303 	and.w	r3, r3, #3
 801423c:	2b00      	cmp	r3, #0
 801423e:	d002      	beq.n	8014246 <dhcp_option_trailer+0x46>
 8014240:	89fb      	ldrh	r3, [r7, #14]
 8014242:	2b43      	cmp	r3, #67	; 0x43
 8014244:	d9ec      	bls.n	8014220 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014246:	89fb      	ldrh	r3, [r7, #14]
 8014248:	33f0      	adds	r3, #240	; 0xf0
 801424a:	b29b      	uxth	r3, r3
 801424c:	4619      	mov	r1, r3
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7f7 fdd8 	bl	800be04 <pbuf_realloc>
}
 8014254:	bf00      	nop
 8014256:	3710      	adds	r7, #16
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801425c:	b480      	push	{r7}
 801425e:	b085      	sub	sp, #20
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d017      	beq.n	801429a <dhcp_supplied_address+0x3e>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801426e:	2b00      	cmp	r3, #0
 8014270:	d013      	beq.n	801429a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014276:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	795b      	ldrb	r3, [r3, #5]
 801427c:	2b0a      	cmp	r3, #10
 801427e:	d007      	beq.n	8014290 <dhcp_supplied_address+0x34>
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	795b      	ldrb	r3, [r3, #5]
 8014284:	2b05      	cmp	r3, #5
 8014286:	d003      	beq.n	8014290 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801428c:	2b04      	cmp	r3, #4
 801428e:	d101      	bne.n	8014294 <dhcp_supplied_address+0x38>
 8014290:	2301      	movs	r3, #1
 8014292:	e000      	b.n	8014296 <dhcp_supplied_address+0x3a>
 8014294:	2300      	movs	r3, #0
 8014296:	b2db      	uxtb	r3, r3
 8014298:	e000      	b.n	801429c <dhcp_supplied_address+0x40>
  }
  return 0;
 801429a:	2300      	movs	r3, #0
}
 801429c:	4618      	mov	r0, r3
 801429e:	3714      	adds	r7, #20
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80142b0:	4915      	ldr	r1, [pc, #84]	; (8014308 <etharp_free_entry+0x60>)
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	4613      	mov	r3, r2
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	4413      	add	r3, r2
 80142ba:	00db      	lsls	r3, r3, #3
 80142bc:	440b      	add	r3, r1
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d013      	beq.n	80142ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80142c4:	4910      	ldr	r1, [pc, #64]	; (8014308 <etharp_free_entry+0x60>)
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	4613      	mov	r3, r2
 80142ca:	005b      	lsls	r3, r3, #1
 80142cc:	4413      	add	r3, r2
 80142ce:	00db      	lsls	r3, r3, #3
 80142d0:	440b      	add	r3, r1
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7f7 ff1b 	bl	800c110 <pbuf_free>
    arp_table[i].q = NULL;
 80142da:	490b      	ldr	r1, [pc, #44]	; (8014308 <etharp_free_entry+0x60>)
 80142dc:	687a      	ldr	r2, [r7, #4]
 80142de:	4613      	mov	r3, r2
 80142e0:	005b      	lsls	r3, r3, #1
 80142e2:	4413      	add	r3, r2
 80142e4:	00db      	lsls	r3, r3, #3
 80142e6:	440b      	add	r3, r1
 80142e8:	2200      	movs	r2, #0
 80142ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80142ec:	4906      	ldr	r1, [pc, #24]	; (8014308 <etharp_free_entry+0x60>)
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	4613      	mov	r3, r2
 80142f2:	005b      	lsls	r3, r3, #1
 80142f4:	4413      	add	r3, r2
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	440b      	add	r3, r1
 80142fa:	3314      	adds	r3, #20
 80142fc:	2200      	movs	r2, #0
 80142fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014300:	bf00      	nop
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	20004bc4 	.word	0x20004bc4

0801430c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014312:	2300      	movs	r3, #0
 8014314:	607b      	str	r3, [r7, #4]
 8014316:	e096      	b.n	8014446 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014318:	494f      	ldr	r1, [pc, #316]	; (8014458 <etharp_tmr+0x14c>)
 801431a:	687a      	ldr	r2, [r7, #4]
 801431c:	4613      	mov	r3, r2
 801431e:	005b      	lsls	r3, r3, #1
 8014320:	4413      	add	r3, r2
 8014322:	00db      	lsls	r3, r3, #3
 8014324:	440b      	add	r3, r1
 8014326:	3314      	adds	r3, #20
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801432c:	78fb      	ldrb	r3, [r7, #3]
 801432e:	2b00      	cmp	r3, #0
 8014330:	f000 8086 	beq.w	8014440 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014334:	4948      	ldr	r1, [pc, #288]	; (8014458 <etharp_tmr+0x14c>)
 8014336:	687a      	ldr	r2, [r7, #4]
 8014338:	4613      	mov	r3, r2
 801433a:	005b      	lsls	r3, r3, #1
 801433c:	4413      	add	r3, r2
 801433e:	00db      	lsls	r3, r3, #3
 8014340:	440b      	add	r3, r1
 8014342:	3312      	adds	r3, #18
 8014344:	881b      	ldrh	r3, [r3, #0]
 8014346:	3301      	adds	r3, #1
 8014348:	b298      	uxth	r0, r3
 801434a:	4943      	ldr	r1, [pc, #268]	; (8014458 <etharp_tmr+0x14c>)
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	4613      	mov	r3, r2
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	4413      	add	r3, r2
 8014354:	00db      	lsls	r3, r3, #3
 8014356:	440b      	add	r3, r1
 8014358:	3312      	adds	r3, #18
 801435a:	4602      	mov	r2, r0
 801435c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801435e:	493e      	ldr	r1, [pc, #248]	; (8014458 <etharp_tmr+0x14c>)
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	4613      	mov	r3, r2
 8014364:	005b      	lsls	r3, r3, #1
 8014366:	4413      	add	r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	440b      	add	r3, r1
 801436c:	3312      	adds	r3, #18
 801436e:	881b      	ldrh	r3, [r3, #0]
 8014370:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014374:	d215      	bcs.n	80143a2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014376:	4938      	ldr	r1, [pc, #224]	; (8014458 <etharp_tmr+0x14c>)
 8014378:	687a      	ldr	r2, [r7, #4]
 801437a:	4613      	mov	r3, r2
 801437c:	005b      	lsls	r3, r3, #1
 801437e:	4413      	add	r3, r2
 8014380:	00db      	lsls	r3, r3, #3
 8014382:	440b      	add	r3, r1
 8014384:	3314      	adds	r3, #20
 8014386:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014388:	2b01      	cmp	r3, #1
 801438a:	d10e      	bne.n	80143aa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801438c:	4932      	ldr	r1, [pc, #200]	; (8014458 <etharp_tmr+0x14c>)
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	4613      	mov	r3, r2
 8014392:	005b      	lsls	r3, r3, #1
 8014394:	4413      	add	r3, r2
 8014396:	00db      	lsls	r3, r3, #3
 8014398:	440b      	add	r3, r1
 801439a:	3312      	adds	r3, #18
 801439c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801439e:	2b04      	cmp	r3, #4
 80143a0:	d903      	bls.n	80143aa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80143a2:	6878      	ldr	r0, [r7, #4]
 80143a4:	f7ff ff80 	bl	80142a8 <etharp_free_entry>
 80143a8:	e04a      	b.n	8014440 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80143aa:	492b      	ldr	r1, [pc, #172]	; (8014458 <etharp_tmr+0x14c>)
 80143ac:	687a      	ldr	r2, [r7, #4]
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	440b      	add	r3, r1
 80143b8:	3314      	adds	r3, #20
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	2b03      	cmp	r3, #3
 80143be:	d10a      	bne.n	80143d6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80143c0:	4925      	ldr	r1, [pc, #148]	; (8014458 <etharp_tmr+0x14c>)
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	4613      	mov	r3, r2
 80143c6:	005b      	lsls	r3, r3, #1
 80143c8:	4413      	add	r3, r2
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	440b      	add	r3, r1
 80143ce:	3314      	adds	r3, #20
 80143d0:	2204      	movs	r2, #4
 80143d2:	701a      	strb	r2, [r3, #0]
 80143d4:	e034      	b.n	8014440 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80143d6:	4920      	ldr	r1, [pc, #128]	; (8014458 <etharp_tmr+0x14c>)
 80143d8:	687a      	ldr	r2, [r7, #4]
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	440b      	add	r3, r1
 80143e4:	3314      	adds	r3, #20
 80143e6:	781b      	ldrb	r3, [r3, #0]
 80143e8:	2b04      	cmp	r3, #4
 80143ea:	d10a      	bne.n	8014402 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80143ec:	491a      	ldr	r1, [pc, #104]	; (8014458 <etharp_tmr+0x14c>)
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	4613      	mov	r3, r2
 80143f2:	005b      	lsls	r3, r3, #1
 80143f4:	4413      	add	r3, r2
 80143f6:	00db      	lsls	r3, r3, #3
 80143f8:	440b      	add	r3, r1
 80143fa:	3314      	adds	r3, #20
 80143fc:	2202      	movs	r2, #2
 80143fe:	701a      	strb	r2, [r3, #0]
 8014400:	e01e      	b.n	8014440 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014402:	4915      	ldr	r1, [pc, #84]	; (8014458 <etharp_tmr+0x14c>)
 8014404:	687a      	ldr	r2, [r7, #4]
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	440b      	add	r3, r1
 8014410:	3314      	adds	r3, #20
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	2b01      	cmp	r3, #1
 8014416:	d113      	bne.n	8014440 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014418:	490f      	ldr	r1, [pc, #60]	; (8014458 <etharp_tmr+0x14c>)
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	4613      	mov	r3, r2
 801441e:	005b      	lsls	r3, r3, #1
 8014420:	4413      	add	r3, r2
 8014422:	00db      	lsls	r3, r3, #3
 8014424:	440b      	add	r3, r1
 8014426:	3308      	adds	r3, #8
 8014428:	6818      	ldr	r0, [r3, #0]
 801442a:	687a      	ldr	r2, [r7, #4]
 801442c:	4613      	mov	r3, r2
 801442e:	005b      	lsls	r3, r3, #1
 8014430:	4413      	add	r3, r2
 8014432:	00db      	lsls	r3, r3, #3
 8014434:	4a08      	ldr	r2, [pc, #32]	; (8014458 <etharp_tmr+0x14c>)
 8014436:	4413      	add	r3, r2
 8014438:	3304      	adds	r3, #4
 801443a:	4619      	mov	r1, r3
 801443c:	f000 fe72 	bl	8015124 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	3301      	adds	r3, #1
 8014444:	607b      	str	r3, [r7, #4]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2b09      	cmp	r3, #9
 801444a:	f77f af65 	ble.w	8014318 <etharp_tmr+0xc>
      }
    }
  }
}
 801444e:	bf00      	nop
 8014450:	bf00      	nop
 8014452:	3708      	adds	r7, #8
 8014454:	46bd      	mov	sp, r7
 8014456:	bd80      	pop	{r7, pc}
 8014458:	20004bc4 	.word	0x20004bc4

0801445c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b08a      	sub	sp, #40	; 0x28
 8014460:	af00      	add	r7, sp, #0
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	460b      	mov	r3, r1
 8014466:	607a      	str	r2, [r7, #4]
 8014468:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801446a:	230a      	movs	r3, #10
 801446c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801446e:	230a      	movs	r3, #10
 8014470:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014472:	230a      	movs	r3, #10
 8014474:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014476:	2300      	movs	r3, #0
 8014478:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801447a:	230a      	movs	r3, #10
 801447c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	83bb      	strh	r3, [r7, #28]
 8014482:	2300      	movs	r3, #0
 8014484:	837b      	strh	r3, [r7, #26]
 8014486:	2300      	movs	r3, #0
 8014488:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801448a:	2300      	movs	r3, #0
 801448c:	843b      	strh	r3, [r7, #32]
 801448e:	e0ae      	b.n	80145ee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014490:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014494:	49a6      	ldr	r1, [pc, #664]	; (8014730 <etharp_find_entry+0x2d4>)
 8014496:	4613      	mov	r3, r2
 8014498:	005b      	lsls	r3, r3, #1
 801449a:	4413      	add	r3, r2
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	440b      	add	r3, r1
 80144a0:	3314      	adds	r3, #20
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80144a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80144aa:	2b0a      	cmp	r3, #10
 80144ac:	d105      	bne.n	80144ba <etharp_find_entry+0x5e>
 80144ae:	7dfb      	ldrb	r3, [r7, #23]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d102      	bne.n	80144ba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80144b4:	8c3b      	ldrh	r3, [r7, #32]
 80144b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80144b8:	e095      	b.n	80145e6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80144ba:	7dfb      	ldrb	r3, [r7, #23]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f000 8092 	beq.w	80145e6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80144c2:	7dfb      	ldrb	r3, [r7, #23]
 80144c4:	2b01      	cmp	r3, #1
 80144c6:	d009      	beq.n	80144dc <etharp_find_entry+0x80>
 80144c8:	7dfb      	ldrb	r3, [r7, #23]
 80144ca:	2b01      	cmp	r3, #1
 80144cc:	d806      	bhi.n	80144dc <etharp_find_entry+0x80>
 80144ce:	4b99      	ldr	r3, [pc, #612]	; (8014734 <etharp_find_entry+0x2d8>)
 80144d0:	f240 1223 	movw	r2, #291	; 0x123
 80144d4:	4998      	ldr	r1, [pc, #608]	; (8014738 <etharp_find_entry+0x2dc>)
 80144d6:	4899      	ldr	r0, [pc, #612]	; (801473c <etharp_find_entry+0x2e0>)
 80144d8:	f002 ff60 	bl	801739c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d020      	beq.n	8014524 <etharp_find_entry+0xc8>
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	6819      	ldr	r1, [r3, #0]
 80144e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144ea:	4891      	ldr	r0, [pc, #580]	; (8014730 <etharp_find_entry+0x2d4>)
 80144ec:	4613      	mov	r3, r2
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	4413      	add	r3, r2
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	4403      	add	r3, r0
 80144f6:	3304      	adds	r3, #4
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4299      	cmp	r1, r3
 80144fc:	d112      	bne.n	8014524 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d00c      	beq.n	801451e <etharp_find_entry+0xc2>
 8014504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014508:	4989      	ldr	r1, [pc, #548]	; (8014730 <etharp_find_entry+0x2d4>)
 801450a:	4613      	mov	r3, r2
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	4413      	add	r3, r2
 8014510:	00db      	lsls	r3, r3, #3
 8014512:	440b      	add	r3, r1
 8014514:	3308      	adds	r3, #8
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	687a      	ldr	r2, [r7, #4]
 801451a:	429a      	cmp	r2, r3
 801451c:	d102      	bne.n	8014524 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801451e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014522:	e100      	b.n	8014726 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014524:	7dfb      	ldrb	r3, [r7, #23]
 8014526:	2b01      	cmp	r3, #1
 8014528:	d140      	bne.n	80145ac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801452a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801452e:	4980      	ldr	r1, [pc, #512]	; (8014730 <etharp_find_entry+0x2d4>)
 8014530:	4613      	mov	r3, r2
 8014532:	005b      	lsls	r3, r3, #1
 8014534:	4413      	add	r3, r2
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	440b      	add	r3, r1
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d01a      	beq.n	8014576 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014540:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014544:	497a      	ldr	r1, [pc, #488]	; (8014730 <etharp_find_entry+0x2d4>)
 8014546:	4613      	mov	r3, r2
 8014548:	005b      	lsls	r3, r3, #1
 801454a:	4413      	add	r3, r2
 801454c:	00db      	lsls	r3, r3, #3
 801454e:	440b      	add	r3, r1
 8014550:	3312      	adds	r3, #18
 8014552:	881b      	ldrh	r3, [r3, #0]
 8014554:	8bba      	ldrh	r2, [r7, #28]
 8014556:	429a      	cmp	r2, r3
 8014558:	d845      	bhi.n	80145e6 <etharp_find_entry+0x18a>
            old_queue = i;
 801455a:	8c3b      	ldrh	r3, [r7, #32]
 801455c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801455e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014562:	4973      	ldr	r1, [pc, #460]	; (8014730 <etharp_find_entry+0x2d4>)
 8014564:	4613      	mov	r3, r2
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	4413      	add	r3, r2
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	440b      	add	r3, r1
 801456e:	3312      	adds	r3, #18
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	83bb      	strh	r3, [r7, #28]
 8014574:	e037      	b.n	80145e6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801457a:	496d      	ldr	r1, [pc, #436]	; (8014730 <etharp_find_entry+0x2d4>)
 801457c:	4613      	mov	r3, r2
 801457e:	005b      	lsls	r3, r3, #1
 8014580:	4413      	add	r3, r2
 8014582:	00db      	lsls	r3, r3, #3
 8014584:	440b      	add	r3, r1
 8014586:	3312      	adds	r3, #18
 8014588:	881b      	ldrh	r3, [r3, #0]
 801458a:	8b7a      	ldrh	r2, [r7, #26]
 801458c:	429a      	cmp	r2, r3
 801458e:	d82a      	bhi.n	80145e6 <etharp_find_entry+0x18a>
            old_pending = i;
 8014590:	8c3b      	ldrh	r3, [r7, #32]
 8014592:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014594:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014598:	4965      	ldr	r1, [pc, #404]	; (8014730 <etharp_find_entry+0x2d4>)
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	440b      	add	r3, r1
 80145a4:	3312      	adds	r3, #18
 80145a6:	881b      	ldrh	r3, [r3, #0]
 80145a8:	837b      	strh	r3, [r7, #26]
 80145aa:	e01c      	b.n	80145e6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80145ac:	7dfb      	ldrb	r3, [r7, #23]
 80145ae:	2b01      	cmp	r3, #1
 80145b0:	d919      	bls.n	80145e6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80145b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145b6:	495e      	ldr	r1, [pc, #376]	; (8014730 <etharp_find_entry+0x2d4>)
 80145b8:	4613      	mov	r3, r2
 80145ba:	005b      	lsls	r3, r3, #1
 80145bc:	4413      	add	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	440b      	add	r3, r1
 80145c2:	3312      	adds	r3, #18
 80145c4:	881b      	ldrh	r3, [r3, #0]
 80145c6:	8b3a      	ldrh	r2, [r7, #24]
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d80c      	bhi.n	80145e6 <etharp_find_entry+0x18a>
            old_stable = i;
 80145cc:	8c3b      	ldrh	r3, [r7, #32]
 80145ce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80145d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145d4:	4956      	ldr	r1, [pc, #344]	; (8014730 <etharp_find_entry+0x2d4>)
 80145d6:	4613      	mov	r3, r2
 80145d8:	005b      	lsls	r3, r3, #1
 80145da:	4413      	add	r3, r2
 80145dc:	00db      	lsls	r3, r3, #3
 80145de:	440b      	add	r3, r1
 80145e0:	3312      	adds	r3, #18
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145e6:	8c3b      	ldrh	r3, [r7, #32]
 80145e8:	3301      	adds	r3, #1
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	843b      	strh	r3, [r7, #32]
 80145ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145f2:	2b09      	cmp	r3, #9
 80145f4:	f77f af4c 	ble.w	8014490 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80145f8:	7afb      	ldrb	r3, [r7, #11]
 80145fa:	f003 0302 	and.w	r3, r3, #2
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d108      	bne.n	8014614 <etharp_find_entry+0x1b8>
 8014602:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014606:	2b0a      	cmp	r3, #10
 8014608:	d107      	bne.n	801461a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801460a:	7afb      	ldrb	r3, [r7, #11]
 801460c:	f003 0301 	and.w	r3, r3, #1
 8014610:	2b00      	cmp	r3, #0
 8014612:	d102      	bne.n	801461a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014618:	e085      	b.n	8014726 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801461a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801461e:	2b09      	cmp	r3, #9
 8014620:	dc02      	bgt.n	8014628 <etharp_find_entry+0x1cc>
    i = empty;
 8014622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014624:	843b      	strh	r3, [r7, #32]
 8014626:	e039      	b.n	801469c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014628:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801462c:	2b09      	cmp	r3, #9
 801462e:	dc14      	bgt.n	801465a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014632:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014634:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014638:	493d      	ldr	r1, [pc, #244]	; (8014730 <etharp_find_entry+0x2d4>)
 801463a:	4613      	mov	r3, r2
 801463c:	005b      	lsls	r3, r3, #1
 801463e:	4413      	add	r3, r2
 8014640:	00db      	lsls	r3, r3, #3
 8014642:	440b      	add	r3, r1
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d018      	beq.n	801467c <etharp_find_entry+0x220>
 801464a:	4b3a      	ldr	r3, [pc, #232]	; (8014734 <etharp_find_entry+0x2d8>)
 801464c:	f240 126d 	movw	r2, #365	; 0x16d
 8014650:	493b      	ldr	r1, [pc, #236]	; (8014740 <etharp_find_entry+0x2e4>)
 8014652:	483a      	ldr	r0, [pc, #232]	; (801473c <etharp_find_entry+0x2e0>)
 8014654:	f002 fea2 	bl	801739c <iprintf>
 8014658:	e010      	b.n	801467c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801465a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801465e:	2b09      	cmp	r3, #9
 8014660:	dc02      	bgt.n	8014668 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014662:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014664:	843b      	strh	r3, [r7, #32]
 8014666:	e009      	b.n	801467c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014668:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801466c:	2b09      	cmp	r3, #9
 801466e:	dc02      	bgt.n	8014676 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014670:	8bfb      	ldrh	r3, [r7, #30]
 8014672:	843b      	strh	r3, [r7, #32]
 8014674:	e002      	b.n	801467c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801467a:	e054      	b.n	8014726 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801467c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014680:	2b09      	cmp	r3, #9
 8014682:	dd06      	ble.n	8014692 <etharp_find_entry+0x236>
 8014684:	4b2b      	ldr	r3, [pc, #172]	; (8014734 <etharp_find_entry+0x2d8>)
 8014686:	f240 127f 	movw	r2, #383	; 0x17f
 801468a:	492e      	ldr	r1, [pc, #184]	; (8014744 <etharp_find_entry+0x2e8>)
 801468c:	482b      	ldr	r0, [pc, #172]	; (801473c <etharp_find_entry+0x2e0>)
 801468e:	f002 fe85 	bl	801739c <iprintf>
    etharp_free_entry(i);
 8014692:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014696:	4618      	mov	r0, r3
 8014698:	f7ff fe06 	bl	80142a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801469c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80146a0:	2b09      	cmp	r3, #9
 80146a2:	dd06      	ble.n	80146b2 <etharp_find_entry+0x256>
 80146a4:	4b23      	ldr	r3, [pc, #140]	; (8014734 <etharp_find_entry+0x2d8>)
 80146a6:	f240 1283 	movw	r2, #387	; 0x183
 80146aa:	4926      	ldr	r1, [pc, #152]	; (8014744 <etharp_find_entry+0x2e8>)
 80146ac:	4823      	ldr	r0, [pc, #140]	; (801473c <etharp_find_entry+0x2e0>)
 80146ae:	f002 fe75 	bl	801739c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80146b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146b6:	491e      	ldr	r1, [pc, #120]	; (8014730 <etharp_find_entry+0x2d4>)
 80146b8:	4613      	mov	r3, r2
 80146ba:	005b      	lsls	r3, r3, #1
 80146bc:	4413      	add	r3, r2
 80146be:	00db      	lsls	r3, r3, #3
 80146c0:	440b      	add	r3, r1
 80146c2:	3314      	adds	r3, #20
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d006      	beq.n	80146d8 <etharp_find_entry+0x27c>
 80146ca:	4b1a      	ldr	r3, [pc, #104]	; (8014734 <etharp_find_entry+0x2d8>)
 80146cc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80146d0:	491d      	ldr	r1, [pc, #116]	; (8014748 <etharp_find_entry+0x2ec>)
 80146d2:	481a      	ldr	r0, [pc, #104]	; (801473c <etharp_find_entry+0x2e0>)
 80146d4:	f002 fe62 	bl	801739c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d00b      	beq.n	80146f6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80146de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	6819      	ldr	r1, [r3, #0]
 80146e6:	4812      	ldr	r0, [pc, #72]	; (8014730 <etharp_find_entry+0x2d4>)
 80146e8:	4613      	mov	r3, r2
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	4413      	add	r3, r2
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	4403      	add	r3, r0
 80146f2:	3304      	adds	r3, #4
 80146f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80146f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146fa:	490d      	ldr	r1, [pc, #52]	; (8014730 <etharp_find_entry+0x2d4>)
 80146fc:	4613      	mov	r3, r2
 80146fe:	005b      	lsls	r3, r3, #1
 8014700:	4413      	add	r3, r2
 8014702:	00db      	lsls	r3, r3, #3
 8014704:	440b      	add	r3, r1
 8014706:	3312      	adds	r3, #18
 8014708:	2200      	movs	r2, #0
 801470a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801470c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014710:	4907      	ldr	r1, [pc, #28]	; (8014730 <etharp_find_entry+0x2d4>)
 8014712:	4613      	mov	r3, r2
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4413      	add	r3, r2
 8014718:	00db      	lsls	r3, r3, #3
 801471a:	440b      	add	r3, r1
 801471c:	3308      	adds	r3, #8
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014722:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3728      	adds	r7, #40	; 0x28
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	20004bc4 	.word	0x20004bc4
 8014734:	0801c04c 	.word	0x0801c04c
 8014738:	0801c084 	.word	0x0801c084
 801473c:	0801c0c4 	.word	0x0801c0c4
 8014740:	0801c0ec 	.word	0x0801c0ec
 8014744:	0801c104 	.word	0x0801c104
 8014748:	0801c118 	.word	0x0801c118

0801474c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b088      	sub	sp, #32
 8014750:	af02      	add	r7, sp, #8
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	607a      	str	r2, [r7, #4]
 8014758:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014760:	2b06      	cmp	r3, #6
 8014762:	d006      	beq.n	8014772 <etharp_update_arp_entry+0x26>
 8014764:	4b48      	ldr	r3, [pc, #288]	; (8014888 <etharp_update_arp_entry+0x13c>)
 8014766:	f240 12a9 	movw	r2, #425	; 0x1a9
 801476a:	4948      	ldr	r1, [pc, #288]	; (801488c <etharp_update_arp_entry+0x140>)
 801476c:	4848      	ldr	r0, [pc, #288]	; (8014890 <etharp_update_arp_entry+0x144>)
 801476e:	f002 fe15 	bl	801739c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d012      	beq.n	801479e <etharp_update_arp_entry+0x52>
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d00e      	beq.n	801479e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	68f9      	ldr	r1, [r7, #12]
 8014786:	4618      	mov	r0, r3
 8014788:	f001 f920 	bl	80159cc <ip4_addr_isbroadcast_u32>
 801478c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801478e:	2b00      	cmp	r3, #0
 8014790:	d105      	bne.n	801479e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014792:	68bb      	ldr	r3, [r7, #8]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801479a:	2be0      	cmp	r3, #224	; 0xe0
 801479c:	d102      	bne.n	80147a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801479e:	f06f 030f 	mvn.w	r3, #15
 80147a2:	e06c      	b.n	801487e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80147a4:	78fb      	ldrb	r3, [r7, #3]
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	4619      	mov	r1, r3
 80147aa:	68b8      	ldr	r0, [r7, #8]
 80147ac:	f7ff fe56 	bl	801445c <etharp_find_entry>
 80147b0:	4603      	mov	r3, r0
 80147b2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80147b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	da02      	bge.n	80147c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80147bc:	8afb      	ldrh	r3, [r7, #22]
 80147be:	b25b      	sxtb	r3, r3
 80147c0:	e05d      	b.n	801487e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80147c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147c6:	4933      	ldr	r1, [pc, #204]	; (8014894 <etharp_update_arp_entry+0x148>)
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	440b      	add	r3, r1
 80147d2:	3314      	adds	r3, #20
 80147d4:	2202      	movs	r2, #2
 80147d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80147d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147dc:	492d      	ldr	r1, [pc, #180]	; (8014894 <etharp_update_arp_entry+0x148>)
 80147de:	4613      	mov	r3, r2
 80147e0:	005b      	lsls	r3, r3, #1
 80147e2:	4413      	add	r3, r2
 80147e4:	00db      	lsls	r3, r3, #3
 80147e6:	440b      	add	r3, r1
 80147e8:	3308      	adds	r3, #8
 80147ea:	68fa      	ldr	r2, [r7, #12]
 80147ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80147ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147f2:	4613      	mov	r3, r2
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	4413      	add	r3, r2
 80147f8:	00db      	lsls	r3, r3, #3
 80147fa:	3308      	adds	r3, #8
 80147fc:	4a25      	ldr	r2, [pc, #148]	; (8014894 <etharp_update_arp_entry+0x148>)
 80147fe:	4413      	add	r3, r2
 8014800:	3304      	adds	r3, #4
 8014802:	2206      	movs	r2, #6
 8014804:	6879      	ldr	r1, [r7, #4]
 8014806:	4618      	mov	r0, r3
 8014808:	f002 f954 	bl	8016ab4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801480c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014810:	4920      	ldr	r1, [pc, #128]	; (8014894 <etharp_update_arp_entry+0x148>)
 8014812:	4613      	mov	r3, r2
 8014814:	005b      	lsls	r3, r3, #1
 8014816:	4413      	add	r3, r2
 8014818:	00db      	lsls	r3, r3, #3
 801481a:	440b      	add	r3, r1
 801481c:	3312      	adds	r3, #18
 801481e:	2200      	movs	r2, #0
 8014820:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014822:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014826:	491b      	ldr	r1, [pc, #108]	; (8014894 <etharp_update_arp_entry+0x148>)
 8014828:	4613      	mov	r3, r2
 801482a:	005b      	lsls	r3, r3, #1
 801482c:	4413      	add	r3, r2
 801482e:	00db      	lsls	r3, r3, #3
 8014830:	440b      	add	r3, r1
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d021      	beq.n	801487c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014838:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801483c:	4915      	ldr	r1, [pc, #84]	; (8014894 <etharp_update_arp_entry+0x148>)
 801483e:	4613      	mov	r3, r2
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	4413      	add	r3, r2
 8014844:	00db      	lsls	r3, r3, #3
 8014846:	440b      	add	r3, r1
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801484c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014850:	4910      	ldr	r1, [pc, #64]	; (8014894 <etharp_update_arp_entry+0x148>)
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	2200      	movs	r2, #0
 801485e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	6939      	ldr	r1, [r7, #16]
 8014870:	68f8      	ldr	r0, [r7, #12]
 8014872:	f001 ffb3 	bl	80167dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014876:	6938      	ldr	r0, [r7, #16]
 8014878:	f7f7 fc4a 	bl	800c110 <pbuf_free>
  }
  return ERR_OK;
 801487c:	2300      	movs	r3, #0
}
 801487e:	4618      	mov	r0, r3
 8014880:	3718      	adds	r7, #24
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	0801c04c 	.word	0x0801c04c
 801488c:	0801c144 	.word	0x0801c144
 8014890:	0801c0c4 	.word	0x0801c0c4
 8014894:	20004bc4 	.word	0x20004bc4

08014898 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148a0:	2300      	movs	r3, #0
 80148a2:	60fb      	str	r3, [r7, #12]
 80148a4:	e01e      	b.n	80148e4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80148a6:	4913      	ldr	r1, [pc, #76]	; (80148f4 <etharp_cleanup_netif+0x5c>)
 80148a8:	68fa      	ldr	r2, [r7, #12]
 80148aa:	4613      	mov	r3, r2
 80148ac:	005b      	lsls	r3, r3, #1
 80148ae:	4413      	add	r3, r2
 80148b0:	00db      	lsls	r3, r3, #3
 80148b2:	440b      	add	r3, r1
 80148b4:	3314      	adds	r3, #20
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80148ba:	7afb      	ldrb	r3, [r7, #11]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00e      	beq.n	80148de <etharp_cleanup_netif+0x46>
 80148c0:	490c      	ldr	r1, [pc, #48]	; (80148f4 <etharp_cleanup_netif+0x5c>)
 80148c2:	68fa      	ldr	r2, [r7, #12]
 80148c4:	4613      	mov	r3, r2
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	4413      	add	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	440b      	add	r3, r1
 80148ce:	3308      	adds	r3, #8
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d102      	bne.n	80148de <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f7ff fce5 	bl	80142a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	3301      	adds	r3, #1
 80148e2:	60fb      	str	r3, [r7, #12]
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b09      	cmp	r3, #9
 80148e8:	dddd      	ble.n	80148a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 80148ea:	bf00      	nop
 80148ec:	bf00      	nop
 80148ee:	3710      	adds	r7, #16
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	20004bc4 	.word	0x20004bc4

080148f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80148f8:	b5b0      	push	{r4, r5, r7, lr}
 80148fa:	b08a      	sub	sp, #40	; 0x28
 80148fc:	af04      	add	r7, sp, #16
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d107      	bne.n	8014918 <etharp_input+0x20>
 8014908:	4b3f      	ldr	r3, [pc, #252]	; (8014a08 <etharp_input+0x110>)
 801490a:	f240 228a 	movw	r2, #650	; 0x28a
 801490e:	493f      	ldr	r1, [pc, #252]	; (8014a0c <etharp_input+0x114>)
 8014910:	483f      	ldr	r0, [pc, #252]	; (8014a10 <etharp_input+0x118>)
 8014912:	f002 fd43 	bl	801739c <iprintf>
 8014916:	e074      	b.n	8014a02 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	685b      	ldr	r3, [r3, #4]
 801491c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	881b      	ldrh	r3, [r3, #0]
 8014922:	b29b      	uxth	r3, r3
 8014924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014928:	d10c      	bne.n	8014944 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801492e:	2b06      	cmp	r3, #6
 8014930:	d108      	bne.n	8014944 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014936:	2b04      	cmp	r3, #4
 8014938:	d104      	bne.n	8014944 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	885b      	ldrh	r3, [r3, #2]
 801493e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014940:	2b08      	cmp	r3, #8
 8014942:	d003      	beq.n	801494c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7f7 fbe3 	bl	800c110 <pbuf_free>
    return;
 801494a:	e05a      	b.n	8014a02 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	330e      	adds	r3, #14
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	3318      	adds	r3, #24
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801495c:	683b      	ldr	r3, [r7, #0]
 801495e:	3304      	adds	r3, #4
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d102      	bne.n	801496c <etharp_input+0x74>
    for_us = 0;
 8014966:	2300      	movs	r3, #0
 8014968:	75fb      	strb	r3, [r7, #23]
 801496a:	e009      	b.n	8014980 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801496c:	68ba      	ldr	r2, [r7, #8]
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	3304      	adds	r3, #4
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	429a      	cmp	r2, r3
 8014976:	bf0c      	ite	eq
 8014978:	2301      	moveq	r3, #1
 801497a:	2300      	movne	r3, #0
 801497c:	b2db      	uxtb	r3, r3
 801497e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	f103 0208 	add.w	r2, r3, #8
 8014986:	7dfb      	ldrb	r3, [r7, #23]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d001      	beq.n	8014990 <etharp_input+0x98>
 801498c:	2301      	movs	r3, #1
 801498e:	e000      	b.n	8014992 <etharp_input+0x9a>
 8014990:	2302      	movs	r3, #2
 8014992:	f107 010c 	add.w	r1, r7, #12
 8014996:	6838      	ldr	r0, [r7, #0]
 8014998:	f7ff fed8 	bl	801474c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	88db      	ldrh	r3, [r3, #6]
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149a6:	d003      	beq.n	80149b0 <etharp_input+0xb8>
 80149a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149ac:	d01e      	beq.n	80149ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80149ae:	e025      	b.n	80149fc <etharp_input+0x104>
      if (for_us) {
 80149b0:	7dfb      	ldrb	r3, [r7, #23]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d021      	beq.n	80149fa <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80149cc:	693a      	ldr	r2, [r7, #16]
 80149ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 80149d0:	2102      	movs	r1, #2
 80149d2:	9103      	str	r1, [sp, #12]
 80149d4:	f107 010c 	add.w	r1, r7, #12
 80149d8:	9102      	str	r1, [sp, #8]
 80149da:	9201      	str	r2, [sp, #4]
 80149dc:	9300      	str	r3, [sp, #0]
 80149de:	462b      	mov	r3, r5
 80149e0:	4622      	mov	r2, r4
 80149e2:	4601      	mov	r1, r0
 80149e4:	6838      	ldr	r0, [r7, #0]
 80149e6:	f000 faef 	bl	8014fc8 <etharp_raw>
      break;
 80149ea:	e006      	b.n	80149fa <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80149ec:	f107 030c 	add.w	r3, r7, #12
 80149f0:	4619      	mov	r1, r3
 80149f2:	6838      	ldr	r0, [r7, #0]
 80149f4:	f7fe f9fc 	bl	8012df0 <dhcp_arp_reply>
      break;
 80149f8:	e000      	b.n	80149fc <etharp_input+0x104>
      break;
 80149fa:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f7f7 fb87 	bl	800c110 <pbuf_free>
}
 8014a02:	3718      	adds	r7, #24
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bdb0      	pop	{r4, r5, r7, pc}
 8014a08:	0801c04c 	.word	0x0801c04c
 8014a0c:	0801c19c 	.word	0x0801c19c
 8014a10:	0801c0c4 	.word	0x0801c0c4

08014a14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b086      	sub	sp, #24
 8014a18:	af02      	add	r7, sp, #8
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014a22:	79fa      	ldrb	r2, [r7, #7]
 8014a24:	4944      	ldr	r1, [pc, #272]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014a26:	4613      	mov	r3, r2
 8014a28:	005b      	lsls	r3, r3, #1
 8014a2a:	4413      	add	r3, r2
 8014a2c:	00db      	lsls	r3, r3, #3
 8014a2e:	440b      	add	r3, r1
 8014a30:	3314      	adds	r3, #20
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d806      	bhi.n	8014a46 <etharp_output_to_arp_index+0x32>
 8014a38:	4b40      	ldr	r3, [pc, #256]	; (8014b3c <etharp_output_to_arp_index+0x128>)
 8014a3a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014a3e:	4940      	ldr	r1, [pc, #256]	; (8014b40 <etharp_output_to_arp_index+0x12c>)
 8014a40:	4840      	ldr	r0, [pc, #256]	; (8014b44 <etharp_output_to_arp_index+0x130>)
 8014a42:	f002 fcab 	bl	801739c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014a46:	79fa      	ldrb	r2, [r7, #7]
 8014a48:	493b      	ldr	r1, [pc, #236]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4413      	add	r3, r2
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	440b      	add	r3, r1
 8014a54:	3314      	adds	r3, #20
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	2b02      	cmp	r3, #2
 8014a5a:	d153      	bne.n	8014b04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014a5c:	79fa      	ldrb	r2, [r7, #7]
 8014a5e:	4936      	ldr	r1, [pc, #216]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014a60:	4613      	mov	r3, r2
 8014a62:	005b      	lsls	r3, r3, #1
 8014a64:	4413      	add	r3, r2
 8014a66:	00db      	lsls	r3, r3, #3
 8014a68:	440b      	add	r3, r1
 8014a6a:	3312      	adds	r3, #18
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014a72:	d919      	bls.n	8014aa8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014a74:	79fa      	ldrb	r2, [r7, #7]
 8014a76:	4613      	mov	r3, r2
 8014a78:	005b      	lsls	r3, r3, #1
 8014a7a:	4413      	add	r3, r2
 8014a7c:	00db      	lsls	r3, r3, #3
 8014a7e:	4a2e      	ldr	r2, [pc, #184]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014a80:	4413      	add	r3, r2
 8014a82:	3304      	adds	r3, #4
 8014a84:	4619      	mov	r1, r3
 8014a86:	68f8      	ldr	r0, [r7, #12]
 8014a88:	f000 fb4c 	bl	8015124 <etharp_request>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d138      	bne.n	8014b04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a92:	79fa      	ldrb	r2, [r7, #7]
 8014a94:	4928      	ldr	r1, [pc, #160]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	4413      	add	r3, r2
 8014a9c:	00db      	lsls	r3, r3, #3
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3314      	adds	r3, #20
 8014aa2:	2203      	movs	r2, #3
 8014aa4:	701a      	strb	r2, [r3, #0]
 8014aa6:	e02d      	b.n	8014b04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014aa8:	79fa      	ldrb	r2, [r7, #7]
 8014aaa:	4923      	ldr	r1, [pc, #140]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014aac:	4613      	mov	r3, r2
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	4413      	add	r3, r2
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	440b      	add	r3, r1
 8014ab6:	3312      	adds	r3, #18
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014abe:	d321      	bcc.n	8014b04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014ac0:	79fa      	ldrb	r2, [r7, #7]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	005b      	lsls	r3, r3, #1
 8014ac6:	4413      	add	r3, r2
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	4a1b      	ldr	r2, [pc, #108]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014acc:	4413      	add	r3, r2
 8014ace:	1d19      	adds	r1, r3, #4
 8014ad0:	79fa      	ldrb	r2, [r7, #7]
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	005b      	lsls	r3, r3, #1
 8014ad6:	4413      	add	r3, r2
 8014ad8:	00db      	lsls	r3, r3, #3
 8014ada:	3308      	adds	r3, #8
 8014adc:	4a16      	ldr	r2, [pc, #88]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014ade:	4413      	add	r3, r2
 8014ae0:	3304      	adds	r3, #4
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f000 fafb 	bl	80150e0 <etharp_request_dst>
 8014aea:	4603      	mov	r3, r0
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d109      	bne.n	8014b04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014af0:	79fa      	ldrb	r2, [r7, #7]
 8014af2:	4911      	ldr	r1, [pc, #68]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014af4:	4613      	mov	r3, r2
 8014af6:	005b      	lsls	r3, r3, #1
 8014af8:	4413      	add	r3, r2
 8014afa:	00db      	lsls	r3, r3, #3
 8014afc:	440b      	add	r3, r1
 8014afe:	3314      	adds	r3, #20
 8014b00:	2203      	movs	r2, #3
 8014b02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014b0a:	79fa      	ldrb	r2, [r7, #7]
 8014b0c:	4613      	mov	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4413      	add	r3, r2
 8014b12:	00db      	lsls	r3, r3, #3
 8014b14:	3308      	adds	r3, #8
 8014b16:	4a08      	ldr	r2, [pc, #32]	; (8014b38 <etharp_output_to_arp_index+0x124>)
 8014b18:	4413      	add	r3, r2
 8014b1a:	3304      	adds	r3, #4
 8014b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b20:	9200      	str	r2, [sp, #0]
 8014b22:	460a      	mov	r2, r1
 8014b24:	68b9      	ldr	r1, [r7, #8]
 8014b26:	68f8      	ldr	r0, [r7, #12]
 8014b28:	f001 fe58 	bl	80167dc <ethernet_output>
 8014b2c:	4603      	mov	r3, r0
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3710      	adds	r7, #16
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	20004bc4 	.word	0x20004bc4
 8014b3c:	0801c04c 	.word	0x0801c04c
 8014b40:	0801c1bc 	.word	0x0801c1bc
 8014b44:	0801c0c4 	.word	0x0801c0c4

08014b48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b08a      	sub	sp, #40	; 0x28
 8014b4c:	af02      	add	r7, sp, #8
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
 8014b52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d106      	bne.n	8014b6c <etharp_output+0x24>
 8014b5e:	4b73      	ldr	r3, [pc, #460]	; (8014d2c <etharp_output+0x1e4>)
 8014b60:	f240 321e 	movw	r2, #798	; 0x31e
 8014b64:	4972      	ldr	r1, [pc, #456]	; (8014d30 <etharp_output+0x1e8>)
 8014b66:	4873      	ldr	r0, [pc, #460]	; (8014d34 <etharp_output+0x1ec>)
 8014b68:	f002 fc18 	bl	801739c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <etharp_output+0x38>
 8014b72:	4b6e      	ldr	r3, [pc, #440]	; (8014d2c <etharp_output+0x1e4>)
 8014b74:	f240 321f 	movw	r2, #799	; 0x31f
 8014b78:	496f      	ldr	r1, [pc, #444]	; (8014d38 <etharp_output+0x1f0>)
 8014b7a:	486e      	ldr	r0, [pc, #440]	; (8014d34 <etharp_output+0x1ec>)
 8014b7c:	f002 fc0e 	bl	801739c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d106      	bne.n	8014b94 <etharp_output+0x4c>
 8014b86:	4b69      	ldr	r3, [pc, #420]	; (8014d2c <etharp_output+0x1e4>)
 8014b88:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014b8c:	496b      	ldr	r1, [pc, #428]	; (8014d3c <etharp_output+0x1f4>)
 8014b8e:	4869      	ldr	r0, [pc, #420]	; (8014d34 <etharp_output+0x1ec>)
 8014b90:	f002 fc04 	bl	801739c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	68f9      	ldr	r1, [r7, #12]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f000 ff16 	bl	80159cc <ip4_addr_isbroadcast_u32>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d002      	beq.n	8014bac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014ba6:	4b66      	ldr	r3, [pc, #408]	; (8014d40 <etharp_output+0x1f8>)
 8014ba8:	61fb      	str	r3, [r7, #28]
 8014baa:	e0af      	b.n	8014d0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014bb4:	2be0      	cmp	r3, #224	; 0xe0
 8014bb6:	d118      	bne.n	8014bea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014bb8:	2301      	movs	r3, #1
 8014bba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014bc0:	235e      	movs	r3, #94	; 0x5e
 8014bc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	3301      	adds	r3, #1
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	3302      	adds	r3, #2
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	3303      	adds	r3, #3
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014be2:	f107 0310 	add.w	r3, r7, #16
 8014be6:	61fb      	str	r3, [r7, #28]
 8014be8:	e090      	b.n	8014d0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	681a      	ldr	r2, [r3, #0]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	3304      	adds	r3, #4
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	405a      	eors	r2, r3
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	3308      	adds	r3, #8
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	4013      	ands	r3, r2
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d012      	beq.n	8014c28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014c08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d00b      	beq.n	8014c28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	330c      	adds	r3, #12
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d003      	beq.n	8014c22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	330c      	adds	r3, #12
 8014c1e:	61bb      	str	r3, [r7, #24]
 8014c20:	e002      	b.n	8014c28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014c22:	f06f 0303 	mvn.w	r3, #3
 8014c26:	e07d      	b.n	8014d24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c28:	4b46      	ldr	r3, [pc, #280]	; (8014d44 <etharp_output+0x1fc>)
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	4a46      	ldr	r2, [pc, #280]	; (8014d48 <etharp_output+0x200>)
 8014c30:	460b      	mov	r3, r1
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	440b      	add	r3, r1
 8014c36:	00db      	lsls	r3, r3, #3
 8014c38:	4413      	add	r3, r2
 8014c3a:	3314      	adds	r3, #20
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	2b01      	cmp	r3, #1
 8014c40:	d925      	bls.n	8014c8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014c42:	4b40      	ldr	r3, [pc, #256]	; (8014d44 <etharp_output+0x1fc>)
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	4619      	mov	r1, r3
 8014c48:	4a3f      	ldr	r2, [pc, #252]	; (8014d48 <etharp_output+0x200>)
 8014c4a:	460b      	mov	r3, r1
 8014c4c:	005b      	lsls	r3, r3, #1
 8014c4e:	440b      	add	r3, r1
 8014c50:	00db      	lsls	r3, r3, #3
 8014c52:	4413      	add	r3, r2
 8014c54:	3308      	adds	r3, #8
 8014c56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c58:	68fa      	ldr	r2, [r7, #12]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d117      	bne.n	8014c8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	4b38      	ldr	r3, [pc, #224]	; (8014d44 <etharp_output+0x1fc>)
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	4618      	mov	r0, r3
 8014c68:	4937      	ldr	r1, [pc, #220]	; (8014d48 <etharp_output+0x200>)
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	005b      	lsls	r3, r3, #1
 8014c6e:	4403      	add	r3, r0
 8014c70:	00db      	lsls	r3, r3, #3
 8014c72:	440b      	add	r3, r1
 8014c74:	3304      	adds	r3, #4
 8014c76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d108      	bne.n	8014c8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014c7c:	4b31      	ldr	r3, [pc, #196]	; (8014d44 <etharp_output+0x1fc>)
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	461a      	mov	r2, r3
 8014c82:	68b9      	ldr	r1, [r7, #8]
 8014c84:	68f8      	ldr	r0, [r7, #12]
 8014c86:	f7ff fec5 	bl	8014a14 <etharp_output_to_arp_index>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	e04a      	b.n	8014d24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c8e:	2300      	movs	r3, #0
 8014c90:	75fb      	strb	r3, [r7, #23]
 8014c92:	e031      	b.n	8014cf8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c94:	7dfa      	ldrb	r2, [r7, #23]
 8014c96:	492c      	ldr	r1, [pc, #176]	; (8014d48 <etharp_output+0x200>)
 8014c98:	4613      	mov	r3, r2
 8014c9a:	005b      	lsls	r3, r3, #1
 8014c9c:	4413      	add	r3, r2
 8014c9e:	00db      	lsls	r3, r3, #3
 8014ca0:	440b      	add	r3, r1
 8014ca2:	3314      	adds	r3, #20
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	2b01      	cmp	r3, #1
 8014ca8:	d923      	bls.n	8014cf2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014caa:	7dfa      	ldrb	r2, [r7, #23]
 8014cac:	4926      	ldr	r1, [pc, #152]	; (8014d48 <etharp_output+0x200>)
 8014cae:	4613      	mov	r3, r2
 8014cb0:	005b      	lsls	r3, r3, #1
 8014cb2:	4413      	add	r3, r2
 8014cb4:	00db      	lsls	r3, r3, #3
 8014cb6:	440b      	add	r3, r1
 8014cb8:	3308      	adds	r3, #8
 8014cba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014cbc:	68fa      	ldr	r2, [r7, #12]
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d117      	bne.n	8014cf2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	6819      	ldr	r1, [r3, #0]
 8014cc6:	7dfa      	ldrb	r2, [r7, #23]
 8014cc8:	481f      	ldr	r0, [pc, #124]	; (8014d48 <etharp_output+0x200>)
 8014cca:	4613      	mov	r3, r2
 8014ccc:	005b      	lsls	r3, r3, #1
 8014cce:	4413      	add	r3, r2
 8014cd0:	00db      	lsls	r3, r3, #3
 8014cd2:	4403      	add	r3, r0
 8014cd4:	3304      	adds	r3, #4
 8014cd6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014cd8:	4299      	cmp	r1, r3
 8014cda:	d10a      	bne.n	8014cf2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014cdc:	4a19      	ldr	r2, [pc, #100]	; (8014d44 <etharp_output+0x1fc>)
 8014cde:	7dfb      	ldrb	r3, [r7, #23]
 8014ce0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014ce2:	7dfb      	ldrb	r3, [r7, #23]
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	68b9      	ldr	r1, [r7, #8]
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	f7ff fe93 	bl	8014a14 <etharp_output_to_arp_index>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	e018      	b.n	8014d24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014cf2:	7dfb      	ldrb	r3, [r7, #23]
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	75fb      	strb	r3, [r7, #23]
 8014cf8:	7dfb      	ldrb	r3, [r7, #23]
 8014cfa:	2b09      	cmp	r3, #9
 8014cfc:	d9ca      	bls.n	8014c94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014cfe:	68ba      	ldr	r2, [r7, #8]
 8014d00:	69b9      	ldr	r1, [r7, #24]
 8014d02:	68f8      	ldr	r0, [r7, #12]
 8014d04:	f000 f822 	bl	8014d4c <etharp_query>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	e00b      	b.n	8014d24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d16:	9300      	str	r3, [sp, #0]
 8014d18:	69fb      	ldr	r3, [r7, #28]
 8014d1a:	68b9      	ldr	r1, [r7, #8]
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f001 fd5d 	bl	80167dc <ethernet_output>
 8014d22:	4603      	mov	r3, r0
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	3720      	adds	r7, #32
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	0801c04c 	.word	0x0801c04c
 8014d30:	0801c19c 	.word	0x0801c19c
 8014d34:	0801c0c4 	.word	0x0801c0c4
 8014d38:	0801c1ec 	.word	0x0801c1ec
 8014d3c:	0801c18c 	.word	0x0801c18c
 8014d40:	0801c8c8 	.word	0x0801c8c8
 8014d44:	20004cb4 	.word	0x20004cb4
 8014d48:	20004bc4 	.word	0x20004bc4

08014d4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b08c      	sub	sp, #48	; 0x30
 8014d50:	af02      	add	r7, sp, #8
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	332a      	adds	r3, #42	; 0x2a
 8014d5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014d5e:	23ff      	movs	r3, #255	; 0xff
 8014d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014d64:	2300      	movs	r3, #0
 8014d66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d68:	68bb      	ldr	r3, [r7, #8]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68f9      	ldr	r1, [r7, #12]
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f000 fe2c 	bl	80159cc <ip4_addr_isbroadcast_u32>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d10c      	bne.n	8014d94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d82:	2be0      	cmp	r3, #224	; 0xe0
 8014d84:	d006      	beq.n	8014d94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d003      	beq.n	8014d94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d102      	bne.n	8014d9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d94:	f06f 030f 	mvn.w	r3, #15
 8014d98:	e101      	b.n	8014f9e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	68b8      	ldr	r0, [r7, #8]
 8014da0:	f7ff fb5c 	bl	801445c <etharp_find_entry>
 8014da4:	4603      	mov	r3, r0
 8014da6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014da8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	da02      	bge.n	8014db6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014db0:	8a7b      	ldrh	r3, [r7, #18]
 8014db2:	b25b      	sxtb	r3, r3
 8014db4:	e0f3      	b.n	8014f9e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014db6:	8a7b      	ldrh	r3, [r7, #18]
 8014db8:	2b7e      	cmp	r3, #126	; 0x7e
 8014dba:	d906      	bls.n	8014dca <etharp_query+0x7e>
 8014dbc:	4b7a      	ldr	r3, [pc, #488]	; (8014fa8 <etharp_query+0x25c>)
 8014dbe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014dc2:	497a      	ldr	r1, [pc, #488]	; (8014fac <etharp_query+0x260>)
 8014dc4:	487a      	ldr	r0, [pc, #488]	; (8014fb0 <etharp_query+0x264>)
 8014dc6:	f002 fae9 	bl	801739c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014dca:	8a7b      	ldrh	r3, [r7, #18]
 8014dcc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014dce:	7c7a      	ldrb	r2, [r7, #17]
 8014dd0:	4978      	ldr	r1, [pc, #480]	; (8014fb4 <etharp_query+0x268>)
 8014dd2:	4613      	mov	r3, r2
 8014dd4:	005b      	lsls	r3, r3, #1
 8014dd6:	4413      	add	r3, r2
 8014dd8:	00db      	lsls	r3, r3, #3
 8014dda:	440b      	add	r3, r1
 8014ddc:	3314      	adds	r3, #20
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d115      	bne.n	8014e10 <etharp_query+0xc4>
    is_new_entry = 1;
 8014de4:	2301      	movs	r3, #1
 8014de6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014de8:	7c7a      	ldrb	r2, [r7, #17]
 8014dea:	4972      	ldr	r1, [pc, #456]	; (8014fb4 <etharp_query+0x268>)
 8014dec:	4613      	mov	r3, r2
 8014dee:	005b      	lsls	r3, r3, #1
 8014df0:	4413      	add	r3, r2
 8014df2:	00db      	lsls	r3, r3, #3
 8014df4:	440b      	add	r3, r1
 8014df6:	3314      	adds	r3, #20
 8014df8:	2201      	movs	r2, #1
 8014dfa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014dfc:	7c7a      	ldrb	r2, [r7, #17]
 8014dfe:	496d      	ldr	r1, [pc, #436]	; (8014fb4 <etharp_query+0x268>)
 8014e00:	4613      	mov	r3, r2
 8014e02:	005b      	lsls	r3, r3, #1
 8014e04:	4413      	add	r3, r2
 8014e06:	00db      	lsls	r3, r3, #3
 8014e08:	440b      	add	r3, r1
 8014e0a:	3308      	adds	r3, #8
 8014e0c:	68fa      	ldr	r2, [r7, #12]
 8014e0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014e10:	7c7a      	ldrb	r2, [r7, #17]
 8014e12:	4968      	ldr	r1, [pc, #416]	; (8014fb4 <etharp_query+0x268>)
 8014e14:	4613      	mov	r3, r2
 8014e16:	005b      	lsls	r3, r3, #1
 8014e18:	4413      	add	r3, r2
 8014e1a:	00db      	lsls	r3, r3, #3
 8014e1c:	440b      	add	r3, r1
 8014e1e:	3314      	adds	r3, #20
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	2b01      	cmp	r3, #1
 8014e24:	d011      	beq.n	8014e4a <etharp_query+0xfe>
 8014e26:	7c7a      	ldrb	r2, [r7, #17]
 8014e28:	4962      	ldr	r1, [pc, #392]	; (8014fb4 <etharp_query+0x268>)
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	4413      	add	r3, r2
 8014e30:	00db      	lsls	r3, r3, #3
 8014e32:	440b      	add	r3, r1
 8014e34:	3314      	adds	r3, #20
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	2b01      	cmp	r3, #1
 8014e3a:	d806      	bhi.n	8014e4a <etharp_query+0xfe>
 8014e3c:	4b5a      	ldr	r3, [pc, #360]	; (8014fa8 <etharp_query+0x25c>)
 8014e3e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014e42:	495d      	ldr	r1, [pc, #372]	; (8014fb8 <etharp_query+0x26c>)
 8014e44:	485a      	ldr	r0, [pc, #360]	; (8014fb0 <etharp_query+0x264>)
 8014e46:	f002 faa9 	bl	801739c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d102      	bne.n	8014e56 <etharp_query+0x10a>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d10c      	bne.n	8014e70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014e56:	68b9      	ldr	r1, [r7, #8]
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f000 f963 	bl	8015124 <etharp_request>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d102      	bne.n	8014e70 <etharp_query+0x124>
      return result;
 8014e6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e6e:	e096      	b.n	8014f9e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d106      	bne.n	8014e84 <etharp_query+0x138>
 8014e76:	4b4c      	ldr	r3, [pc, #304]	; (8014fa8 <etharp_query+0x25c>)
 8014e78:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014e7c:	494f      	ldr	r1, [pc, #316]	; (8014fbc <etharp_query+0x270>)
 8014e7e:	484c      	ldr	r0, [pc, #304]	; (8014fb0 <etharp_query+0x264>)
 8014e80:	f002 fa8c 	bl	801739c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014e84:	7c7a      	ldrb	r2, [r7, #17]
 8014e86:	494b      	ldr	r1, [pc, #300]	; (8014fb4 <etharp_query+0x268>)
 8014e88:	4613      	mov	r3, r2
 8014e8a:	005b      	lsls	r3, r3, #1
 8014e8c:	4413      	add	r3, r2
 8014e8e:	00db      	lsls	r3, r3, #3
 8014e90:	440b      	add	r3, r1
 8014e92:	3314      	adds	r3, #20
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	2b01      	cmp	r3, #1
 8014e98:	d917      	bls.n	8014eca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014e9a:	4a49      	ldr	r2, [pc, #292]	; (8014fc0 <etharp_query+0x274>)
 8014e9c:	7c7b      	ldrb	r3, [r7, #17]
 8014e9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014ea0:	7c7a      	ldrb	r2, [r7, #17]
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	00db      	lsls	r3, r3, #3
 8014eaa:	3308      	adds	r3, #8
 8014eac:	4a41      	ldr	r2, [pc, #260]	; (8014fb4 <etharp_query+0x268>)
 8014eae:	4413      	add	r3, r2
 8014eb0:	3304      	adds	r3, #4
 8014eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014eb6:	9200      	str	r2, [sp, #0]
 8014eb8:	697a      	ldr	r2, [r7, #20]
 8014eba:	6879      	ldr	r1, [r7, #4]
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f001 fc8d 	bl	80167dc <ethernet_output>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ec8:	e067      	b.n	8014f9a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014eca:	7c7a      	ldrb	r2, [r7, #17]
 8014ecc:	4939      	ldr	r1, [pc, #228]	; (8014fb4 <etharp_query+0x268>)
 8014ece:	4613      	mov	r3, r2
 8014ed0:	005b      	lsls	r3, r3, #1
 8014ed2:	4413      	add	r3, r2
 8014ed4:	00db      	lsls	r3, r3, #3
 8014ed6:	440b      	add	r3, r1
 8014ed8:	3314      	adds	r3, #20
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	2b01      	cmp	r3, #1
 8014ede:	d15c      	bne.n	8014f9a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ee8:	e01c      	b.n	8014f24 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014eea:	69fb      	ldr	r3, [r7, #28]
 8014eec:	895a      	ldrh	r2, [r3, #10]
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	891b      	ldrh	r3, [r3, #8]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d10a      	bne.n	8014f0c <etharp_query+0x1c0>
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d006      	beq.n	8014f0c <etharp_query+0x1c0>
 8014efe:	4b2a      	ldr	r3, [pc, #168]	; (8014fa8 <etharp_query+0x25c>)
 8014f00:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014f04:	492f      	ldr	r1, [pc, #188]	; (8014fc4 <etharp_query+0x278>)
 8014f06:	482a      	ldr	r0, [pc, #168]	; (8014fb0 <etharp_query+0x264>)
 8014f08:	f002 fa48 	bl	801739c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014f0c:	69fb      	ldr	r3, [r7, #28]
 8014f0e:	7b1b      	ldrb	r3, [r3, #12]
 8014f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d002      	beq.n	8014f1e <etharp_query+0x1d2>
        copy_needed = 1;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	61bb      	str	r3, [r7, #24]
        break;
 8014f1c:	e005      	b.n	8014f2a <etharp_query+0x1de>
      }
      p = p->next;
 8014f1e:	69fb      	ldr	r3, [r7, #28]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014f24:	69fb      	ldr	r3, [r7, #28]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d1df      	bne.n	8014eea <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d007      	beq.n	8014f40 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014f30:	687a      	ldr	r2, [r7, #4]
 8014f32:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014f36:	200e      	movs	r0, #14
 8014f38:	f7f7 fb62 	bl	800c600 <pbuf_clone>
 8014f3c:	61f8      	str	r0, [r7, #28]
 8014f3e:	e004      	b.n	8014f4a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014f44:	69f8      	ldr	r0, [r7, #28]
 8014f46:	f7f7 f989 	bl	800c25c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d021      	beq.n	8014f94 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014f50:	7c7a      	ldrb	r2, [r7, #17]
 8014f52:	4918      	ldr	r1, [pc, #96]	; (8014fb4 <etharp_query+0x268>)
 8014f54:	4613      	mov	r3, r2
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	4413      	add	r3, r2
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	440b      	add	r3, r1
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d00a      	beq.n	8014f7a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014f64:	7c7a      	ldrb	r2, [r7, #17]
 8014f66:	4913      	ldr	r1, [pc, #76]	; (8014fb4 <etharp_query+0x268>)
 8014f68:	4613      	mov	r3, r2
 8014f6a:	005b      	lsls	r3, r3, #1
 8014f6c:	4413      	add	r3, r2
 8014f6e:	00db      	lsls	r3, r3, #3
 8014f70:	440b      	add	r3, r1
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7f7 f8cb 	bl	800c110 <pbuf_free>
      }
      arp_table[i].q = p;
 8014f7a:	7c7a      	ldrb	r2, [r7, #17]
 8014f7c:	490d      	ldr	r1, [pc, #52]	; (8014fb4 <etharp_query+0x268>)
 8014f7e:	4613      	mov	r3, r2
 8014f80:	005b      	lsls	r3, r3, #1
 8014f82:	4413      	add	r3, r2
 8014f84:	00db      	lsls	r3, r3, #3
 8014f86:	440b      	add	r3, r1
 8014f88:	69fa      	ldr	r2, [r7, #28]
 8014f8a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f92:	e002      	b.n	8014f9a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014f94:	23ff      	movs	r3, #255	; 0xff
 8014f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3728      	adds	r7, #40	; 0x28
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
 8014fa6:	bf00      	nop
 8014fa8:	0801c04c 	.word	0x0801c04c
 8014fac:	0801c1f8 	.word	0x0801c1f8
 8014fb0:	0801c0c4 	.word	0x0801c0c4
 8014fb4:	20004bc4 	.word	0x20004bc4
 8014fb8:	0801c208 	.word	0x0801c208
 8014fbc:	0801c1ec 	.word	0x0801c1ec
 8014fc0:	20004cb4 	.word	0x20004cb4
 8014fc4:	0801c230 	.word	0x0801c230

08014fc8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08a      	sub	sp, #40	; 0x28
 8014fcc:	af02      	add	r7, sp, #8
 8014fce:	60f8      	str	r0, [r7, #12]
 8014fd0:	60b9      	str	r1, [r7, #8]
 8014fd2:	607a      	str	r2, [r7, #4]
 8014fd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d106      	bne.n	8014fee <etharp_raw+0x26>
 8014fe0:	4b3a      	ldr	r3, [pc, #232]	; (80150cc <etharp_raw+0x104>)
 8014fe2:	f240 4257 	movw	r2, #1111	; 0x457
 8014fe6:	493a      	ldr	r1, [pc, #232]	; (80150d0 <etharp_raw+0x108>)
 8014fe8:	483a      	ldr	r0, [pc, #232]	; (80150d4 <etharp_raw+0x10c>)
 8014fea:	f002 f9d7 	bl	801739c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014fee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ff2:	211c      	movs	r1, #28
 8014ff4:	200e      	movs	r0, #14
 8014ff6:	f7f6 fda7 	bl	800bb48 <pbuf_alloc>
 8014ffa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d102      	bne.n	8015008 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015006:	e05d      	b.n	80150c4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	895b      	ldrh	r3, [r3, #10]
 801500c:	2b1b      	cmp	r3, #27
 801500e:	d806      	bhi.n	801501e <etharp_raw+0x56>
 8015010:	4b2e      	ldr	r3, [pc, #184]	; (80150cc <etharp_raw+0x104>)
 8015012:	f240 4262 	movw	r2, #1122	; 0x462
 8015016:	4930      	ldr	r1, [pc, #192]	; (80150d8 <etharp_raw+0x110>)
 8015018:	482e      	ldr	r0, [pc, #184]	; (80150d4 <etharp_raw+0x10c>)
 801501a:	f002 f9bf 	bl	801739c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801501e:	69bb      	ldr	r3, [r7, #24]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015024:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015026:	4618      	mov	r0, r3
 8015028:	f7f5 fcba 	bl	800a9a0 <lwip_htons>
 801502c:	4603      	mov	r3, r0
 801502e:	461a      	mov	r2, r3
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801503a:	2b06      	cmp	r3, #6
 801503c:	d006      	beq.n	801504c <etharp_raw+0x84>
 801503e:	4b23      	ldr	r3, [pc, #140]	; (80150cc <etharp_raw+0x104>)
 8015040:	f240 4269 	movw	r2, #1129	; 0x469
 8015044:	4925      	ldr	r1, [pc, #148]	; (80150dc <etharp_raw+0x114>)
 8015046:	4823      	ldr	r0, [pc, #140]	; (80150d4 <etharp_raw+0x10c>)
 8015048:	f002 f9a8 	bl	801739c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	3308      	adds	r3, #8
 8015050:	2206      	movs	r2, #6
 8015052:	6839      	ldr	r1, [r7, #0]
 8015054:	4618      	mov	r0, r3
 8015056:	f001 fd2d 	bl	8016ab4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	3312      	adds	r3, #18
 801505e:	2206      	movs	r2, #6
 8015060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015062:	4618      	mov	r0, r3
 8015064:	f001 fd26 	bl	8016ab4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	330e      	adds	r3, #14
 801506c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801506e:	6812      	ldr	r2, [r2, #0]
 8015070:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015072:	697b      	ldr	r3, [r7, #20]
 8015074:	3318      	adds	r3, #24
 8015076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015078:	6812      	ldr	r2, [r2, #0]
 801507a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	2200      	movs	r2, #0
 8015080:	701a      	strb	r2, [r3, #0]
 8015082:	2200      	movs	r2, #0
 8015084:	f042 0201 	orr.w	r2, r2, #1
 8015088:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	2200      	movs	r2, #0
 801508e:	f042 0208 	orr.w	r2, r2, #8
 8015092:	709a      	strb	r2, [r3, #2]
 8015094:	2200      	movs	r2, #0
 8015096:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	2206      	movs	r2, #6
 801509c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2204      	movs	r2, #4
 80150a2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80150a4:	f640 0306 	movw	r3, #2054	; 0x806
 80150a8:	9300      	str	r3, [sp, #0]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	68ba      	ldr	r2, [r7, #8]
 80150ae:	69b9      	ldr	r1, [r7, #24]
 80150b0:	68f8      	ldr	r0, [r7, #12]
 80150b2:	f001 fb93 	bl	80167dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80150b6:	69b8      	ldr	r0, [r7, #24]
 80150b8:	f7f7 f82a 	bl	800c110 <pbuf_free>
  p = NULL;
 80150bc:	2300      	movs	r3, #0
 80150be:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80150c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3720      	adds	r7, #32
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	0801c04c 	.word	0x0801c04c
 80150d0:	0801c19c 	.word	0x0801c19c
 80150d4:	0801c0c4 	.word	0x0801c0c4
 80150d8:	0801c24c 	.word	0x0801c24c
 80150dc:	0801c280 	.word	0x0801c280

080150e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b088      	sub	sp, #32
 80150e4:	af04      	add	r7, sp, #16
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80150fc:	2201      	movs	r2, #1
 80150fe:	9203      	str	r2, [sp, #12]
 8015100:	68ba      	ldr	r2, [r7, #8]
 8015102:	9202      	str	r2, [sp, #8]
 8015104:	4a06      	ldr	r2, [pc, #24]	; (8015120 <etharp_request_dst+0x40>)
 8015106:	9201      	str	r2, [sp, #4]
 8015108:	9300      	str	r3, [sp, #0]
 801510a:	4603      	mov	r3, r0
 801510c:	687a      	ldr	r2, [r7, #4]
 801510e:	68f8      	ldr	r0, [r7, #12]
 8015110:	f7ff ff5a 	bl	8014fc8 <etharp_raw>
 8015114:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015116:	4618      	mov	r0, r3
 8015118:	3710      	adds	r7, #16
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	0801c8d0 	.word	0x0801c8d0

08015124 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801512e:	4a05      	ldr	r2, [pc, #20]	; (8015144 <etharp_request+0x20>)
 8015130:	6839      	ldr	r1, [r7, #0]
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7ff ffd4 	bl	80150e0 <etharp_request_dst>
 8015138:	4603      	mov	r3, r0
}
 801513a:	4618      	mov	r0, r3
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}
 8015142:	bf00      	nop
 8015144:	0801c8c8 	.word	0x0801c8c8

08015148 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b08e      	sub	sp, #56	; 0x38
 801514c:	af04      	add	r7, sp, #16
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015152:	4b79      	ldr	r3, [pc, #484]	; (8015338 <icmp_input+0x1f0>)
 8015154:	689b      	ldr	r3, [r3, #8]
 8015156:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	f003 030f 	and.w	r3, r3, #15
 8015160:	b2db      	uxtb	r3, r3
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	b2db      	uxtb	r3, r3
 8015166:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801516a:	2b13      	cmp	r3, #19
 801516c:	f240 80cd 	bls.w	801530a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	895b      	ldrh	r3, [r3, #10]
 8015174:	2b03      	cmp	r3, #3
 8015176:	f240 80ca 	bls.w	801530e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	685b      	ldr	r3, [r3, #4]
 801517e:	781b      	ldrb	r3, [r3, #0]
 8015180:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015184:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015188:	2b00      	cmp	r3, #0
 801518a:	f000 80b7 	beq.w	80152fc <icmp_input+0x1b4>
 801518e:	2b08      	cmp	r3, #8
 8015190:	f040 80b7 	bne.w	8015302 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015194:	4b69      	ldr	r3, [pc, #420]	; (801533c <icmp_input+0x1f4>)
 8015196:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015198:	4b67      	ldr	r3, [pc, #412]	; (8015338 <icmp_input+0x1f0>)
 801519a:	695b      	ldr	r3, [r3, #20]
 801519c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151a0:	2be0      	cmp	r3, #224	; 0xe0
 80151a2:	f000 80bb 	beq.w	801531c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80151a6:	4b64      	ldr	r3, [pc, #400]	; (8015338 <icmp_input+0x1f0>)
 80151a8:	695b      	ldr	r3, [r3, #20]
 80151aa:	4a63      	ldr	r2, [pc, #396]	; (8015338 <icmp_input+0x1f0>)
 80151ac:	6812      	ldr	r2, [r2, #0]
 80151ae:	4611      	mov	r1, r2
 80151b0:	4618      	mov	r0, r3
 80151b2:	f000 fc0b 	bl	80159cc <ip4_addr_isbroadcast_u32>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f040 80b1 	bne.w	8015320 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	891b      	ldrh	r3, [r3, #8]
 80151c2:	2b07      	cmp	r3, #7
 80151c4:	f240 80a5 	bls.w	8015312 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80151c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151ca:	330e      	adds	r3, #14
 80151cc:	4619      	mov	r1, r3
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f7f6 ff08 	bl	800bfe4 <pbuf_add_header>
 80151d4:	4603      	mov	r3, r0
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d04b      	beq.n	8015272 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	891a      	ldrh	r2, [r3, #8]
 80151de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151e0:	4413      	add	r3, r2
 80151e2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	891b      	ldrh	r3, [r3, #8]
 80151e8:	8b7a      	ldrh	r2, [r7, #26]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	f0c0 809a 	bcc.w	8015324 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80151f0:	8b7b      	ldrh	r3, [r7, #26]
 80151f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151f6:	4619      	mov	r1, r3
 80151f8:	200e      	movs	r0, #14
 80151fa:	f7f6 fca5 	bl	800bb48 <pbuf_alloc>
 80151fe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 8090 	beq.w	8015328 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	895b      	ldrh	r3, [r3, #10]
 801520c:	461a      	mov	r2, r3
 801520e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015210:	3308      	adds	r3, #8
 8015212:	429a      	cmp	r2, r3
 8015214:	d203      	bcs.n	801521e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015216:	6978      	ldr	r0, [r7, #20]
 8015218:	f7f6 ff7a 	bl	800c110 <pbuf_free>
          goto icmperr;
 801521c:	e085      	b.n	801532a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015224:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015226:	4618      	mov	r0, r3
 8015228:	f001 fc44 	bl	8016ab4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801522c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801522e:	4619      	mov	r1, r3
 8015230:	6978      	ldr	r0, [r7, #20]
 8015232:	f7f6 fee7 	bl	800c004 <pbuf_remove_header>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d009      	beq.n	8015250 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801523c:	4b40      	ldr	r3, [pc, #256]	; (8015340 <icmp_input+0x1f8>)
 801523e:	22b6      	movs	r2, #182	; 0xb6
 8015240:	4940      	ldr	r1, [pc, #256]	; (8015344 <icmp_input+0x1fc>)
 8015242:	4841      	ldr	r0, [pc, #260]	; (8015348 <icmp_input+0x200>)
 8015244:	f002 f8aa 	bl	801739c <iprintf>
          pbuf_free(r);
 8015248:	6978      	ldr	r0, [r7, #20]
 801524a:	f7f6 ff61 	bl	800c110 <pbuf_free>
          goto icmperr;
 801524e:	e06c      	b.n	801532a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015250:	6879      	ldr	r1, [r7, #4]
 8015252:	6978      	ldr	r0, [r7, #20]
 8015254:	f7f7 f890 	bl	800c378 <pbuf_copy>
 8015258:	4603      	mov	r3, r0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d003      	beq.n	8015266 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801525e:	6978      	ldr	r0, [r7, #20]
 8015260:	f7f6 ff56 	bl	800c110 <pbuf_free>
          goto icmperr;
 8015264:	e061      	b.n	801532a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015266:	6878      	ldr	r0, [r7, #4]
 8015268:	f7f6 ff52 	bl	800c110 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	607b      	str	r3, [r7, #4]
 8015270:	e00f      	b.n	8015292 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015274:	330e      	adds	r3, #14
 8015276:	4619      	mov	r1, r3
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7f6 fec3 	bl	800c004 <pbuf_remove_header>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d006      	beq.n	8015292 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015284:	4b2e      	ldr	r3, [pc, #184]	; (8015340 <icmp_input+0x1f8>)
 8015286:	22c7      	movs	r2, #199	; 0xc7
 8015288:	4930      	ldr	r1, [pc, #192]	; (801534c <icmp_input+0x204>)
 801528a:	482f      	ldr	r0, [pc, #188]	; (8015348 <icmp_input+0x200>)
 801528c:	f002 f886 	bl	801739c <iprintf>
          goto icmperr;
 8015290:	e04b      	b.n	801532a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	685b      	ldr	r3, [r3, #4]
 8015296:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801529a:	4619      	mov	r1, r3
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7f6 fea1 	bl	800bfe4 <pbuf_add_header>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d12b      	bne.n	8015300 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	685b      	ldr	r3, [r3, #4]
 80152ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80152b6:	4b20      	ldr	r3, [pc, #128]	; (8015338 <icmp_input+0x1f0>)
 80152b8:	691a      	ldr	r2, [r3, #16]
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80152be:	693b      	ldr	r3, [r7, #16]
 80152c0:	2200      	movs	r2, #0
 80152c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80152c4:	693b      	ldr	r3, [r7, #16]
 80152c6:	2200      	movs	r2, #0
 80152c8:	709a      	strb	r2, [r3, #2]
 80152ca:	2200      	movs	r2, #0
 80152cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	22ff      	movs	r2, #255	; 0xff
 80152d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2200      	movs	r2, #0
 80152d8:	729a      	strb	r2, [r3, #10]
 80152da:	2200      	movs	r2, #0
 80152dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	9302      	str	r3, [sp, #8]
 80152e2:	2301      	movs	r3, #1
 80152e4:	9301      	str	r3, [sp, #4]
 80152e6:	2300      	movs	r3, #0
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	23ff      	movs	r3, #255	; 0xff
 80152ec:	2200      	movs	r2, #0
 80152ee:	69f9      	ldr	r1, [r7, #28]
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f000 fa93 	bl	801581c <ip4_output_if>
 80152f6:	4603      	mov	r3, r0
 80152f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80152fa:	e001      	b.n	8015300 <icmp_input+0x1b8>
      break;
 80152fc:	bf00      	nop
 80152fe:	e000      	b.n	8015302 <icmp_input+0x1ba>
      break;
 8015300:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f7f6 ff04 	bl	800c110 <pbuf_free>
  return;
 8015308:	e013      	b.n	8015332 <icmp_input+0x1ea>
    goto lenerr;
 801530a:	bf00      	nop
 801530c:	e002      	b.n	8015314 <icmp_input+0x1cc>
    goto lenerr;
 801530e:	bf00      	nop
 8015310:	e000      	b.n	8015314 <icmp_input+0x1cc>
        goto lenerr;
 8015312:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f7f6 fefb 	bl	800c110 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801531a:	e00a      	b.n	8015332 <icmp_input+0x1ea>
        goto icmperr;
 801531c:	bf00      	nop
 801531e:	e004      	b.n	801532a <icmp_input+0x1e2>
        goto icmperr;
 8015320:	bf00      	nop
 8015322:	e002      	b.n	801532a <icmp_input+0x1e2>
          goto icmperr;
 8015324:	bf00      	nop
 8015326:	e000      	b.n	801532a <icmp_input+0x1e2>
          goto icmperr;
 8015328:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f7f6 fef0 	bl	800c110 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015330:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015332:	3728      	adds	r7, #40	; 0x28
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}
 8015338:	2000f580 	.word	0x2000f580
 801533c:	2000f594 	.word	0x2000f594
 8015340:	0801c2c4 	.word	0x0801c2c4
 8015344:	0801c2fc 	.word	0x0801c2fc
 8015348:	0801c334 	.word	0x0801c334
 801534c:	0801c35c 	.word	0x0801c35c

08015350 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	460b      	mov	r3, r1
 801535a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801535c:	78fb      	ldrb	r3, [r7, #3]
 801535e:	461a      	mov	r2, r3
 8015360:	2103      	movs	r1, #3
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f000 f814 	bl	8015390 <icmp_send_response>
}
 8015368:	bf00      	nop
 801536a:	3708      	adds	r7, #8
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	460b      	mov	r3, r1
 801537a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801537c:	78fb      	ldrb	r3, [r7, #3]
 801537e:	461a      	mov	r2, r3
 8015380:	210b      	movs	r1, #11
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f000 f804 	bl	8015390 <icmp_send_response>
}
 8015388:	bf00      	nop
 801538a:	3708      	adds	r7, #8
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b08c      	sub	sp, #48	; 0x30
 8015394:	af04      	add	r7, sp, #16
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	460b      	mov	r3, r1
 801539a:	70fb      	strb	r3, [r7, #3]
 801539c:	4613      	mov	r3, r2
 801539e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80153a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153a4:	2124      	movs	r1, #36	; 0x24
 80153a6:	2022      	movs	r0, #34	; 0x22
 80153a8:	f7f6 fbce 	bl	800bb48 <pbuf_alloc>
 80153ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d04c      	beq.n	801544e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	895b      	ldrh	r3, [r3, #10]
 80153b8:	2b23      	cmp	r3, #35	; 0x23
 80153ba:	d806      	bhi.n	80153ca <icmp_send_response+0x3a>
 80153bc:	4b26      	ldr	r3, [pc, #152]	; (8015458 <icmp_send_response+0xc8>)
 80153be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80153c2:	4926      	ldr	r1, [pc, #152]	; (801545c <icmp_send_response+0xcc>)
 80153c4:	4826      	ldr	r0, [pc, #152]	; (8015460 <icmp_send_response+0xd0>)
 80153c6:	f001 ffe9 	bl	801739c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	78fa      	ldrb	r2, [r7, #3]
 80153da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	78ba      	ldrb	r2, [r7, #2]
 80153e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	2200      	movs	r2, #0
 80153e6:	711a      	strb	r2, [r3, #4]
 80153e8:	2200      	movs	r2, #0
 80153ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	2200      	movs	r2, #0
 80153f0:	719a      	strb	r2, [r3, #6]
 80153f2:	2200      	movs	r2, #0
 80153f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80153f6:	69fb      	ldr	r3, [r7, #28]
 80153f8:	685b      	ldr	r3, [r3, #4]
 80153fa:	f103 0008 	add.w	r0, r3, #8
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	685b      	ldr	r3, [r3, #4]
 8015402:	221c      	movs	r2, #28
 8015404:	4619      	mov	r1, r3
 8015406:	f001 fb55 	bl	8016ab4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801540a:	69bb      	ldr	r3, [r7, #24]
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015410:	f107 030c 	add.w	r3, r7, #12
 8015414:	4618      	mov	r0, r3
 8015416:	f000 f825 	bl	8015464 <ip4_route>
 801541a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d011      	beq.n	8015446 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015422:	697b      	ldr	r3, [r7, #20]
 8015424:	2200      	movs	r2, #0
 8015426:	709a      	strb	r2, [r3, #2]
 8015428:	2200      	movs	r2, #0
 801542a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801542c:	f107 020c 	add.w	r2, r7, #12
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	9302      	str	r3, [sp, #8]
 8015434:	2301      	movs	r3, #1
 8015436:	9301      	str	r3, [sp, #4]
 8015438:	2300      	movs	r3, #0
 801543a:	9300      	str	r3, [sp, #0]
 801543c:	23ff      	movs	r3, #255	; 0xff
 801543e:	2100      	movs	r1, #0
 8015440:	69f8      	ldr	r0, [r7, #28]
 8015442:	f000 f9eb 	bl	801581c <ip4_output_if>
  }
  pbuf_free(q);
 8015446:	69f8      	ldr	r0, [r7, #28]
 8015448:	f7f6 fe62 	bl	800c110 <pbuf_free>
 801544c:	e000      	b.n	8015450 <icmp_send_response+0xc0>
    return;
 801544e:	bf00      	nop
}
 8015450:	3720      	adds	r7, #32
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
 8015456:	bf00      	nop
 8015458:	0801c2c4 	.word	0x0801c2c4
 801545c:	0801c390 	.word	0x0801c390
 8015460:	0801c334 	.word	0x0801c334

08015464 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015464:	b480      	push	{r7}
 8015466:	b085      	sub	sp, #20
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801546c:	4b33      	ldr	r3, [pc, #204]	; (801553c <ip4_route+0xd8>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	60fb      	str	r3, [r7, #12]
 8015472:	e036      	b.n	80154e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801547a:	f003 0301 	and.w	r3, r3, #1
 801547e:	b2db      	uxtb	r3, r3
 8015480:	2b00      	cmp	r3, #0
 8015482:	d02b      	beq.n	80154dc <ip4_route+0x78>
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801548a:	089b      	lsrs	r3, r3, #2
 801548c:	f003 0301 	and.w	r3, r3, #1
 8015490:	b2db      	uxtb	r3, r3
 8015492:	2b00      	cmp	r3, #0
 8015494:	d022      	beq.n	80154dc <ip4_route+0x78>
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	3304      	adds	r3, #4
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d01d      	beq.n	80154dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	3304      	adds	r3, #4
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	405a      	eors	r2, r3
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	3308      	adds	r3, #8
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	4013      	ands	r3, r2
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d101      	bne.n	80154bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	e038      	b.n	801552e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80154c2:	f003 0302 	and.w	r3, r3, #2
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d108      	bne.n	80154dc <ip4_route+0x78>
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	330c      	adds	r3, #12
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d101      	bne.n	80154dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	e028      	b.n	801552e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	60fb      	str	r3, [r7, #12]
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d1c5      	bne.n	8015474 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80154e8:	4b15      	ldr	r3, [pc, #84]	; (8015540 <ip4_route+0xdc>)
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d01a      	beq.n	8015526 <ip4_route+0xc2>
 80154f0:	4b13      	ldr	r3, [pc, #76]	; (8015540 <ip4_route+0xdc>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80154f8:	f003 0301 	and.w	r3, r3, #1
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d012      	beq.n	8015526 <ip4_route+0xc2>
 8015500:	4b0f      	ldr	r3, [pc, #60]	; (8015540 <ip4_route+0xdc>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015508:	f003 0304 	and.w	r3, r3, #4
 801550c:	2b00      	cmp	r3, #0
 801550e:	d00a      	beq.n	8015526 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015510:	4b0b      	ldr	r3, [pc, #44]	; (8015540 <ip4_route+0xdc>)
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	3304      	adds	r3, #4
 8015516:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015518:	2b00      	cmp	r3, #0
 801551a:	d004      	beq.n	8015526 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	b2db      	uxtb	r3, r3
 8015522:	2b7f      	cmp	r3, #127	; 0x7f
 8015524:	d101      	bne.n	801552a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015526:	2300      	movs	r3, #0
 8015528:	e001      	b.n	801552e <ip4_route+0xca>
  }

  return netif_default;
 801552a:	4b05      	ldr	r3, [pc, #20]	; (8015540 <ip4_route+0xdc>)
 801552c:	681b      	ldr	r3, [r3, #0]
}
 801552e:	4618      	mov	r0, r3
 8015530:	3714      	adds	r7, #20
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop
 801553c:	20012ca4 	.word	0x20012ca4
 8015540:	20012ca8 	.word	0x20012ca8

08015544 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015552:	f003 0301 	and.w	r3, r3, #1
 8015556:	b2db      	uxtb	r3, r3
 8015558:	2b00      	cmp	r3, #0
 801555a:	d016      	beq.n	801558a <ip4_input_accept+0x46>
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	3304      	adds	r3, #4
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d011      	beq.n	801558a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015566:	4b0b      	ldr	r3, [pc, #44]	; (8015594 <ip4_input_accept+0x50>)
 8015568:	695a      	ldr	r2, [r3, #20]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	3304      	adds	r3, #4
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	429a      	cmp	r2, r3
 8015572:	d008      	beq.n	8015586 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015574:	4b07      	ldr	r3, [pc, #28]	; (8015594 <ip4_input_accept+0x50>)
 8015576:	695b      	ldr	r3, [r3, #20]
 8015578:	6879      	ldr	r1, [r7, #4]
 801557a:	4618      	mov	r0, r3
 801557c:	f000 fa26 	bl	80159cc <ip4_addr_isbroadcast_u32>
 8015580:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015582:	2b00      	cmp	r3, #0
 8015584:	d001      	beq.n	801558a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015586:	2301      	movs	r3, #1
 8015588:	e000      	b.n	801558c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801558a:	2300      	movs	r3, #0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	2000f580 	.word	0x2000f580

08015598 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b088      	sub	sp, #32
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80155a2:	2301      	movs	r3, #1
 80155a4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80155ac:	69fb      	ldr	r3, [r7, #28]
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	091b      	lsrs	r3, r3, #4
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	2b04      	cmp	r3, #4
 80155b6:	d004      	beq.n	80155c2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f7f6 fda9 	bl	800c110 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80155be:	2300      	movs	r3, #0
 80155c0:	e123      	b.n	801580a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	f003 030f 	and.w	r3, r3, #15
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	009b      	lsls	r3, r3, #2
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	885b      	ldrh	r3, [r3, #2]
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	4618      	mov	r0, r3
 80155da:	f7f5 f9e1 	bl	800a9a0 <lwip_htons>
 80155de:	4603      	mov	r3, r0
 80155e0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	891b      	ldrh	r3, [r3, #8]
 80155e6:	8a3a      	ldrh	r2, [r7, #16]
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d204      	bcs.n	80155f6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80155ec:	8a3b      	ldrh	r3, [r7, #16]
 80155ee:	4619      	mov	r1, r3
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7f6 fc07 	bl	800be04 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	895b      	ldrh	r3, [r3, #10]
 80155fa:	8a7a      	ldrh	r2, [r7, #18]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d807      	bhi.n	8015610 <ip4_input+0x78>
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	891b      	ldrh	r3, [r3, #8]
 8015604:	8a3a      	ldrh	r2, [r7, #16]
 8015606:	429a      	cmp	r2, r3
 8015608:	d802      	bhi.n	8015610 <ip4_input+0x78>
 801560a:	8a7b      	ldrh	r3, [r7, #18]
 801560c:	2b13      	cmp	r3, #19
 801560e:	d804      	bhi.n	801561a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7f6 fd7d 	bl	800c110 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015616:	2300      	movs	r3, #0
 8015618:	e0f7      	b.n	801580a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801561a:	69fb      	ldr	r3, [r7, #28]
 801561c:	691b      	ldr	r3, [r3, #16]
 801561e:	4a7d      	ldr	r2, [pc, #500]	; (8015814 <ip4_input+0x27c>)
 8015620:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	68db      	ldr	r3, [r3, #12]
 8015626:	4a7b      	ldr	r2, [pc, #492]	; (8015814 <ip4_input+0x27c>)
 8015628:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801562a:	4b7a      	ldr	r3, [pc, #488]	; (8015814 <ip4_input+0x27c>)
 801562c:	695b      	ldr	r3, [r3, #20]
 801562e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015632:	2be0      	cmp	r3, #224	; 0xe0
 8015634:	d112      	bne.n	801565c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801563c:	f003 0301 	and.w	r3, r3, #1
 8015640:	b2db      	uxtb	r3, r3
 8015642:	2b00      	cmp	r3, #0
 8015644:	d007      	beq.n	8015656 <ip4_input+0xbe>
 8015646:	683b      	ldr	r3, [r7, #0]
 8015648:	3304      	adds	r3, #4
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d002      	beq.n	8015656 <ip4_input+0xbe>
      netif = inp;
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	61bb      	str	r3, [r7, #24]
 8015654:	e02a      	b.n	80156ac <ip4_input+0x114>
    } else {
      netif = NULL;
 8015656:	2300      	movs	r3, #0
 8015658:	61bb      	str	r3, [r7, #24]
 801565a:	e027      	b.n	80156ac <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801565c:	6838      	ldr	r0, [r7, #0]
 801565e:	f7ff ff71 	bl	8015544 <ip4_input_accept>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d002      	beq.n	801566e <ip4_input+0xd6>
      netif = inp;
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	61bb      	str	r3, [r7, #24]
 801566c:	e01e      	b.n	80156ac <ip4_input+0x114>
    } else {
      netif = NULL;
 801566e:	2300      	movs	r3, #0
 8015670:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015672:	4b68      	ldr	r3, [pc, #416]	; (8015814 <ip4_input+0x27c>)
 8015674:	695b      	ldr	r3, [r3, #20]
 8015676:	b2db      	uxtb	r3, r3
 8015678:	2b7f      	cmp	r3, #127	; 0x7f
 801567a:	d017      	beq.n	80156ac <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801567c:	4b66      	ldr	r3, [pc, #408]	; (8015818 <ip4_input+0x280>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	61bb      	str	r3, [r7, #24]
 8015682:	e00e      	b.n	80156a2 <ip4_input+0x10a>
          if (netif == inp) {
 8015684:	69ba      	ldr	r2, [r7, #24]
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	429a      	cmp	r2, r3
 801568a:	d006      	beq.n	801569a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801568c:	69b8      	ldr	r0, [r7, #24]
 801568e:	f7ff ff59 	bl	8015544 <ip4_input_accept>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	d108      	bne.n	80156aa <ip4_input+0x112>
 8015698:	e000      	b.n	801569c <ip4_input+0x104>
            continue;
 801569a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	61bb      	str	r3, [r7, #24]
 80156a2:	69bb      	ldr	r3, [r7, #24]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d1ed      	bne.n	8015684 <ip4_input+0xec>
 80156a8:	e000      	b.n	80156ac <ip4_input+0x114>
            break;
 80156aa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d111      	bne.n	80156d6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	7a5b      	ldrb	r3, [r3, #9]
 80156b6:	2b11      	cmp	r3, #17
 80156b8:	d10d      	bne.n	80156d6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80156ba:	8a7b      	ldrh	r3, [r7, #18]
 80156bc:	69fa      	ldr	r2, [r7, #28]
 80156be:	4413      	add	r3, r2
 80156c0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	885b      	ldrh	r3, [r3, #2]
 80156c6:	b29b      	uxth	r3, r3
 80156c8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80156cc:	d103      	bne.n	80156d6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80156d2:	2300      	movs	r3, #0
 80156d4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80156d6:	697b      	ldr	r3, [r7, #20]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d017      	beq.n	801570c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80156dc:	4b4d      	ldr	r3, [pc, #308]	; (8015814 <ip4_input+0x27c>)
 80156de:	691b      	ldr	r3, [r3, #16]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d013      	beq.n	801570c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80156e4:	4b4b      	ldr	r3, [pc, #300]	; (8015814 <ip4_input+0x27c>)
 80156e6:	691b      	ldr	r3, [r3, #16]
 80156e8:	6839      	ldr	r1, [r7, #0]
 80156ea:	4618      	mov	r0, r3
 80156ec:	f000 f96e 	bl	80159cc <ip4_addr_isbroadcast_u32>
 80156f0:	4603      	mov	r3, r0
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d105      	bne.n	8015702 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80156f6:	4b47      	ldr	r3, [pc, #284]	; (8015814 <ip4_input+0x27c>)
 80156f8:	691b      	ldr	r3, [r3, #16]
 80156fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80156fe:	2be0      	cmp	r3, #224	; 0xe0
 8015700:	d104      	bne.n	801570c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f7f6 fd04 	bl	800c110 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015708:	2300      	movs	r3, #0
 801570a:	e07e      	b.n	801580a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d104      	bne.n	801571c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f7f6 fcfc 	bl	800c110 <pbuf_free>
    return ERR_OK;
 8015718:	2300      	movs	r3, #0
 801571a:	e076      	b.n	801580a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	88db      	ldrh	r3, [r3, #6]
 8015720:	b29b      	uxth	r3, r3
 8015722:	461a      	mov	r2, r3
 8015724:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015728:	4013      	ands	r3, r2
 801572a:	2b00      	cmp	r3, #0
 801572c:	d00b      	beq.n	8015746 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f000 fc92 	bl	8016058 <ip4_reass>
 8015734:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d101      	bne.n	8015740 <ip4_input+0x1a8>
      return ERR_OK;
 801573c:	2300      	movs	r3, #0
 801573e:	e064      	b.n	801580a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	685b      	ldr	r3, [r3, #4]
 8015744:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015746:	4a33      	ldr	r2, [pc, #204]	; (8015814 <ip4_input+0x27c>)
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801574c:	4a31      	ldr	r2, [pc, #196]	; (8015814 <ip4_input+0x27c>)
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015752:	4a30      	ldr	r2, [pc, #192]	; (8015814 <ip4_input+0x27c>)
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015758:	69fb      	ldr	r3, [r7, #28]
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	f003 030f 	and.w	r3, r3, #15
 8015760:	b2db      	uxtb	r3, r3
 8015762:	009b      	lsls	r3, r3, #2
 8015764:	b2db      	uxtb	r3, r3
 8015766:	b29a      	uxth	r2, r3
 8015768:	4b2a      	ldr	r3, [pc, #168]	; (8015814 <ip4_input+0x27c>)
 801576a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801576c:	8a7b      	ldrh	r3, [r7, #18]
 801576e:	4619      	mov	r1, r3
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f7f6 fc47 	bl	800c004 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015776:	69fb      	ldr	r3, [r7, #28]
 8015778:	7a5b      	ldrb	r3, [r3, #9]
 801577a:	2b11      	cmp	r3, #17
 801577c:	d006      	beq.n	801578c <ip4_input+0x1f4>
 801577e:	2b11      	cmp	r3, #17
 8015780:	dc13      	bgt.n	80157aa <ip4_input+0x212>
 8015782:	2b01      	cmp	r3, #1
 8015784:	d00c      	beq.n	80157a0 <ip4_input+0x208>
 8015786:	2b06      	cmp	r3, #6
 8015788:	d005      	beq.n	8015796 <ip4_input+0x1fe>
 801578a:	e00e      	b.n	80157aa <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801578c:	6839      	ldr	r1, [r7, #0]
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7fc fae8 	bl	8011d64 <udp_input>
        break;
 8015794:	e026      	b.n	80157e4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015796:	6839      	ldr	r1, [r7, #0]
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f7f8 fafd 	bl	800dd98 <tcp_input>
        break;
 801579e:	e021      	b.n	80157e4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80157a0:	6839      	ldr	r1, [r7, #0]
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7ff fcd0 	bl	8015148 <icmp_input>
        break;
 80157a8:	e01c      	b.n	80157e4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80157aa:	4b1a      	ldr	r3, [pc, #104]	; (8015814 <ip4_input+0x27c>)
 80157ac:	695b      	ldr	r3, [r3, #20]
 80157ae:	69b9      	ldr	r1, [r7, #24]
 80157b0:	4618      	mov	r0, r3
 80157b2:	f000 f90b 	bl	80159cc <ip4_addr_isbroadcast_u32>
 80157b6:	4603      	mov	r3, r0
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10f      	bne.n	80157dc <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80157bc:	4b15      	ldr	r3, [pc, #84]	; (8015814 <ip4_input+0x27c>)
 80157be:	695b      	ldr	r3, [r3, #20]
 80157c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80157c4:	2be0      	cmp	r3, #224	; 0xe0
 80157c6:	d009      	beq.n	80157dc <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80157c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157cc:	4619      	mov	r1, r3
 80157ce:	6878      	ldr	r0, [r7, #4]
 80157d0:	f7f6 fc8b 	bl	800c0ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80157d4:	2102      	movs	r1, #2
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f7ff fdba 	bl	8015350 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f7f6 fc97 	bl	800c110 <pbuf_free>
        break;
 80157e2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80157e4:	4b0b      	ldr	r3, [pc, #44]	; (8015814 <ip4_input+0x27c>)
 80157e6:	2200      	movs	r2, #0
 80157e8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80157ea:	4b0a      	ldr	r3, [pc, #40]	; (8015814 <ip4_input+0x27c>)
 80157ec:	2200      	movs	r2, #0
 80157ee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80157f0:	4b08      	ldr	r3, [pc, #32]	; (8015814 <ip4_input+0x27c>)
 80157f2:	2200      	movs	r2, #0
 80157f4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80157f6:	4b07      	ldr	r3, [pc, #28]	; (8015814 <ip4_input+0x27c>)
 80157f8:	2200      	movs	r2, #0
 80157fa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80157fc:	4b05      	ldr	r3, [pc, #20]	; (8015814 <ip4_input+0x27c>)
 80157fe:	2200      	movs	r2, #0
 8015800:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015802:	4b04      	ldr	r3, [pc, #16]	; (8015814 <ip4_input+0x27c>)
 8015804:	2200      	movs	r2, #0
 8015806:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015808:	2300      	movs	r3, #0
}
 801580a:	4618      	mov	r0, r3
 801580c:	3720      	adds	r7, #32
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}
 8015812:	bf00      	nop
 8015814:	2000f580 	.word	0x2000f580
 8015818:	20012ca4 	.word	0x20012ca4

0801581c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b08a      	sub	sp, #40	; 0x28
 8015820:	af04      	add	r7, sp, #16
 8015822:	60f8      	str	r0, [r7, #12]
 8015824:	60b9      	str	r1, [r7, #8]
 8015826:	607a      	str	r2, [r7, #4]
 8015828:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801582a:	68bb      	ldr	r3, [r7, #8]
 801582c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d009      	beq.n	8015848 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015834:	68bb      	ldr	r3, [r7, #8]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d003      	beq.n	8015842 <ip4_output_if+0x26>
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d102      	bne.n	8015848 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015844:	3304      	adds	r3, #4
 8015846:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015848:	78fa      	ldrb	r2, [r7, #3]
 801584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584c:	9302      	str	r3, [sp, #8]
 801584e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015852:	9301      	str	r3, [sp, #4]
 8015854:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	4613      	mov	r3, r2
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	6979      	ldr	r1, [r7, #20]
 8015860:	68f8      	ldr	r0, [r7, #12]
 8015862:	f000 f805 	bl	8015870 <ip4_output_if_src>
 8015866:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015868:	4618      	mov	r0, r3
 801586a:	3718      	adds	r7, #24
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b088      	sub	sp, #32
 8015874:	af00      	add	r7, sp, #0
 8015876:	60f8      	str	r0, [r7, #12]
 8015878:	60b9      	str	r1, [r7, #8]
 801587a:	607a      	str	r2, [r7, #4]
 801587c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	7b9b      	ldrb	r3, [r3, #14]
 8015882:	2b01      	cmp	r3, #1
 8015884:	d006      	beq.n	8015894 <ip4_output_if_src+0x24>
 8015886:	4b4b      	ldr	r3, [pc, #300]	; (80159b4 <ip4_output_if_src+0x144>)
 8015888:	f44f 7255 	mov.w	r2, #852	; 0x354
 801588c:	494a      	ldr	r1, [pc, #296]	; (80159b8 <ip4_output_if_src+0x148>)
 801588e:	484b      	ldr	r0, [pc, #300]	; (80159bc <ip4_output_if_src+0x14c>)
 8015890:	f001 fd84 	bl	801739c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d060      	beq.n	801595c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801589a:	2314      	movs	r3, #20
 801589c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801589e:	2114      	movs	r1, #20
 80158a0:	68f8      	ldr	r0, [r7, #12]
 80158a2:	f7f6 fb9f 	bl	800bfe4 <pbuf_add_header>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80158ac:	f06f 0301 	mvn.w	r3, #1
 80158b0:	e07c      	b.n	80159ac <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	895b      	ldrh	r3, [r3, #10]
 80158bc:	2b13      	cmp	r3, #19
 80158be:	d806      	bhi.n	80158ce <ip4_output_if_src+0x5e>
 80158c0:	4b3c      	ldr	r3, [pc, #240]	; (80159b4 <ip4_output_if_src+0x144>)
 80158c2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80158c6:	493e      	ldr	r1, [pc, #248]	; (80159c0 <ip4_output_if_src+0x150>)
 80158c8:	483c      	ldr	r0, [pc, #240]	; (80159bc <ip4_output_if_src+0x14c>)
 80158ca:	f001 fd67 	bl	801739c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80158ce:	69fb      	ldr	r3, [r7, #28]
 80158d0:	78fa      	ldrb	r2, [r7, #3]
 80158d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80158da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681a      	ldr	r2, [r3, #0]
 80158e0:	69fb      	ldr	r3, [r7, #28]
 80158e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80158e4:	8b7b      	ldrh	r3, [r7, #26]
 80158e6:	089b      	lsrs	r3, r3, #2
 80158e8:	b29b      	uxth	r3, r3
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158f0:	b2da      	uxtb	r2, r3
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80158fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	891b      	ldrh	r3, [r3, #8]
 8015902:	4618      	mov	r0, r3
 8015904:	f7f5 f84c 	bl	800a9a0 <lwip_htons>
 8015908:	4603      	mov	r3, r0
 801590a:	461a      	mov	r2, r3
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	2200      	movs	r2, #0
 8015914:	719a      	strb	r2, [r3, #6]
 8015916:	2200      	movs	r2, #0
 8015918:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801591a:	4b2a      	ldr	r3, [pc, #168]	; (80159c4 <ip4_output_if_src+0x154>)
 801591c:	881b      	ldrh	r3, [r3, #0]
 801591e:	4618      	mov	r0, r3
 8015920:	f7f5 f83e 	bl	800a9a0 <lwip_htons>
 8015924:	4603      	mov	r3, r0
 8015926:	461a      	mov	r2, r3
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801592c:	4b25      	ldr	r3, [pc, #148]	; (80159c4 <ip4_output_if_src+0x154>)
 801592e:	881b      	ldrh	r3, [r3, #0]
 8015930:	3301      	adds	r3, #1
 8015932:	b29a      	uxth	r2, r3
 8015934:	4b23      	ldr	r3, [pc, #140]	; (80159c4 <ip4_output_if_src+0x154>)
 8015936:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	2b00      	cmp	r3, #0
 801593c:	d104      	bne.n	8015948 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801593e:	4b22      	ldr	r3, [pc, #136]	; (80159c8 <ip4_output_if_src+0x158>)
 8015940:	681a      	ldr	r2, [r3, #0]
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	60da      	str	r2, [r3, #12]
 8015946:	e003      	b.n	8015950 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	681a      	ldr	r2, [r3, #0]
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	2200      	movs	r2, #0
 8015954:	729a      	strb	r2, [r3, #10]
 8015956:	2200      	movs	r2, #0
 8015958:	72da      	strb	r2, [r3, #11]
 801595a:	e00f      	b.n	801597c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	895b      	ldrh	r3, [r3, #10]
 8015960:	2b13      	cmp	r3, #19
 8015962:	d802      	bhi.n	801596a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015964:	f06f 0301 	mvn.w	r3, #1
 8015968:	e020      	b.n	80159ac <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	685b      	ldr	r3, [r3, #4]
 801596e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015970:	69fb      	ldr	r3, [r7, #28]
 8015972:	691b      	ldr	r3, [r3, #16]
 8015974:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015976:	f107 0314 	add.w	r3, r7, #20
 801597a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801597e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00c      	beq.n	801599e <ip4_output_if_src+0x12e>
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	891a      	ldrh	r2, [r3, #8]
 8015988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801598a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801598c:	429a      	cmp	r2, r3
 801598e:	d906      	bls.n	801599e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015994:	68f8      	ldr	r0, [r7, #12]
 8015996:	f000 fd4d 	bl	8016434 <ip4_frag>
 801599a:	4603      	mov	r3, r0
 801599c:	e006      	b.n	80159ac <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	68f9      	ldr	r1, [r7, #12]
 80159a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159a8:	4798      	blx	r3
 80159aa:	4603      	mov	r3, r0
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3720      	adds	r7, #32
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	0801c3bc 	.word	0x0801c3bc
 80159b8:	0801c3f0 	.word	0x0801c3f0
 80159bc:	0801c3fc 	.word	0x0801c3fc
 80159c0:	0801c424 	.word	0x0801c424
 80159c4:	20004cb6 	.word	0x20004cb6
 80159c8:	0801c8c0 	.word	0x0801c8c0

080159cc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b085      	sub	sp, #20
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159e0:	d002      	beq.n	80159e8 <ip4_addr_isbroadcast_u32+0x1c>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d101      	bne.n	80159ec <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80159e8:	2301      	movs	r3, #1
 80159ea:	e02a      	b.n	8015a42 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159f2:	f003 0302 	and.w	r3, r3, #2
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d101      	bne.n	80159fe <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80159fa:	2300      	movs	r3, #0
 80159fc:	e021      	b.n	8015a42 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	3304      	adds	r3, #4
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d101      	bne.n	8015a0e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	e019      	b.n	8015a42 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015a0e:	68fa      	ldr	r2, [r7, #12]
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	3304      	adds	r3, #4
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	405a      	eors	r2, r3
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	3308      	adds	r3, #8
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4013      	ands	r3, r2
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10d      	bne.n	8015a40 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	3308      	adds	r3, #8
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	43da      	mvns	r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	3308      	adds	r3, #8
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d101      	bne.n	8015a40 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	e000      	b.n	8015a42 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015a40:	2300      	movs	r3, #0
  }
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3714      	adds	r7, #20
 8015a46:	46bd      	mov	sp, r7
 8015a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4c:	4770      	bx	lr
	...

08015a50 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b084      	sub	sp, #16
 8015a54:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015a56:	2300      	movs	r3, #0
 8015a58:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015a5a:	4b12      	ldr	r3, [pc, #72]	; (8015aa4 <ip_reass_tmr+0x54>)
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015a60:	e018      	b.n	8015a94 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	7fdb      	ldrb	r3, [r3, #31]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d00b      	beq.n	8015a82 <ip_reass_tmr+0x32>
      r->timer--;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	7fdb      	ldrb	r3, [r3, #31]
 8015a6e:	3b01      	subs	r3, #1
 8015a70:	b2da      	uxtb	r2, r3
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	60fb      	str	r3, [r7, #12]
 8015a80:	e008      	b.n	8015a94 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015a8c:	68b9      	ldr	r1, [r7, #8]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f000 f80a 	bl	8015aa8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d1e3      	bne.n	8015a62 <ip_reass_tmr+0x12>
    }
  }
}
 8015a9a:	bf00      	nop
 8015a9c:	bf00      	nop
 8015a9e:	3710      	adds	r7, #16
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	20004cb8 	.word	0x20004cb8

08015aa8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b088      	sub	sp, #32
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ab6:	683a      	ldr	r2, [r7, #0]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d105      	bne.n	8015aca <ip_reass_free_complete_datagram+0x22>
 8015abe:	4b45      	ldr	r3, [pc, #276]	; (8015bd4 <ip_reass_free_complete_datagram+0x12c>)
 8015ac0:	22ab      	movs	r2, #171	; 0xab
 8015ac2:	4945      	ldr	r1, [pc, #276]	; (8015bd8 <ip_reass_free_complete_datagram+0x130>)
 8015ac4:	4845      	ldr	r0, [pc, #276]	; (8015bdc <ip_reass_free_complete_datagram+0x134>)
 8015ac6:	f001 fc69 	bl	801739c <iprintf>
  if (prev != NULL) {
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d00a      	beq.n	8015ae6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	687a      	ldr	r2, [r7, #4]
 8015ad6:	429a      	cmp	r2, r3
 8015ad8:	d005      	beq.n	8015ae6 <ip_reass_free_complete_datagram+0x3e>
 8015ada:	4b3e      	ldr	r3, [pc, #248]	; (8015bd4 <ip_reass_free_complete_datagram+0x12c>)
 8015adc:	22ad      	movs	r2, #173	; 0xad
 8015ade:	4940      	ldr	r1, [pc, #256]	; (8015be0 <ip_reass_free_complete_datagram+0x138>)
 8015ae0:	483e      	ldr	r0, [pc, #248]	; (8015bdc <ip_reass_free_complete_datagram+0x134>)
 8015ae2:	f001 fc5b 	bl	801739c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	685b      	ldr	r3, [r3, #4]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	889b      	ldrh	r3, [r3, #4]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d12a      	bne.n	8015b4e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	681a      	ldr	r2, [r3, #0]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015b06:	69bb      	ldr	r3, [r7, #24]
 8015b08:	6858      	ldr	r0, [r3, #4]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	2214      	movs	r2, #20
 8015b10:	4619      	mov	r1, r3
 8015b12:	f000 ffcf 	bl	8016ab4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015b16:	2101      	movs	r1, #1
 8015b18:	69b8      	ldr	r0, [r7, #24]
 8015b1a:	f7ff fc29 	bl	8015370 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015b1e:	69b8      	ldr	r0, [r7, #24]
 8015b20:	f7f6 fb84 	bl	800c22c <pbuf_clen>
 8015b24:	4603      	mov	r3, r0
 8015b26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b28:	8bfa      	ldrh	r2, [r7, #30]
 8015b2a:	8a7b      	ldrh	r3, [r7, #18]
 8015b2c:	4413      	add	r3, r2
 8015b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b32:	db05      	blt.n	8015b40 <ip_reass_free_complete_datagram+0x98>
 8015b34:	4b27      	ldr	r3, [pc, #156]	; (8015bd4 <ip_reass_free_complete_datagram+0x12c>)
 8015b36:	22bc      	movs	r2, #188	; 0xbc
 8015b38:	492a      	ldr	r1, [pc, #168]	; (8015be4 <ip_reass_free_complete_datagram+0x13c>)
 8015b3a:	4828      	ldr	r0, [pc, #160]	; (8015bdc <ip_reass_free_complete_datagram+0x134>)
 8015b3c:	f001 fc2e 	bl	801739c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b40:	8bfa      	ldrh	r2, [r7, #30]
 8015b42:	8a7b      	ldrh	r3, [r7, #18]
 8015b44:	4413      	add	r3, r2
 8015b46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015b48:	69b8      	ldr	r0, [r7, #24]
 8015b4a:	f7f6 fae1 	bl	800c110 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015b54:	e01f      	b.n	8015b96 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015b56:	69bb      	ldr	r3, [r7, #24]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015b5c:	69bb      	ldr	r3, [r7, #24]
 8015b5e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015b66:	68f8      	ldr	r0, [r7, #12]
 8015b68:	f7f6 fb60 	bl	800c22c <pbuf_clen>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b70:	8bfa      	ldrh	r2, [r7, #30]
 8015b72:	8a7b      	ldrh	r3, [r7, #18]
 8015b74:	4413      	add	r3, r2
 8015b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b7a:	db05      	blt.n	8015b88 <ip_reass_free_complete_datagram+0xe0>
 8015b7c:	4b15      	ldr	r3, [pc, #84]	; (8015bd4 <ip_reass_free_complete_datagram+0x12c>)
 8015b7e:	22cc      	movs	r2, #204	; 0xcc
 8015b80:	4918      	ldr	r1, [pc, #96]	; (8015be4 <ip_reass_free_complete_datagram+0x13c>)
 8015b82:	4816      	ldr	r0, [pc, #88]	; (8015bdc <ip_reass_free_complete_datagram+0x134>)
 8015b84:	f001 fc0a 	bl	801739c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b88:	8bfa      	ldrh	r2, [r7, #30]
 8015b8a:	8a7b      	ldrh	r3, [r7, #18]
 8015b8c:	4413      	add	r3, r2
 8015b8e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015b90:	68f8      	ldr	r0, [r7, #12]
 8015b92:	f7f6 fabd 	bl	800c110 <pbuf_free>
  while (p != NULL) {
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1dc      	bne.n	8015b56 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015b9c:	6839      	ldr	r1, [r7, #0]
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f000 f8c2 	bl	8015d28 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015ba4:	4b10      	ldr	r3, [pc, #64]	; (8015be8 <ip_reass_free_complete_datagram+0x140>)
 8015ba6:	881b      	ldrh	r3, [r3, #0]
 8015ba8:	8bfa      	ldrh	r2, [r7, #30]
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d905      	bls.n	8015bba <ip_reass_free_complete_datagram+0x112>
 8015bae:	4b09      	ldr	r3, [pc, #36]	; (8015bd4 <ip_reass_free_complete_datagram+0x12c>)
 8015bb0:	22d2      	movs	r2, #210	; 0xd2
 8015bb2:	490e      	ldr	r1, [pc, #56]	; (8015bec <ip_reass_free_complete_datagram+0x144>)
 8015bb4:	4809      	ldr	r0, [pc, #36]	; (8015bdc <ip_reass_free_complete_datagram+0x134>)
 8015bb6:	f001 fbf1 	bl	801739c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015bba:	4b0b      	ldr	r3, [pc, #44]	; (8015be8 <ip_reass_free_complete_datagram+0x140>)
 8015bbc:	881a      	ldrh	r2, [r3, #0]
 8015bbe:	8bfb      	ldrh	r3, [r7, #30]
 8015bc0:	1ad3      	subs	r3, r2, r3
 8015bc2:	b29a      	uxth	r2, r3
 8015bc4:	4b08      	ldr	r3, [pc, #32]	; (8015be8 <ip_reass_free_complete_datagram+0x140>)
 8015bc6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015bc8:	8bfb      	ldrh	r3, [r7, #30]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3720      	adds	r7, #32
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	0801c454 	.word	0x0801c454
 8015bd8:	0801c490 	.word	0x0801c490
 8015bdc:	0801c49c 	.word	0x0801c49c
 8015be0:	0801c4c4 	.word	0x0801c4c4
 8015be4:	0801c4d8 	.word	0x0801c4d8
 8015be8:	20004cbc 	.word	0x20004cbc
 8015bec:	0801c4f8 	.word	0x0801c4f8

08015bf0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b08a      	sub	sp, #40	; 0x28
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015c02:	2300      	movs	r3, #0
 8015c04:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015c06:	2300      	movs	r3, #0
 8015c08:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015c0e:	4b28      	ldr	r3, [pc, #160]	; (8015cb0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c14:	e030      	b.n	8015c78 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c18:	695a      	ldr	r2, [r3, #20]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	68db      	ldr	r3, [r3, #12]
 8015c1e:	429a      	cmp	r2, r3
 8015c20:	d10c      	bne.n	8015c3c <ip_reass_remove_oldest_datagram+0x4c>
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	699a      	ldr	r2, [r3, #24]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	691b      	ldr	r3, [r3, #16]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d106      	bne.n	8015c3c <ip_reass_remove_oldest_datagram+0x4c>
 8015c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c30:	899a      	ldrh	r2, [r3, #12]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	889b      	ldrh	r3, [r3, #4]
 8015c36:	b29b      	uxth	r3, r3
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d014      	beq.n	8015c66 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	3301      	adds	r3, #1
 8015c40:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015c42:	6a3b      	ldr	r3, [r7, #32]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d104      	bne.n	8015c52 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	61bb      	str	r3, [r7, #24]
 8015c50:	e009      	b.n	8015c66 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	7fda      	ldrb	r2, [r3, #31]
 8015c56:	6a3b      	ldr	r3, [r7, #32]
 8015c58:	7fdb      	ldrb	r3, [r3, #31]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d803      	bhi.n	8015c66 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c60:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d001      	beq.n	8015c72 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c70:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d1cb      	bne.n	8015c16 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015c7e:	6a3b      	ldr	r3, [r7, #32]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d008      	beq.n	8015c96 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015c84:	69b9      	ldr	r1, [r7, #24]
 8015c86:	6a38      	ldr	r0, [r7, #32]
 8015c88:	f7ff ff0e 	bl	8015aa8 <ip_reass_free_complete_datagram>
 8015c8c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015c8e:	697a      	ldr	r2, [r7, #20]
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	4413      	add	r3, r2
 8015c94:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015c96:	697a      	ldr	r2, [r7, #20]
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	da02      	bge.n	8015ca4 <ip_reass_remove_oldest_datagram+0xb4>
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	2b01      	cmp	r3, #1
 8015ca2:	dcac      	bgt.n	8015bfe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ca4:	697b      	ldr	r3, [r7, #20]
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3728      	adds	r7, #40	; 0x28
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	20004cb8 	.word	0x20004cb8

08015cb4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015cbe:	2004      	movs	r0, #4
 8015cc0:	f7f5 fb24 	bl	800b30c <memp_malloc>
 8015cc4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d110      	bne.n	8015cee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015ccc:	6839      	ldr	r1, [r7, #0]
 8015cce:	6878      	ldr	r0, [r7, #4]
 8015cd0:	f7ff ff8e 	bl	8015bf0 <ip_reass_remove_oldest_datagram>
 8015cd4:	4602      	mov	r2, r0
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	4293      	cmp	r3, r2
 8015cda:	dc03      	bgt.n	8015ce4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015cdc:	2004      	movs	r0, #4
 8015cde:	f7f5 fb15 	bl	800b30c <memp_malloc>
 8015ce2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d101      	bne.n	8015cee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015cea:	2300      	movs	r3, #0
 8015cec:	e016      	b.n	8015d1c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015cee:	2220      	movs	r2, #32
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	68f8      	ldr	r0, [r7, #12]
 8015cf4:	f000 ff06 	bl	8016b04 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	220f      	movs	r2, #15
 8015cfc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015cfe:	4b09      	ldr	r3, [pc, #36]	; (8015d24 <ip_reass_enqueue_new_datagram+0x70>)
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015d06:	4a07      	ldr	r2, [pc, #28]	; (8015d24 <ip_reass_enqueue_new_datagram+0x70>)
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	3308      	adds	r3, #8
 8015d10:	2214      	movs	r2, #20
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	4618      	mov	r0, r3
 8015d16:	f000 fecd 	bl	8016ab4 <memcpy>
  return ipr;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	20004cb8 	.word	0x20004cb8

08015d28 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b082      	sub	sp, #8
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015d32:	4b10      	ldr	r3, [pc, #64]	; (8015d74 <ip_reass_dequeue_datagram+0x4c>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	687a      	ldr	r2, [r7, #4]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d104      	bne.n	8015d46 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	4a0c      	ldr	r2, [pc, #48]	; (8015d74 <ip_reass_dequeue_datagram+0x4c>)
 8015d42:	6013      	str	r3, [r2, #0]
 8015d44:	e00d      	b.n	8015d62 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d106      	bne.n	8015d5a <ip_reass_dequeue_datagram+0x32>
 8015d4c:	4b0a      	ldr	r3, [pc, #40]	; (8015d78 <ip_reass_dequeue_datagram+0x50>)
 8015d4e:	f240 1245 	movw	r2, #325	; 0x145
 8015d52:	490a      	ldr	r1, [pc, #40]	; (8015d7c <ip_reass_dequeue_datagram+0x54>)
 8015d54:	480a      	ldr	r0, [pc, #40]	; (8015d80 <ip_reass_dequeue_datagram+0x58>)
 8015d56:	f001 fb21 	bl	801739c <iprintf>
    prev->next = ipr->next;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015d62:	6879      	ldr	r1, [r7, #4]
 8015d64:	2004      	movs	r0, #4
 8015d66:	f7f5 fb23 	bl	800b3b0 <memp_free>
}
 8015d6a:	bf00      	nop
 8015d6c:	3708      	adds	r7, #8
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	20004cb8 	.word	0x20004cb8
 8015d78:	0801c454 	.word	0x0801c454
 8015d7c:	0801c51c 	.word	0x0801c51c
 8015d80:	0801c49c 	.word	0x0801c49c

08015d84 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b08c      	sub	sp, #48	; 0x30
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	60f8      	str	r0, [r7, #12]
 8015d8c:	60b9      	str	r1, [r7, #8]
 8015d8e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015d90:	2300      	movs	r3, #0
 8015d92:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015d94:	2301      	movs	r3, #1
 8015d96:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	885b      	ldrh	r3, [r3, #2]
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f4 fdfb 	bl	800a9a0 <lwip_htons>
 8015daa:	4603      	mov	r3, r0
 8015dac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015dae:	69fb      	ldr	r3, [r7, #28]
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	f003 030f 	and.w	r3, r3, #15
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015dbc:	7e7b      	ldrb	r3, [r7, #25]
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	8b7a      	ldrh	r2, [r7, #26]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d202      	bcs.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dca:	e135      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015dcc:	7e7b      	ldrb	r3, [r7, #25]
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	8b7a      	ldrh	r2, [r7, #26]
 8015dd2:	1ad3      	subs	r3, r2, r3
 8015dd4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015dd6:	69fb      	ldr	r3, [r7, #28]
 8015dd8:	88db      	ldrh	r3, [r3, #6]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f4 fddf 	bl	800a9a0 <lwip_htons>
 8015de2:	4603      	mov	r3, r0
 8015de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	00db      	lsls	r3, r3, #3
 8015dec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df6:	2200      	movs	r2, #0
 8015df8:	701a      	strb	r2, [r3, #0]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	705a      	strb	r2, [r3, #1]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	709a      	strb	r2, [r3, #2]
 8015e02:	2200      	movs	r2, #0
 8015e04:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e08:	8afa      	ldrh	r2, [r7, #22]
 8015e0a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015e0c:	8afa      	ldrh	r2, [r7, #22]
 8015e0e:	8b7b      	ldrh	r3, [r7, #26]
 8015e10:	4413      	add	r3, r2
 8015e12:	b29a      	uxth	r2, r3
 8015e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e16:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1a:	88db      	ldrh	r3, [r3, #6]
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	8afa      	ldrh	r2, [r7, #22]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d902      	bls.n	8015e2a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e28:	e106      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8015e30:	e068      	b.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3a:	889b      	ldrh	r3, [r3, #4]
 8015e3c:	b29a      	uxth	r2, r3
 8015e3e:	693b      	ldr	r3, [r7, #16]
 8015e40:	889b      	ldrh	r3, [r3, #4]
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d235      	bcs.n	8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e4c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d020      	beq.n	8015e96 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e56:	889b      	ldrh	r3, [r3, #4]
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5c:	88db      	ldrh	r3, [r3, #6]
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d307      	bcc.n	8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e66:	88db      	ldrh	r3, [r3, #6]
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	693b      	ldr	r3, [r7, #16]
 8015e6c:	889b      	ldrh	r3, [r3, #4]
 8015e6e:	b29b      	uxth	r3, r3
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d902      	bls.n	8015e7a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e78:	e0de      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e7c:	68ba      	ldr	r2, [r7, #8]
 8015e7e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e82:	88db      	ldrh	r3, [r3, #6]
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e88:	889b      	ldrh	r3, [r3, #4]
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d03d      	beq.n	8015f0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015e94:	e03a      	b.n	8015f0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e98:	88db      	ldrh	r3, [r3, #6]
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	889b      	ldrh	r3, [r3, #4]
 8015ea0:	b29b      	uxth	r3, r3
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d902      	bls.n	8015eac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015eaa:	e0c5      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	68ba      	ldr	r2, [r7, #8]
 8015eb0:	605a      	str	r2, [r3, #4]
      break;
 8015eb2:	e02b      	b.n	8015f0c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb6:	889b      	ldrh	r3, [r3, #4]
 8015eb8:	b29a      	uxth	r2, r3
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	889b      	ldrh	r3, [r3, #4]
 8015ebe:	b29b      	uxth	r3, r3
 8015ec0:	429a      	cmp	r2, r3
 8015ec2:	d102      	bne.n	8015eca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ec8:	e0b6      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ecc:	889b      	ldrh	r3, [r3, #4]
 8015ece:	b29a      	uxth	r2, r3
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	88db      	ldrh	r3, [r3, #6]
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	d202      	bcs.n	8015ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ede:	e0ab      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d009      	beq.n	8015efa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee8:	88db      	ldrh	r3, [r3, #6]
 8015eea:	b29a      	uxth	r2, r3
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	889b      	ldrh	r3, [r3, #4]
 8015ef0:	b29b      	uxth	r3, r3
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d001      	beq.n	8015efa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015efa:	693b      	ldr	r3, [r7, #16]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d193      	bne.n	8015e32 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015f0a:	e000      	b.n	8015f0e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015f0c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d12d      	bne.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d01c      	beq.n	8015f54 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f1c:	88db      	ldrh	r3, [r3, #6]
 8015f1e:	b29a      	uxth	r2, r3
 8015f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f22:	889b      	ldrh	r3, [r3, #4]
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d906      	bls.n	8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015f2a:	4b45      	ldr	r3, [pc, #276]	; (8016040 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f2c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015f30:	4944      	ldr	r1, [pc, #272]	; (8016044 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f32:	4845      	ldr	r0, [pc, #276]	; (8016048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f34:	f001 fa32 	bl	801739c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f40:	88db      	ldrh	r3, [r3, #6]
 8015f42:	b29a      	uxth	r2, r3
 8015f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f46:	889b      	ldrh	r3, [r3, #4]
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d010      	beq.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	623b      	str	r3, [r7, #32]
 8015f52:	e00d      	b.n	8015f70 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d006      	beq.n	8015f6a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015f5c:	4b38      	ldr	r3, [pc, #224]	; (8016040 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f5e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015f62:	493a      	ldr	r1, [pc, #232]	; (801604c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f64:	4838      	ldr	r0, [pc, #224]	; (8016048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f66:	f001 fa19 	bl	801739c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	68ba      	ldr	r2, [r7, #8]
 8015f6e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d105      	bne.n	8015f82 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	7f9b      	ldrb	r3, [r3, #30]
 8015f7a:	f003 0301 	and.w	r3, r3, #1
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d059      	beq.n	8016036 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015f82:	6a3b      	ldr	r3, [r7, #32]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d04f      	beq.n	8016028 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	685b      	ldr	r3, [r3, #4]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d006      	beq.n	8015f9e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	685b      	ldr	r3, [r3, #4]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	889b      	ldrh	r3, [r3, #4]
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d002      	beq.n	8015fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	623b      	str	r3, [r7, #32]
 8015fa2:	e041      	b.n	8016028 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015fae:	e012      	b.n	8015fd6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb8:	88db      	ldrh	r3, [r3, #6]
 8015fba:	b29a      	uxth	r2, r3
 8015fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fbe:	889b      	ldrh	r3, [r3, #4]
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d002      	beq.n	8015fcc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	623b      	str	r3, [r7, #32]
            break;
 8015fca:	e007      	b.n	8015fdc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d1e9      	bne.n	8015fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015fdc:	6a3b      	ldr	r3, [r7, #32]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d022      	beq.n	8016028 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	685b      	ldr	r3, [r3, #4]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d106      	bne.n	8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015fea:	4b15      	ldr	r3, [pc, #84]	; (8016040 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fec:	f240 12df 	movw	r2, #479	; 0x1df
 8015ff0:	4917      	ldr	r1, [pc, #92]	; (8016050 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ff2:	4815      	ldr	r0, [pc, #84]	; (8016048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ff4:	f001 f9d2 	bl	801739c <iprintf>
          LWIP_ASSERT("sanity check",
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	685b      	ldr	r3, [r3, #4]
 8015ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016000:	429a      	cmp	r2, r3
 8016002:	d106      	bne.n	8016012 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016004:	4b0e      	ldr	r3, [pc, #56]	; (8016040 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016006:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801600a:	4911      	ldr	r1, [pc, #68]	; (8016050 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801600c:	480e      	ldr	r0, [pc, #56]	; (8016048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801600e:	f001 f9c5 	bl	801739c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d006      	beq.n	8016028 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801601a:	4b09      	ldr	r3, [pc, #36]	; (8016040 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801601c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016020:	490c      	ldr	r1, [pc, #48]	; (8016054 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016022:	4809      	ldr	r0, [pc, #36]	; (8016048 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016024:	f001 f9ba 	bl	801739c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016028:	6a3b      	ldr	r3, [r7, #32]
 801602a:	2b00      	cmp	r3, #0
 801602c:	bf14      	ite	ne
 801602e:	2301      	movne	r3, #1
 8016030:	2300      	moveq	r3, #0
 8016032:	b2db      	uxtb	r3, r3
 8016034:	e000      	b.n	8016038 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016036:	2300      	movs	r3, #0
}
 8016038:	4618      	mov	r0, r3
 801603a:	3730      	adds	r7, #48	; 0x30
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}
 8016040:	0801c454 	.word	0x0801c454
 8016044:	0801c538 	.word	0x0801c538
 8016048:	0801c49c 	.word	0x0801c49c
 801604c:	0801c558 	.word	0x0801c558
 8016050:	0801c590 	.word	0x0801c590
 8016054:	0801c5a0 	.word	0x0801c5a0

08016058 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b08e      	sub	sp, #56	; 0x38
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	f003 030f 	and.w	r3, r3, #15
 801606e:	b2db      	uxtb	r3, r3
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	b2db      	uxtb	r3, r3
 8016074:	2b14      	cmp	r3, #20
 8016076:	f040 8167 	bne.w	8016348 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801607a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801607c:	88db      	ldrh	r3, [r3, #6]
 801607e:	b29b      	uxth	r3, r3
 8016080:	4618      	mov	r0, r3
 8016082:	f7f4 fc8d 	bl	800a9a0 <lwip_htons>
 8016086:	4603      	mov	r3, r0
 8016088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801608c:	b29b      	uxth	r3, r3
 801608e:	00db      	lsls	r3, r3, #3
 8016090:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016094:	885b      	ldrh	r3, [r3, #2]
 8016096:	b29b      	uxth	r3, r3
 8016098:	4618      	mov	r0, r3
 801609a:	f7f4 fc81 	bl	800a9a0 <lwip_htons>
 801609e:	4603      	mov	r3, r0
 80160a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80160a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	f003 030f 	and.w	r3, r3, #15
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80160b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80160b6:	b29b      	uxth	r3, r3
 80160b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ba:	429a      	cmp	r2, r3
 80160bc:	f0c0 8146 	bcc.w	801634c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80160c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160c8:	1ad3      	subs	r3, r2, r3
 80160ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f7f6 f8ad 	bl	800c22c <pbuf_clen>
 80160d2:	4603      	mov	r3, r0
 80160d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80160d6:	4b9f      	ldr	r3, [pc, #636]	; (8016354 <ip4_reass+0x2fc>)
 80160d8:	881b      	ldrh	r3, [r3, #0]
 80160da:	461a      	mov	r2, r3
 80160dc:	8c3b      	ldrh	r3, [r7, #32]
 80160de:	4413      	add	r3, r2
 80160e0:	2b0a      	cmp	r3, #10
 80160e2:	dd10      	ble.n	8016106 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80160e4:	8c3b      	ldrh	r3, [r7, #32]
 80160e6:	4619      	mov	r1, r3
 80160e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160ea:	f7ff fd81 	bl	8015bf0 <ip_reass_remove_oldest_datagram>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	f000 812d 	beq.w	8016350 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80160f6:	4b97      	ldr	r3, [pc, #604]	; (8016354 <ip4_reass+0x2fc>)
 80160f8:	881b      	ldrh	r3, [r3, #0]
 80160fa:	461a      	mov	r2, r3
 80160fc:	8c3b      	ldrh	r3, [r7, #32]
 80160fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016100:	2b0a      	cmp	r3, #10
 8016102:	f300 8125 	bgt.w	8016350 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016106:	4b94      	ldr	r3, [pc, #592]	; (8016358 <ip4_reass+0x300>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	633b      	str	r3, [r7, #48]	; 0x30
 801610c:	e015      	b.n	801613a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016110:	695a      	ldr	r2, [r3, #20]
 8016112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016114:	68db      	ldr	r3, [r3, #12]
 8016116:	429a      	cmp	r2, r3
 8016118:	d10c      	bne.n	8016134 <ip4_reass+0xdc>
 801611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801611c:	699a      	ldr	r2, [r3, #24]
 801611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016120:	691b      	ldr	r3, [r3, #16]
 8016122:	429a      	cmp	r2, r3
 8016124:	d106      	bne.n	8016134 <ip4_reass+0xdc>
 8016126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016128:	899a      	ldrh	r2, [r3, #12]
 801612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612c:	889b      	ldrh	r3, [r3, #4]
 801612e:	b29b      	uxth	r3, r3
 8016130:	429a      	cmp	r2, r3
 8016132:	d006      	beq.n	8016142 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	633b      	str	r3, [r7, #48]	; 0x30
 801613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e6      	bne.n	801610e <ip4_reass+0xb6>
 8016140:	e000      	b.n	8016144 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016142:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016146:	2b00      	cmp	r3, #0
 8016148:	d109      	bne.n	801615e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801614a:	8c3b      	ldrh	r3, [r7, #32]
 801614c:	4619      	mov	r1, r3
 801614e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016150:	f7ff fdb0 	bl	8015cb4 <ip_reass_enqueue_new_datagram>
 8016154:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016158:	2b00      	cmp	r3, #0
 801615a:	d11c      	bne.n	8016196 <ip4_reass+0x13e>
      goto nullreturn;
 801615c:	e109      	b.n	8016372 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016160:	88db      	ldrh	r3, [r3, #6]
 8016162:	b29b      	uxth	r3, r3
 8016164:	4618      	mov	r0, r3
 8016166:	f7f4 fc1b 	bl	800a9a0 <lwip_htons>
 801616a:	4603      	mov	r3, r0
 801616c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016170:	2b00      	cmp	r3, #0
 8016172:	d110      	bne.n	8016196 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016176:	89db      	ldrh	r3, [r3, #14]
 8016178:	4618      	mov	r0, r3
 801617a:	f7f4 fc11 	bl	800a9a0 <lwip_htons>
 801617e:	4603      	mov	r3, r0
 8016180:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016184:	2b00      	cmp	r3, #0
 8016186:	d006      	beq.n	8016196 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618a:	3308      	adds	r3, #8
 801618c:	2214      	movs	r2, #20
 801618e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016190:	4618      	mov	r0, r3
 8016192:	f000 fc8f 	bl	8016ab4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016198:	88db      	ldrh	r3, [r3, #6]
 801619a:	b29b      	uxth	r3, r3
 801619c:	f003 0320 	and.w	r3, r3, #32
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	bf0c      	ite	eq
 80161a4:	2301      	moveq	r3, #1
 80161a6:	2300      	movne	r3, #0
 80161a8:	b2db      	uxtb	r3, r3
 80161aa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d00e      	beq.n	80161d0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80161b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80161b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161b6:	4413      	add	r3, r2
 80161b8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80161ba:	8b7a      	ldrh	r2, [r7, #26]
 80161bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80161be:	429a      	cmp	r2, r3
 80161c0:	f0c0 80a0 	bcc.w	8016304 <ip4_reass+0x2ac>
 80161c4:	8b7b      	ldrh	r3, [r7, #26]
 80161c6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80161ca:	4293      	cmp	r3, r2
 80161cc:	f200 809a 	bhi.w	8016304 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80161d0:	69fa      	ldr	r2, [r7, #28]
 80161d2:	6879      	ldr	r1, [r7, #4]
 80161d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161d6:	f7ff fdd5 	bl	8015d84 <ip_reass_chain_frag_into_datagram_and_validate>
 80161da:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161e2:	f000 8091 	beq.w	8016308 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80161e6:	4b5b      	ldr	r3, [pc, #364]	; (8016354 <ip4_reass+0x2fc>)
 80161e8:	881a      	ldrh	r2, [r3, #0]
 80161ea:	8c3b      	ldrh	r3, [r7, #32]
 80161ec:	4413      	add	r3, r2
 80161ee:	b29a      	uxth	r2, r3
 80161f0:	4b58      	ldr	r3, [pc, #352]	; (8016354 <ip4_reass+0x2fc>)
 80161f2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d00d      	beq.n	8016216 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80161fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80161fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161fe:	4413      	add	r3, r2
 8016200:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016204:	8a7a      	ldrh	r2, [r7, #18]
 8016206:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801620a:	7f9b      	ldrb	r3, [r3, #30]
 801620c:	f043 0301 	orr.w	r3, r3, #1
 8016210:	b2da      	uxtb	r2, r3
 8016212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016214:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	2b01      	cmp	r3, #1
 801621a:	d171      	bne.n	8016300 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621e:	8b9b      	ldrh	r3, [r3, #28]
 8016220:	3314      	adds	r3, #20
 8016222:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016226:	685b      	ldr	r3, [r3, #4]
 8016228:	685b      	ldr	r3, [r3, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016238:	3308      	adds	r3, #8
 801623a:	2214      	movs	r2, #20
 801623c:	4619      	mov	r1, r3
 801623e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016240:	f000 fc38 	bl	8016ab4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016244:	8a3b      	ldrh	r3, [r7, #16]
 8016246:	4618      	mov	r0, r3
 8016248:	f7f4 fbaa 	bl	800a9a0 <lwip_htons>
 801624c:	4603      	mov	r3, r0
 801624e:	461a      	mov	r2, r3
 8016250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016252:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016256:	2200      	movs	r2, #0
 8016258:	719a      	strb	r2, [r3, #6]
 801625a:	2200      	movs	r2, #0
 801625c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016260:	2200      	movs	r2, #0
 8016262:	729a      	strb	r2, [r3, #10]
 8016264:	2200      	movs	r2, #0
 8016266:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801626a:	685b      	ldr	r3, [r3, #4]
 801626c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801626e:	e00d      	b.n	801628c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016276:	2114      	movs	r1, #20
 8016278:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801627a:	f7f5 fec3 	bl	800c004 <pbuf_remove_header>
      pbuf_cat(p, r);
 801627e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f7f6 f813 	bl	800c2ac <pbuf_cat>
      r = iprh->next_pbuf;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801628e:	2b00      	cmp	r3, #0
 8016290:	d1ee      	bne.n	8016270 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016292:	4b31      	ldr	r3, [pc, #196]	; (8016358 <ip4_reass+0x300>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016298:	429a      	cmp	r2, r3
 801629a:	d102      	bne.n	80162a2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801629c:	2300      	movs	r3, #0
 801629e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162a0:	e010      	b.n	80162c4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80162a2:	4b2d      	ldr	r3, [pc, #180]	; (8016358 <ip4_reass+0x300>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162a8:	e007      	b.n	80162ba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80162aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d006      	beq.n	80162c2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80162b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d1f4      	bne.n	80162aa <ip4_reass+0x252>
 80162c0:	e000      	b.n	80162c4 <ip4_reass+0x26c>
          break;
 80162c2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80162c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162c8:	f7ff fd2e 	bl	8015d28 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f7f5 ffad 	bl	800c22c <pbuf_clen>
 80162d2:	4603      	mov	r3, r0
 80162d4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80162d6:	4b1f      	ldr	r3, [pc, #124]	; (8016354 <ip4_reass+0x2fc>)
 80162d8:	881b      	ldrh	r3, [r3, #0]
 80162da:	8c3a      	ldrh	r2, [r7, #32]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d906      	bls.n	80162ee <ip4_reass+0x296>
 80162e0:	4b1e      	ldr	r3, [pc, #120]	; (801635c <ip4_reass+0x304>)
 80162e2:	f240 229b 	movw	r2, #667	; 0x29b
 80162e6:	491e      	ldr	r1, [pc, #120]	; (8016360 <ip4_reass+0x308>)
 80162e8:	481e      	ldr	r0, [pc, #120]	; (8016364 <ip4_reass+0x30c>)
 80162ea:	f001 f857 	bl	801739c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80162ee:	4b19      	ldr	r3, [pc, #100]	; (8016354 <ip4_reass+0x2fc>)
 80162f0:	881a      	ldrh	r2, [r3, #0]
 80162f2:	8c3b      	ldrh	r3, [r7, #32]
 80162f4:	1ad3      	subs	r3, r2, r3
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	4b16      	ldr	r3, [pc, #88]	; (8016354 <ip4_reass+0x2fc>)
 80162fa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	e03c      	b.n	801637a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016300:	2300      	movs	r3, #0
 8016302:	e03a      	b.n	801637a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016304:	bf00      	nop
 8016306:	e000      	b.n	801630a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016308:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630c:	2b00      	cmp	r3, #0
 801630e:	d106      	bne.n	801631e <ip4_reass+0x2c6>
 8016310:	4b12      	ldr	r3, [pc, #72]	; (801635c <ip4_reass+0x304>)
 8016312:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016316:	4914      	ldr	r1, [pc, #80]	; (8016368 <ip4_reass+0x310>)
 8016318:	4812      	ldr	r0, [pc, #72]	; (8016364 <ip4_reass+0x30c>)
 801631a:	f001 f83f 	bl	801739c <iprintf>
  if (ipr->p == NULL) {
 801631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016320:	685b      	ldr	r3, [r3, #4]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d124      	bne.n	8016370 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016326:	4b0c      	ldr	r3, [pc, #48]	; (8016358 <ip4_reass+0x300>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801632c:	429a      	cmp	r2, r3
 801632e:	d006      	beq.n	801633e <ip4_reass+0x2e6>
 8016330:	4b0a      	ldr	r3, [pc, #40]	; (801635c <ip4_reass+0x304>)
 8016332:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016336:	490d      	ldr	r1, [pc, #52]	; (801636c <ip4_reass+0x314>)
 8016338:	480a      	ldr	r0, [pc, #40]	; (8016364 <ip4_reass+0x30c>)
 801633a:	f001 f82f 	bl	801739c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801633e:	2100      	movs	r1, #0
 8016340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016342:	f7ff fcf1 	bl	8015d28 <ip_reass_dequeue_datagram>
 8016346:	e014      	b.n	8016372 <ip4_reass+0x31a>
    goto nullreturn;
 8016348:	bf00      	nop
 801634a:	e012      	b.n	8016372 <ip4_reass+0x31a>
    goto nullreturn;
 801634c:	bf00      	nop
 801634e:	e010      	b.n	8016372 <ip4_reass+0x31a>
      goto nullreturn;
 8016350:	bf00      	nop
 8016352:	e00e      	b.n	8016372 <ip4_reass+0x31a>
 8016354:	20004cbc 	.word	0x20004cbc
 8016358:	20004cb8 	.word	0x20004cb8
 801635c:	0801c454 	.word	0x0801c454
 8016360:	0801c5c4 	.word	0x0801c5c4
 8016364:	0801c49c 	.word	0x0801c49c
 8016368:	0801c5e0 	.word	0x0801c5e0
 801636c:	0801c5ec 	.word	0x0801c5ec
  }

nullreturn:
 8016370:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f7f5 fecc 	bl	800c110 <pbuf_free>
  return NULL;
 8016378:	2300      	movs	r3, #0
}
 801637a:	4618      	mov	r0, r3
 801637c:	3738      	adds	r7, #56	; 0x38
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}
 8016382:	bf00      	nop

08016384 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016384:	b580      	push	{r7, lr}
 8016386:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016388:	2005      	movs	r0, #5
 801638a:	f7f4 ffbf 	bl	800b30c <memp_malloc>
 801638e:	4603      	mov	r3, r0
}
 8016390:	4618      	mov	r0, r3
 8016392:	bd80      	pop	{r7, pc}

08016394 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d106      	bne.n	80163b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80163a2:	4b07      	ldr	r3, [pc, #28]	; (80163c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80163a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80163a8:	4906      	ldr	r1, [pc, #24]	; (80163c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 80163aa:	4807      	ldr	r0, [pc, #28]	; (80163c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 80163ac:	f000 fff6 	bl	801739c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80163b0:	6879      	ldr	r1, [r7, #4]
 80163b2:	2005      	movs	r0, #5
 80163b4:	f7f4 fffc 	bl	800b3b0 <memp_free>
}
 80163b8:	bf00      	nop
 80163ba:	3708      	adds	r7, #8
 80163bc:	46bd      	mov	sp, r7
 80163be:	bd80      	pop	{r7, pc}
 80163c0:	0801c454 	.word	0x0801c454
 80163c4:	0801c60c 	.word	0x0801c60c
 80163c8:	0801c49c 	.word	0x0801c49c

080163cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b084      	sub	sp, #16
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d106      	bne.n	80163ec <ipfrag_free_pbuf_custom+0x20>
 80163de:	4b11      	ldr	r3, [pc, #68]	; (8016424 <ipfrag_free_pbuf_custom+0x58>)
 80163e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80163e4:	4910      	ldr	r1, [pc, #64]	; (8016428 <ipfrag_free_pbuf_custom+0x5c>)
 80163e6:	4811      	ldr	r0, [pc, #68]	; (801642c <ipfrag_free_pbuf_custom+0x60>)
 80163e8:	f000 ffd8 	bl	801739c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80163ec:	68fa      	ldr	r2, [r7, #12]
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	d006      	beq.n	8016402 <ipfrag_free_pbuf_custom+0x36>
 80163f4:	4b0b      	ldr	r3, [pc, #44]	; (8016424 <ipfrag_free_pbuf_custom+0x58>)
 80163f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80163fa:	490d      	ldr	r1, [pc, #52]	; (8016430 <ipfrag_free_pbuf_custom+0x64>)
 80163fc:	480b      	ldr	r0, [pc, #44]	; (801642c <ipfrag_free_pbuf_custom+0x60>)
 80163fe:	f000 ffcd 	bl	801739c <iprintf>
  if (pcr->original != NULL) {
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	695b      	ldr	r3, [r3, #20]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d004      	beq.n	8016414 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	695b      	ldr	r3, [r3, #20]
 801640e:	4618      	mov	r0, r3
 8016410:	f7f5 fe7e 	bl	800c110 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016414:	68f8      	ldr	r0, [r7, #12]
 8016416:	f7ff ffbd 	bl	8016394 <ip_frag_free_pbuf_custom_ref>
}
 801641a:	bf00      	nop
 801641c:	3710      	adds	r7, #16
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	0801c454 	.word	0x0801c454
 8016428:	0801c618 	.word	0x0801c618
 801642c:	0801c49c 	.word	0x0801c49c
 8016430:	0801c624 	.word	0x0801c624

08016434 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b094      	sub	sp, #80	; 0x50
 8016438:	af02      	add	r7, sp, #8
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016440:	2300      	movs	r3, #0
 8016442:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801644a:	3b14      	subs	r3, #20
 801644c:	2b00      	cmp	r3, #0
 801644e:	da00      	bge.n	8016452 <ip4_frag+0x1e>
 8016450:	3307      	adds	r3, #7
 8016452:	10db      	asrs	r3, r3, #3
 8016454:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016456:	2314      	movs	r3, #20
 8016458:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016462:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	f003 030f 	and.w	r3, r3, #15
 801646c:	b2db      	uxtb	r3, r3
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	b2db      	uxtb	r3, r3
 8016472:	2b14      	cmp	r3, #20
 8016474:	d002      	beq.n	801647c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016476:	f06f 0305 	mvn.w	r3, #5
 801647a:	e110      	b.n	801669e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	895b      	ldrh	r3, [r3, #10]
 8016480:	2b13      	cmp	r3, #19
 8016482:	d809      	bhi.n	8016498 <ip4_frag+0x64>
 8016484:	4b88      	ldr	r3, [pc, #544]	; (80166a8 <ip4_frag+0x274>)
 8016486:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801648a:	4988      	ldr	r1, [pc, #544]	; (80166ac <ip4_frag+0x278>)
 801648c:	4888      	ldr	r0, [pc, #544]	; (80166b0 <ip4_frag+0x27c>)
 801648e:	f000 ff85 	bl	801739c <iprintf>
 8016492:	f06f 0305 	mvn.w	r3, #5
 8016496:	e102      	b.n	801669e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649a:	88db      	ldrh	r3, [r3, #6]
 801649c:	b29b      	uxth	r3, r3
 801649e:	4618      	mov	r0, r3
 80164a0:	f7f4 fa7e 	bl	800a9a0 <lwip_htons>
 80164a4:	4603      	mov	r3, r0
 80164a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80164a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80164b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80164b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	891b      	ldrh	r3, [r3, #8]
 80164be:	3b14      	subs	r3, #20
 80164c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80164c4:	e0e1      	b.n	801668a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80164c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80164c8:	00db      	lsls	r3, r3, #3
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164d0:	4293      	cmp	r3, r2
 80164d2:	bf28      	it	cs
 80164d4:	4613      	movcs	r3, r2
 80164d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80164d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164dc:	2114      	movs	r1, #20
 80164de:	200e      	movs	r0, #14
 80164e0:	f7f5 fb32 	bl	800bb48 <pbuf_alloc>
 80164e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80164e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f000 80d5 	beq.w	8016698 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80164ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f0:	895b      	ldrh	r3, [r3, #10]
 80164f2:	2b13      	cmp	r3, #19
 80164f4:	d806      	bhi.n	8016504 <ip4_frag+0xd0>
 80164f6:	4b6c      	ldr	r3, [pc, #432]	; (80166a8 <ip4_frag+0x274>)
 80164f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80164fc:	496d      	ldr	r1, [pc, #436]	; (80166b4 <ip4_frag+0x280>)
 80164fe:	486c      	ldr	r0, [pc, #432]	; (80166b0 <ip4_frag+0x27c>)
 8016500:	f000 ff4c 	bl	801739c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	2214      	movs	r2, #20
 801650a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801650c:	4618      	mov	r0, r3
 801650e:	f000 fad1 	bl	8016ab4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801651a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801651e:	e064      	b.n	80165ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	895a      	ldrh	r2, [r3, #10]
 8016524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016526:	1ad3      	subs	r3, r2, r3
 8016528:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	895b      	ldrh	r3, [r3, #10]
 801652e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016530:	429a      	cmp	r2, r3
 8016532:	d906      	bls.n	8016542 <ip4_frag+0x10e>
 8016534:	4b5c      	ldr	r3, [pc, #368]	; (80166a8 <ip4_frag+0x274>)
 8016536:	f240 322d 	movw	r2, #813	; 0x32d
 801653a:	495f      	ldr	r1, [pc, #380]	; (80166b8 <ip4_frag+0x284>)
 801653c:	485c      	ldr	r0, [pc, #368]	; (80166b0 <ip4_frag+0x27c>)
 801653e:	f000 ff2d 	bl	801739c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016542:	8bfa      	ldrh	r2, [r7, #30]
 8016544:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016548:	4293      	cmp	r3, r2
 801654a:	bf28      	it	cs
 801654c:	4613      	movcs	r3, r2
 801654e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016552:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016556:	2b00      	cmp	r3, #0
 8016558:	d105      	bne.n	8016566 <ip4_frag+0x132>
        poff = 0;
 801655a:	2300      	movs	r3, #0
 801655c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	60fb      	str	r3, [r7, #12]
        continue;
 8016564:	e041      	b.n	80165ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016566:	f7ff ff0d 	bl	8016384 <ip_frag_alloc_pbuf_custom_ref>
 801656a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801656c:	69bb      	ldr	r3, [r7, #24]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d103      	bne.n	801657a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016574:	f7f5 fdcc 	bl	800c110 <pbuf_free>
        goto memerr;
 8016578:	e08f      	b.n	801669a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801657a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016582:	4413      	add	r3, r2
 8016584:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016588:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801658c:	9201      	str	r2, [sp, #4]
 801658e:	9300      	str	r3, [sp, #0]
 8016590:	4603      	mov	r3, r0
 8016592:	2241      	movs	r2, #65	; 0x41
 8016594:	2000      	movs	r0, #0
 8016596:	f7f5 fc01 	bl	800bd9c <pbuf_alloced_custom>
 801659a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d106      	bne.n	80165b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80165a2:	69b8      	ldr	r0, [r7, #24]
 80165a4:	f7ff fef6 	bl	8016394 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80165a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165aa:	f7f5 fdb1 	bl	800c110 <pbuf_free>
        goto memerr;
 80165ae:	e074      	b.n	801669a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80165b0:	68f8      	ldr	r0, [r7, #12]
 80165b2:	f7f5 fe53 	bl	800c25c <pbuf_ref>
      pcr->original = p;
 80165b6:	69bb      	ldr	r3, [r7, #24]
 80165b8:	68fa      	ldr	r2, [r7, #12]
 80165ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80165bc:	69bb      	ldr	r3, [r7, #24]
 80165be:	4a3f      	ldr	r2, [pc, #252]	; (80166bc <ip4_frag+0x288>)
 80165c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80165c2:	6979      	ldr	r1, [r7, #20]
 80165c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165c6:	f7f5 fe71 	bl	800c2ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80165ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80165ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80165d2:	1ad3      	subs	r3, r2, r3
 80165d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80165d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d004      	beq.n	80165ea <ip4_frag+0x1b6>
        poff = 0;
 80165e0:	2300      	movs	r3, #0
 80165e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80165ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d196      	bne.n	8016520 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80165f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80165f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80165f8:	4413      	add	r3, r2
 80165fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016600:	f1a3 0213 	sub.w	r2, r3, #19
 8016604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016608:	429a      	cmp	r2, r3
 801660a:	bfcc      	ite	gt
 801660c:	2301      	movgt	r3, #1
 801660e:	2300      	movle	r3, #0
 8016610:	b2db      	uxtb	r3, r3
 8016612:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016614:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801661c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801661e:	6a3b      	ldr	r3, [r7, #32]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d002      	beq.n	801662a <ip4_frag+0x1f6>
 8016624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016626:	2b00      	cmp	r3, #0
 8016628:	d003      	beq.n	8016632 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801662a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801662c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016630:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016632:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016634:	4618      	mov	r0, r3
 8016636:	f7f4 f9b3 	bl	800a9a0 <lwip_htons>
 801663a:	4603      	mov	r3, r0
 801663c:	461a      	mov	r2, r3
 801663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016640:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016644:	3314      	adds	r3, #20
 8016646:	b29b      	uxth	r3, r3
 8016648:	4618      	mov	r0, r3
 801664a:	f7f4 f9a9 	bl	800a9a0 <lwip_htons>
 801664e:	4603      	mov	r3, r0
 8016650:	461a      	mov	r2, r3
 8016652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016654:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016658:	2200      	movs	r2, #0
 801665a:	729a      	strb	r2, [r3, #10]
 801665c:	2200      	movs	r2, #0
 801665e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	695b      	ldr	r3, [r3, #20]
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016668:	68b8      	ldr	r0, [r7, #8]
 801666a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801666c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801666e:	f7f5 fd4f 	bl	800c110 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016672:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016678:	1ad3      	subs	r3, r2, r3
 801667a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801667e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016682:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016684:	4413      	add	r3, r2
 8016686:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801668a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801668e:	2b00      	cmp	r3, #0
 8016690:	f47f af19 	bne.w	80164c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016694:	2300      	movs	r3, #0
 8016696:	e002      	b.n	801669e <ip4_frag+0x26a>
      goto memerr;
 8016698:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801669a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801669e:	4618      	mov	r0, r3
 80166a0:	3748      	adds	r7, #72	; 0x48
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	0801c454 	.word	0x0801c454
 80166ac:	0801c630 	.word	0x0801c630
 80166b0:	0801c49c 	.word	0x0801c49c
 80166b4:	0801c64c 	.word	0x0801c64c
 80166b8:	0801c66c 	.word	0x0801c66c
 80166bc:	080163cd 	.word	0x080163cd

080166c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b086      	sub	sp, #24
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80166ca:	230e      	movs	r3, #14
 80166cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	895b      	ldrh	r3, [r3, #10]
 80166d2:	2b0e      	cmp	r3, #14
 80166d4:	d96e      	bls.n	80167b4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	7bdb      	ldrb	r3, [r3, #15]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d106      	bne.n	80166ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80166e4:	3301      	adds	r3, #1
 80166e6:	b2da      	uxtb	r2, r3
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80166f2:	693b      	ldr	r3, [r7, #16]
 80166f4:	7b1a      	ldrb	r2, [r3, #12]
 80166f6:	7b5b      	ldrb	r3, [r3, #13]
 80166f8:	021b      	lsls	r3, r3, #8
 80166fa:	4313      	orrs	r3, r2
 80166fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	f003 0301 	and.w	r3, r3, #1
 8016706:	2b00      	cmp	r3, #0
 8016708:	d023      	beq.n	8016752 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	2b01      	cmp	r3, #1
 8016710:	d10f      	bne.n	8016732 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016712:	693b      	ldr	r3, [r7, #16]
 8016714:	785b      	ldrb	r3, [r3, #1]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d11b      	bne.n	8016752 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801671a:	693b      	ldr	r3, [r7, #16]
 801671c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801671e:	2b5e      	cmp	r3, #94	; 0x5e
 8016720:	d117      	bne.n	8016752 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	7b5b      	ldrb	r3, [r3, #13]
 8016726:	f043 0310 	orr.w	r3, r3, #16
 801672a:	b2da      	uxtb	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	735a      	strb	r2, [r3, #13]
 8016730:	e00f      	b.n	8016752 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	2206      	movs	r2, #6
 8016736:	4928      	ldr	r1, [pc, #160]	; (80167d8 <ethernet_input+0x118>)
 8016738:	4618      	mov	r0, r3
 801673a:	f000 f9ad 	bl	8016a98 <memcmp>
 801673e:	4603      	mov	r3, r0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d106      	bne.n	8016752 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	7b5b      	ldrb	r3, [r3, #13]
 8016748:	f043 0308 	orr.w	r3, r3, #8
 801674c:	b2da      	uxtb	r2, r3
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016752:	89fb      	ldrh	r3, [r7, #14]
 8016754:	2b08      	cmp	r3, #8
 8016756:	d003      	beq.n	8016760 <ethernet_input+0xa0>
 8016758:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801675c:	d014      	beq.n	8016788 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801675e:	e032      	b.n	80167c6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016766:	f003 0308 	and.w	r3, r3, #8
 801676a:	2b00      	cmp	r3, #0
 801676c:	d024      	beq.n	80167b8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801676e:	8afb      	ldrh	r3, [r7, #22]
 8016770:	4619      	mov	r1, r3
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f7f5 fc46 	bl	800c004 <pbuf_remove_header>
 8016778:	4603      	mov	r3, r0
 801677a:	2b00      	cmp	r3, #0
 801677c:	d11e      	bne.n	80167bc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801677e:	6839      	ldr	r1, [r7, #0]
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7fe ff09 	bl	8015598 <ip4_input>
      break;
 8016786:	e013      	b.n	80167b0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801678e:	f003 0308 	and.w	r3, r3, #8
 8016792:	2b00      	cmp	r3, #0
 8016794:	d014      	beq.n	80167c0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016796:	8afb      	ldrh	r3, [r7, #22]
 8016798:	4619      	mov	r1, r3
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7f5 fc32 	bl	800c004 <pbuf_remove_header>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d10e      	bne.n	80167c4 <ethernet_input+0x104>
        etharp_input(p, netif);
 80167a6:	6839      	ldr	r1, [r7, #0]
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f7fe f8a5 	bl	80148f8 <etharp_input>
      break;
 80167ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80167b0:	2300      	movs	r3, #0
 80167b2:	e00c      	b.n	80167ce <ethernet_input+0x10e>
    goto free_and_return;
 80167b4:	bf00      	nop
 80167b6:	e006      	b.n	80167c6 <ethernet_input+0x106>
        goto free_and_return;
 80167b8:	bf00      	nop
 80167ba:	e004      	b.n	80167c6 <ethernet_input+0x106>
        goto free_and_return;
 80167bc:	bf00      	nop
 80167be:	e002      	b.n	80167c6 <ethernet_input+0x106>
        goto free_and_return;
 80167c0:	bf00      	nop
 80167c2:	e000      	b.n	80167c6 <ethernet_input+0x106>
        goto free_and_return;
 80167c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f7f5 fca2 	bl	800c110 <pbuf_free>
  return ERR_OK;
 80167cc:	2300      	movs	r3, #0
}
 80167ce:	4618      	mov	r0, r3
 80167d0:	3718      	adds	r7, #24
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	0801c8c8 	.word	0x0801c8c8

080167dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80167dc:	b580      	push	{r7, lr}
 80167de:	b086      	sub	sp, #24
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	60f8      	str	r0, [r7, #12]
 80167e4:	60b9      	str	r1, [r7, #8]
 80167e6:	607a      	str	r2, [r7, #4]
 80167e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80167ea:	8c3b      	ldrh	r3, [r7, #32]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7f4 f8d7 	bl	800a9a0 <lwip_htons>
 80167f2:	4603      	mov	r3, r0
 80167f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80167f6:	210e      	movs	r1, #14
 80167f8:	68b8      	ldr	r0, [r7, #8]
 80167fa:	f7f5 fbf3 	bl	800bfe4 <pbuf_add_header>
 80167fe:	4603      	mov	r3, r0
 8016800:	2b00      	cmp	r3, #0
 8016802:	d125      	bne.n	8016850 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	8afa      	ldrh	r2, [r7, #22]
 801680e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	2206      	movs	r2, #6
 8016814:	6839      	ldr	r1, [r7, #0]
 8016816:	4618      	mov	r0, r3
 8016818:	f000 f94c 	bl	8016ab4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	3306      	adds	r3, #6
 8016820:	2206      	movs	r2, #6
 8016822:	6879      	ldr	r1, [r7, #4]
 8016824:	4618      	mov	r0, r3
 8016826:	f000 f945 	bl	8016ab4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016830:	2b06      	cmp	r3, #6
 8016832:	d006      	beq.n	8016842 <ethernet_output+0x66>
 8016834:	4b0a      	ldr	r3, [pc, #40]	; (8016860 <ethernet_output+0x84>)
 8016836:	f44f 7299 	mov.w	r2, #306	; 0x132
 801683a:	490a      	ldr	r1, [pc, #40]	; (8016864 <ethernet_output+0x88>)
 801683c:	480a      	ldr	r0, [pc, #40]	; (8016868 <ethernet_output+0x8c>)
 801683e:	f000 fdad 	bl	801739c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	699b      	ldr	r3, [r3, #24]
 8016846:	68b9      	ldr	r1, [r7, #8]
 8016848:	68f8      	ldr	r0, [r7, #12]
 801684a:	4798      	blx	r3
 801684c:	4603      	mov	r3, r0
 801684e:	e002      	b.n	8016856 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016850:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016852:	f06f 0301 	mvn.w	r3, #1
}
 8016856:	4618      	mov	r0, r3
 8016858:	3718      	adds	r7, #24
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop
 8016860:	0801c67c 	.word	0x0801c67c
 8016864:	0801c6b4 	.word	0x0801c6b4
 8016868:	0801c6e8 	.word	0x0801c6e8

0801686c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	2200      	movs	r2, #0
 801687a:	2104      	movs	r1, #4
 801687c:	4618      	mov	r0, r3
 801687e:	f7f0 fbcb 	bl	8007018 <osMessageQueueNew>
 8016882:	4602      	mov	r2, r0
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d102      	bne.n	8016896 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016894:	e000      	b.n	8016898 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016896:	2300      	movs	r3, #0
}
 8016898:	4618      	mov	r0, r3
 801689a:	3708      	adds	r7, #8
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}

080168a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6818      	ldr	r0, [r3, #0]
 80168ae:	4639      	mov	r1, r7
 80168b0:	2300      	movs	r3, #0
 80168b2:	2200      	movs	r2, #0
 80168b4:	f7f0 fc36 	bl	8007124 <osMessageQueuePut>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d102      	bne.n	80168c4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80168be:	2300      	movs	r3, #0
 80168c0:	73fb      	strb	r3, [r7, #15]
 80168c2:	e001      	b.n	80168c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80168c4:	23ff      	movs	r3, #255	; 0xff
 80168c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80168c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	3710      	adds	r7, #16
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b086      	sub	sp, #24
 80168d8:	af00      	add	r7, sp, #0
 80168da:	60f8      	str	r0, [r7, #12]
 80168dc:	60b9      	str	r1, [r7, #8]
 80168de:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80168e0:	f7ef fffc 	bl	80068dc <osKernelGetTickCount>
 80168e4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d013      	beq.n	8016914 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	6818      	ldr	r0, [r3, #0]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	68b9      	ldr	r1, [r7, #8]
 80168f6:	f7f0 fc89 	bl	800720c <osMessageQueueGet>
 80168fa:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d105      	bne.n	801690e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016902:	f7ef ffeb 	bl	80068dc <osKernelGetTickCount>
 8016906:	4602      	mov	r2, r0
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	1ad3      	subs	r3, r2, r3
 801690c:	e00f      	b.n	801692e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801690e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016912:	e00c      	b.n	801692e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	6818      	ldr	r0, [r3, #0]
 8016918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801691c:	2200      	movs	r2, #0
 801691e:	68b9      	ldr	r1, [r7, #8]
 8016920:	f7f0 fc74 	bl	800720c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016924:	f7ef ffda 	bl	80068dc <osKernelGetTickCount>
 8016928:	4602      	mov	r2, r0
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801692e:	4618      	mov	r0, r3
 8016930:	3718      	adds	r7, #24
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016936:	b480      	push	{r7}
 8016938:	b083      	sub	sp, #12
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d101      	bne.n	801694a <sys_mbox_valid+0x14>
    return 0;
 8016946:	2300      	movs	r3, #0
 8016948:	e000      	b.n	801694c <sys_mbox_valid+0x16>
  else
    return 1;
 801694a:	2301      	movs	r3, #1
}
 801694c:	4618      	mov	r0, r3
 801694e:	370c      	adds	r7, #12
 8016950:	46bd      	mov	sp, r7
 8016952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016956:	4770      	bx	lr

08016958 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801695c:	2000      	movs	r0, #0
 801695e:	f7f0 f8b9 	bl	8006ad4 <osMutexNew>
 8016962:	4603      	mov	r3, r0
 8016964:	4a01      	ldr	r2, [pc, #4]	; (801696c <sys_init+0x14>)
 8016966:	6013      	str	r3, [r2, #0]
#endif
}
 8016968:	bf00      	nop
 801696a:	bd80      	pop	{r7, pc}
 801696c:	20012cfc 	.word	0x20012cfc

08016970 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016978:	2000      	movs	r0, #0
 801697a:	f7f0 f8ab 	bl	8006ad4 <osMutexNew>
 801697e:	4602      	mov	r2, r0
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d102      	bne.n	8016992 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801698c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016990:	e000      	b.n	8016994 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016992:	2300      	movs	r3, #0
}
 8016994:	4618      	mov	r0, r3
 8016996:	3708      	adds	r7, #8
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80169ac:	4618      	mov	r0, r3
 80169ae:	f7f0 f92b 	bl	8006c08 <osMutexAcquire>
#endif
}
 80169b2:	bf00      	nop
 80169b4:	3708      	adds	r7, #8
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}

080169ba <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80169ba:	b580      	push	{r7, lr}
 80169bc:	b082      	sub	sp, #8
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	4618      	mov	r0, r3
 80169c8:	f7f0 f97c 	bl	8006cc4 <osMutexRelease>
}
 80169cc:	bf00      	nop
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}

080169d4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b08e      	sub	sp, #56	; 0x38
 80169d8:	af00      	add	r7, sp, #0
 80169da:	60f8      	str	r0, [r7, #12]
 80169dc:	60b9      	str	r1, [r7, #8]
 80169de:	607a      	str	r2, [r7, #4]
 80169e0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80169e2:	f107 0314 	add.w	r3, r7, #20
 80169e6:	2224      	movs	r2, #36	; 0x24
 80169e8:	2100      	movs	r1, #0
 80169ea:	4618      	mov	r0, r3
 80169ec:	f000 f88a 	bl	8016b04 <memset>
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	617b      	str	r3, [r7, #20]
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80169f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80169fc:	f107 0314 	add.w	r3, r7, #20
 8016a00:	461a      	mov	r2, r3
 8016a02:	6879      	ldr	r1, [r7, #4]
 8016a04:	68b8      	ldr	r0, [r7, #8]
 8016a06:	f7ef ff91 	bl	800692c <osThreadNew>
 8016a0a:	4603      	mov	r3, r0
#endif
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	3738      	adds	r7, #56	; 0x38
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}

08016a14 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016a18:	4b04      	ldr	r3, [pc, #16]	; (8016a2c <sys_arch_protect+0x18>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f0 f8f1 	bl	8006c08 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016a26:	2301      	movs	r3, #1
}
 8016a28:	4618      	mov	r0, r3
 8016a2a:	bd80      	pop	{r7, pc}
 8016a2c:	20012cfc 	.word	0x20012cfc

08016a30 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016a38:	4b04      	ldr	r3, [pc, #16]	; (8016a4c <sys_arch_unprotect+0x1c>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f7f0 f941 	bl	8006cc4 <osMutexRelease>
}
 8016a42:	bf00      	nop
 8016a44:	3708      	adds	r7, #8
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	20012cfc 	.word	0x20012cfc

08016a50 <__libc_init_array>:
 8016a50:	b570      	push	{r4, r5, r6, lr}
 8016a52:	4d0d      	ldr	r5, [pc, #52]	; (8016a88 <__libc_init_array+0x38>)
 8016a54:	4c0d      	ldr	r4, [pc, #52]	; (8016a8c <__libc_init_array+0x3c>)
 8016a56:	1b64      	subs	r4, r4, r5
 8016a58:	10a4      	asrs	r4, r4, #2
 8016a5a:	2600      	movs	r6, #0
 8016a5c:	42a6      	cmp	r6, r4
 8016a5e:	d109      	bne.n	8016a74 <__libc_init_array+0x24>
 8016a60:	4d0b      	ldr	r5, [pc, #44]	; (8016a90 <__libc_init_array+0x40>)
 8016a62:	4c0c      	ldr	r4, [pc, #48]	; (8016a94 <__libc_init_array+0x44>)
 8016a64:	f002 fec2 	bl	80197ec <_init>
 8016a68:	1b64      	subs	r4, r4, r5
 8016a6a:	10a4      	asrs	r4, r4, #2
 8016a6c:	2600      	movs	r6, #0
 8016a6e:	42a6      	cmp	r6, r4
 8016a70:	d105      	bne.n	8016a7e <__libc_init_array+0x2e>
 8016a72:	bd70      	pop	{r4, r5, r6, pc}
 8016a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a78:	4798      	blx	r3
 8016a7a:	3601      	adds	r6, #1
 8016a7c:	e7ee      	b.n	8016a5c <__libc_init_array+0xc>
 8016a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a82:	4798      	blx	r3
 8016a84:	3601      	adds	r6, #1
 8016a86:	e7f2      	b.n	8016a6e <__libc_init_array+0x1e>
 8016a88:	0801cd20 	.word	0x0801cd20
 8016a8c:	0801cd20 	.word	0x0801cd20
 8016a90:	0801cd20 	.word	0x0801cd20
 8016a94:	0801cd24 	.word	0x0801cd24

08016a98 <memcmp>:
 8016a98:	b530      	push	{r4, r5, lr}
 8016a9a:	3901      	subs	r1, #1
 8016a9c:	2400      	movs	r4, #0
 8016a9e:	42a2      	cmp	r2, r4
 8016aa0:	d101      	bne.n	8016aa6 <memcmp+0xe>
 8016aa2:	2000      	movs	r0, #0
 8016aa4:	e005      	b.n	8016ab2 <memcmp+0x1a>
 8016aa6:	5d03      	ldrb	r3, [r0, r4]
 8016aa8:	3401      	adds	r4, #1
 8016aaa:	5d0d      	ldrb	r5, [r1, r4]
 8016aac:	42ab      	cmp	r3, r5
 8016aae:	d0f6      	beq.n	8016a9e <memcmp+0x6>
 8016ab0:	1b58      	subs	r0, r3, r5
 8016ab2:	bd30      	pop	{r4, r5, pc}

08016ab4 <memcpy>:
 8016ab4:	440a      	add	r2, r1
 8016ab6:	4291      	cmp	r1, r2
 8016ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016abc:	d100      	bne.n	8016ac0 <memcpy+0xc>
 8016abe:	4770      	bx	lr
 8016ac0:	b510      	push	{r4, lr}
 8016ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016aca:	4291      	cmp	r1, r2
 8016acc:	d1f9      	bne.n	8016ac2 <memcpy+0xe>
 8016ace:	bd10      	pop	{r4, pc}

08016ad0 <memmove>:
 8016ad0:	4288      	cmp	r0, r1
 8016ad2:	b510      	push	{r4, lr}
 8016ad4:	eb01 0402 	add.w	r4, r1, r2
 8016ad8:	d902      	bls.n	8016ae0 <memmove+0x10>
 8016ada:	4284      	cmp	r4, r0
 8016adc:	4623      	mov	r3, r4
 8016ade:	d807      	bhi.n	8016af0 <memmove+0x20>
 8016ae0:	1e43      	subs	r3, r0, #1
 8016ae2:	42a1      	cmp	r1, r4
 8016ae4:	d008      	beq.n	8016af8 <memmove+0x28>
 8016ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016aee:	e7f8      	b.n	8016ae2 <memmove+0x12>
 8016af0:	4402      	add	r2, r0
 8016af2:	4601      	mov	r1, r0
 8016af4:	428a      	cmp	r2, r1
 8016af6:	d100      	bne.n	8016afa <memmove+0x2a>
 8016af8:	bd10      	pop	{r4, pc}
 8016afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016b02:	e7f7      	b.n	8016af4 <memmove+0x24>

08016b04 <memset>:
 8016b04:	4402      	add	r2, r0
 8016b06:	4603      	mov	r3, r0
 8016b08:	4293      	cmp	r3, r2
 8016b0a:	d100      	bne.n	8016b0e <memset+0xa>
 8016b0c:	4770      	bx	lr
 8016b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8016b12:	e7f9      	b.n	8016b08 <memset+0x4>

08016b14 <__cvt>:
 8016b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b16:	ed2d 8b02 	vpush	{d8}
 8016b1a:	eeb0 8b40 	vmov.f64	d8, d0
 8016b1e:	b085      	sub	sp, #20
 8016b20:	4617      	mov	r7, r2
 8016b22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016b24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016b26:	ee18 2a90 	vmov	r2, s17
 8016b2a:	f025 0520 	bic.w	r5, r5, #32
 8016b2e:	2a00      	cmp	r2, #0
 8016b30:	bfb6      	itet	lt
 8016b32:	222d      	movlt	r2, #45	; 0x2d
 8016b34:	2200      	movge	r2, #0
 8016b36:	eeb1 8b40 	vneglt.f64	d8, d0
 8016b3a:	2d46      	cmp	r5, #70	; 0x46
 8016b3c:	460c      	mov	r4, r1
 8016b3e:	701a      	strb	r2, [r3, #0]
 8016b40:	d004      	beq.n	8016b4c <__cvt+0x38>
 8016b42:	2d45      	cmp	r5, #69	; 0x45
 8016b44:	d100      	bne.n	8016b48 <__cvt+0x34>
 8016b46:	3401      	adds	r4, #1
 8016b48:	2102      	movs	r1, #2
 8016b4a:	e000      	b.n	8016b4e <__cvt+0x3a>
 8016b4c:	2103      	movs	r1, #3
 8016b4e:	ab03      	add	r3, sp, #12
 8016b50:	9301      	str	r3, [sp, #4]
 8016b52:	ab02      	add	r3, sp, #8
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	4622      	mov	r2, r4
 8016b58:	4633      	mov	r3, r6
 8016b5a:	eeb0 0b48 	vmov.f64	d0, d8
 8016b5e:	f000 fd3f 	bl	80175e0 <_dtoa_r>
 8016b62:	2d47      	cmp	r5, #71	; 0x47
 8016b64:	d109      	bne.n	8016b7a <__cvt+0x66>
 8016b66:	07fb      	lsls	r3, r7, #31
 8016b68:	d407      	bmi.n	8016b7a <__cvt+0x66>
 8016b6a:	9b03      	ldr	r3, [sp, #12]
 8016b6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b6e:	1a1b      	subs	r3, r3, r0
 8016b70:	6013      	str	r3, [r2, #0]
 8016b72:	b005      	add	sp, #20
 8016b74:	ecbd 8b02 	vpop	{d8}
 8016b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b7a:	2d46      	cmp	r5, #70	; 0x46
 8016b7c:	eb00 0204 	add.w	r2, r0, r4
 8016b80:	d10c      	bne.n	8016b9c <__cvt+0x88>
 8016b82:	7803      	ldrb	r3, [r0, #0]
 8016b84:	2b30      	cmp	r3, #48	; 0x30
 8016b86:	d107      	bne.n	8016b98 <__cvt+0x84>
 8016b88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b90:	bf1c      	itt	ne
 8016b92:	f1c4 0401 	rsbne	r4, r4, #1
 8016b96:	6034      	strne	r4, [r6, #0]
 8016b98:	6833      	ldr	r3, [r6, #0]
 8016b9a:	441a      	add	r2, r3
 8016b9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba4:	bf08      	it	eq
 8016ba6:	9203      	streq	r2, [sp, #12]
 8016ba8:	2130      	movs	r1, #48	; 0x30
 8016baa:	9b03      	ldr	r3, [sp, #12]
 8016bac:	4293      	cmp	r3, r2
 8016bae:	d2dc      	bcs.n	8016b6a <__cvt+0x56>
 8016bb0:	1c5c      	adds	r4, r3, #1
 8016bb2:	9403      	str	r4, [sp, #12]
 8016bb4:	7019      	strb	r1, [r3, #0]
 8016bb6:	e7f8      	b.n	8016baa <__cvt+0x96>

08016bb8 <__exponent>:
 8016bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2900      	cmp	r1, #0
 8016bbe:	bfb8      	it	lt
 8016bc0:	4249      	neglt	r1, r1
 8016bc2:	f803 2b02 	strb.w	r2, [r3], #2
 8016bc6:	bfb4      	ite	lt
 8016bc8:	222d      	movlt	r2, #45	; 0x2d
 8016bca:	222b      	movge	r2, #43	; 0x2b
 8016bcc:	2909      	cmp	r1, #9
 8016bce:	7042      	strb	r2, [r0, #1]
 8016bd0:	dd2a      	ble.n	8016c28 <__exponent+0x70>
 8016bd2:	f10d 0407 	add.w	r4, sp, #7
 8016bd6:	46a4      	mov	ip, r4
 8016bd8:	270a      	movs	r7, #10
 8016bda:	46a6      	mov	lr, r4
 8016bdc:	460a      	mov	r2, r1
 8016bde:	fb91 f6f7 	sdiv	r6, r1, r7
 8016be2:	fb07 1516 	mls	r5, r7, r6, r1
 8016be6:	3530      	adds	r5, #48	; 0x30
 8016be8:	2a63      	cmp	r2, #99	; 0x63
 8016bea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8016bee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016bf2:	4631      	mov	r1, r6
 8016bf4:	dcf1      	bgt.n	8016bda <__exponent+0x22>
 8016bf6:	3130      	adds	r1, #48	; 0x30
 8016bf8:	f1ae 0502 	sub.w	r5, lr, #2
 8016bfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016c00:	1c44      	adds	r4, r0, #1
 8016c02:	4629      	mov	r1, r5
 8016c04:	4561      	cmp	r1, ip
 8016c06:	d30a      	bcc.n	8016c1e <__exponent+0x66>
 8016c08:	f10d 0209 	add.w	r2, sp, #9
 8016c0c:	eba2 020e 	sub.w	r2, r2, lr
 8016c10:	4565      	cmp	r5, ip
 8016c12:	bf88      	it	hi
 8016c14:	2200      	movhi	r2, #0
 8016c16:	4413      	add	r3, r2
 8016c18:	1a18      	subs	r0, r3, r0
 8016c1a:	b003      	add	sp, #12
 8016c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016c26:	e7ed      	b.n	8016c04 <__exponent+0x4c>
 8016c28:	2330      	movs	r3, #48	; 0x30
 8016c2a:	3130      	adds	r1, #48	; 0x30
 8016c2c:	7083      	strb	r3, [r0, #2]
 8016c2e:	70c1      	strb	r1, [r0, #3]
 8016c30:	1d03      	adds	r3, r0, #4
 8016c32:	e7f1      	b.n	8016c18 <__exponent+0x60>
 8016c34:	0000      	movs	r0, r0
	...

08016c38 <_printf_float>:
 8016c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3c:	b08b      	sub	sp, #44	; 0x2c
 8016c3e:	460c      	mov	r4, r1
 8016c40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016c44:	4616      	mov	r6, r2
 8016c46:	461f      	mov	r7, r3
 8016c48:	4605      	mov	r5, r0
 8016c4a:	f001 fb59 	bl	8018300 <_localeconv_r>
 8016c4e:	f8d0 b000 	ldr.w	fp, [r0]
 8016c52:	4658      	mov	r0, fp
 8016c54:	f7e9 faf4 	bl	8000240 <strlen>
 8016c58:	2300      	movs	r3, #0
 8016c5a:	9308      	str	r3, [sp, #32]
 8016c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8016c60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8016c64:	6822      	ldr	r2, [r4, #0]
 8016c66:	3307      	adds	r3, #7
 8016c68:	f023 0307 	bic.w	r3, r3, #7
 8016c6c:	f103 0108 	add.w	r1, r3, #8
 8016c70:	f8c8 1000 	str.w	r1, [r8]
 8016c74:	4682      	mov	sl, r0
 8016c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016c7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016c7e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8016ee0 <_printf_float+0x2a8>
 8016c82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8016c86:	eeb0 6bc0 	vabs.f64	d6, d0
 8016c8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8016c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c92:	dd24      	ble.n	8016cde <_printf_float+0xa6>
 8016c94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9c:	d502      	bpl.n	8016ca4 <_printf_float+0x6c>
 8016c9e:	232d      	movs	r3, #45	; 0x2d
 8016ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ca4:	4b90      	ldr	r3, [pc, #576]	; (8016ee8 <_printf_float+0x2b0>)
 8016ca6:	4891      	ldr	r0, [pc, #580]	; (8016eec <_printf_float+0x2b4>)
 8016ca8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016cac:	bf94      	ite	ls
 8016cae:	4698      	movls	r8, r3
 8016cb0:	4680      	movhi	r8, r0
 8016cb2:	2303      	movs	r3, #3
 8016cb4:	6123      	str	r3, [r4, #16]
 8016cb6:	f022 0204 	bic.w	r2, r2, #4
 8016cba:	2300      	movs	r3, #0
 8016cbc:	6022      	str	r2, [r4, #0]
 8016cbe:	9304      	str	r3, [sp, #16]
 8016cc0:	9700      	str	r7, [sp, #0]
 8016cc2:	4633      	mov	r3, r6
 8016cc4:	aa09      	add	r2, sp, #36	; 0x24
 8016cc6:	4621      	mov	r1, r4
 8016cc8:	4628      	mov	r0, r5
 8016cca:	f000 f9d3 	bl	8017074 <_printf_common>
 8016cce:	3001      	adds	r0, #1
 8016cd0:	f040 808a 	bne.w	8016de8 <_printf_float+0x1b0>
 8016cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cd8:	b00b      	add	sp, #44	; 0x2c
 8016cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cde:	eeb4 0b40 	vcmp.f64	d0, d0
 8016ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce6:	d709      	bvc.n	8016cfc <_printf_float+0xc4>
 8016ce8:	ee10 3a90 	vmov	r3, s1
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	bfbc      	itt	lt
 8016cf0:	232d      	movlt	r3, #45	; 0x2d
 8016cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016cf6:	487e      	ldr	r0, [pc, #504]	; (8016ef0 <_printf_float+0x2b8>)
 8016cf8:	4b7e      	ldr	r3, [pc, #504]	; (8016ef4 <_printf_float+0x2bc>)
 8016cfa:	e7d5      	b.n	8016ca8 <_printf_float+0x70>
 8016cfc:	6863      	ldr	r3, [r4, #4]
 8016cfe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8016d02:	9104      	str	r1, [sp, #16]
 8016d04:	1c59      	adds	r1, r3, #1
 8016d06:	d13c      	bne.n	8016d82 <_printf_float+0x14a>
 8016d08:	2306      	movs	r3, #6
 8016d0a:	6063      	str	r3, [r4, #4]
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	9303      	str	r3, [sp, #12]
 8016d10:	ab08      	add	r3, sp, #32
 8016d12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016d16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016d1a:	ab07      	add	r3, sp, #28
 8016d1c:	6861      	ldr	r1, [r4, #4]
 8016d1e:	9300      	str	r3, [sp, #0]
 8016d20:	6022      	str	r2, [r4, #0]
 8016d22:	f10d 031b 	add.w	r3, sp, #27
 8016d26:	4628      	mov	r0, r5
 8016d28:	f7ff fef4 	bl	8016b14 <__cvt>
 8016d2c:	9b04      	ldr	r3, [sp, #16]
 8016d2e:	9907      	ldr	r1, [sp, #28]
 8016d30:	2b47      	cmp	r3, #71	; 0x47
 8016d32:	4680      	mov	r8, r0
 8016d34:	d108      	bne.n	8016d48 <_printf_float+0x110>
 8016d36:	1cc8      	adds	r0, r1, #3
 8016d38:	db02      	blt.n	8016d40 <_printf_float+0x108>
 8016d3a:	6863      	ldr	r3, [r4, #4]
 8016d3c:	4299      	cmp	r1, r3
 8016d3e:	dd41      	ble.n	8016dc4 <_printf_float+0x18c>
 8016d40:	f1a9 0902 	sub.w	r9, r9, #2
 8016d44:	fa5f f989 	uxtb.w	r9, r9
 8016d48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016d4c:	d820      	bhi.n	8016d90 <_printf_float+0x158>
 8016d4e:	3901      	subs	r1, #1
 8016d50:	464a      	mov	r2, r9
 8016d52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016d56:	9107      	str	r1, [sp, #28]
 8016d58:	f7ff ff2e 	bl	8016bb8 <__exponent>
 8016d5c:	9a08      	ldr	r2, [sp, #32]
 8016d5e:	9004      	str	r0, [sp, #16]
 8016d60:	1813      	adds	r3, r2, r0
 8016d62:	2a01      	cmp	r2, #1
 8016d64:	6123      	str	r3, [r4, #16]
 8016d66:	dc02      	bgt.n	8016d6e <_printf_float+0x136>
 8016d68:	6822      	ldr	r2, [r4, #0]
 8016d6a:	07d2      	lsls	r2, r2, #31
 8016d6c:	d501      	bpl.n	8016d72 <_printf_float+0x13a>
 8016d6e:	3301      	adds	r3, #1
 8016d70:	6123      	str	r3, [r4, #16]
 8016d72:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d0a2      	beq.n	8016cc0 <_printf_float+0x88>
 8016d7a:	232d      	movs	r3, #45	; 0x2d
 8016d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d80:	e79e      	b.n	8016cc0 <_printf_float+0x88>
 8016d82:	9904      	ldr	r1, [sp, #16]
 8016d84:	2947      	cmp	r1, #71	; 0x47
 8016d86:	d1c1      	bne.n	8016d0c <_printf_float+0xd4>
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d1bf      	bne.n	8016d0c <_printf_float+0xd4>
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	e7bc      	b.n	8016d0a <_printf_float+0xd2>
 8016d90:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8016d94:	d118      	bne.n	8016dc8 <_printf_float+0x190>
 8016d96:	2900      	cmp	r1, #0
 8016d98:	6863      	ldr	r3, [r4, #4]
 8016d9a:	dd0b      	ble.n	8016db4 <_printf_float+0x17c>
 8016d9c:	6121      	str	r1, [r4, #16]
 8016d9e:	b913      	cbnz	r3, 8016da6 <_printf_float+0x16e>
 8016da0:	6822      	ldr	r2, [r4, #0]
 8016da2:	07d0      	lsls	r0, r2, #31
 8016da4:	d502      	bpl.n	8016dac <_printf_float+0x174>
 8016da6:	3301      	adds	r3, #1
 8016da8:	440b      	add	r3, r1
 8016daa:	6123      	str	r3, [r4, #16]
 8016dac:	2300      	movs	r3, #0
 8016dae:	65a1      	str	r1, [r4, #88]	; 0x58
 8016db0:	9304      	str	r3, [sp, #16]
 8016db2:	e7de      	b.n	8016d72 <_printf_float+0x13a>
 8016db4:	b913      	cbnz	r3, 8016dbc <_printf_float+0x184>
 8016db6:	6822      	ldr	r2, [r4, #0]
 8016db8:	07d2      	lsls	r2, r2, #31
 8016dba:	d501      	bpl.n	8016dc0 <_printf_float+0x188>
 8016dbc:	3302      	adds	r3, #2
 8016dbe:	e7f4      	b.n	8016daa <_printf_float+0x172>
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	e7f2      	b.n	8016daa <_printf_float+0x172>
 8016dc4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8016dc8:	9b08      	ldr	r3, [sp, #32]
 8016dca:	4299      	cmp	r1, r3
 8016dcc:	db05      	blt.n	8016dda <_printf_float+0x1a2>
 8016dce:	6823      	ldr	r3, [r4, #0]
 8016dd0:	6121      	str	r1, [r4, #16]
 8016dd2:	07d8      	lsls	r0, r3, #31
 8016dd4:	d5ea      	bpl.n	8016dac <_printf_float+0x174>
 8016dd6:	1c4b      	adds	r3, r1, #1
 8016dd8:	e7e7      	b.n	8016daa <_printf_float+0x172>
 8016dda:	2900      	cmp	r1, #0
 8016ddc:	bfd4      	ite	le
 8016dde:	f1c1 0202 	rsble	r2, r1, #2
 8016de2:	2201      	movgt	r2, #1
 8016de4:	4413      	add	r3, r2
 8016de6:	e7e0      	b.n	8016daa <_printf_float+0x172>
 8016de8:	6823      	ldr	r3, [r4, #0]
 8016dea:	055a      	lsls	r2, r3, #21
 8016dec:	d407      	bmi.n	8016dfe <_printf_float+0x1c6>
 8016dee:	6923      	ldr	r3, [r4, #16]
 8016df0:	4642      	mov	r2, r8
 8016df2:	4631      	mov	r1, r6
 8016df4:	4628      	mov	r0, r5
 8016df6:	47b8      	blx	r7
 8016df8:	3001      	adds	r0, #1
 8016dfa:	d12a      	bne.n	8016e52 <_printf_float+0x21a>
 8016dfc:	e76a      	b.n	8016cd4 <_printf_float+0x9c>
 8016dfe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016e02:	f240 80e2 	bls.w	8016fca <_printf_float+0x392>
 8016e06:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e12:	d133      	bne.n	8016e7c <_printf_float+0x244>
 8016e14:	4a38      	ldr	r2, [pc, #224]	; (8016ef8 <_printf_float+0x2c0>)
 8016e16:	2301      	movs	r3, #1
 8016e18:	4631      	mov	r1, r6
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	47b8      	blx	r7
 8016e1e:	3001      	adds	r0, #1
 8016e20:	f43f af58 	beq.w	8016cd4 <_printf_float+0x9c>
 8016e24:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	db02      	blt.n	8016e32 <_printf_float+0x1fa>
 8016e2c:	6823      	ldr	r3, [r4, #0]
 8016e2e:	07d8      	lsls	r0, r3, #31
 8016e30:	d50f      	bpl.n	8016e52 <_printf_float+0x21a>
 8016e32:	4653      	mov	r3, sl
 8016e34:	465a      	mov	r2, fp
 8016e36:	4631      	mov	r1, r6
 8016e38:	4628      	mov	r0, r5
 8016e3a:	47b8      	blx	r7
 8016e3c:	3001      	adds	r0, #1
 8016e3e:	f43f af49 	beq.w	8016cd4 <_printf_float+0x9c>
 8016e42:	f04f 0800 	mov.w	r8, #0
 8016e46:	f104 091a 	add.w	r9, r4, #26
 8016e4a:	9b08      	ldr	r3, [sp, #32]
 8016e4c:	3b01      	subs	r3, #1
 8016e4e:	4543      	cmp	r3, r8
 8016e50:	dc09      	bgt.n	8016e66 <_printf_float+0x22e>
 8016e52:	6823      	ldr	r3, [r4, #0]
 8016e54:	079b      	lsls	r3, r3, #30
 8016e56:	f100 8108 	bmi.w	801706a <_printf_float+0x432>
 8016e5a:	68e0      	ldr	r0, [r4, #12]
 8016e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e5e:	4298      	cmp	r0, r3
 8016e60:	bfb8      	it	lt
 8016e62:	4618      	movlt	r0, r3
 8016e64:	e738      	b.n	8016cd8 <_printf_float+0xa0>
 8016e66:	2301      	movs	r3, #1
 8016e68:	464a      	mov	r2, r9
 8016e6a:	4631      	mov	r1, r6
 8016e6c:	4628      	mov	r0, r5
 8016e6e:	47b8      	blx	r7
 8016e70:	3001      	adds	r0, #1
 8016e72:	f43f af2f 	beq.w	8016cd4 <_printf_float+0x9c>
 8016e76:	f108 0801 	add.w	r8, r8, #1
 8016e7a:	e7e6      	b.n	8016e4a <_printf_float+0x212>
 8016e7c:	9b07      	ldr	r3, [sp, #28]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	dc3c      	bgt.n	8016efc <_printf_float+0x2c4>
 8016e82:	4a1d      	ldr	r2, [pc, #116]	; (8016ef8 <_printf_float+0x2c0>)
 8016e84:	2301      	movs	r3, #1
 8016e86:	4631      	mov	r1, r6
 8016e88:	4628      	mov	r0, r5
 8016e8a:	47b8      	blx	r7
 8016e8c:	3001      	adds	r0, #1
 8016e8e:	f43f af21 	beq.w	8016cd4 <_printf_float+0x9c>
 8016e92:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016e96:	4313      	orrs	r3, r2
 8016e98:	d102      	bne.n	8016ea0 <_printf_float+0x268>
 8016e9a:	6823      	ldr	r3, [r4, #0]
 8016e9c:	07d9      	lsls	r1, r3, #31
 8016e9e:	d5d8      	bpl.n	8016e52 <_printf_float+0x21a>
 8016ea0:	4653      	mov	r3, sl
 8016ea2:	465a      	mov	r2, fp
 8016ea4:	4631      	mov	r1, r6
 8016ea6:	4628      	mov	r0, r5
 8016ea8:	47b8      	blx	r7
 8016eaa:	3001      	adds	r0, #1
 8016eac:	f43f af12 	beq.w	8016cd4 <_printf_float+0x9c>
 8016eb0:	f04f 0900 	mov.w	r9, #0
 8016eb4:	f104 0a1a 	add.w	sl, r4, #26
 8016eb8:	9b07      	ldr	r3, [sp, #28]
 8016eba:	425b      	negs	r3, r3
 8016ebc:	454b      	cmp	r3, r9
 8016ebe:	dc01      	bgt.n	8016ec4 <_printf_float+0x28c>
 8016ec0:	9b08      	ldr	r3, [sp, #32]
 8016ec2:	e795      	b.n	8016df0 <_printf_float+0x1b8>
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	4652      	mov	r2, sl
 8016ec8:	4631      	mov	r1, r6
 8016eca:	4628      	mov	r0, r5
 8016ecc:	47b8      	blx	r7
 8016ece:	3001      	adds	r0, #1
 8016ed0:	f43f af00 	beq.w	8016cd4 <_printf_float+0x9c>
 8016ed4:	f109 0901 	add.w	r9, r9, #1
 8016ed8:	e7ee      	b.n	8016eb8 <_printf_float+0x280>
 8016eda:	bf00      	nop
 8016edc:	f3af 8000 	nop.w
 8016ee0:	ffffffff 	.word	0xffffffff
 8016ee4:	7fefffff 	.word	0x7fefffff
 8016ee8:	0801c9dc 	.word	0x0801c9dc
 8016eec:	0801c9e0 	.word	0x0801c9e0
 8016ef0:	0801c9e8 	.word	0x0801c9e8
 8016ef4:	0801c9e4 	.word	0x0801c9e4
 8016ef8:	0801c9ec 	.word	0x0801c9ec
 8016efc:	9a08      	ldr	r2, [sp, #32]
 8016efe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f00:	429a      	cmp	r2, r3
 8016f02:	bfa8      	it	ge
 8016f04:	461a      	movge	r2, r3
 8016f06:	2a00      	cmp	r2, #0
 8016f08:	4691      	mov	r9, r2
 8016f0a:	dc38      	bgt.n	8016f7e <_printf_float+0x346>
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f14:	f104 021a 	add.w	r2, r4, #26
 8016f18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016f1a:	9905      	ldr	r1, [sp, #20]
 8016f1c:	9304      	str	r3, [sp, #16]
 8016f1e:	eba3 0309 	sub.w	r3, r3, r9
 8016f22:	428b      	cmp	r3, r1
 8016f24:	dc33      	bgt.n	8016f8e <_printf_float+0x356>
 8016f26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	db3c      	blt.n	8016fa8 <_printf_float+0x370>
 8016f2e:	6823      	ldr	r3, [r4, #0]
 8016f30:	07da      	lsls	r2, r3, #31
 8016f32:	d439      	bmi.n	8016fa8 <_printf_float+0x370>
 8016f34:	9a08      	ldr	r2, [sp, #32]
 8016f36:	9b04      	ldr	r3, [sp, #16]
 8016f38:	9907      	ldr	r1, [sp, #28]
 8016f3a:	1ad3      	subs	r3, r2, r3
 8016f3c:	eba2 0901 	sub.w	r9, r2, r1
 8016f40:	4599      	cmp	r9, r3
 8016f42:	bfa8      	it	ge
 8016f44:	4699      	movge	r9, r3
 8016f46:	f1b9 0f00 	cmp.w	r9, #0
 8016f4a:	dc35      	bgt.n	8016fb8 <_printf_float+0x380>
 8016f4c:	f04f 0800 	mov.w	r8, #0
 8016f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f54:	f104 0a1a 	add.w	sl, r4, #26
 8016f58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016f5c:	1a9b      	subs	r3, r3, r2
 8016f5e:	eba3 0309 	sub.w	r3, r3, r9
 8016f62:	4543      	cmp	r3, r8
 8016f64:	f77f af75 	ble.w	8016e52 <_printf_float+0x21a>
 8016f68:	2301      	movs	r3, #1
 8016f6a:	4652      	mov	r2, sl
 8016f6c:	4631      	mov	r1, r6
 8016f6e:	4628      	mov	r0, r5
 8016f70:	47b8      	blx	r7
 8016f72:	3001      	adds	r0, #1
 8016f74:	f43f aeae 	beq.w	8016cd4 <_printf_float+0x9c>
 8016f78:	f108 0801 	add.w	r8, r8, #1
 8016f7c:	e7ec      	b.n	8016f58 <_printf_float+0x320>
 8016f7e:	4613      	mov	r3, r2
 8016f80:	4631      	mov	r1, r6
 8016f82:	4642      	mov	r2, r8
 8016f84:	4628      	mov	r0, r5
 8016f86:	47b8      	blx	r7
 8016f88:	3001      	adds	r0, #1
 8016f8a:	d1bf      	bne.n	8016f0c <_printf_float+0x2d4>
 8016f8c:	e6a2      	b.n	8016cd4 <_printf_float+0x9c>
 8016f8e:	2301      	movs	r3, #1
 8016f90:	4631      	mov	r1, r6
 8016f92:	4628      	mov	r0, r5
 8016f94:	9204      	str	r2, [sp, #16]
 8016f96:	47b8      	blx	r7
 8016f98:	3001      	adds	r0, #1
 8016f9a:	f43f ae9b 	beq.w	8016cd4 <_printf_float+0x9c>
 8016f9e:	9b05      	ldr	r3, [sp, #20]
 8016fa0:	9a04      	ldr	r2, [sp, #16]
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	9305      	str	r3, [sp, #20]
 8016fa6:	e7b7      	b.n	8016f18 <_printf_float+0x2e0>
 8016fa8:	4653      	mov	r3, sl
 8016faa:	465a      	mov	r2, fp
 8016fac:	4631      	mov	r1, r6
 8016fae:	4628      	mov	r0, r5
 8016fb0:	47b8      	blx	r7
 8016fb2:	3001      	adds	r0, #1
 8016fb4:	d1be      	bne.n	8016f34 <_printf_float+0x2fc>
 8016fb6:	e68d      	b.n	8016cd4 <_printf_float+0x9c>
 8016fb8:	9a04      	ldr	r2, [sp, #16]
 8016fba:	464b      	mov	r3, r9
 8016fbc:	4442      	add	r2, r8
 8016fbe:	4631      	mov	r1, r6
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	47b8      	blx	r7
 8016fc4:	3001      	adds	r0, #1
 8016fc6:	d1c1      	bne.n	8016f4c <_printf_float+0x314>
 8016fc8:	e684      	b.n	8016cd4 <_printf_float+0x9c>
 8016fca:	9a08      	ldr	r2, [sp, #32]
 8016fcc:	2a01      	cmp	r2, #1
 8016fce:	dc01      	bgt.n	8016fd4 <_printf_float+0x39c>
 8016fd0:	07db      	lsls	r3, r3, #31
 8016fd2:	d537      	bpl.n	8017044 <_printf_float+0x40c>
 8016fd4:	2301      	movs	r3, #1
 8016fd6:	4642      	mov	r2, r8
 8016fd8:	4631      	mov	r1, r6
 8016fda:	4628      	mov	r0, r5
 8016fdc:	47b8      	blx	r7
 8016fde:	3001      	adds	r0, #1
 8016fe0:	f43f ae78 	beq.w	8016cd4 <_printf_float+0x9c>
 8016fe4:	4653      	mov	r3, sl
 8016fe6:	465a      	mov	r2, fp
 8016fe8:	4631      	mov	r1, r6
 8016fea:	4628      	mov	r0, r5
 8016fec:	47b8      	blx	r7
 8016fee:	3001      	adds	r0, #1
 8016ff0:	f43f ae70 	beq.w	8016cd4 <_printf_float+0x9c>
 8016ff4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016ff8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017000:	d01b      	beq.n	801703a <_printf_float+0x402>
 8017002:	9b08      	ldr	r3, [sp, #32]
 8017004:	f108 0201 	add.w	r2, r8, #1
 8017008:	3b01      	subs	r3, #1
 801700a:	4631      	mov	r1, r6
 801700c:	4628      	mov	r0, r5
 801700e:	47b8      	blx	r7
 8017010:	3001      	adds	r0, #1
 8017012:	d10e      	bne.n	8017032 <_printf_float+0x3fa>
 8017014:	e65e      	b.n	8016cd4 <_printf_float+0x9c>
 8017016:	2301      	movs	r3, #1
 8017018:	464a      	mov	r2, r9
 801701a:	4631      	mov	r1, r6
 801701c:	4628      	mov	r0, r5
 801701e:	47b8      	blx	r7
 8017020:	3001      	adds	r0, #1
 8017022:	f43f ae57 	beq.w	8016cd4 <_printf_float+0x9c>
 8017026:	f108 0801 	add.w	r8, r8, #1
 801702a:	9b08      	ldr	r3, [sp, #32]
 801702c:	3b01      	subs	r3, #1
 801702e:	4543      	cmp	r3, r8
 8017030:	dcf1      	bgt.n	8017016 <_printf_float+0x3de>
 8017032:	9b04      	ldr	r3, [sp, #16]
 8017034:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017038:	e6db      	b.n	8016df2 <_printf_float+0x1ba>
 801703a:	f04f 0800 	mov.w	r8, #0
 801703e:	f104 091a 	add.w	r9, r4, #26
 8017042:	e7f2      	b.n	801702a <_printf_float+0x3f2>
 8017044:	2301      	movs	r3, #1
 8017046:	4642      	mov	r2, r8
 8017048:	e7df      	b.n	801700a <_printf_float+0x3d2>
 801704a:	2301      	movs	r3, #1
 801704c:	464a      	mov	r2, r9
 801704e:	4631      	mov	r1, r6
 8017050:	4628      	mov	r0, r5
 8017052:	47b8      	blx	r7
 8017054:	3001      	adds	r0, #1
 8017056:	f43f ae3d 	beq.w	8016cd4 <_printf_float+0x9c>
 801705a:	f108 0801 	add.w	r8, r8, #1
 801705e:	68e3      	ldr	r3, [r4, #12]
 8017060:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017062:	1a5b      	subs	r3, r3, r1
 8017064:	4543      	cmp	r3, r8
 8017066:	dcf0      	bgt.n	801704a <_printf_float+0x412>
 8017068:	e6f7      	b.n	8016e5a <_printf_float+0x222>
 801706a:	f04f 0800 	mov.w	r8, #0
 801706e:	f104 0919 	add.w	r9, r4, #25
 8017072:	e7f4      	b.n	801705e <_printf_float+0x426>

08017074 <_printf_common>:
 8017074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017078:	4616      	mov	r6, r2
 801707a:	4699      	mov	r9, r3
 801707c:	688a      	ldr	r2, [r1, #8]
 801707e:	690b      	ldr	r3, [r1, #16]
 8017080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017084:	4293      	cmp	r3, r2
 8017086:	bfb8      	it	lt
 8017088:	4613      	movlt	r3, r2
 801708a:	6033      	str	r3, [r6, #0]
 801708c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017090:	4607      	mov	r7, r0
 8017092:	460c      	mov	r4, r1
 8017094:	b10a      	cbz	r2, 801709a <_printf_common+0x26>
 8017096:	3301      	adds	r3, #1
 8017098:	6033      	str	r3, [r6, #0]
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	0699      	lsls	r1, r3, #26
 801709e:	bf42      	ittt	mi
 80170a0:	6833      	ldrmi	r3, [r6, #0]
 80170a2:	3302      	addmi	r3, #2
 80170a4:	6033      	strmi	r3, [r6, #0]
 80170a6:	6825      	ldr	r5, [r4, #0]
 80170a8:	f015 0506 	ands.w	r5, r5, #6
 80170ac:	d106      	bne.n	80170bc <_printf_common+0x48>
 80170ae:	f104 0a19 	add.w	sl, r4, #25
 80170b2:	68e3      	ldr	r3, [r4, #12]
 80170b4:	6832      	ldr	r2, [r6, #0]
 80170b6:	1a9b      	subs	r3, r3, r2
 80170b8:	42ab      	cmp	r3, r5
 80170ba:	dc26      	bgt.n	801710a <_printf_common+0x96>
 80170bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80170c0:	1e13      	subs	r3, r2, #0
 80170c2:	6822      	ldr	r2, [r4, #0]
 80170c4:	bf18      	it	ne
 80170c6:	2301      	movne	r3, #1
 80170c8:	0692      	lsls	r2, r2, #26
 80170ca:	d42b      	bmi.n	8017124 <_printf_common+0xb0>
 80170cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80170d0:	4649      	mov	r1, r9
 80170d2:	4638      	mov	r0, r7
 80170d4:	47c0      	blx	r8
 80170d6:	3001      	adds	r0, #1
 80170d8:	d01e      	beq.n	8017118 <_printf_common+0xa4>
 80170da:	6823      	ldr	r3, [r4, #0]
 80170dc:	68e5      	ldr	r5, [r4, #12]
 80170de:	6832      	ldr	r2, [r6, #0]
 80170e0:	f003 0306 	and.w	r3, r3, #6
 80170e4:	2b04      	cmp	r3, #4
 80170e6:	bf08      	it	eq
 80170e8:	1aad      	subeq	r5, r5, r2
 80170ea:	68a3      	ldr	r3, [r4, #8]
 80170ec:	6922      	ldr	r2, [r4, #16]
 80170ee:	bf0c      	ite	eq
 80170f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170f4:	2500      	movne	r5, #0
 80170f6:	4293      	cmp	r3, r2
 80170f8:	bfc4      	itt	gt
 80170fa:	1a9b      	subgt	r3, r3, r2
 80170fc:	18ed      	addgt	r5, r5, r3
 80170fe:	2600      	movs	r6, #0
 8017100:	341a      	adds	r4, #26
 8017102:	42b5      	cmp	r5, r6
 8017104:	d11a      	bne.n	801713c <_printf_common+0xc8>
 8017106:	2000      	movs	r0, #0
 8017108:	e008      	b.n	801711c <_printf_common+0xa8>
 801710a:	2301      	movs	r3, #1
 801710c:	4652      	mov	r2, sl
 801710e:	4649      	mov	r1, r9
 8017110:	4638      	mov	r0, r7
 8017112:	47c0      	blx	r8
 8017114:	3001      	adds	r0, #1
 8017116:	d103      	bne.n	8017120 <_printf_common+0xac>
 8017118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017120:	3501      	adds	r5, #1
 8017122:	e7c6      	b.n	80170b2 <_printf_common+0x3e>
 8017124:	18e1      	adds	r1, r4, r3
 8017126:	1c5a      	adds	r2, r3, #1
 8017128:	2030      	movs	r0, #48	; 0x30
 801712a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801712e:	4422      	add	r2, r4
 8017130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017138:	3302      	adds	r3, #2
 801713a:	e7c7      	b.n	80170cc <_printf_common+0x58>
 801713c:	2301      	movs	r3, #1
 801713e:	4622      	mov	r2, r4
 8017140:	4649      	mov	r1, r9
 8017142:	4638      	mov	r0, r7
 8017144:	47c0      	blx	r8
 8017146:	3001      	adds	r0, #1
 8017148:	d0e6      	beq.n	8017118 <_printf_common+0xa4>
 801714a:	3601      	adds	r6, #1
 801714c:	e7d9      	b.n	8017102 <_printf_common+0x8e>
	...

08017150 <_printf_i>:
 8017150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017154:	460c      	mov	r4, r1
 8017156:	4691      	mov	r9, r2
 8017158:	7e27      	ldrb	r7, [r4, #24]
 801715a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801715c:	2f78      	cmp	r7, #120	; 0x78
 801715e:	4680      	mov	r8, r0
 8017160:	469a      	mov	sl, r3
 8017162:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017166:	d807      	bhi.n	8017178 <_printf_i+0x28>
 8017168:	2f62      	cmp	r7, #98	; 0x62
 801716a:	d80a      	bhi.n	8017182 <_printf_i+0x32>
 801716c:	2f00      	cmp	r7, #0
 801716e:	f000 80d8 	beq.w	8017322 <_printf_i+0x1d2>
 8017172:	2f58      	cmp	r7, #88	; 0x58
 8017174:	f000 80a3 	beq.w	80172be <_printf_i+0x16e>
 8017178:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801717c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017180:	e03a      	b.n	80171f8 <_printf_i+0xa8>
 8017182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017186:	2b15      	cmp	r3, #21
 8017188:	d8f6      	bhi.n	8017178 <_printf_i+0x28>
 801718a:	a001      	add	r0, pc, #4	; (adr r0, 8017190 <_printf_i+0x40>)
 801718c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017190:	080171e9 	.word	0x080171e9
 8017194:	080171fd 	.word	0x080171fd
 8017198:	08017179 	.word	0x08017179
 801719c:	08017179 	.word	0x08017179
 80171a0:	08017179 	.word	0x08017179
 80171a4:	08017179 	.word	0x08017179
 80171a8:	080171fd 	.word	0x080171fd
 80171ac:	08017179 	.word	0x08017179
 80171b0:	08017179 	.word	0x08017179
 80171b4:	08017179 	.word	0x08017179
 80171b8:	08017179 	.word	0x08017179
 80171bc:	08017309 	.word	0x08017309
 80171c0:	0801722d 	.word	0x0801722d
 80171c4:	080172eb 	.word	0x080172eb
 80171c8:	08017179 	.word	0x08017179
 80171cc:	08017179 	.word	0x08017179
 80171d0:	0801732b 	.word	0x0801732b
 80171d4:	08017179 	.word	0x08017179
 80171d8:	0801722d 	.word	0x0801722d
 80171dc:	08017179 	.word	0x08017179
 80171e0:	08017179 	.word	0x08017179
 80171e4:	080172f3 	.word	0x080172f3
 80171e8:	680b      	ldr	r3, [r1, #0]
 80171ea:	1d1a      	adds	r2, r3, #4
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	600a      	str	r2, [r1, #0]
 80171f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80171f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171f8:	2301      	movs	r3, #1
 80171fa:	e0a3      	b.n	8017344 <_printf_i+0x1f4>
 80171fc:	6825      	ldr	r5, [r4, #0]
 80171fe:	6808      	ldr	r0, [r1, #0]
 8017200:	062e      	lsls	r6, r5, #24
 8017202:	f100 0304 	add.w	r3, r0, #4
 8017206:	d50a      	bpl.n	801721e <_printf_i+0xce>
 8017208:	6805      	ldr	r5, [r0, #0]
 801720a:	600b      	str	r3, [r1, #0]
 801720c:	2d00      	cmp	r5, #0
 801720e:	da03      	bge.n	8017218 <_printf_i+0xc8>
 8017210:	232d      	movs	r3, #45	; 0x2d
 8017212:	426d      	negs	r5, r5
 8017214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017218:	485e      	ldr	r0, [pc, #376]	; (8017394 <_printf_i+0x244>)
 801721a:	230a      	movs	r3, #10
 801721c:	e019      	b.n	8017252 <_printf_i+0x102>
 801721e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017222:	6805      	ldr	r5, [r0, #0]
 8017224:	600b      	str	r3, [r1, #0]
 8017226:	bf18      	it	ne
 8017228:	b22d      	sxthne	r5, r5
 801722a:	e7ef      	b.n	801720c <_printf_i+0xbc>
 801722c:	680b      	ldr	r3, [r1, #0]
 801722e:	6825      	ldr	r5, [r4, #0]
 8017230:	1d18      	adds	r0, r3, #4
 8017232:	6008      	str	r0, [r1, #0]
 8017234:	0628      	lsls	r0, r5, #24
 8017236:	d501      	bpl.n	801723c <_printf_i+0xec>
 8017238:	681d      	ldr	r5, [r3, #0]
 801723a:	e002      	b.n	8017242 <_printf_i+0xf2>
 801723c:	0669      	lsls	r1, r5, #25
 801723e:	d5fb      	bpl.n	8017238 <_printf_i+0xe8>
 8017240:	881d      	ldrh	r5, [r3, #0]
 8017242:	4854      	ldr	r0, [pc, #336]	; (8017394 <_printf_i+0x244>)
 8017244:	2f6f      	cmp	r7, #111	; 0x6f
 8017246:	bf0c      	ite	eq
 8017248:	2308      	moveq	r3, #8
 801724a:	230a      	movne	r3, #10
 801724c:	2100      	movs	r1, #0
 801724e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017252:	6866      	ldr	r6, [r4, #4]
 8017254:	60a6      	str	r6, [r4, #8]
 8017256:	2e00      	cmp	r6, #0
 8017258:	bfa2      	ittt	ge
 801725a:	6821      	ldrge	r1, [r4, #0]
 801725c:	f021 0104 	bicge.w	r1, r1, #4
 8017260:	6021      	strge	r1, [r4, #0]
 8017262:	b90d      	cbnz	r5, 8017268 <_printf_i+0x118>
 8017264:	2e00      	cmp	r6, #0
 8017266:	d04d      	beq.n	8017304 <_printf_i+0x1b4>
 8017268:	4616      	mov	r6, r2
 801726a:	fbb5 f1f3 	udiv	r1, r5, r3
 801726e:	fb03 5711 	mls	r7, r3, r1, r5
 8017272:	5dc7      	ldrb	r7, [r0, r7]
 8017274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017278:	462f      	mov	r7, r5
 801727a:	42bb      	cmp	r3, r7
 801727c:	460d      	mov	r5, r1
 801727e:	d9f4      	bls.n	801726a <_printf_i+0x11a>
 8017280:	2b08      	cmp	r3, #8
 8017282:	d10b      	bne.n	801729c <_printf_i+0x14c>
 8017284:	6823      	ldr	r3, [r4, #0]
 8017286:	07df      	lsls	r7, r3, #31
 8017288:	d508      	bpl.n	801729c <_printf_i+0x14c>
 801728a:	6923      	ldr	r3, [r4, #16]
 801728c:	6861      	ldr	r1, [r4, #4]
 801728e:	4299      	cmp	r1, r3
 8017290:	bfde      	ittt	le
 8017292:	2330      	movle	r3, #48	; 0x30
 8017294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017298:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801729c:	1b92      	subs	r2, r2, r6
 801729e:	6122      	str	r2, [r4, #16]
 80172a0:	f8cd a000 	str.w	sl, [sp]
 80172a4:	464b      	mov	r3, r9
 80172a6:	aa03      	add	r2, sp, #12
 80172a8:	4621      	mov	r1, r4
 80172aa:	4640      	mov	r0, r8
 80172ac:	f7ff fee2 	bl	8017074 <_printf_common>
 80172b0:	3001      	adds	r0, #1
 80172b2:	d14c      	bne.n	801734e <_printf_i+0x1fe>
 80172b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172b8:	b004      	add	sp, #16
 80172ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172be:	4835      	ldr	r0, [pc, #212]	; (8017394 <_printf_i+0x244>)
 80172c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80172c4:	6823      	ldr	r3, [r4, #0]
 80172c6:	680e      	ldr	r6, [r1, #0]
 80172c8:	061f      	lsls	r7, r3, #24
 80172ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80172ce:	600e      	str	r6, [r1, #0]
 80172d0:	d514      	bpl.n	80172fc <_printf_i+0x1ac>
 80172d2:	07d9      	lsls	r1, r3, #31
 80172d4:	bf44      	itt	mi
 80172d6:	f043 0320 	orrmi.w	r3, r3, #32
 80172da:	6023      	strmi	r3, [r4, #0]
 80172dc:	b91d      	cbnz	r5, 80172e6 <_printf_i+0x196>
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	f023 0320 	bic.w	r3, r3, #32
 80172e4:	6023      	str	r3, [r4, #0]
 80172e6:	2310      	movs	r3, #16
 80172e8:	e7b0      	b.n	801724c <_printf_i+0xfc>
 80172ea:	6823      	ldr	r3, [r4, #0]
 80172ec:	f043 0320 	orr.w	r3, r3, #32
 80172f0:	6023      	str	r3, [r4, #0]
 80172f2:	2378      	movs	r3, #120	; 0x78
 80172f4:	4828      	ldr	r0, [pc, #160]	; (8017398 <_printf_i+0x248>)
 80172f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80172fa:	e7e3      	b.n	80172c4 <_printf_i+0x174>
 80172fc:	065e      	lsls	r6, r3, #25
 80172fe:	bf48      	it	mi
 8017300:	b2ad      	uxthmi	r5, r5
 8017302:	e7e6      	b.n	80172d2 <_printf_i+0x182>
 8017304:	4616      	mov	r6, r2
 8017306:	e7bb      	b.n	8017280 <_printf_i+0x130>
 8017308:	680b      	ldr	r3, [r1, #0]
 801730a:	6826      	ldr	r6, [r4, #0]
 801730c:	6960      	ldr	r0, [r4, #20]
 801730e:	1d1d      	adds	r5, r3, #4
 8017310:	600d      	str	r5, [r1, #0]
 8017312:	0635      	lsls	r5, r6, #24
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	d501      	bpl.n	801731c <_printf_i+0x1cc>
 8017318:	6018      	str	r0, [r3, #0]
 801731a:	e002      	b.n	8017322 <_printf_i+0x1d2>
 801731c:	0671      	lsls	r1, r6, #25
 801731e:	d5fb      	bpl.n	8017318 <_printf_i+0x1c8>
 8017320:	8018      	strh	r0, [r3, #0]
 8017322:	2300      	movs	r3, #0
 8017324:	6123      	str	r3, [r4, #16]
 8017326:	4616      	mov	r6, r2
 8017328:	e7ba      	b.n	80172a0 <_printf_i+0x150>
 801732a:	680b      	ldr	r3, [r1, #0]
 801732c:	1d1a      	adds	r2, r3, #4
 801732e:	600a      	str	r2, [r1, #0]
 8017330:	681e      	ldr	r6, [r3, #0]
 8017332:	6862      	ldr	r2, [r4, #4]
 8017334:	2100      	movs	r1, #0
 8017336:	4630      	mov	r0, r6
 8017338:	f7e8 ff8a 	bl	8000250 <memchr>
 801733c:	b108      	cbz	r0, 8017342 <_printf_i+0x1f2>
 801733e:	1b80      	subs	r0, r0, r6
 8017340:	6060      	str	r0, [r4, #4]
 8017342:	6863      	ldr	r3, [r4, #4]
 8017344:	6123      	str	r3, [r4, #16]
 8017346:	2300      	movs	r3, #0
 8017348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801734c:	e7a8      	b.n	80172a0 <_printf_i+0x150>
 801734e:	6923      	ldr	r3, [r4, #16]
 8017350:	4632      	mov	r2, r6
 8017352:	4649      	mov	r1, r9
 8017354:	4640      	mov	r0, r8
 8017356:	47d0      	blx	sl
 8017358:	3001      	adds	r0, #1
 801735a:	d0ab      	beq.n	80172b4 <_printf_i+0x164>
 801735c:	6823      	ldr	r3, [r4, #0]
 801735e:	079b      	lsls	r3, r3, #30
 8017360:	d413      	bmi.n	801738a <_printf_i+0x23a>
 8017362:	68e0      	ldr	r0, [r4, #12]
 8017364:	9b03      	ldr	r3, [sp, #12]
 8017366:	4298      	cmp	r0, r3
 8017368:	bfb8      	it	lt
 801736a:	4618      	movlt	r0, r3
 801736c:	e7a4      	b.n	80172b8 <_printf_i+0x168>
 801736e:	2301      	movs	r3, #1
 8017370:	4632      	mov	r2, r6
 8017372:	4649      	mov	r1, r9
 8017374:	4640      	mov	r0, r8
 8017376:	47d0      	blx	sl
 8017378:	3001      	adds	r0, #1
 801737a:	d09b      	beq.n	80172b4 <_printf_i+0x164>
 801737c:	3501      	adds	r5, #1
 801737e:	68e3      	ldr	r3, [r4, #12]
 8017380:	9903      	ldr	r1, [sp, #12]
 8017382:	1a5b      	subs	r3, r3, r1
 8017384:	42ab      	cmp	r3, r5
 8017386:	dcf2      	bgt.n	801736e <_printf_i+0x21e>
 8017388:	e7eb      	b.n	8017362 <_printf_i+0x212>
 801738a:	2500      	movs	r5, #0
 801738c:	f104 0619 	add.w	r6, r4, #25
 8017390:	e7f5      	b.n	801737e <_printf_i+0x22e>
 8017392:	bf00      	nop
 8017394:	0801c9ee 	.word	0x0801c9ee
 8017398:	0801c9ff 	.word	0x0801c9ff

0801739c <iprintf>:
 801739c:	b40f      	push	{r0, r1, r2, r3}
 801739e:	4b0a      	ldr	r3, [pc, #40]	; (80173c8 <iprintf+0x2c>)
 80173a0:	b513      	push	{r0, r1, r4, lr}
 80173a2:	681c      	ldr	r4, [r3, #0]
 80173a4:	b124      	cbz	r4, 80173b0 <iprintf+0x14>
 80173a6:	69a3      	ldr	r3, [r4, #24]
 80173a8:	b913      	cbnz	r3, 80173b0 <iprintf+0x14>
 80173aa:	4620      	mov	r0, r4
 80173ac:	f000 fef8 	bl	80181a0 <__sinit>
 80173b0:	ab05      	add	r3, sp, #20
 80173b2:	9a04      	ldr	r2, [sp, #16]
 80173b4:	68a1      	ldr	r1, [r4, #8]
 80173b6:	9301      	str	r3, [sp, #4]
 80173b8:	4620      	mov	r0, r4
 80173ba:	f001 fd6f 	bl	8018e9c <_vfiprintf_r>
 80173be:	b002      	add	sp, #8
 80173c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173c4:	b004      	add	sp, #16
 80173c6:	4770      	bx	lr
 80173c8:	20000020 	.word	0x20000020

080173cc <rand>:
 80173cc:	4b17      	ldr	r3, [pc, #92]	; (801742c <rand+0x60>)
 80173ce:	b510      	push	{r4, lr}
 80173d0:	681c      	ldr	r4, [r3, #0]
 80173d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80173d4:	b9b3      	cbnz	r3, 8017404 <rand+0x38>
 80173d6:	2018      	movs	r0, #24
 80173d8:	f000 ff9a 	bl	8018310 <malloc>
 80173dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80173de:	b928      	cbnz	r0, 80173ec <rand+0x20>
 80173e0:	4602      	mov	r2, r0
 80173e2:	4b13      	ldr	r3, [pc, #76]	; (8017430 <rand+0x64>)
 80173e4:	4813      	ldr	r0, [pc, #76]	; (8017434 <rand+0x68>)
 80173e6:	214e      	movs	r1, #78	; 0x4e
 80173e8:	f000 f850 	bl	801748c <__assert_func>
 80173ec:	4a12      	ldr	r2, [pc, #72]	; (8017438 <rand+0x6c>)
 80173ee:	4b13      	ldr	r3, [pc, #76]	; (801743c <rand+0x70>)
 80173f0:	e9c0 2300 	strd	r2, r3, [r0]
 80173f4:	4b12      	ldr	r3, [pc, #72]	; (8017440 <rand+0x74>)
 80173f6:	6083      	str	r3, [r0, #8]
 80173f8:	230b      	movs	r3, #11
 80173fa:	8183      	strh	r3, [r0, #12]
 80173fc:	2201      	movs	r2, #1
 80173fe:	2300      	movs	r3, #0
 8017400:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017404:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017406:	480f      	ldr	r0, [pc, #60]	; (8017444 <rand+0x78>)
 8017408:	690a      	ldr	r2, [r1, #16]
 801740a:	694b      	ldr	r3, [r1, #20]
 801740c:	4c0e      	ldr	r4, [pc, #56]	; (8017448 <rand+0x7c>)
 801740e:	4350      	muls	r0, r2
 8017410:	fb04 0003 	mla	r0, r4, r3, r0
 8017414:	fba2 3404 	umull	r3, r4, r2, r4
 8017418:	1c5a      	adds	r2, r3, #1
 801741a:	4404      	add	r4, r0
 801741c:	f144 0000 	adc.w	r0, r4, #0
 8017420:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017424:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017428:	bd10      	pop	{r4, pc}
 801742a:	bf00      	nop
 801742c:	20000020 	.word	0x20000020
 8017430:	0801ca10 	.word	0x0801ca10
 8017434:	0801ca27 	.word	0x0801ca27
 8017438:	abcd330e 	.word	0xabcd330e
 801743c:	e66d1234 	.word	0xe66d1234
 8017440:	0005deec 	.word	0x0005deec
 8017444:	5851f42d 	.word	0x5851f42d
 8017448:	4c957f2d 	.word	0x4c957f2d

0801744c <siprintf>:
 801744c:	b40e      	push	{r1, r2, r3}
 801744e:	b500      	push	{lr}
 8017450:	b09c      	sub	sp, #112	; 0x70
 8017452:	ab1d      	add	r3, sp, #116	; 0x74
 8017454:	9002      	str	r0, [sp, #8]
 8017456:	9006      	str	r0, [sp, #24]
 8017458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801745c:	4809      	ldr	r0, [pc, #36]	; (8017484 <siprintf+0x38>)
 801745e:	9107      	str	r1, [sp, #28]
 8017460:	9104      	str	r1, [sp, #16]
 8017462:	4909      	ldr	r1, [pc, #36]	; (8017488 <siprintf+0x3c>)
 8017464:	f853 2b04 	ldr.w	r2, [r3], #4
 8017468:	9105      	str	r1, [sp, #20]
 801746a:	6800      	ldr	r0, [r0, #0]
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	a902      	add	r1, sp, #8
 8017470:	f001 fbea 	bl	8018c48 <_svfiprintf_r>
 8017474:	9b02      	ldr	r3, [sp, #8]
 8017476:	2200      	movs	r2, #0
 8017478:	701a      	strb	r2, [r3, #0]
 801747a:	b01c      	add	sp, #112	; 0x70
 801747c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017480:	b003      	add	sp, #12
 8017482:	4770      	bx	lr
 8017484:	20000020 	.word	0x20000020
 8017488:	ffff0208 	.word	0xffff0208

0801748c <__assert_func>:
 801748c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801748e:	4614      	mov	r4, r2
 8017490:	461a      	mov	r2, r3
 8017492:	4b09      	ldr	r3, [pc, #36]	; (80174b8 <__assert_func+0x2c>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4605      	mov	r5, r0
 8017498:	68d8      	ldr	r0, [r3, #12]
 801749a:	b14c      	cbz	r4, 80174b0 <__assert_func+0x24>
 801749c:	4b07      	ldr	r3, [pc, #28]	; (80174bc <__assert_func+0x30>)
 801749e:	9100      	str	r1, [sp, #0]
 80174a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80174a4:	4906      	ldr	r1, [pc, #24]	; (80174c0 <__assert_func+0x34>)
 80174a6:	462b      	mov	r3, r5
 80174a8:	f000 fef8 	bl	801829c <fiprintf>
 80174ac:	f001 ff4c 	bl	8019348 <abort>
 80174b0:	4b04      	ldr	r3, [pc, #16]	; (80174c4 <__assert_func+0x38>)
 80174b2:	461c      	mov	r4, r3
 80174b4:	e7f3      	b.n	801749e <__assert_func+0x12>
 80174b6:	bf00      	nop
 80174b8:	20000020 	.word	0x20000020
 80174bc:	0801ca86 	.word	0x0801ca86
 80174c0:	0801ca93 	.word	0x0801ca93
 80174c4:	0801cac1 	.word	0x0801cac1

080174c8 <quorem>:
 80174c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174cc:	6903      	ldr	r3, [r0, #16]
 80174ce:	690c      	ldr	r4, [r1, #16]
 80174d0:	42a3      	cmp	r3, r4
 80174d2:	4607      	mov	r7, r0
 80174d4:	f2c0 8081 	blt.w	80175da <quorem+0x112>
 80174d8:	3c01      	subs	r4, #1
 80174da:	f101 0814 	add.w	r8, r1, #20
 80174de:	f100 0514 	add.w	r5, r0, #20
 80174e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80174e6:	9301      	str	r3, [sp, #4]
 80174e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80174ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80174f0:	3301      	adds	r3, #1
 80174f2:	429a      	cmp	r2, r3
 80174f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80174f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80174fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8017500:	d331      	bcc.n	8017566 <quorem+0x9e>
 8017502:	f04f 0e00 	mov.w	lr, #0
 8017506:	4640      	mov	r0, r8
 8017508:	46ac      	mov	ip, r5
 801750a:	46f2      	mov	sl, lr
 801750c:	f850 2b04 	ldr.w	r2, [r0], #4
 8017510:	b293      	uxth	r3, r2
 8017512:	fb06 e303 	mla	r3, r6, r3, lr
 8017516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801751a:	b29b      	uxth	r3, r3
 801751c:	ebaa 0303 	sub.w	r3, sl, r3
 8017520:	0c12      	lsrs	r2, r2, #16
 8017522:	f8dc a000 	ldr.w	sl, [ip]
 8017526:	fb06 e202 	mla	r2, r6, r2, lr
 801752a:	fa13 f38a 	uxtah	r3, r3, sl
 801752e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017532:	fa1f fa82 	uxth.w	sl, r2
 8017536:	f8dc 2000 	ldr.w	r2, [ip]
 801753a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801753e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017542:	b29b      	uxth	r3, r3
 8017544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017548:	4581      	cmp	r9, r0
 801754a:	f84c 3b04 	str.w	r3, [ip], #4
 801754e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017552:	d2db      	bcs.n	801750c <quorem+0x44>
 8017554:	f855 300b 	ldr.w	r3, [r5, fp]
 8017558:	b92b      	cbnz	r3, 8017566 <quorem+0x9e>
 801755a:	9b01      	ldr	r3, [sp, #4]
 801755c:	3b04      	subs	r3, #4
 801755e:	429d      	cmp	r5, r3
 8017560:	461a      	mov	r2, r3
 8017562:	d32e      	bcc.n	80175c2 <quorem+0xfa>
 8017564:	613c      	str	r4, [r7, #16]
 8017566:	4638      	mov	r0, r7
 8017568:	f001 f958 	bl	801881c <__mcmp>
 801756c:	2800      	cmp	r0, #0
 801756e:	db24      	blt.n	80175ba <quorem+0xf2>
 8017570:	3601      	adds	r6, #1
 8017572:	4628      	mov	r0, r5
 8017574:	f04f 0c00 	mov.w	ip, #0
 8017578:	f858 2b04 	ldr.w	r2, [r8], #4
 801757c:	f8d0 e000 	ldr.w	lr, [r0]
 8017580:	b293      	uxth	r3, r2
 8017582:	ebac 0303 	sub.w	r3, ip, r3
 8017586:	0c12      	lsrs	r2, r2, #16
 8017588:	fa13 f38e 	uxtah	r3, r3, lr
 801758c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017594:	b29b      	uxth	r3, r3
 8017596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801759a:	45c1      	cmp	r9, r8
 801759c:	f840 3b04 	str.w	r3, [r0], #4
 80175a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80175a4:	d2e8      	bcs.n	8017578 <quorem+0xb0>
 80175a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80175aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80175ae:	b922      	cbnz	r2, 80175ba <quorem+0xf2>
 80175b0:	3b04      	subs	r3, #4
 80175b2:	429d      	cmp	r5, r3
 80175b4:	461a      	mov	r2, r3
 80175b6:	d30a      	bcc.n	80175ce <quorem+0x106>
 80175b8:	613c      	str	r4, [r7, #16]
 80175ba:	4630      	mov	r0, r6
 80175bc:	b003      	add	sp, #12
 80175be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c2:	6812      	ldr	r2, [r2, #0]
 80175c4:	3b04      	subs	r3, #4
 80175c6:	2a00      	cmp	r2, #0
 80175c8:	d1cc      	bne.n	8017564 <quorem+0x9c>
 80175ca:	3c01      	subs	r4, #1
 80175cc:	e7c7      	b.n	801755e <quorem+0x96>
 80175ce:	6812      	ldr	r2, [r2, #0]
 80175d0:	3b04      	subs	r3, #4
 80175d2:	2a00      	cmp	r2, #0
 80175d4:	d1f0      	bne.n	80175b8 <quorem+0xf0>
 80175d6:	3c01      	subs	r4, #1
 80175d8:	e7eb      	b.n	80175b2 <quorem+0xea>
 80175da:	2000      	movs	r0, #0
 80175dc:	e7ee      	b.n	80175bc <quorem+0xf4>
	...

080175e0 <_dtoa_r>:
 80175e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e4:	ec59 8b10 	vmov	r8, r9, d0
 80175e8:	b095      	sub	sp, #84	; 0x54
 80175ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80175ec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80175ee:	9107      	str	r1, [sp, #28]
 80175f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80175f4:	4606      	mov	r6, r0
 80175f6:	9209      	str	r2, [sp, #36]	; 0x24
 80175f8:	9310      	str	r3, [sp, #64]	; 0x40
 80175fa:	b975      	cbnz	r5, 801761a <_dtoa_r+0x3a>
 80175fc:	2010      	movs	r0, #16
 80175fe:	f000 fe87 	bl	8018310 <malloc>
 8017602:	4602      	mov	r2, r0
 8017604:	6270      	str	r0, [r6, #36]	; 0x24
 8017606:	b920      	cbnz	r0, 8017612 <_dtoa_r+0x32>
 8017608:	4bab      	ldr	r3, [pc, #684]	; (80178b8 <_dtoa_r+0x2d8>)
 801760a:	21ea      	movs	r1, #234	; 0xea
 801760c:	48ab      	ldr	r0, [pc, #684]	; (80178bc <_dtoa_r+0x2dc>)
 801760e:	f7ff ff3d 	bl	801748c <__assert_func>
 8017612:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017616:	6005      	str	r5, [r0, #0]
 8017618:	60c5      	str	r5, [r0, #12]
 801761a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801761c:	6819      	ldr	r1, [r3, #0]
 801761e:	b151      	cbz	r1, 8017636 <_dtoa_r+0x56>
 8017620:	685a      	ldr	r2, [r3, #4]
 8017622:	604a      	str	r2, [r1, #4]
 8017624:	2301      	movs	r3, #1
 8017626:	4093      	lsls	r3, r2
 8017628:	608b      	str	r3, [r1, #8]
 801762a:	4630      	mov	r0, r6
 801762c:	f000 feb8 	bl	80183a0 <_Bfree>
 8017630:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017632:	2200      	movs	r2, #0
 8017634:	601a      	str	r2, [r3, #0]
 8017636:	f1b9 0300 	subs.w	r3, r9, #0
 801763a:	bfbb      	ittet	lt
 801763c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017640:	9303      	strlt	r3, [sp, #12]
 8017642:	2300      	movge	r3, #0
 8017644:	2201      	movlt	r2, #1
 8017646:	bfac      	ite	ge
 8017648:	6023      	strge	r3, [r4, #0]
 801764a:	6022      	strlt	r2, [r4, #0]
 801764c:	4b9c      	ldr	r3, [pc, #624]	; (80178c0 <_dtoa_r+0x2e0>)
 801764e:	9c03      	ldr	r4, [sp, #12]
 8017650:	43a3      	bics	r3, r4
 8017652:	d11a      	bne.n	801768a <_dtoa_r+0xaa>
 8017654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017656:	f242 730f 	movw	r3, #9999	; 0x270f
 801765a:	6013      	str	r3, [r2, #0]
 801765c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017660:	ea53 0308 	orrs.w	r3, r3, r8
 8017664:	f000 8512 	beq.w	801808c <_dtoa_r+0xaac>
 8017668:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801766a:	b953      	cbnz	r3, 8017682 <_dtoa_r+0xa2>
 801766c:	4b95      	ldr	r3, [pc, #596]	; (80178c4 <_dtoa_r+0x2e4>)
 801766e:	e01f      	b.n	80176b0 <_dtoa_r+0xd0>
 8017670:	4b95      	ldr	r3, [pc, #596]	; (80178c8 <_dtoa_r+0x2e8>)
 8017672:	9300      	str	r3, [sp, #0]
 8017674:	3308      	adds	r3, #8
 8017676:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017678:	6013      	str	r3, [r2, #0]
 801767a:	9800      	ldr	r0, [sp, #0]
 801767c:	b015      	add	sp, #84	; 0x54
 801767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017682:	4b90      	ldr	r3, [pc, #576]	; (80178c4 <_dtoa_r+0x2e4>)
 8017684:	9300      	str	r3, [sp, #0]
 8017686:	3303      	adds	r3, #3
 8017688:	e7f5      	b.n	8017676 <_dtoa_r+0x96>
 801768a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801768e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017696:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801769a:	d10b      	bne.n	80176b4 <_dtoa_r+0xd4>
 801769c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801769e:	2301      	movs	r3, #1
 80176a0:	6013      	str	r3, [r2, #0]
 80176a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f000 84ee 	beq.w	8018086 <_dtoa_r+0xaa6>
 80176aa:	4888      	ldr	r0, [pc, #544]	; (80178cc <_dtoa_r+0x2ec>)
 80176ac:	6018      	str	r0, [r3, #0]
 80176ae:	1e43      	subs	r3, r0, #1
 80176b0:	9300      	str	r3, [sp, #0]
 80176b2:	e7e2      	b.n	801767a <_dtoa_r+0x9a>
 80176b4:	a913      	add	r1, sp, #76	; 0x4c
 80176b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80176ba:	aa12      	add	r2, sp, #72	; 0x48
 80176bc:	4630      	mov	r0, r6
 80176be:	f001 f951 	bl	8018964 <__d2b>
 80176c2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80176c6:	4605      	mov	r5, r0
 80176c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80176ca:	2900      	cmp	r1, #0
 80176cc:	d047      	beq.n	801775e <_dtoa_r+0x17e>
 80176ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80176d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80176d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80176d8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80176dc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80176e0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80176e4:	2400      	movs	r4, #0
 80176e6:	ec43 2b16 	vmov	d6, r2, r3
 80176ea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80176ee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80178a0 <_dtoa_r+0x2c0>
 80176f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80176f6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80178a8 <_dtoa_r+0x2c8>
 80176fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80176fe:	eeb0 7b46 	vmov.f64	d7, d6
 8017702:	ee06 1a90 	vmov	s13, r1
 8017706:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801770a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80178b0 <_dtoa_r+0x2d0>
 801770e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017712:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017716:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771e:	ee16 ba90 	vmov	fp, s13
 8017722:	9411      	str	r4, [sp, #68]	; 0x44
 8017724:	d508      	bpl.n	8017738 <_dtoa_r+0x158>
 8017726:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801772a:	eeb4 6b47 	vcmp.f64	d6, d7
 801772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017732:	bf18      	it	ne
 8017734:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8017738:	f1bb 0f16 	cmp.w	fp, #22
 801773c:	d832      	bhi.n	80177a4 <_dtoa_r+0x1c4>
 801773e:	4b64      	ldr	r3, [pc, #400]	; (80178d0 <_dtoa_r+0x2f0>)
 8017740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017744:	ed93 7b00 	vldr	d7, [r3]
 8017748:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801774c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017754:	d501      	bpl.n	801775a <_dtoa_r+0x17a>
 8017756:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801775a:	2300      	movs	r3, #0
 801775c:	e023      	b.n	80177a6 <_dtoa_r+0x1c6>
 801775e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017760:	4401      	add	r1, r0
 8017762:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017766:	2b20      	cmp	r3, #32
 8017768:	bfc3      	ittte	gt
 801776a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801776e:	fa04 f303 	lslgt.w	r3, r4, r3
 8017772:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017776:	f1c3 0320 	rsble	r3, r3, #32
 801777a:	bfc6      	itte	gt
 801777c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017780:	ea43 0308 	orrgt.w	r3, r3, r8
 8017784:	fa08 f303 	lslle.w	r3, r8, r3
 8017788:	ee07 3a90 	vmov	s15, r3
 801778c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017790:	3901      	subs	r1, #1
 8017792:	ed8d 7b00 	vstr	d7, [sp]
 8017796:	9c01      	ldr	r4, [sp, #4]
 8017798:	e9dd 2300 	ldrd	r2, r3, [sp]
 801779c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80177a0:	2401      	movs	r4, #1
 80177a2:	e7a0      	b.n	80176e6 <_dtoa_r+0x106>
 80177a4:	2301      	movs	r3, #1
 80177a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80177a8:	1a43      	subs	r3, r0, r1
 80177aa:	1e5a      	subs	r2, r3, #1
 80177ac:	bf45      	ittet	mi
 80177ae:	f1c3 0301 	rsbmi	r3, r3, #1
 80177b2:	9305      	strmi	r3, [sp, #20]
 80177b4:	2300      	movpl	r3, #0
 80177b6:	2300      	movmi	r3, #0
 80177b8:	9206      	str	r2, [sp, #24]
 80177ba:	bf54      	ite	pl
 80177bc:	9305      	strpl	r3, [sp, #20]
 80177be:	9306      	strmi	r3, [sp, #24]
 80177c0:	f1bb 0f00 	cmp.w	fp, #0
 80177c4:	db18      	blt.n	80177f8 <_dtoa_r+0x218>
 80177c6:	9b06      	ldr	r3, [sp, #24]
 80177c8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80177cc:	445b      	add	r3, fp
 80177ce:	9306      	str	r3, [sp, #24]
 80177d0:	2300      	movs	r3, #0
 80177d2:	9a07      	ldr	r2, [sp, #28]
 80177d4:	2a09      	cmp	r2, #9
 80177d6:	d849      	bhi.n	801786c <_dtoa_r+0x28c>
 80177d8:	2a05      	cmp	r2, #5
 80177da:	bfc4      	itt	gt
 80177dc:	3a04      	subgt	r2, #4
 80177de:	9207      	strgt	r2, [sp, #28]
 80177e0:	9a07      	ldr	r2, [sp, #28]
 80177e2:	f1a2 0202 	sub.w	r2, r2, #2
 80177e6:	bfcc      	ite	gt
 80177e8:	2400      	movgt	r4, #0
 80177ea:	2401      	movle	r4, #1
 80177ec:	2a03      	cmp	r2, #3
 80177ee:	d848      	bhi.n	8017882 <_dtoa_r+0x2a2>
 80177f0:	e8df f002 	tbb	[pc, r2]
 80177f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80177f8:	9b05      	ldr	r3, [sp, #20]
 80177fa:	2200      	movs	r2, #0
 80177fc:	eba3 030b 	sub.w	r3, r3, fp
 8017800:	9305      	str	r3, [sp, #20]
 8017802:	920e      	str	r2, [sp, #56]	; 0x38
 8017804:	f1cb 0300 	rsb	r3, fp, #0
 8017808:	e7e3      	b.n	80177d2 <_dtoa_r+0x1f2>
 801780a:	2200      	movs	r2, #0
 801780c:	9208      	str	r2, [sp, #32]
 801780e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017810:	2a00      	cmp	r2, #0
 8017812:	dc39      	bgt.n	8017888 <_dtoa_r+0x2a8>
 8017814:	f04f 0a01 	mov.w	sl, #1
 8017818:	46d1      	mov	r9, sl
 801781a:	4652      	mov	r2, sl
 801781c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8017820:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017822:	2100      	movs	r1, #0
 8017824:	6079      	str	r1, [r7, #4]
 8017826:	2004      	movs	r0, #4
 8017828:	f100 0c14 	add.w	ip, r0, #20
 801782c:	4594      	cmp	ip, r2
 801782e:	6879      	ldr	r1, [r7, #4]
 8017830:	d92f      	bls.n	8017892 <_dtoa_r+0x2b2>
 8017832:	4630      	mov	r0, r6
 8017834:	930c      	str	r3, [sp, #48]	; 0x30
 8017836:	f000 fd73 	bl	8018320 <_Balloc>
 801783a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801783c:	9000      	str	r0, [sp, #0]
 801783e:	4602      	mov	r2, r0
 8017840:	2800      	cmp	r0, #0
 8017842:	d149      	bne.n	80178d8 <_dtoa_r+0x2f8>
 8017844:	4b23      	ldr	r3, [pc, #140]	; (80178d4 <_dtoa_r+0x2f4>)
 8017846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801784a:	e6df      	b.n	801760c <_dtoa_r+0x2c>
 801784c:	2201      	movs	r2, #1
 801784e:	e7dd      	b.n	801780c <_dtoa_r+0x22c>
 8017850:	2200      	movs	r2, #0
 8017852:	9208      	str	r2, [sp, #32]
 8017854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017856:	eb0b 0a02 	add.w	sl, fp, r2
 801785a:	f10a 0901 	add.w	r9, sl, #1
 801785e:	464a      	mov	r2, r9
 8017860:	2a01      	cmp	r2, #1
 8017862:	bfb8      	it	lt
 8017864:	2201      	movlt	r2, #1
 8017866:	e7db      	b.n	8017820 <_dtoa_r+0x240>
 8017868:	2201      	movs	r2, #1
 801786a:	e7f2      	b.n	8017852 <_dtoa_r+0x272>
 801786c:	2401      	movs	r4, #1
 801786e:	2200      	movs	r2, #0
 8017870:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8017874:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017878:	2100      	movs	r1, #0
 801787a:	46d1      	mov	r9, sl
 801787c:	2212      	movs	r2, #18
 801787e:	9109      	str	r1, [sp, #36]	; 0x24
 8017880:	e7ce      	b.n	8017820 <_dtoa_r+0x240>
 8017882:	2201      	movs	r2, #1
 8017884:	9208      	str	r2, [sp, #32]
 8017886:	e7f5      	b.n	8017874 <_dtoa_r+0x294>
 8017888:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801788c:	46d1      	mov	r9, sl
 801788e:	4652      	mov	r2, sl
 8017890:	e7c6      	b.n	8017820 <_dtoa_r+0x240>
 8017892:	3101      	adds	r1, #1
 8017894:	6079      	str	r1, [r7, #4]
 8017896:	0040      	lsls	r0, r0, #1
 8017898:	e7c6      	b.n	8017828 <_dtoa_r+0x248>
 801789a:	bf00      	nop
 801789c:	f3af 8000 	nop.w
 80178a0:	636f4361 	.word	0x636f4361
 80178a4:	3fd287a7 	.word	0x3fd287a7
 80178a8:	8b60c8b3 	.word	0x8b60c8b3
 80178ac:	3fc68a28 	.word	0x3fc68a28
 80178b0:	509f79fb 	.word	0x509f79fb
 80178b4:	3fd34413 	.word	0x3fd34413
 80178b8:	0801ca10 	.word	0x0801ca10
 80178bc:	0801cacf 	.word	0x0801cacf
 80178c0:	7ff00000 	.word	0x7ff00000
 80178c4:	0801cacb 	.word	0x0801cacb
 80178c8:	0801cac2 	.word	0x0801cac2
 80178cc:	0801c9ed 	.word	0x0801c9ed
 80178d0:	0801cc28 	.word	0x0801cc28
 80178d4:	0801cb2e 	.word	0x0801cb2e
 80178d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80178da:	9900      	ldr	r1, [sp, #0]
 80178dc:	6011      	str	r1, [r2, #0]
 80178de:	f1b9 0f0e 	cmp.w	r9, #14
 80178e2:	d872      	bhi.n	80179ca <_dtoa_r+0x3ea>
 80178e4:	2c00      	cmp	r4, #0
 80178e6:	d070      	beq.n	80179ca <_dtoa_r+0x3ea>
 80178e8:	f1bb 0f00 	cmp.w	fp, #0
 80178ec:	f340 80a6 	ble.w	8017a3c <_dtoa_r+0x45c>
 80178f0:	49ca      	ldr	r1, [pc, #808]	; (8017c1c <_dtoa_r+0x63c>)
 80178f2:	f00b 020f 	and.w	r2, fp, #15
 80178f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80178fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80178fe:	ed92 7b00 	vldr	d7, [r2]
 8017902:	ea4f 112b 	mov.w	r1, fp, asr #4
 8017906:	f000 808d 	beq.w	8017a24 <_dtoa_r+0x444>
 801790a:	4ac5      	ldr	r2, [pc, #788]	; (8017c20 <_dtoa_r+0x640>)
 801790c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8017910:	ed92 6b08 	vldr	d6, [r2, #32]
 8017914:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8017918:	ed8d 6b02 	vstr	d6, [sp, #8]
 801791c:	f001 010f 	and.w	r1, r1, #15
 8017920:	2203      	movs	r2, #3
 8017922:	48bf      	ldr	r0, [pc, #764]	; (8017c20 <_dtoa_r+0x640>)
 8017924:	2900      	cmp	r1, #0
 8017926:	d17f      	bne.n	8017a28 <_dtoa_r+0x448>
 8017928:	ed9d 6b02 	vldr	d6, [sp, #8]
 801792c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017930:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017934:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017936:	2900      	cmp	r1, #0
 8017938:	f000 80b2 	beq.w	8017aa0 <_dtoa_r+0x4c0>
 801793c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017940:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017944:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801794c:	f140 80a8 	bpl.w	8017aa0 <_dtoa_r+0x4c0>
 8017950:	f1b9 0f00 	cmp.w	r9, #0
 8017954:	f000 80a4 	beq.w	8017aa0 <_dtoa_r+0x4c0>
 8017958:	f1ba 0f00 	cmp.w	sl, #0
 801795c:	dd31      	ble.n	80179c2 <_dtoa_r+0x3e2>
 801795e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017962:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017966:	ed8d 7b02 	vstr	d7, [sp, #8]
 801796a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801796e:	3201      	adds	r2, #1
 8017970:	4650      	mov	r0, sl
 8017972:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017976:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801797a:	ee07 2a90 	vmov	s15, r2
 801797e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017982:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017986:	ed8d 5b02 	vstr	d5, [sp, #8]
 801798a:	9c03      	ldr	r4, [sp, #12]
 801798c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017990:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8017994:	2800      	cmp	r0, #0
 8017996:	f040 8086 	bne.w	8017aa6 <_dtoa_r+0x4c6>
 801799a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801799e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80179a2:	ec42 1b17 	vmov	d7, r1, r2
 80179a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80179aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ae:	f300 8272 	bgt.w	8017e96 <_dtoa_r+0x8b6>
 80179b2:	eeb1 7b47 	vneg.f64	d7, d7
 80179b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80179ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179be:	f100 8267 	bmi.w	8017e90 <_dtoa_r+0x8b0>
 80179c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80179c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80179ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80179cc:	2a00      	cmp	r2, #0
 80179ce:	f2c0 8129 	blt.w	8017c24 <_dtoa_r+0x644>
 80179d2:	f1bb 0f0e 	cmp.w	fp, #14
 80179d6:	f300 8125 	bgt.w	8017c24 <_dtoa_r+0x644>
 80179da:	4b90      	ldr	r3, [pc, #576]	; (8017c1c <_dtoa_r+0x63c>)
 80179dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80179e0:	ed93 6b00 	vldr	d6, [r3]
 80179e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	f280 80c3 	bge.w	8017b72 <_dtoa_r+0x592>
 80179ec:	f1b9 0f00 	cmp.w	r9, #0
 80179f0:	f300 80bf 	bgt.w	8017b72 <_dtoa_r+0x592>
 80179f4:	f040 824c 	bne.w	8017e90 <_dtoa_r+0x8b0>
 80179f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80179fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017a04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0c:	464c      	mov	r4, r9
 8017a0e:	464f      	mov	r7, r9
 8017a10:	f280 8222 	bge.w	8017e58 <_dtoa_r+0x878>
 8017a14:	f8dd 8000 	ldr.w	r8, [sp]
 8017a18:	2331      	movs	r3, #49	; 0x31
 8017a1a:	f808 3b01 	strb.w	r3, [r8], #1
 8017a1e:	f10b 0b01 	add.w	fp, fp, #1
 8017a22:	e21e      	b.n	8017e62 <_dtoa_r+0x882>
 8017a24:	2202      	movs	r2, #2
 8017a26:	e77c      	b.n	8017922 <_dtoa_r+0x342>
 8017a28:	07cc      	lsls	r4, r1, #31
 8017a2a:	d504      	bpl.n	8017a36 <_dtoa_r+0x456>
 8017a2c:	ed90 6b00 	vldr	d6, [r0]
 8017a30:	3201      	adds	r2, #1
 8017a32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017a36:	1049      	asrs	r1, r1, #1
 8017a38:	3008      	adds	r0, #8
 8017a3a:	e773      	b.n	8017924 <_dtoa_r+0x344>
 8017a3c:	d02e      	beq.n	8017a9c <_dtoa_r+0x4bc>
 8017a3e:	f1cb 0100 	rsb	r1, fp, #0
 8017a42:	4a76      	ldr	r2, [pc, #472]	; (8017c1c <_dtoa_r+0x63c>)
 8017a44:	f001 000f 	and.w	r0, r1, #15
 8017a48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017a4c:	ed92 7b00 	vldr	d7, [r2]
 8017a50:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8017a54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017a58:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017a5c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8017a60:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8017a64:	486e      	ldr	r0, [pc, #440]	; (8017c20 <_dtoa_r+0x640>)
 8017a66:	1109      	asrs	r1, r1, #4
 8017a68:	2400      	movs	r4, #0
 8017a6a:	2202      	movs	r2, #2
 8017a6c:	b939      	cbnz	r1, 8017a7e <_dtoa_r+0x49e>
 8017a6e:	2c00      	cmp	r4, #0
 8017a70:	f43f af60 	beq.w	8017934 <_dtoa_r+0x354>
 8017a74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a7c:	e75a      	b.n	8017934 <_dtoa_r+0x354>
 8017a7e:	07cf      	lsls	r7, r1, #31
 8017a80:	d509      	bpl.n	8017a96 <_dtoa_r+0x4b6>
 8017a82:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8017a86:	ed90 7b00 	vldr	d7, [r0]
 8017a8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017a8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017a92:	3201      	adds	r2, #1
 8017a94:	2401      	movs	r4, #1
 8017a96:	1049      	asrs	r1, r1, #1
 8017a98:	3008      	adds	r0, #8
 8017a9a:	e7e7      	b.n	8017a6c <_dtoa_r+0x48c>
 8017a9c:	2202      	movs	r2, #2
 8017a9e:	e749      	b.n	8017934 <_dtoa_r+0x354>
 8017aa0:	465f      	mov	r7, fp
 8017aa2:	4648      	mov	r0, r9
 8017aa4:	e765      	b.n	8017972 <_dtoa_r+0x392>
 8017aa6:	ec42 1b17 	vmov	d7, r1, r2
 8017aaa:	4a5c      	ldr	r2, [pc, #368]	; (8017c1c <_dtoa_r+0x63c>)
 8017aac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017ab0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017ab4:	9a00      	ldr	r2, [sp, #0]
 8017ab6:	1814      	adds	r4, r2, r0
 8017ab8:	9a08      	ldr	r2, [sp, #32]
 8017aba:	b352      	cbz	r2, 8017b12 <_dtoa_r+0x532>
 8017abc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017ac0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017ac4:	f8dd 8000 	ldr.w	r8, [sp]
 8017ac8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017acc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017ad0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017ad4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017ad8:	ee14 2a90 	vmov	r2, s9
 8017adc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017ae0:	3230      	adds	r2, #48	; 0x30
 8017ae2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017ae6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aee:	f808 2b01 	strb.w	r2, [r8], #1
 8017af2:	d439      	bmi.n	8017b68 <_dtoa_r+0x588>
 8017af4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017af8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b00:	d472      	bmi.n	8017be8 <_dtoa_r+0x608>
 8017b02:	45a0      	cmp	r8, r4
 8017b04:	f43f af5d 	beq.w	80179c2 <_dtoa_r+0x3e2>
 8017b08:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017b0c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017b10:	e7e0      	b.n	8017ad4 <_dtoa_r+0x4f4>
 8017b12:	f8dd 8000 	ldr.w	r8, [sp]
 8017b16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017b1a:	4621      	mov	r1, r4
 8017b1c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017b20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017b24:	ee14 2a90 	vmov	r2, s9
 8017b28:	3230      	adds	r2, #48	; 0x30
 8017b2a:	f808 2b01 	strb.w	r2, [r8], #1
 8017b2e:	45a0      	cmp	r8, r4
 8017b30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017b34:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017b38:	d118      	bne.n	8017b6c <_dtoa_r+0x58c>
 8017b3a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8017b3e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017b42:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b4a:	dc4d      	bgt.n	8017be8 <_dtoa_r+0x608>
 8017b4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017b50:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b58:	f57f af33 	bpl.w	80179c2 <_dtoa_r+0x3e2>
 8017b5c:	4688      	mov	r8, r1
 8017b5e:	3901      	subs	r1, #1
 8017b60:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8017b64:	2b30      	cmp	r3, #48	; 0x30
 8017b66:	d0f9      	beq.n	8017b5c <_dtoa_r+0x57c>
 8017b68:	46bb      	mov	fp, r7
 8017b6a:	e02a      	b.n	8017bc2 <_dtoa_r+0x5e2>
 8017b6c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017b70:	e7d6      	b.n	8017b20 <_dtoa_r+0x540>
 8017b72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017b76:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017b7a:	f8dd 8000 	ldr.w	r8, [sp]
 8017b7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017b82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017b86:	ee15 3a10 	vmov	r3, s10
 8017b8a:	3330      	adds	r3, #48	; 0x30
 8017b8c:	f808 3b01 	strb.w	r3, [r8], #1
 8017b90:	9b00      	ldr	r3, [sp, #0]
 8017b92:	eba8 0303 	sub.w	r3, r8, r3
 8017b96:	4599      	cmp	r9, r3
 8017b98:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017b9c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017ba0:	d133      	bne.n	8017c0a <_dtoa_r+0x62a>
 8017ba2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017ba6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bae:	dc1a      	bgt.n	8017be6 <_dtoa_r+0x606>
 8017bb0:	eeb4 7b46 	vcmp.f64	d7, d6
 8017bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb8:	d103      	bne.n	8017bc2 <_dtoa_r+0x5e2>
 8017bba:	ee15 3a10 	vmov	r3, s10
 8017bbe:	07d9      	lsls	r1, r3, #31
 8017bc0:	d411      	bmi.n	8017be6 <_dtoa_r+0x606>
 8017bc2:	4629      	mov	r1, r5
 8017bc4:	4630      	mov	r0, r6
 8017bc6:	f000 fbeb 	bl	80183a0 <_Bfree>
 8017bca:	2300      	movs	r3, #0
 8017bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017bce:	f888 3000 	strb.w	r3, [r8]
 8017bd2:	f10b 0301 	add.w	r3, fp, #1
 8017bd6:	6013      	str	r3, [r2, #0]
 8017bd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	f43f ad4d 	beq.w	801767a <_dtoa_r+0x9a>
 8017be0:	f8c3 8000 	str.w	r8, [r3]
 8017be4:	e549      	b.n	801767a <_dtoa_r+0x9a>
 8017be6:	465f      	mov	r7, fp
 8017be8:	4643      	mov	r3, r8
 8017bea:	4698      	mov	r8, r3
 8017bec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017bf0:	2a39      	cmp	r2, #57	; 0x39
 8017bf2:	d106      	bne.n	8017c02 <_dtoa_r+0x622>
 8017bf4:	9a00      	ldr	r2, [sp, #0]
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d1f7      	bne.n	8017bea <_dtoa_r+0x60a>
 8017bfa:	9900      	ldr	r1, [sp, #0]
 8017bfc:	2230      	movs	r2, #48	; 0x30
 8017bfe:	3701      	adds	r7, #1
 8017c00:	700a      	strb	r2, [r1, #0]
 8017c02:	781a      	ldrb	r2, [r3, #0]
 8017c04:	3201      	adds	r2, #1
 8017c06:	701a      	strb	r2, [r3, #0]
 8017c08:	e7ae      	b.n	8017b68 <_dtoa_r+0x588>
 8017c0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017c0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c16:	d1b2      	bne.n	8017b7e <_dtoa_r+0x59e>
 8017c18:	e7d3      	b.n	8017bc2 <_dtoa_r+0x5e2>
 8017c1a:	bf00      	nop
 8017c1c:	0801cc28 	.word	0x0801cc28
 8017c20:	0801cc00 	.word	0x0801cc00
 8017c24:	9908      	ldr	r1, [sp, #32]
 8017c26:	2900      	cmp	r1, #0
 8017c28:	f000 80d1 	beq.w	8017dce <_dtoa_r+0x7ee>
 8017c2c:	9907      	ldr	r1, [sp, #28]
 8017c2e:	2901      	cmp	r1, #1
 8017c30:	f300 80b4 	bgt.w	8017d9c <_dtoa_r+0x7bc>
 8017c34:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017c36:	2900      	cmp	r1, #0
 8017c38:	f000 80ac 	beq.w	8017d94 <_dtoa_r+0x7b4>
 8017c3c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017c40:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017c44:	461c      	mov	r4, r3
 8017c46:	930a      	str	r3, [sp, #40]	; 0x28
 8017c48:	9b05      	ldr	r3, [sp, #20]
 8017c4a:	4413      	add	r3, r2
 8017c4c:	9305      	str	r3, [sp, #20]
 8017c4e:	9b06      	ldr	r3, [sp, #24]
 8017c50:	2101      	movs	r1, #1
 8017c52:	4413      	add	r3, r2
 8017c54:	4630      	mov	r0, r6
 8017c56:	9306      	str	r3, [sp, #24]
 8017c58:	f000 fc5e 	bl	8018518 <__i2b>
 8017c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c5e:	4607      	mov	r7, r0
 8017c60:	f1b8 0f00 	cmp.w	r8, #0
 8017c64:	dd0d      	ble.n	8017c82 <_dtoa_r+0x6a2>
 8017c66:	9a06      	ldr	r2, [sp, #24]
 8017c68:	2a00      	cmp	r2, #0
 8017c6a:	dd0a      	ble.n	8017c82 <_dtoa_r+0x6a2>
 8017c6c:	4542      	cmp	r2, r8
 8017c6e:	9905      	ldr	r1, [sp, #20]
 8017c70:	bfa8      	it	ge
 8017c72:	4642      	movge	r2, r8
 8017c74:	1a89      	subs	r1, r1, r2
 8017c76:	9105      	str	r1, [sp, #20]
 8017c78:	9906      	ldr	r1, [sp, #24]
 8017c7a:	eba8 0802 	sub.w	r8, r8, r2
 8017c7e:	1a8a      	subs	r2, r1, r2
 8017c80:	9206      	str	r2, [sp, #24]
 8017c82:	b303      	cbz	r3, 8017cc6 <_dtoa_r+0x6e6>
 8017c84:	9a08      	ldr	r2, [sp, #32]
 8017c86:	2a00      	cmp	r2, #0
 8017c88:	f000 80a6 	beq.w	8017dd8 <_dtoa_r+0x7f8>
 8017c8c:	2c00      	cmp	r4, #0
 8017c8e:	dd13      	ble.n	8017cb8 <_dtoa_r+0x6d8>
 8017c90:	4639      	mov	r1, r7
 8017c92:	4622      	mov	r2, r4
 8017c94:	4630      	mov	r0, r6
 8017c96:	930c      	str	r3, [sp, #48]	; 0x30
 8017c98:	f000 fcfa 	bl	8018690 <__pow5mult>
 8017c9c:	462a      	mov	r2, r5
 8017c9e:	4601      	mov	r1, r0
 8017ca0:	4607      	mov	r7, r0
 8017ca2:	4630      	mov	r0, r6
 8017ca4:	f000 fc4e 	bl	8018544 <__multiply>
 8017ca8:	4629      	mov	r1, r5
 8017caa:	900a      	str	r0, [sp, #40]	; 0x28
 8017cac:	4630      	mov	r0, r6
 8017cae:	f000 fb77 	bl	80183a0 <_Bfree>
 8017cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cb6:	4615      	mov	r5, r2
 8017cb8:	1b1a      	subs	r2, r3, r4
 8017cba:	d004      	beq.n	8017cc6 <_dtoa_r+0x6e6>
 8017cbc:	4629      	mov	r1, r5
 8017cbe:	4630      	mov	r0, r6
 8017cc0:	f000 fce6 	bl	8018690 <__pow5mult>
 8017cc4:	4605      	mov	r5, r0
 8017cc6:	2101      	movs	r1, #1
 8017cc8:	4630      	mov	r0, r6
 8017cca:	f000 fc25 	bl	8018518 <__i2b>
 8017cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	f340 8082 	ble.w	8017ddc <_dtoa_r+0x7fc>
 8017cd8:	461a      	mov	r2, r3
 8017cda:	4601      	mov	r1, r0
 8017cdc:	4630      	mov	r0, r6
 8017cde:	f000 fcd7 	bl	8018690 <__pow5mult>
 8017ce2:	9b07      	ldr	r3, [sp, #28]
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	4604      	mov	r4, r0
 8017ce8:	dd7b      	ble.n	8017de2 <_dtoa_r+0x802>
 8017cea:	2300      	movs	r3, #0
 8017cec:	930a      	str	r3, [sp, #40]	; 0x28
 8017cee:	6922      	ldr	r2, [r4, #16]
 8017cf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017cf4:	6910      	ldr	r0, [r2, #16]
 8017cf6:	f000 fbbf 	bl	8018478 <__hi0bits>
 8017cfa:	f1c0 0020 	rsb	r0, r0, #32
 8017cfe:	9b06      	ldr	r3, [sp, #24]
 8017d00:	4418      	add	r0, r3
 8017d02:	f010 001f 	ands.w	r0, r0, #31
 8017d06:	f000 808d 	beq.w	8017e24 <_dtoa_r+0x844>
 8017d0a:	f1c0 0220 	rsb	r2, r0, #32
 8017d0e:	2a04      	cmp	r2, #4
 8017d10:	f340 8086 	ble.w	8017e20 <_dtoa_r+0x840>
 8017d14:	f1c0 001c 	rsb	r0, r0, #28
 8017d18:	9b05      	ldr	r3, [sp, #20]
 8017d1a:	4403      	add	r3, r0
 8017d1c:	9305      	str	r3, [sp, #20]
 8017d1e:	9b06      	ldr	r3, [sp, #24]
 8017d20:	4403      	add	r3, r0
 8017d22:	4480      	add	r8, r0
 8017d24:	9306      	str	r3, [sp, #24]
 8017d26:	9b05      	ldr	r3, [sp, #20]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	dd05      	ble.n	8017d38 <_dtoa_r+0x758>
 8017d2c:	4629      	mov	r1, r5
 8017d2e:	461a      	mov	r2, r3
 8017d30:	4630      	mov	r0, r6
 8017d32:	f000 fd07 	bl	8018744 <__lshift>
 8017d36:	4605      	mov	r5, r0
 8017d38:	9b06      	ldr	r3, [sp, #24]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	dd05      	ble.n	8017d4a <_dtoa_r+0x76a>
 8017d3e:	4621      	mov	r1, r4
 8017d40:	461a      	mov	r2, r3
 8017d42:	4630      	mov	r0, r6
 8017d44:	f000 fcfe 	bl	8018744 <__lshift>
 8017d48:	4604      	mov	r4, r0
 8017d4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d06b      	beq.n	8017e28 <_dtoa_r+0x848>
 8017d50:	4621      	mov	r1, r4
 8017d52:	4628      	mov	r0, r5
 8017d54:	f000 fd62 	bl	801881c <__mcmp>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	da65      	bge.n	8017e28 <_dtoa_r+0x848>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	4629      	mov	r1, r5
 8017d60:	220a      	movs	r2, #10
 8017d62:	4630      	mov	r0, r6
 8017d64:	f000 fb3e 	bl	80183e4 <__multadd>
 8017d68:	9b08      	ldr	r3, [sp, #32]
 8017d6a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017d6e:	4605      	mov	r5, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 8192 	beq.w	801809a <_dtoa_r+0xaba>
 8017d76:	4639      	mov	r1, r7
 8017d78:	2300      	movs	r3, #0
 8017d7a:	220a      	movs	r2, #10
 8017d7c:	4630      	mov	r0, r6
 8017d7e:	f000 fb31 	bl	80183e4 <__multadd>
 8017d82:	f1ba 0f00 	cmp.w	sl, #0
 8017d86:	4607      	mov	r7, r0
 8017d88:	f300 808e 	bgt.w	8017ea8 <_dtoa_r+0x8c8>
 8017d8c:	9b07      	ldr	r3, [sp, #28]
 8017d8e:	2b02      	cmp	r3, #2
 8017d90:	dc51      	bgt.n	8017e36 <_dtoa_r+0x856>
 8017d92:	e089      	b.n	8017ea8 <_dtoa_r+0x8c8>
 8017d94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017d96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017d9a:	e751      	b.n	8017c40 <_dtoa_r+0x660>
 8017d9c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8017da0:	42a3      	cmp	r3, r4
 8017da2:	bfbf      	itttt	lt
 8017da4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8017da6:	1ae3      	sublt	r3, r4, r3
 8017da8:	18d2      	addlt	r2, r2, r3
 8017daa:	4613      	movlt	r3, r2
 8017dac:	bfb7      	itett	lt
 8017dae:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017db0:	1b1c      	subge	r4, r3, r4
 8017db2:	4623      	movlt	r3, r4
 8017db4:	2400      	movlt	r4, #0
 8017db6:	f1b9 0f00 	cmp.w	r9, #0
 8017dba:	bfb5      	itete	lt
 8017dbc:	9a05      	ldrlt	r2, [sp, #20]
 8017dbe:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8017dc2:	eba2 0809 	sublt.w	r8, r2, r9
 8017dc6:	464a      	movge	r2, r9
 8017dc8:	bfb8      	it	lt
 8017dca:	2200      	movlt	r2, #0
 8017dcc:	e73b      	b.n	8017c46 <_dtoa_r+0x666>
 8017dce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017dd2:	9f08      	ldr	r7, [sp, #32]
 8017dd4:	461c      	mov	r4, r3
 8017dd6:	e743      	b.n	8017c60 <_dtoa_r+0x680>
 8017dd8:	461a      	mov	r2, r3
 8017dda:	e76f      	b.n	8017cbc <_dtoa_r+0x6dc>
 8017ddc:	9b07      	ldr	r3, [sp, #28]
 8017dde:	2b01      	cmp	r3, #1
 8017de0:	dc18      	bgt.n	8017e14 <_dtoa_r+0x834>
 8017de2:	9b02      	ldr	r3, [sp, #8]
 8017de4:	b9b3      	cbnz	r3, 8017e14 <_dtoa_r+0x834>
 8017de6:	9b03      	ldr	r3, [sp, #12]
 8017de8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8017dec:	b9a2      	cbnz	r2, 8017e18 <_dtoa_r+0x838>
 8017dee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017df2:	0d12      	lsrs	r2, r2, #20
 8017df4:	0512      	lsls	r2, r2, #20
 8017df6:	b18a      	cbz	r2, 8017e1c <_dtoa_r+0x83c>
 8017df8:	9b05      	ldr	r3, [sp, #20]
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	9305      	str	r3, [sp, #20]
 8017dfe:	9b06      	ldr	r3, [sp, #24]
 8017e00:	3301      	adds	r3, #1
 8017e02:	9306      	str	r3, [sp, #24]
 8017e04:	2301      	movs	r3, #1
 8017e06:	930a      	str	r3, [sp, #40]	; 0x28
 8017e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	f47f af6f 	bne.w	8017cee <_dtoa_r+0x70e>
 8017e10:	2001      	movs	r0, #1
 8017e12:	e774      	b.n	8017cfe <_dtoa_r+0x71e>
 8017e14:	2300      	movs	r3, #0
 8017e16:	e7f6      	b.n	8017e06 <_dtoa_r+0x826>
 8017e18:	9b02      	ldr	r3, [sp, #8]
 8017e1a:	e7f4      	b.n	8017e06 <_dtoa_r+0x826>
 8017e1c:	920a      	str	r2, [sp, #40]	; 0x28
 8017e1e:	e7f3      	b.n	8017e08 <_dtoa_r+0x828>
 8017e20:	d081      	beq.n	8017d26 <_dtoa_r+0x746>
 8017e22:	4610      	mov	r0, r2
 8017e24:	301c      	adds	r0, #28
 8017e26:	e777      	b.n	8017d18 <_dtoa_r+0x738>
 8017e28:	f1b9 0f00 	cmp.w	r9, #0
 8017e2c:	dc37      	bgt.n	8017e9e <_dtoa_r+0x8be>
 8017e2e:	9b07      	ldr	r3, [sp, #28]
 8017e30:	2b02      	cmp	r3, #2
 8017e32:	dd34      	ble.n	8017e9e <_dtoa_r+0x8be>
 8017e34:	46ca      	mov	sl, r9
 8017e36:	f1ba 0f00 	cmp.w	sl, #0
 8017e3a:	d10d      	bne.n	8017e58 <_dtoa_r+0x878>
 8017e3c:	4621      	mov	r1, r4
 8017e3e:	4653      	mov	r3, sl
 8017e40:	2205      	movs	r2, #5
 8017e42:	4630      	mov	r0, r6
 8017e44:	f000 face 	bl	80183e4 <__multadd>
 8017e48:	4601      	mov	r1, r0
 8017e4a:	4604      	mov	r4, r0
 8017e4c:	4628      	mov	r0, r5
 8017e4e:	f000 fce5 	bl	801881c <__mcmp>
 8017e52:	2800      	cmp	r0, #0
 8017e54:	f73f adde 	bgt.w	8017a14 <_dtoa_r+0x434>
 8017e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e5a:	f8dd 8000 	ldr.w	r8, [sp]
 8017e5e:	ea6f 0b03 	mvn.w	fp, r3
 8017e62:	f04f 0900 	mov.w	r9, #0
 8017e66:	4621      	mov	r1, r4
 8017e68:	4630      	mov	r0, r6
 8017e6a:	f000 fa99 	bl	80183a0 <_Bfree>
 8017e6e:	2f00      	cmp	r7, #0
 8017e70:	f43f aea7 	beq.w	8017bc2 <_dtoa_r+0x5e2>
 8017e74:	f1b9 0f00 	cmp.w	r9, #0
 8017e78:	d005      	beq.n	8017e86 <_dtoa_r+0x8a6>
 8017e7a:	45b9      	cmp	r9, r7
 8017e7c:	d003      	beq.n	8017e86 <_dtoa_r+0x8a6>
 8017e7e:	4649      	mov	r1, r9
 8017e80:	4630      	mov	r0, r6
 8017e82:	f000 fa8d 	bl	80183a0 <_Bfree>
 8017e86:	4639      	mov	r1, r7
 8017e88:	4630      	mov	r0, r6
 8017e8a:	f000 fa89 	bl	80183a0 <_Bfree>
 8017e8e:	e698      	b.n	8017bc2 <_dtoa_r+0x5e2>
 8017e90:	2400      	movs	r4, #0
 8017e92:	4627      	mov	r7, r4
 8017e94:	e7e0      	b.n	8017e58 <_dtoa_r+0x878>
 8017e96:	46bb      	mov	fp, r7
 8017e98:	4604      	mov	r4, r0
 8017e9a:	4607      	mov	r7, r0
 8017e9c:	e5ba      	b.n	8017a14 <_dtoa_r+0x434>
 8017e9e:	9b08      	ldr	r3, [sp, #32]
 8017ea0:	46ca      	mov	sl, r9
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 8100 	beq.w	80180a8 <_dtoa_r+0xac8>
 8017ea8:	f1b8 0f00 	cmp.w	r8, #0
 8017eac:	dd05      	ble.n	8017eba <_dtoa_r+0x8da>
 8017eae:	4639      	mov	r1, r7
 8017eb0:	4642      	mov	r2, r8
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	f000 fc46 	bl	8018744 <__lshift>
 8017eb8:	4607      	mov	r7, r0
 8017eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d05d      	beq.n	8017f7c <_dtoa_r+0x99c>
 8017ec0:	6879      	ldr	r1, [r7, #4]
 8017ec2:	4630      	mov	r0, r6
 8017ec4:	f000 fa2c 	bl	8018320 <_Balloc>
 8017ec8:	4680      	mov	r8, r0
 8017eca:	b928      	cbnz	r0, 8017ed8 <_dtoa_r+0x8f8>
 8017ecc:	4b82      	ldr	r3, [pc, #520]	; (80180d8 <_dtoa_r+0xaf8>)
 8017ece:	4602      	mov	r2, r0
 8017ed0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017ed4:	f7ff bb9a 	b.w	801760c <_dtoa_r+0x2c>
 8017ed8:	693a      	ldr	r2, [r7, #16]
 8017eda:	3202      	adds	r2, #2
 8017edc:	0092      	lsls	r2, r2, #2
 8017ede:	f107 010c 	add.w	r1, r7, #12
 8017ee2:	300c      	adds	r0, #12
 8017ee4:	f7fe fde6 	bl	8016ab4 <memcpy>
 8017ee8:	2201      	movs	r2, #1
 8017eea:	4641      	mov	r1, r8
 8017eec:	4630      	mov	r0, r6
 8017eee:	f000 fc29 	bl	8018744 <__lshift>
 8017ef2:	9b00      	ldr	r3, [sp, #0]
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	9305      	str	r3, [sp, #20]
 8017ef8:	9b00      	ldr	r3, [sp, #0]
 8017efa:	4453      	add	r3, sl
 8017efc:	9309      	str	r3, [sp, #36]	; 0x24
 8017efe:	9b02      	ldr	r3, [sp, #8]
 8017f00:	f003 0301 	and.w	r3, r3, #1
 8017f04:	46b9      	mov	r9, r7
 8017f06:	9308      	str	r3, [sp, #32]
 8017f08:	4607      	mov	r7, r0
 8017f0a:	9b05      	ldr	r3, [sp, #20]
 8017f0c:	4621      	mov	r1, r4
 8017f0e:	3b01      	subs	r3, #1
 8017f10:	4628      	mov	r0, r5
 8017f12:	9302      	str	r3, [sp, #8]
 8017f14:	f7ff fad8 	bl	80174c8 <quorem>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	3330      	adds	r3, #48	; 0x30
 8017f1c:	9006      	str	r0, [sp, #24]
 8017f1e:	4649      	mov	r1, r9
 8017f20:	4628      	mov	r0, r5
 8017f22:	930a      	str	r3, [sp, #40]	; 0x28
 8017f24:	f000 fc7a 	bl	801881c <__mcmp>
 8017f28:	463a      	mov	r2, r7
 8017f2a:	4682      	mov	sl, r0
 8017f2c:	4621      	mov	r1, r4
 8017f2e:	4630      	mov	r0, r6
 8017f30:	f000 fc90 	bl	8018854 <__mdiff>
 8017f34:	68c2      	ldr	r2, [r0, #12]
 8017f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f38:	4680      	mov	r8, r0
 8017f3a:	bb0a      	cbnz	r2, 8017f80 <_dtoa_r+0x9a0>
 8017f3c:	4601      	mov	r1, r0
 8017f3e:	4628      	mov	r0, r5
 8017f40:	f000 fc6c 	bl	801881c <__mcmp>
 8017f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f46:	4602      	mov	r2, r0
 8017f48:	4641      	mov	r1, r8
 8017f4a:	4630      	mov	r0, r6
 8017f4c:	920e      	str	r2, [sp, #56]	; 0x38
 8017f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8017f50:	f000 fa26 	bl	80183a0 <_Bfree>
 8017f54:	9b07      	ldr	r3, [sp, #28]
 8017f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017f58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8017f5c:	ea43 0102 	orr.w	r1, r3, r2
 8017f60:	9b08      	ldr	r3, [sp, #32]
 8017f62:	430b      	orrs	r3, r1
 8017f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f66:	d10d      	bne.n	8017f84 <_dtoa_r+0x9a4>
 8017f68:	2b39      	cmp	r3, #57	; 0x39
 8017f6a:	d029      	beq.n	8017fc0 <_dtoa_r+0x9e0>
 8017f6c:	f1ba 0f00 	cmp.w	sl, #0
 8017f70:	dd01      	ble.n	8017f76 <_dtoa_r+0x996>
 8017f72:	9b06      	ldr	r3, [sp, #24]
 8017f74:	3331      	adds	r3, #49	; 0x31
 8017f76:	9a02      	ldr	r2, [sp, #8]
 8017f78:	7013      	strb	r3, [r2, #0]
 8017f7a:	e774      	b.n	8017e66 <_dtoa_r+0x886>
 8017f7c:	4638      	mov	r0, r7
 8017f7e:	e7b8      	b.n	8017ef2 <_dtoa_r+0x912>
 8017f80:	2201      	movs	r2, #1
 8017f82:	e7e1      	b.n	8017f48 <_dtoa_r+0x968>
 8017f84:	f1ba 0f00 	cmp.w	sl, #0
 8017f88:	db06      	blt.n	8017f98 <_dtoa_r+0x9b8>
 8017f8a:	9907      	ldr	r1, [sp, #28]
 8017f8c:	ea41 0a0a 	orr.w	sl, r1, sl
 8017f90:	9908      	ldr	r1, [sp, #32]
 8017f92:	ea5a 0101 	orrs.w	r1, sl, r1
 8017f96:	d120      	bne.n	8017fda <_dtoa_r+0x9fa>
 8017f98:	2a00      	cmp	r2, #0
 8017f9a:	ddec      	ble.n	8017f76 <_dtoa_r+0x996>
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	2201      	movs	r2, #1
 8017fa0:	4630      	mov	r0, r6
 8017fa2:	9305      	str	r3, [sp, #20]
 8017fa4:	f000 fbce 	bl	8018744 <__lshift>
 8017fa8:	4621      	mov	r1, r4
 8017faa:	4605      	mov	r5, r0
 8017fac:	f000 fc36 	bl	801881c <__mcmp>
 8017fb0:	2800      	cmp	r0, #0
 8017fb2:	9b05      	ldr	r3, [sp, #20]
 8017fb4:	dc02      	bgt.n	8017fbc <_dtoa_r+0x9dc>
 8017fb6:	d1de      	bne.n	8017f76 <_dtoa_r+0x996>
 8017fb8:	07da      	lsls	r2, r3, #31
 8017fba:	d5dc      	bpl.n	8017f76 <_dtoa_r+0x996>
 8017fbc:	2b39      	cmp	r3, #57	; 0x39
 8017fbe:	d1d8      	bne.n	8017f72 <_dtoa_r+0x992>
 8017fc0:	9a02      	ldr	r2, [sp, #8]
 8017fc2:	2339      	movs	r3, #57	; 0x39
 8017fc4:	7013      	strb	r3, [r2, #0]
 8017fc6:	4643      	mov	r3, r8
 8017fc8:	4698      	mov	r8, r3
 8017fca:	3b01      	subs	r3, #1
 8017fcc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8017fd0:	2a39      	cmp	r2, #57	; 0x39
 8017fd2:	d051      	beq.n	8018078 <_dtoa_r+0xa98>
 8017fd4:	3201      	adds	r2, #1
 8017fd6:	701a      	strb	r2, [r3, #0]
 8017fd8:	e745      	b.n	8017e66 <_dtoa_r+0x886>
 8017fda:	2a00      	cmp	r2, #0
 8017fdc:	dd03      	ble.n	8017fe6 <_dtoa_r+0xa06>
 8017fde:	2b39      	cmp	r3, #57	; 0x39
 8017fe0:	d0ee      	beq.n	8017fc0 <_dtoa_r+0x9e0>
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	e7c7      	b.n	8017f76 <_dtoa_r+0x996>
 8017fe6:	9a05      	ldr	r2, [sp, #20]
 8017fe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017fea:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017fee:	428a      	cmp	r2, r1
 8017ff0:	d02b      	beq.n	801804a <_dtoa_r+0xa6a>
 8017ff2:	4629      	mov	r1, r5
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	220a      	movs	r2, #10
 8017ff8:	4630      	mov	r0, r6
 8017ffa:	f000 f9f3 	bl	80183e4 <__multadd>
 8017ffe:	45b9      	cmp	r9, r7
 8018000:	4605      	mov	r5, r0
 8018002:	f04f 0300 	mov.w	r3, #0
 8018006:	f04f 020a 	mov.w	r2, #10
 801800a:	4649      	mov	r1, r9
 801800c:	4630      	mov	r0, r6
 801800e:	d107      	bne.n	8018020 <_dtoa_r+0xa40>
 8018010:	f000 f9e8 	bl	80183e4 <__multadd>
 8018014:	4681      	mov	r9, r0
 8018016:	4607      	mov	r7, r0
 8018018:	9b05      	ldr	r3, [sp, #20]
 801801a:	3301      	adds	r3, #1
 801801c:	9305      	str	r3, [sp, #20]
 801801e:	e774      	b.n	8017f0a <_dtoa_r+0x92a>
 8018020:	f000 f9e0 	bl	80183e4 <__multadd>
 8018024:	4639      	mov	r1, r7
 8018026:	4681      	mov	r9, r0
 8018028:	2300      	movs	r3, #0
 801802a:	220a      	movs	r2, #10
 801802c:	4630      	mov	r0, r6
 801802e:	f000 f9d9 	bl	80183e4 <__multadd>
 8018032:	4607      	mov	r7, r0
 8018034:	e7f0      	b.n	8018018 <_dtoa_r+0xa38>
 8018036:	f1ba 0f00 	cmp.w	sl, #0
 801803a:	9a00      	ldr	r2, [sp, #0]
 801803c:	bfcc      	ite	gt
 801803e:	46d0      	movgt	r8, sl
 8018040:	f04f 0801 	movle.w	r8, #1
 8018044:	4490      	add	r8, r2
 8018046:	f04f 0900 	mov.w	r9, #0
 801804a:	4629      	mov	r1, r5
 801804c:	2201      	movs	r2, #1
 801804e:	4630      	mov	r0, r6
 8018050:	9302      	str	r3, [sp, #8]
 8018052:	f000 fb77 	bl	8018744 <__lshift>
 8018056:	4621      	mov	r1, r4
 8018058:	4605      	mov	r5, r0
 801805a:	f000 fbdf 	bl	801881c <__mcmp>
 801805e:	2800      	cmp	r0, #0
 8018060:	dcb1      	bgt.n	8017fc6 <_dtoa_r+0x9e6>
 8018062:	d102      	bne.n	801806a <_dtoa_r+0xa8a>
 8018064:	9b02      	ldr	r3, [sp, #8]
 8018066:	07db      	lsls	r3, r3, #31
 8018068:	d4ad      	bmi.n	8017fc6 <_dtoa_r+0x9e6>
 801806a:	4643      	mov	r3, r8
 801806c:	4698      	mov	r8, r3
 801806e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018072:	2a30      	cmp	r2, #48	; 0x30
 8018074:	d0fa      	beq.n	801806c <_dtoa_r+0xa8c>
 8018076:	e6f6      	b.n	8017e66 <_dtoa_r+0x886>
 8018078:	9a00      	ldr	r2, [sp, #0]
 801807a:	429a      	cmp	r2, r3
 801807c:	d1a4      	bne.n	8017fc8 <_dtoa_r+0x9e8>
 801807e:	f10b 0b01 	add.w	fp, fp, #1
 8018082:	2331      	movs	r3, #49	; 0x31
 8018084:	e778      	b.n	8017f78 <_dtoa_r+0x998>
 8018086:	4b15      	ldr	r3, [pc, #84]	; (80180dc <_dtoa_r+0xafc>)
 8018088:	f7ff bb12 	b.w	80176b0 <_dtoa_r+0xd0>
 801808c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801808e:	2b00      	cmp	r3, #0
 8018090:	f47f aaee 	bne.w	8017670 <_dtoa_r+0x90>
 8018094:	4b12      	ldr	r3, [pc, #72]	; (80180e0 <_dtoa_r+0xb00>)
 8018096:	f7ff bb0b 	b.w	80176b0 <_dtoa_r+0xd0>
 801809a:	f1ba 0f00 	cmp.w	sl, #0
 801809e:	dc03      	bgt.n	80180a8 <_dtoa_r+0xac8>
 80180a0:	9b07      	ldr	r3, [sp, #28]
 80180a2:	2b02      	cmp	r3, #2
 80180a4:	f73f aec7 	bgt.w	8017e36 <_dtoa_r+0x856>
 80180a8:	f8dd 8000 	ldr.w	r8, [sp]
 80180ac:	4621      	mov	r1, r4
 80180ae:	4628      	mov	r0, r5
 80180b0:	f7ff fa0a 	bl	80174c8 <quorem>
 80180b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80180b8:	f808 3b01 	strb.w	r3, [r8], #1
 80180bc:	9a00      	ldr	r2, [sp, #0]
 80180be:	eba8 0202 	sub.w	r2, r8, r2
 80180c2:	4592      	cmp	sl, r2
 80180c4:	ddb7      	ble.n	8018036 <_dtoa_r+0xa56>
 80180c6:	4629      	mov	r1, r5
 80180c8:	2300      	movs	r3, #0
 80180ca:	220a      	movs	r2, #10
 80180cc:	4630      	mov	r0, r6
 80180ce:	f000 f989 	bl	80183e4 <__multadd>
 80180d2:	4605      	mov	r5, r0
 80180d4:	e7ea      	b.n	80180ac <_dtoa_r+0xacc>
 80180d6:	bf00      	nop
 80180d8:	0801cb2e 	.word	0x0801cb2e
 80180dc:	0801c9ec 	.word	0x0801c9ec
 80180e0:	0801cac2 	.word	0x0801cac2

080180e4 <__errno>:
 80180e4:	4b01      	ldr	r3, [pc, #4]	; (80180ec <__errno+0x8>)
 80180e6:	6818      	ldr	r0, [r3, #0]
 80180e8:	4770      	bx	lr
 80180ea:	bf00      	nop
 80180ec:	20000020 	.word	0x20000020

080180f0 <std>:
 80180f0:	2300      	movs	r3, #0
 80180f2:	b510      	push	{r4, lr}
 80180f4:	4604      	mov	r4, r0
 80180f6:	e9c0 3300 	strd	r3, r3, [r0]
 80180fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80180fe:	6083      	str	r3, [r0, #8]
 8018100:	8181      	strh	r1, [r0, #12]
 8018102:	6643      	str	r3, [r0, #100]	; 0x64
 8018104:	81c2      	strh	r2, [r0, #14]
 8018106:	6183      	str	r3, [r0, #24]
 8018108:	4619      	mov	r1, r3
 801810a:	2208      	movs	r2, #8
 801810c:	305c      	adds	r0, #92	; 0x5c
 801810e:	f7fe fcf9 	bl	8016b04 <memset>
 8018112:	4b05      	ldr	r3, [pc, #20]	; (8018128 <std+0x38>)
 8018114:	6263      	str	r3, [r4, #36]	; 0x24
 8018116:	4b05      	ldr	r3, [pc, #20]	; (801812c <std+0x3c>)
 8018118:	62a3      	str	r3, [r4, #40]	; 0x28
 801811a:	4b05      	ldr	r3, [pc, #20]	; (8018130 <std+0x40>)
 801811c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801811e:	4b05      	ldr	r3, [pc, #20]	; (8018134 <std+0x44>)
 8018120:	6224      	str	r4, [r4, #32]
 8018122:	6323      	str	r3, [r4, #48]	; 0x30
 8018124:	bd10      	pop	{r4, pc}
 8018126:	bf00      	nop
 8018128:	0801911d 	.word	0x0801911d
 801812c:	0801913f 	.word	0x0801913f
 8018130:	08019177 	.word	0x08019177
 8018134:	0801919b 	.word	0x0801919b

08018138 <_cleanup_r>:
 8018138:	4901      	ldr	r1, [pc, #4]	; (8018140 <_cleanup_r+0x8>)
 801813a:	f000 b8c1 	b.w	80182c0 <_fwalk_reent>
 801813e:	bf00      	nop
 8018140:	08019485 	.word	0x08019485

08018144 <__sfmoreglue>:
 8018144:	b570      	push	{r4, r5, r6, lr}
 8018146:	1e4a      	subs	r2, r1, #1
 8018148:	2568      	movs	r5, #104	; 0x68
 801814a:	4355      	muls	r5, r2
 801814c:	460e      	mov	r6, r1
 801814e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018152:	f000 fcc3 	bl	8018adc <_malloc_r>
 8018156:	4604      	mov	r4, r0
 8018158:	b140      	cbz	r0, 801816c <__sfmoreglue+0x28>
 801815a:	2100      	movs	r1, #0
 801815c:	e9c0 1600 	strd	r1, r6, [r0]
 8018160:	300c      	adds	r0, #12
 8018162:	60a0      	str	r0, [r4, #8]
 8018164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018168:	f7fe fccc 	bl	8016b04 <memset>
 801816c:	4620      	mov	r0, r4
 801816e:	bd70      	pop	{r4, r5, r6, pc}

08018170 <__sfp_lock_acquire>:
 8018170:	4801      	ldr	r0, [pc, #4]	; (8018178 <__sfp_lock_acquire+0x8>)
 8018172:	f000 b8ca 	b.w	801830a <__retarget_lock_acquire_recursive>
 8018176:	bf00      	nop
 8018178:	20012d08 	.word	0x20012d08

0801817c <__sfp_lock_release>:
 801817c:	4801      	ldr	r0, [pc, #4]	; (8018184 <__sfp_lock_release+0x8>)
 801817e:	f000 b8c5 	b.w	801830c <__retarget_lock_release_recursive>
 8018182:	bf00      	nop
 8018184:	20012d08 	.word	0x20012d08

08018188 <__sinit_lock_acquire>:
 8018188:	4801      	ldr	r0, [pc, #4]	; (8018190 <__sinit_lock_acquire+0x8>)
 801818a:	f000 b8be 	b.w	801830a <__retarget_lock_acquire_recursive>
 801818e:	bf00      	nop
 8018190:	20012d03 	.word	0x20012d03

08018194 <__sinit_lock_release>:
 8018194:	4801      	ldr	r0, [pc, #4]	; (801819c <__sinit_lock_release+0x8>)
 8018196:	f000 b8b9 	b.w	801830c <__retarget_lock_release_recursive>
 801819a:	bf00      	nop
 801819c:	20012d03 	.word	0x20012d03

080181a0 <__sinit>:
 80181a0:	b510      	push	{r4, lr}
 80181a2:	4604      	mov	r4, r0
 80181a4:	f7ff fff0 	bl	8018188 <__sinit_lock_acquire>
 80181a8:	69a3      	ldr	r3, [r4, #24]
 80181aa:	b11b      	cbz	r3, 80181b4 <__sinit+0x14>
 80181ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181b0:	f7ff bff0 	b.w	8018194 <__sinit_lock_release>
 80181b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80181b8:	6523      	str	r3, [r4, #80]	; 0x50
 80181ba:	4b13      	ldr	r3, [pc, #76]	; (8018208 <__sinit+0x68>)
 80181bc:	4a13      	ldr	r2, [pc, #76]	; (801820c <__sinit+0x6c>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80181c2:	42a3      	cmp	r3, r4
 80181c4:	bf04      	itt	eq
 80181c6:	2301      	moveq	r3, #1
 80181c8:	61a3      	streq	r3, [r4, #24]
 80181ca:	4620      	mov	r0, r4
 80181cc:	f000 f820 	bl	8018210 <__sfp>
 80181d0:	6060      	str	r0, [r4, #4]
 80181d2:	4620      	mov	r0, r4
 80181d4:	f000 f81c 	bl	8018210 <__sfp>
 80181d8:	60a0      	str	r0, [r4, #8]
 80181da:	4620      	mov	r0, r4
 80181dc:	f000 f818 	bl	8018210 <__sfp>
 80181e0:	2200      	movs	r2, #0
 80181e2:	60e0      	str	r0, [r4, #12]
 80181e4:	2104      	movs	r1, #4
 80181e6:	6860      	ldr	r0, [r4, #4]
 80181e8:	f7ff ff82 	bl	80180f0 <std>
 80181ec:	68a0      	ldr	r0, [r4, #8]
 80181ee:	2201      	movs	r2, #1
 80181f0:	2109      	movs	r1, #9
 80181f2:	f7ff ff7d 	bl	80180f0 <std>
 80181f6:	68e0      	ldr	r0, [r4, #12]
 80181f8:	2202      	movs	r2, #2
 80181fa:	2112      	movs	r1, #18
 80181fc:	f7ff ff78 	bl	80180f0 <std>
 8018200:	2301      	movs	r3, #1
 8018202:	61a3      	str	r3, [r4, #24]
 8018204:	e7d2      	b.n	80181ac <__sinit+0xc>
 8018206:	bf00      	nop
 8018208:	0801c9d8 	.word	0x0801c9d8
 801820c:	08018139 	.word	0x08018139

08018210 <__sfp>:
 8018210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018212:	4607      	mov	r7, r0
 8018214:	f7ff ffac 	bl	8018170 <__sfp_lock_acquire>
 8018218:	4b1e      	ldr	r3, [pc, #120]	; (8018294 <__sfp+0x84>)
 801821a:	681e      	ldr	r6, [r3, #0]
 801821c:	69b3      	ldr	r3, [r6, #24]
 801821e:	b913      	cbnz	r3, 8018226 <__sfp+0x16>
 8018220:	4630      	mov	r0, r6
 8018222:	f7ff ffbd 	bl	80181a0 <__sinit>
 8018226:	3648      	adds	r6, #72	; 0x48
 8018228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801822c:	3b01      	subs	r3, #1
 801822e:	d503      	bpl.n	8018238 <__sfp+0x28>
 8018230:	6833      	ldr	r3, [r6, #0]
 8018232:	b30b      	cbz	r3, 8018278 <__sfp+0x68>
 8018234:	6836      	ldr	r6, [r6, #0]
 8018236:	e7f7      	b.n	8018228 <__sfp+0x18>
 8018238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801823c:	b9d5      	cbnz	r5, 8018274 <__sfp+0x64>
 801823e:	4b16      	ldr	r3, [pc, #88]	; (8018298 <__sfp+0x88>)
 8018240:	60e3      	str	r3, [r4, #12]
 8018242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018246:	6665      	str	r5, [r4, #100]	; 0x64
 8018248:	f000 f85e 	bl	8018308 <__retarget_lock_init_recursive>
 801824c:	f7ff ff96 	bl	801817c <__sfp_lock_release>
 8018250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018258:	6025      	str	r5, [r4, #0]
 801825a:	61a5      	str	r5, [r4, #24]
 801825c:	2208      	movs	r2, #8
 801825e:	4629      	mov	r1, r5
 8018260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018264:	f7fe fc4e 	bl	8016b04 <memset>
 8018268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801826c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018270:	4620      	mov	r0, r4
 8018272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018274:	3468      	adds	r4, #104	; 0x68
 8018276:	e7d9      	b.n	801822c <__sfp+0x1c>
 8018278:	2104      	movs	r1, #4
 801827a:	4638      	mov	r0, r7
 801827c:	f7ff ff62 	bl	8018144 <__sfmoreglue>
 8018280:	4604      	mov	r4, r0
 8018282:	6030      	str	r0, [r6, #0]
 8018284:	2800      	cmp	r0, #0
 8018286:	d1d5      	bne.n	8018234 <__sfp+0x24>
 8018288:	f7ff ff78 	bl	801817c <__sfp_lock_release>
 801828c:	230c      	movs	r3, #12
 801828e:	603b      	str	r3, [r7, #0]
 8018290:	e7ee      	b.n	8018270 <__sfp+0x60>
 8018292:	bf00      	nop
 8018294:	0801c9d8 	.word	0x0801c9d8
 8018298:	ffff0001 	.word	0xffff0001

0801829c <fiprintf>:
 801829c:	b40e      	push	{r1, r2, r3}
 801829e:	b503      	push	{r0, r1, lr}
 80182a0:	4601      	mov	r1, r0
 80182a2:	ab03      	add	r3, sp, #12
 80182a4:	4805      	ldr	r0, [pc, #20]	; (80182bc <fiprintf+0x20>)
 80182a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80182aa:	6800      	ldr	r0, [r0, #0]
 80182ac:	9301      	str	r3, [sp, #4]
 80182ae:	f000 fdf5 	bl	8018e9c <_vfiprintf_r>
 80182b2:	b002      	add	sp, #8
 80182b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80182b8:	b003      	add	sp, #12
 80182ba:	4770      	bx	lr
 80182bc:	20000020 	.word	0x20000020

080182c0 <_fwalk_reent>:
 80182c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182c4:	4606      	mov	r6, r0
 80182c6:	4688      	mov	r8, r1
 80182c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80182cc:	2700      	movs	r7, #0
 80182ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182d2:	f1b9 0901 	subs.w	r9, r9, #1
 80182d6:	d505      	bpl.n	80182e4 <_fwalk_reent+0x24>
 80182d8:	6824      	ldr	r4, [r4, #0]
 80182da:	2c00      	cmp	r4, #0
 80182dc:	d1f7      	bne.n	80182ce <_fwalk_reent+0xe>
 80182de:	4638      	mov	r0, r7
 80182e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182e4:	89ab      	ldrh	r3, [r5, #12]
 80182e6:	2b01      	cmp	r3, #1
 80182e8:	d907      	bls.n	80182fa <_fwalk_reent+0x3a>
 80182ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182ee:	3301      	adds	r3, #1
 80182f0:	d003      	beq.n	80182fa <_fwalk_reent+0x3a>
 80182f2:	4629      	mov	r1, r5
 80182f4:	4630      	mov	r0, r6
 80182f6:	47c0      	blx	r8
 80182f8:	4307      	orrs	r7, r0
 80182fa:	3568      	adds	r5, #104	; 0x68
 80182fc:	e7e9      	b.n	80182d2 <_fwalk_reent+0x12>
	...

08018300 <_localeconv_r>:
 8018300:	4800      	ldr	r0, [pc, #0]	; (8018304 <_localeconv_r+0x4>)
 8018302:	4770      	bx	lr
 8018304:	20000174 	.word	0x20000174

08018308 <__retarget_lock_init_recursive>:
 8018308:	4770      	bx	lr

0801830a <__retarget_lock_acquire_recursive>:
 801830a:	4770      	bx	lr

0801830c <__retarget_lock_release_recursive>:
 801830c:	4770      	bx	lr
	...

08018310 <malloc>:
 8018310:	4b02      	ldr	r3, [pc, #8]	; (801831c <malloc+0xc>)
 8018312:	4601      	mov	r1, r0
 8018314:	6818      	ldr	r0, [r3, #0]
 8018316:	f000 bbe1 	b.w	8018adc <_malloc_r>
 801831a:	bf00      	nop
 801831c:	20000020 	.word	0x20000020

08018320 <_Balloc>:
 8018320:	b570      	push	{r4, r5, r6, lr}
 8018322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018324:	4604      	mov	r4, r0
 8018326:	460d      	mov	r5, r1
 8018328:	b976      	cbnz	r6, 8018348 <_Balloc+0x28>
 801832a:	2010      	movs	r0, #16
 801832c:	f7ff fff0 	bl	8018310 <malloc>
 8018330:	4602      	mov	r2, r0
 8018332:	6260      	str	r0, [r4, #36]	; 0x24
 8018334:	b920      	cbnz	r0, 8018340 <_Balloc+0x20>
 8018336:	4b18      	ldr	r3, [pc, #96]	; (8018398 <_Balloc+0x78>)
 8018338:	4818      	ldr	r0, [pc, #96]	; (801839c <_Balloc+0x7c>)
 801833a:	2166      	movs	r1, #102	; 0x66
 801833c:	f7ff f8a6 	bl	801748c <__assert_func>
 8018340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018344:	6006      	str	r6, [r0, #0]
 8018346:	60c6      	str	r6, [r0, #12]
 8018348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801834a:	68f3      	ldr	r3, [r6, #12]
 801834c:	b183      	cbz	r3, 8018370 <_Balloc+0x50>
 801834e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018356:	b9b8      	cbnz	r0, 8018388 <_Balloc+0x68>
 8018358:	2101      	movs	r1, #1
 801835a:	fa01 f605 	lsl.w	r6, r1, r5
 801835e:	1d72      	adds	r2, r6, #5
 8018360:	0092      	lsls	r2, r2, #2
 8018362:	4620      	mov	r0, r4
 8018364:	f000 fb5a 	bl	8018a1c <_calloc_r>
 8018368:	b160      	cbz	r0, 8018384 <_Balloc+0x64>
 801836a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801836e:	e00e      	b.n	801838e <_Balloc+0x6e>
 8018370:	2221      	movs	r2, #33	; 0x21
 8018372:	2104      	movs	r1, #4
 8018374:	4620      	mov	r0, r4
 8018376:	f000 fb51 	bl	8018a1c <_calloc_r>
 801837a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801837c:	60f0      	str	r0, [r6, #12]
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d1e4      	bne.n	801834e <_Balloc+0x2e>
 8018384:	2000      	movs	r0, #0
 8018386:	bd70      	pop	{r4, r5, r6, pc}
 8018388:	6802      	ldr	r2, [r0, #0]
 801838a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801838e:	2300      	movs	r3, #0
 8018390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018394:	e7f7      	b.n	8018386 <_Balloc+0x66>
 8018396:	bf00      	nop
 8018398:	0801ca10 	.word	0x0801ca10
 801839c:	0801cba0 	.word	0x0801cba0

080183a0 <_Bfree>:
 80183a0:	b570      	push	{r4, r5, r6, lr}
 80183a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80183a4:	4605      	mov	r5, r0
 80183a6:	460c      	mov	r4, r1
 80183a8:	b976      	cbnz	r6, 80183c8 <_Bfree+0x28>
 80183aa:	2010      	movs	r0, #16
 80183ac:	f7ff ffb0 	bl	8018310 <malloc>
 80183b0:	4602      	mov	r2, r0
 80183b2:	6268      	str	r0, [r5, #36]	; 0x24
 80183b4:	b920      	cbnz	r0, 80183c0 <_Bfree+0x20>
 80183b6:	4b09      	ldr	r3, [pc, #36]	; (80183dc <_Bfree+0x3c>)
 80183b8:	4809      	ldr	r0, [pc, #36]	; (80183e0 <_Bfree+0x40>)
 80183ba:	218a      	movs	r1, #138	; 0x8a
 80183bc:	f7ff f866 	bl	801748c <__assert_func>
 80183c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183c4:	6006      	str	r6, [r0, #0]
 80183c6:	60c6      	str	r6, [r0, #12]
 80183c8:	b13c      	cbz	r4, 80183da <_Bfree+0x3a>
 80183ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183cc:	6862      	ldr	r2, [r4, #4]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183d4:	6021      	str	r1, [r4, #0]
 80183d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183da:	bd70      	pop	{r4, r5, r6, pc}
 80183dc:	0801ca10 	.word	0x0801ca10
 80183e0:	0801cba0 	.word	0x0801cba0

080183e4 <__multadd>:
 80183e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183e8:	690e      	ldr	r6, [r1, #16]
 80183ea:	4607      	mov	r7, r0
 80183ec:	4698      	mov	r8, r3
 80183ee:	460c      	mov	r4, r1
 80183f0:	f101 0014 	add.w	r0, r1, #20
 80183f4:	2300      	movs	r3, #0
 80183f6:	6805      	ldr	r5, [r0, #0]
 80183f8:	b2a9      	uxth	r1, r5
 80183fa:	fb02 8101 	mla	r1, r2, r1, r8
 80183fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018402:	0c2d      	lsrs	r5, r5, #16
 8018404:	fb02 c505 	mla	r5, r2, r5, ip
 8018408:	b289      	uxth	r1, r1
 801840a:	3301      	adds	r3, #1
 801840c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018410:	429e      	cmp	r6, r3
 8018412:	f840 1b04 	str.w	r1, [r0], #4
 8018416:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801841a:	dcec      	bgt.n	80183f6 <__multadd+0x12>
 801841c:	f1b8 0f00 	cmp.w	r8, #0
 8018420:	d022      	beq.n	8018468 <__multadd+0x84>
 8018422:	68a3      	ldr	r3, [r4, #8]
 8018424:	42b3      	cmp	r3, r6
 8018426:	dc19      	bgt.n	801845c <__multadd+0x78>
 8018428:	6861      	ldr	r1, [r4, #4]
 801842a:	4638      	mov	r0, r7
 801842c:	3101      	adds	r1, #1
 801842e:	f7ff ff77 	bl	8018320 <_Balloc>
 8018432:	4605      	mov	r5, r0
 8018434:	b928      	cbnz	r0, 8018442 <__multadd+0x5e>
 8018436:	4602      	mov	r2, r0
 8018438:	4b0d      	ldr	r3, [pc, #52]	; (8018470 <__multadd+0x8c>)
 801843a:	480e      	ldr	r0, [pc, #56]	; (8018474 <__multadd+0x90>)
 801843c:	21b5      	movs	r1, #181	; 0xb5
 801843e:	f7ff f825 	bl	801748c <__assert_func>
 8018442:	6922      	ldr	r2, [r4, #16]
 8018444:	3202      	adds	r2, #2
 8018446:	f104 010c 	add.w	r1, r4, #12
 801844a:	0092      	lsls	r2, r2, #2
 801844c:	300c      	adds	r0, #12
 801844e:	f7fe fb31 	bl	8016ab4 <memcpy>
 8018452:	4621      	mov	r1, r4
 8018454:	4638      	mov	r0, r7
 8018456:	f7ff ffa3 	bl	80183a0 <_Bfree>
 801845a:	462c      	mov	r4, r5
 801845c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018460:	3601      	adds	r6, #1
 8018462:	f8c3 8014 	str.w	r8, [r3, #20]
 8018466:	6126      	str	r6, [r4, #16]
 8018468:	4620      	mov	r0, r4
 801846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801846e:	bf00      	nop
 8018470:	0801cb2e 	.word	0x0801cb2e
 8018474:	0801cba0 	.word	0x0801cba0

08018478 <__hi0bits>:
 8018478:	0c03      	lsrs	r3, r0, #16
 801847a:	041b      	lsls	r3, r3, #16
 801847c:	b9d3      	cbnz	r3, 80184b4 <__hi0bits+0x3c>
 801847e:	0400      	lsls	r0, r0, #16
 8018480:	2310      	movs	r3, #16
 8018482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018486:	bf04      	itt	eq
 8018488:	0200      	lsleq	r0, r0, #8
 801848a:	3308      	addeq	r3, #8
 801848c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018490:	bf04      	itt	eq
 8018492:	0100      	lsleq	r0, r0, #4
 8018494:	3304      	addeq	r3, #4
 8018496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801849a:	bf04      	itt	eq
 801849c:	0080      	lsleq	r0, r0, #2
 801849e:	3302      	addeq	r3, #2
 80184a0:	2800      	cmp	r0, #0
 80184a2:	db05      	blt.n	80184b0 <__hi0bits+0x38>
 80184a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80184a8:	f103 0301 	add.w	r3, r3, #1
 80184ac:	bf08      	it	eq
 80184ae:	2320      	moveq	r3, #32
 80184b0:	4618      	mov	r0, r3
 80184b2:	4770      	bx	lr
 80184b4:	2300      	movs	r3, #0
 80184b6:	e7e4      	b.n	8018482 <__hi0bits+0xa>

080184b8 <__lo0bits>:
 80184b8:	6803      	ldr	r3, [r0, #0]
 80184ba:	f013 0207 	ands.w	r2, r3, #7
 80184be:	4601      	mov	r1, r0
 80184c0:	d00b      	beq.n	80184da <__lo0bits+0x22>
 80184c2:	07da      	lsls	r2, r3, #31
 80184c4:	d424      	bmi.n	8018510 <__lo0bits+0x58>
 80184c6:	0798      	lsls	r0, r3, #30
 80184c8:	bf49      	itett	mi
 80184ca:	085b      	lsrmi	r3, r3, #1
 80184cc:	089b      	lsrpl	r3, r3, #2
 80184ce:	2001      	movmi	r0, #1
 80184d0:	600b      	strmi	r3, [r1, #0]
 80184d2:	bf5c      	itt	pl
 80184d4:	600b      	strpl	r3, [r1, #0]
 80184d6:	2002      	movpl	r0, #2
 80184d8:	4770      	bx	lr
 80184da:	b298      	uxth	r0, r3
 80184dc:	b9b0      	cbnz	r0, 801850c <__lo0bits+0x54>
 80184de:	0c1b      	lsrs	r3, r3, #16
 80184e0:	2010      	movs	r0, #16
 80184e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80184e6:	bf04      	itt	eq
 80184e8:	0a1b      	lsreq	r3, r3, #8
 80184ea:	3008      	addeq	r0, #8
 80184ec:	071a      	lsls	r2, r3, #28
 80184ee:	bf04      	itt	eq
 80184f0:	091b      	lsreq	r3, r3, #4
 80184f2:	3004      	addeq	r0, #4
 80184f4:	079a      	lsls	r2, r3, #30
 80184f6:	bf04      	itt	eq
 80184f8:	089b      	lsreq	r3, r3, #2
 80184fa:	3002      	addeq	r0, #2
 80184fc:	07da      	lsls	r2, r3, #31
 80184fe:	d403      	bmi.n	8018508 <__lo0bits+0x50>
 8018500:	085b      	lsrs	r3, r3, #1
 8018502:	f100 0001 	add.w	r0, r0, #1
 8018506:	d005      	beq.n	8018514 <__lo0bits+0x5c>
 8018508:	600b      	str	r3, [r1, #0]
 801850a:	4770      	bx	lr
 801850c:	4610      	mov	r0, r2
 801850e:	e7e8      	b.n	80184e2 <__lo0bits+0x2a>
 8018510:	2000      	movs	r0, #0
 8018512:	4770      	bx	lr
 8018514:	2020      	movs	r0, #32
 8018516:	4770      	bx	lr

08018518 <__i2b>:
 8018518:	b510      	push	{r4, lr}
 801851a:	460c      	mov	r4, r1
 801851c:	2101      	movs	r1, #1
 801851e:	f7ff feff 	bl	8018320 <_Balloc>
 8018522:	4602      	mov	r2, r0
 8018524:	b928      	cbnz	r0, 8018532 <__i2b+0x1a>
 8018526:	4b05      	ldr	r3, [pc, #20]	; (801853c <__i2b+0x24>)
 8018528:	4805      	ldr	r0, [pc, #20]	; (8018540 <__i2b+0x28>)
 801852a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801852e:	f7fe ffad 	bl	801748c <__assert_func>
 8018532:	2301      	movs	r3, #1
 8018534:	6144      	str	r4, [r0, #20]
 8018536:	6103      	str	r3, [r0, #16]
 8018538:	bd10      	pop	{r4, pc}
 801853a:	bf00      	nop
 801853c:	0801cb2e 	.word	0x0801cb2e
 8018540:	0801cba0 	.word	0x0801cba0

08018544 <__multiply>:
 8018544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018548:	4614      	mov	r4, r2
 801854a:	690a      	ldr	r2, [r1, #16]
 801854c:	6923      	ldr	r3, [r4, #16]
 801854e:	429a      	cmp	r2, r3
 8018550:	bfb8      	it	lt
 8018552:	460b      	movlt	r3, r1
 8018554:	460d      	mov	r5, r1
 8018556:	bfbc      	itt	lt
 8018558:	4625      	movlt	r5, r4
 801855a:	461c      	movlt	r4, r3
 801855c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018560:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018564:	68ab      	ldr	r3, [r5, #8]
 8018566:	6869      	ldr	r1, [r5, #4]
 8018568:	eb0a 0709 	add.w	r7, sl, r9
 801856c:	42bb      	cmp	r3, r7
 801856e:	b085      	sub	sp, #20
 8018570:	bfb8      	it	lt
 8018572:	3101      	addlt	r1, #1
 8018574:	f7ff fed4 	bl	8018320 <_Balloc>
 8018578:	b930      	cbnz	r0, 8018588 <__multiply+0x44>
 801857a:	4602      	mov	r2, r0
 801857c:	4b42      	ldr	r3, [pc, #264]	; (8018688 <__multiply+0x144>)
 801857e:	4843      	ldr	r0, [pc, #268]	; (801868c <__multiply+0x148>)
 8018580:	f240 115d 	movw	r1, #349	; 0x15d
 8018584:	f7fe ff82 	bl	801748c <__assert_func>
 8018588:	f100 0614 	add.w	r6, r0, #20
 801858c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018590:	4633      	mov	r3, r6
 8018592:	2200      	movs	r2, #0
 8018594:	4543      	cmp	r3, r8
 8018596:	d31e      	bcc.n	80185d6 <__multiply+0x92>
 8018598:	f105 0c14 	add.w	ip, r5, #20
 801859c:	f104 0314 	add.w	r3, r4, #20
 80185a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80185a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80185a8:	9202      	str	r2, [sp, #8]
 80185aa:	ebac 0205 	sub.w	r2, ip, r5
 80185ae:	3a15      	subs	r2, #21
 80185b0:	f022 0203 	bic.w	r2, r2, #3
 80185b4:	3204      	adds	r2, #4
 80185b6:	f105 0115 	add.w	r1, r5, #21
 80185ba:	458c      	cmp	ip, r1
 80185bc:	bf38      	it	cc
 80185be:	2204      	movcc	r2, #4
 80185c0:	9201      	str	r2, [sp, #4]
 80185c2:	9a02      	ldr	r2, [sp, #8]
 80185c4:	9303      	str	r3, [sp, #12]
 80185c6:	429a      	cmp	r2, r3
 80185c8:	d808      	bhi.n	80185dc <__multiply+0x98>
 80185ca:	2f00      	cmp	r7, #0
 80185cc:	dc55      	bgt.n	801867a <__multiply+0x136>
 80185ce:	6107      	str	r7, [r0, #16]
 80185d0:	b005      	add	sp, #20
 80185d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d6:	f843 2b04 	str.w	r2, [r3], #4
 80185da:	e7db      	b.n	8018594 <__multiply+0x50>
 80185dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80185e0:	f1ba 0f00 	cmp.w	sl, #0
 80185e4:	d020      	beq.n	8018628 <__multiply+0xe4>
 80185e6:	f105 0e14 	add.w	lr, r5, #20
 80185ea:	46b1      	mov	r9, r6
 80185ec:	2200      	movs	r2, #0
 80185ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80185f2:	f8d9 b000 	ldr.w	fp, [r9]
 80185f6:	b2a1      	uxth	r1, r4
 80185f8:	fa1f fb8b 	uxth.w	fp, fp
 80185fc:	fb0a b101 	mla	r1, sl, r1, fp
 8018600:	4411      	add	r1, r2
 8018602:	f8d9 2000 	ldr.w	r2, [r9]
 8018606:	0c24      	lsrs	r4, r4, #16
 8018608:	0c12      	lsrs	r2, r2, #16
 801860a:	fb0a 2404 	mla	r4, sl, r4, r2
 801860e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018612:	b289      	uxth	r1, r1
 8018614:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018618:	45f4      	cmp	ip, lr
 801861a:	f849 1b04 	str.w	r1, [r9], #4
 801861e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018622:	d8e4      	bhi.n	80185ee <__multiply+0xaa>
 8018624:	9901      	ldr	r1, [sp, #4]
 8018626:	5072      	str	r2, [r6, r1]
 8018628:	9a03      	ldr	r2, [sp, #12]
 801862a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801862e:	3304      	adds	r3, #4
 8018630:	f1b9 0f00 	cmp.w	r9, #0
 8018634:	d01f      	beq.n	8018676 <__multiply+0x132>
 8018636:	6834      	ldr	r4, [r6, #0]
 8018638:	f105 0114 	add.w	r1, r5, #20
 801863c:	46b6      	mov	lr, r6
 801863e:	f04f 0a00 	mov.w	sl, #0
 8018642:	880a      	ldrh	r2, [r1, #0]
 8018644:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018648:	fb09 b202 	mla	r2, r9, r2, fp
 801864c:	4492      	add	sl, r2
 801864e:	b2a4      	uxth	r4, r4
 8018650:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018654:	f84e 4b04 	str.w	r4, [lr], #4
 8018658:	f851 4b04 	ldr.w	r4, [r1], #4
 801865c:	f8be 2000 	ldrh.w	r2, [lr]
 8018660:	0c24      	lsrs	r4, r4, #16
 8018662:	fb09 2404 	mla	r4, r9, r4, r2
 8018666:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801866a:	458c      	cmp	ip, r1
 801866c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018670:	d8e7      	bhi.n	8018642 <__multiply+0xfe>
 8018672:	9a01      	ldr	r2, [sp, #4]
 8018674:	50b4      	str	r4, [r6, r2]
 8018676:	3604      	adds	r6, #4
 8018678:	e7a3      	b.n	80185c2 <__multiply+0x7e>
 801867a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801867e:	2b00      	cmp	r3, #0
 8018680:	d1a5      	bne.n	80185ce <__multiply+0x8a>
 8018682:	3f01      	subs	r7, #1
 8018684:	e7a1      	b.n	80185ca <__multiply+0x86>
 8018686:	bf00      	nop
 8018688:	0801cb2e 	.word	0x0801cb2e
 801868c:	0801cba0 	.word	0x0801cba0

08018690 <__pow5mult>:
 8018690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018694:	4615      	mov	r5, r2
 8018696:	f012 0203 	ands.w	r2, r2, #3
 801869a:	4606      	mov	r6, r0
 801869c:	460f      	mov	r7, r1
 801869e:	d007      	beq.n	80186b0 <__pow5mult+0x20>
 80186a0:	4c25      	ldr	r4, [pc, #148]	; (8018738 <__pow5mult+0xa8>)
 80186a2:	3a01      	subs	r2, #1
 80186a4:	2300      	movs	r3, #0
 80186a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80186aa:	f7ff fe9b 	bl	80183e4 <__multadd>
 80186ae:	4607      	mov	r7, r0
 80186b0:	10ad      	asrs	r5, r5, #2
 80186b2:	d03d      	beq.n	8018730 <__pow5mult+0xa0>
 80186b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80186b6:	b97c      	cbnz	r4, 80186d8 <__pow5mult+0x48>
 80186b8:	2010      	movs	r0, #16
 80186ba:	f7ff fe29 	bl	8018310 <malloc>
 80186be:	4602      	mov	r2, r0
 80186c0:	6270      	str	r0, [r6, #36]	; 0x24
 80186c2:	b928      	cbnz	r0, 80186d0 <__pow5mult+0x40>
 80186c4:	4b1d      	ldr	r3, [pc, #116]	; (801873c <__pow5mult+0xac>)
 80186c6:	481e      	ldr	r0, [pc, #120]	; (8018740 <__pow5mult+0xb0>)
 80186c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80186cc:	f7fe fede 	bl	801748c <__assert_func>
 80186d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186d4:	6004      	str	r4, [r0, #0]
 80186d6:	60c4      	str	r4, [r0, #12]
 80186d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80186dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80186e0:	b94c      	cbnz	r4, 80186f6 <__pow5mult+0x66>
 80186e2:	f240 2171 	movw	r1, #625	; 0x271
 80186e6:	4630      	mov	r0, r6
 80186e8:	f7ff ff16 	bl	8018518 <__i2b>
 80186ec:	2300      	movs	r3, #0
 80186ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80186f2:	4604      	mov	r4, r0
 80186f4:	6003      	str	r3, [r0, #0]
 80186f6:	f04f 0900 	mov.w	r9, #0
 80186fa:	07eb      	lsls	r3, r5, #31
 80186fc:	d50a      	bpl.n	8018714 <__pow5mult+0x84>
 80186fe:	4639      	mov	r1, r7
 8018700:	4622      	mov	r2, r4
 8018702:	4630      	mov	r0, r6
 8018704:	f7ff ff1e 	bl	8018544 <__multiply>
 8018708:	4639      	mov	r1, r7
 801870a:	4680      	mov	r8, r0
 801870c:	4630      	mov	r0, r6
 801870e:	f7ff fe47 	bl	80183a0 <_Bfree>
 8018712:	4647      	mov	r7, r8
 8018714:	106d      	asrs	r5, r5, #1
 8018716:	d00b      	beq.n	8018730 <__pow5mult+0xa0>
 8018718:	6820      	ldr	r0, [r4, #0]
 801871a:	b938      	cbnz	r0, 801872c <__pow5mult+0x9c>
 801871c:	4622      	mov	r2, r4
 801871e:	4621      	mov	r1, r4
 8018720:	4630      	mov	r0, r6
 8018722:	f7ff ff0f 	bl	8018544 <__multiply>
 8018726:	6020      	str	r0, [r4, #0]
 8018728:	f8c0 9000 	str.w	r9, [r0]
 801872c:	4604      	mov	r4, r0
 801872e:	e7e4      	b.n	80186fa <__pow5mult+0x6a>
 8018730:	4638      	mov	r0, r7
 8018732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018736:	bf00      	nop
 8018738:	0801ccf0 	.word	0x0801ccf0
 801873c:	0801ca10 	.word	0x0801ca10
 8018740:	0801cba0 	.word	0x0801cba0

08018744 <__lshift>:
 8018744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018748:	460c      	mov	r4, r1
 801874a:	6849      	ldr	r1, [r1, #4]
 801874c:	6923      	ldr	r3, [r4, #16]
 801874e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018752:	68a3      	ldr	r3, [r4, #8]
 8018754:	4607      	mov	r7, r0
 8018756:	4691      	mov	r9, r2
 8018758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801875c:	f108 0601 	add.w	r6, r8, #1
 8018760:	42b3      	cmp	r3, r6
 8018762:	db0b      	blt.n	801877c <__lshift+0x38>
 8018764:	4638      	mov	r0, r7
 8018766:	f7ff fddb 	bl	8018320 <_Balloc>
 801876a:	4605      	mov	r5, r0
 801876c:	b948      	cbnz	r0, 8018782 <__lshift+0x3e>
 801876e:	4602      	mov	r2, r0
 8018770:	4b28      	ldr	r3, [pc, #160]	; (8018814 <__lshift+0xd0>)
 8018772:	4829      	ldr	r0, [pc, #164]	; (8018818 <__lshift+0xd4>)
 8018774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018778:	f7fe fe88 	bl	801748c <__assert_func>
 801877c:	3101      	adds	r1, #1
 801877e:	005b      	lsls	r3, r3, #1
 8018780:	e7ee      	b.n	8018760 <__lshift+0x1c>
 8018782:	2300      	movs	r3, #0
 8018784:	f100 0114 	add.w	r1, r0, #20
 8018788:	f100 0210 	add.w	r2, r0, #16
 801878c:	4618      	mov	r0, r3
 801878e:	4553      	cmp	r3, sl
 8018790:	db33      	blt.n	80187fa <__lshift+0xb6>
 8018792:	6920      	ldr	r0, [r4, #16]
 8018794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018798:	f104 0314 	add.w	r3, r4, #20
 801879c:	f019 091f 	ands.w	r9, r9, #31
 80187a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80187a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80187a8:	d02b      	beq.n	8018802 <__lshift+0xbe>
 80187aa:	f1c9 0e20 	rsb	lr, r9, #32
 80187ae:	468a      	mov	sl, r1
 80187b0:	2200      	movs	r2, #0
 80187b2:	6818      	ldr	r0, [r3, #0]
 80187b4:	fa00 f009 	lsl.w	r0, r0, r9
 80187b8:	4302      	orrs	r2, r0
 80187ba:	f84a 2b04 	str.w	r2, [sl], #4
 80187be:	f853 2b04 	ldr.w	r2, [r3], #4
 80187c2:	459c      	cmp	ip, r3
 80187c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80187c8:	d8f3      	bhi.n	80187b2 <__lshift+0x6e>
 80187ca:	ebac 0304 	sub.w	r3, ip, r4
 80187ce:	3b15      	subs	r3, #21
 80187d0:	f023 0303 	bic.w	r3, r3, #3
 80187d4:	3304      	adds	r3, #4
 80187d6:	f104 0015 	add.w	r0, r4, #21
 80187da:	4584      	cmp	ip, r0
 80187dc:	bf38      	it	cc
 80187de:	2304      	movcc	r3, #4
 80187e0:	50ca      	str	r2, [r1, r3]
 80187e2:	b10a      	cbz	r2, 80187e8 <__lshift+0xa4>
 80187e4:	f108 0602 	add.w	r6, r8, #2
 80187e8:	3e01      	subs	r6, #1
 80187ea:	4638      	mov	r0, r7
 80187ec:	612e      	str	r6, [r5, #16]
 80187ee:	4621      	mov	r1, r4
 80187f0:	f7ff fdd6 	bl	80183a0 <_Bfree>
 80187f4:	4628      	mov	r0, r5
 80187f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80187fe:	3301      	adds	r3, #1
 8018800:	e7c5      	b.n	801878e <__lshift+0x4a>
 8018802:	3904      	subs	r1, #4
 8018804:	f853 2b04 	ldr.w	r2, [r3], #4
 8018808:	f841 2f04 	str.w	r2, [r1, #4]!
 801880c:	459c      	cmp	ip, r3
 801880e:	d8f9      	bhi.n	8018804 <__lshift+0xc0>
 8018810:	e7ea      	b.n	80187e8 <__lshift+0xa4>
 8018812:	bf00      	nop
 8018814:	0801cb2e 	.word	0x0801cb2e
 8018818:	0801cba0 	.word	0x0801cba0

0801881c <__mcmp>:
 801881c:	b530      	push	{r4, r5, lr}
 801881e:	6902      	ldr	r2, [r0, #16]
 8018820:	690c      	ldr	r4, [r1, #16]
 8018822:	1b12      	subs	r2, r2, r4
 8018824:	d10e      	bne.n	8018844 <__mcmp+0x28>
 8018826:	f100 0314 	add.w	r3, r0, #20
 801882a:	3114      	adds	r1, #20
 801882c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801883c:	42a5      	cmp	r5, r4
 801883e:	d003      	beq.n	8018848 <__mcmp+0x2c>
 8018840:	d305      	bcc.n	801884e <__mcmp+0x32>
 8018842:	2201      	movs	r2, #1
 8018844:	4610      	mov	r0, r2
 8018846:	bd30      	pop	{r4, r5, pc}
 8018848:	4283      	cmp	r3, r0
 801884a:	d3f3      	bcc.n	8018834 <__mcmp+0x18>
 801884c:	e7fa      	b.n	8018844 <__mcmp+0x28>
 801884e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018852:	e7f7      	b.n	8018844 <__mcmp+0x28>

08018854 <__mdiff>:
 8018854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018858:	460c      	mov	r4, r1
 801885a:	4606      	mov	r6, r0
 801885c:	4611      	mov	r1, r2
 801885e:	4620      	mov	r0, r4
 8018860:	4617      	mov	r7, r2
 8018862:	f7ff ffdb 	bl	801881c <__mcmp>
 8018866:	1e05      	subs	r5, r0, #0
 8018868:	d110      	bne.n	801888c <__mdiff+0x38>
 801886a:	4629      	mov	r1, r5
 801886c:	4630      	mov	r0, r6
 801886e:	f7ff fd57 	bl	8018320 <_Balloc>
 8018872:	b930      	cbnz	r0, 8018882 <__mdiff+0x2e>
 8018874:	4b39      	ldr	r3, [pc, #228]	; (801895c <__mdiff+0x108>)
 8018876:	4602      	mov	r2, r0
 8018878:	f240 2132 	movw	r1, #562	; 0x232
 801887c:	4838      	ldr	r0, [pc, #224]	; (8018960 <__mdiff+0x10c>)
 801887e:	f7fe fe05 	bl	801748c <__assert_func>
 8018882:	2301      	movs	r3, #1
 8018884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801888c:	bfa4      	itt	ge
 801888e:	463b      	movge	r3, r7
 8018890:	4627      	movge	r7, r4
 8018892:	4630      	mov	r0, r6
 8018894:	6879      	ldr	r1, [r7, #4]
 8018896:	bfa6      	itte	ge
 8018898:	461c      	movge	r4, r3
 801889a:	2500      	movge	r5, #0
 801889c:	2501      	movlt	r5, #1
 801889e:	f7ff fd3f 	bl	8018320 <_Balloc>
 80188a2:	b920      	cbnz	r0, 80188ae <__mdiff+0x5a>
 80188a4:	4b2d      	ldr	r3, [pc, #180]	; (801895c <__mdiff+0x108>)
 80188a6:	4602      	mov	r2, r0
 80188a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80188ac:	e7e6      	b.n	801887c <__mdiff+0x28>
 80188ae:	693e      	ldr	r6, [r7, #16]
 80188b0:	60c5      	str	r5, [r0, #12]
 80188b2:	6925      	ldr	r5, [r4, #16]
 80188b4:	f107 0114 	add.w	r1, r7, #20
 80188b8:	f104 0914 	add.w	r9, r4, #20
 80188bc:	f100 0e14 	add.w	lr, r0, #20
 80188c0:	f107 0210 	add.w	r2, r7, #16
 80188c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80188c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80188cc:	46f2      	mov	sl, lr
 80188ce:	2700      	movs	r7, #0
 80188d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80188d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80188d8:	fa1f f883 	uxth.w	r8, r3
 80188dc:	fa17 f78b 	uxtah	r7, r7, fp
 80188e0:	0c1b      	lsrs	r3, r3, #16
 80188e2:	eba7 0808 	sub.w	r8, r7, r8
 80188e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80188ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80188ee:	fa1f f888 	uxth.w	r8, r8
 80188f2:	141f      	asrs	r7, r3, #16
 80188f4:	454d      	cmp	r5, r9
 80188f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80188fa:	f84a 3b04 	str.w	r3, [sl], #4
 80188fe:	d8e7      	bhi.n	80188d0 <__mdiff+0x7c>
 8018900:	1b2b      	subs	r3, r5, r4
 8018902:	3b15      	subs	r3, #21
 8018904:	f023 0303 	bic.w	r3, r3, #3
 8018908:	3304      	adds	r3, #4
 801890a:	3415      	adds	r4, #21
 801890c:	42a5      	cmp	r5, r4
 801890e:	bf38      	it	cc
 8018910:	2304      	movcc	r3, #4
 8018912:	4419      	add	r1, r3
 8018914:	4473      	add	r3, lr
 8018916:	469e      	mov	lr, r3
 8018918:	460d      	mov	r5, r1
 801891a:	4565      	cmp	r5, ip
 801891c:	d30e      	bcc.n	801893c <__mdiff+0xe8>
 801891e:	f10c 0203 	add.w	r2, ip, #3
 8018922:	1a52      	subs	r2, r2, r1
 8018924:	f022 0203 	bic.w	r2, r2, #3
 8018928:	3903      	subs	r1, #3
 801892a:	458c      	cmp	ip, r1
 801892c:	bf38      	it	cc
 801892e:	2200      	movcc	r2, #0
 8018930:	441a      	add	r2, r3
 8018932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018936:	b17b      	cbz	r3, 8018958 <__mdiff+0x104>
 8018938:	6106      	str	r6, [r0, #16]
 801893a:	e7a5      	b.n	8018888 <__mdiff+0x34>
 801893c:	f855 8b04 	ldr.w	r8, [r5], #4
 8018940:	fa17 f488 	uxtah	r4, r7, r8
 8018944:	1422      	asrs	r2, r4, #16
 8018946:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801894a:	b2a4      	uxth	r4, r4
 801894c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018950:	f84e 4b04 	str.w	r4, [lr], #4
 8018954:	1417      	asrs	r7, r2, #16
 8018956:	e7e0      	b.n	801891a <__mdiff+0xc6>
 8018958:	3e01      	subs	r6, #1
 801895a:	e7ea      	b.n	8018932 <__mdiff+0xde>
 801895c:	0801cb2e 	.word	0x0801cb2e
 8018960:	0801cba0 	.word	0x0801cba0

08018964 <__d2b>:
 8018964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018968:	4689      	mov	r9, r1
 801896a:	2101      	movs	r1, #1
 801896c:	ec57 6b10 	vmov	r6, r7, d0
 8018970:	4690      	mov	r8, r2
 8018972:	f7ff fcd5 	bl	8018320 <_Balloc>
 8018976:	4604      	mov	r4, r0
 8018978:	b930      	cbnz	r0, 8018988 <__d2b+0x24>
 801897a:	4602      	mov	r2, r0
 801897c:	4b25      	ldr	r3, [pc, #148]	; (8018a14 <__d2b+0xb0>)
 801897e:	4826      	ldr	r0, [pc, #152]	; (8018a18 <__d2b+0xb4>)
 8018980:	f240 310a 	movw	r1, #778	; 0x30a
 8018984:	f7fe fd82 	bl	801748c <__assert_func>
 8018988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801898c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018990:	bb35      	cbnz	r5, 80189e0 <__d2b+0x7c>
 8018992:	2e00      	cmp	r6, #0
 8018994:	9301      	str	r3, [sp, #4]
 8018996:	d028      	beq.n	80189ea <__d2b+0x86>
 8018998:	4668      	mov	r0, sp
 801899a:	9600      	str	r6, [sp, #0]
 801899c:	f7ff fd8c 	bl	80184b8 <__lo0bits>
 80189a0:	9900      	ldr	r1, [sp, #0]
 80189a2:	b300      	cbz	r0, 80189e6 <__d2b+0x82>
 80189a4:	9a01      	ldr	r2, [sp, #4]
 80189a6:	f1c0 0320 	rsb	r3, r0, #32
 80189aa:	fa02 f303 	lsl.w	r3, r2, r3
 80189ae:	430b      	orrs	r3, r1
 80189b0:	40c2      	lsrs	r2, r0
 80189b2:	6163      	str	r3, [r4, #20]
 80189b4:	9201      	str	r2, [sp, #4]
 80189b6:	9b01      	ldr	r3, [sp, #4]
 80189b8:	61a3      	str	r3, [r4, #24]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	bf14      	ite	ne
 80189be:	2202      	movne	r2, #2
 80189c0:	2201      	moveq	r2, #1
 80189c2:	6122      	str	r2, [r4, #16]
 80189c4:	b1d5      	cbz	r5, 80189fc <__d2b+0x98>
 80189c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80189ca:	4405      	add	r5, r0
 80189cc:	f8c9 5000 	str.w	r5, [r9]
 80189d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80189d4:	f8c8 0000 	str.w	r0, [r8]
 80189d8:	4620      	mov	r0, r4
 80189da:	b003      	add	sp, #12
 80189dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80189e4:	e7d5      	b.n	8018992 <__d2b+0x2e>
 80189e6:	6161      	str	r1, [r4, #20]
 80189e8:	e7e5      	b.n	80189b6 <__d2b+0x52>
 80189ea:	a801      	add	r0, sp, #4
 80189ec:	f7ff fd64 	bl	80184b8 <__lo0bits>
 80189f0:	9b01      	ldr	r3, [sp, #4]
 80189f2:	6163      	str	r3, [r4, #20]
 80189f4:	2201      	movs	r2, #1
 80189f6:	6122      	str	r2, [r4, #16]
 80189f8:	3020      	adds	r0, #32
 80189fa:	e7e3      	b.n	80189c4 <__d2b+0x60>
 80189fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018a00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018a04:	f8c9 0000 	str.w	r0, [r9]
 8018a08:	6918      	ldr	r0, [r3, #16]
 8018a0a:	f7ff fd35 	bl	8018478 <__hi0bits>
 8018a0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018a12:	e7df      	b.n	80189d4 <__d2b+0x70>
 8018a14:	0801cb2e 	.word	0x0801cb2e
 8018a18:	0801cba0 	.word	0x0801cba0

08018a1c <_calloc_r>:
 8018a1c:	b513      	push	{r0, r1, r4, lr}
 8018a1e:	434a      	muls	r2, r1
 8018a20:	4611      	mov	r1, r2
 8018a22:	9201      	str	r2, [sp, #4]
 8018a24:	f000 f85a 	bl	8018adc <_malloc_r>
 8018a28:	4604      	mov	r4, r0
 8018a2a:	b118      	cbz	r0, 8018a34 <_calloc_r+0x18>
 8018a2c:	9a01      	ldr	r2, [sp, #4]
 8018a2e:	2100      	movs	r1, #0
 8018a30:	f7fe f868 	bl	8016b04 <memset>
 8018a34:	4620      	mov	r0, r4
 8018a36:	b002      	add	sp, #8
 8018a38:	bd10      	pop	{r4, pc}
	...

08018a3c <_free_r>:
 8018a3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a3e:	2900      	cmp	r1, #0
 8018a40:	d048      	beq.n	8018ad4 <_free_r+0x98>
 8018a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a46:	9001      	str	r0, [sp, #4]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	f1a1 0404 	sub.w	r4, r1, #4
 8018a4e:	bfb8      	it	lt
 8018a50:	18e4      	addlt	r4, r4, r3
 8018a52:	f000 fddb 	bl	801960c <__malloc_lock>
 8018a56:	4a20      	ldr	r2, [pc, #128]	; (8018ad8 <_free_r+0x9c>)
 8018a58:	9801      	ldr	r0, [sp, #4]
 8018a5a:	6813      	ldr	r3, [r2, #0]
 8018a5c:	4615      	mov	r5, r2
 8018a5e:	b933      	cbnz	r3, 8018a6e <_free_r+0x32>
 8018a60:	6063      	str	r3, [r4, #4]
 8018a62:	6014      	str	r4, [r2, #0]
 8018a64:	b003      	add	sp, #12
 8018a66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a6a:	f000 bdd5 	b.w	8019618 <__malloc_unlock>
 8018a6e:	42a3      	cmp	r3, r4
 8018a70:	d90b      	bls.n	8018a8a <_free_r+0x4e>
 8018a72:	6821      	ldr	r1, [r4, #0]
 8018a74:	1862      	adds	r2, r4, r1
 8018a76:	4293      	cmp	r3, r2
 8018a78:	bf04      	itt	eq
 8018a7a:	681a      	ldreq	r2, [r3, #0]
 8018a7c:	685b      	ldreq	r3, [r3, #4]
 8018a7e:	6063      	str	r3, [r4, #4]
 8018a80:	bf04      	itt	eq
 8018a82:	1852      	addeq	r2, r2, r1
 8018a84:	6022      	streq	r2, [r4, #0]
 8018a86:	602c      	str	r4, [r5, #0]
 8018a88:	e7ec      	b.n	8018a64 <_free_r+0x28>
 8018a8a:	461a      	mov	r2, r3
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	b10b      	cbz	r3, 8018a94 <_free_r+0x58>
 8018a90:	42a3      	cmp	r3, r4
 8018a92:	d9fa      	bls.n	8018a8a <_free_r+0x4e>
 8018a94:	6811      	ldr	r1, [r2, #0]
 8018a96:	1855      	adds	r5, r2, r1
 8018a98:	42a5      	cmp	r5, r4
 8018a9a:	d10b      	bne.n	8018ab4 <_free_r+0x78>
 8018a9c:	6824      	ldr	r4, [r4, #0]
 8018a9e:	4421      	add	r1, r4
 8018aa0:	1854      	adds	r4, r2, r1
 8018aa2:	42a3      	cmp	r3, r4
 8018aa4:	6011      	str	r1, [r2, #0]
 8018aa6:	d1dd      	bne.n	8018a64 <_free_r+0x28>
 8018aa8:	681c      	ldr	r4, [r3, #0]
 8018aaa:	685b      	ldr	r3, [r3, #4]
 8018aac:	6053      	str	r3, [r2, #4]
 8018aae:	4421      	add	r1, r4
 8018ab0:	6011      	str	r1, [r2, #0]
 8018ab2:	e7d7      	b.n	8018a64 <_free_r+0x28>
 8018ab4:	d902      	bls.n	8018abc <_free_r+0x80>
 8018ab6:	230c      	movs	r3, #12
 8018ab8:	6003      	str	r3, [r0, #0]
 8018aba:	e7d3      	b.n	8018a64 <_free_r+0x28>
 8018abc:	6825      	ldr	r5, [r4, #0]
 8018abe:	1961      	adds	r1, r4, r5
 8018ac0:	428b      	cmp	r3, r1
 8018ac2:	bf04      	itt	eq
 8018ac4:	6819      	ldreq	r1, [r3, #0]
 8018ac6:	685b      	ldreq	r3, [r3, #4]
 8018ac8:	6063      	str	r3, [r4, #4]
 8018aca:	bf04      	itt	eq
 8018acc:	1949      	addeq	r1, r1, r5
 8018ace:	6021      	streq	r1, [r4, #0]
 8018ad0:	6054      	str	r4, [r2, #4]
 8018ad2:	e7c7      	b.n	8018a64 <_free_r+0x28>
 8018ad4:	b003      	add	sp, #12
 8018ad6:	bd30      	pop	{r4, r5, pc}
 8018ad8:	20004cc0 	.word	0x20004cc0

08018adc <_malloc_r>:
 8018adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ade:	1ccd      	adds	r5, r1, #3
 8018ae0:	f025 0503 	bic.w	r5, r5, #3
 8018ae4:	3508      	adds	r5, #8
 8018ae6:	2d0c      	cmp	r5, #12
 8018ae8:	bf38      	it	cc
 8018aea:	250c      	movcc	r5, #12
 8018aec:	2d00      	cmp	r5, #0
 8018aee:	4606      	mov	r6, r0
 8018af0:	db01      	blt.n	8018af6 <_malloc_r+0x1a>
 8018af2:	42a9      	cmp	r1, r5
 8018af4:	d903      	bls.n	8018afe <_malloc_r+0x22>
 8018af6:	230c      	movs	r3, #12
 8018af8:	6033      	str	r3, [r6, #0]
 8018afa:	2000      	movs	r0, #0
 8018afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018afe:	f000 fd85 	bl	801960c <__malloc_lock>
 8018b02:	4921      	ldr	r1, [pc, #132]	; (8018b88 <_malloc_r+0xac>)
 8018b04:	680a      	ldr	r2, [r1, #0]
 8018b06:	4614      	mov	r4, r2
 8018b08:	b99c      	cbnz	r4, 8018b32 <_malloc_r+0x56>
 8018b0a:	4f20      	ldr	r7, [pc, #128]	; (8018b8c <_malloc_r+0xb0>)
 8018b0c:	683b      	ldr	r3, [r7, #0]
 8018b0e:	b923      	cbnz	r3, 8018b1a <_malloc_r+0x3e>
 8018b10:	4621      	mov	r1, r4
 8018b12:	4630      	mov	r0, r6
 8018b14:	f000 faf2 	bl	80190fc <_sbrk_r>
 8018b18:	6038      	str	r0, [r7, #0]
 8018b1a:	4629      	mov	r1, r5
 8018b1c:	4630      	mov	r0, r6
 8018b1e:	f000 faed 	bl	80190fc <_sbrk_r>
 8018b22:	1c43      	adds	r3, r0, #1
 8018b24:	d123      	bne.n	8018b6e <_malloc_r+0x92>
 8018b26:	230c      	movs	r3, #12
 8018b28:	6033      	str	r3, [r6, #0]
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	f000 fd74 	bl	8019618 <__malloc_unlock>
 8018b30:	e7e3      	b.n	8018afa <_malloc_r+0x1e>
 8018b32:	6823      	ldr	r3, [r4, #0]
 8018b34:	1b5b      	subs	r3, r3, r5
 8018b36:	d417      	bmi.n	8018b68 <_malloc_r+0x8c>
 8018b38:	2b0b      	cmp	r3, #11
 8018b3a:	d903      	bls.n	8018b44 <_malloc_r+0x68>
 8018b3c:	6023      	str	r3, [r4, #0]
 8018b3e:	441c      	add	r4, r3
 8018b40:	6025      	str	r5, [r4, #0]
 8018b42:	e004      	b.n	8018b4e <_malloc_r+0x72>
 8018b44:	6863      	ldr	r3, [r4, #4]
 8018b46:	42a2      	cmp	r2, r4
 8018b48:	bf0c      	ite	eq
 8018b4a:	600b      	streq	r3, [r1, #0]
 8018b4c:	6053      	strne	r3, [r2, #4]
 8018b4e:	4630      	mov	r0, r6
 8018b50:	f000 fd62 	bl	8019618 <__malloc_unlock>
 8018b54:	f104 000b 	add.w	r0, r4, #11
 8018b58:	1d23      	adds	r3, r4, #4
 8018b5a:	f020 0007 	bic.w	r0, r0, #7
 8018b5e:	1ac2      	subs	r2, r0, r3
 8018b60:	d0cc      	beq.n	8018afc <_malloc_r+0x20>
 8018b62:	1a1b      	subs	r3, r3, r0
 8018b64:	50a3      	str	r3, [r4, r2]
 8018b66:	e7c9      	b.n	8018afc <_malloc_r+0x20>
 8018b68:	4622      	mov	r2, r4
 8018b6a:	6864      	ldr	r4, [r4, #4]
 8018b6c:	e7cc      	b.n	8018b08 <_malloc_r+0x2c>
 8018b6e:	1cc4      	adds	r4, r0, #3
 8018b70:	f024 0403 	bic.w	r4, r4, #3
 8018b74:	42a0      	cmp	r0, r4
 8018b76:	d0e3      	beq.n	8018b40 <_malloc_r+0x64>
 8018b78:	1a21      	subs	r1, r4, r0
 8018b7a:	4630      	mov	r0, r6
 8018b7c:	f000 fabe 	bl	80190fc <_sbrk_r>
 8018b80:	3001      	adds	r0, #1
 8018b82:	d1dd      	bne.n	8018b40 <_malloc_r+0x64>
 8018b84:	e7cf      	b.n	8018b26 <_malloc_r+0x4a>
 8018b86:	bf00      	nop
 8018b88:	20004cc0 	.word	0x20004cc0
 8018b8c:	20004cc4 	.word	0x20004cc4

08018b90 <__ssputs_r>:
 8018b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b94:	688e      	ldr	r6, [r1, #8]
 8018b96:	429e      	cmp	r6, r3
 8018b98:	4682      	mov	sl, r0
 8018b9a:	460c      	mov	r4, r1
 8018b9c:	4690      	mov	r8, r2
 8018b9e:	461f      	mov	r7, r3
 8018ba0:	d838      	bhi.n	8018c14 <__ssputs_r+0x84>
 8018ba2:	898a      	ldrh	r2, [r1, #12]
 8018ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ba8:	d032      	beq.n	8018c10 <__ssputs_r+0x80>
 8018baa:	6825      	ldr	r5, [r4, #0]
 8018bac:	6909      	ldr	r1, [r1, #16]
 8018bae:	eba5 0901 	sub.w	r9, r5, r1
 8018bb2:	6965      	ldr	r5, [r4, #20]
 8018bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018bbc:	3301      	adds	r3, #1
 8018bbe:	444b      	add	r3, r9
 8018bc0:	106d      	asrs	r5, r5, #1
 8018bc2:	429d      	cmp	r5, r3
 8018bc4:	bf38      	it	cc
 8018bc6:	461d      	movcc	r5, r3
 8018bc8:	0553      	lsls	r3, r2, #21
 8018bca:	d531      	bpl.n	8018c30 <__ssputs_r+0xa0>
 8018bcc:	4629      	mov	r1, r5
 8018bce:	f7ff ff85 	bl	8018adc <_malloc_r>
 8018bd2:	4606      	mov	r6, r0
 8018bd4:	b950      	cbnz	r0, 8018bec <__ssputs_r+0x5c>
 8018bd6:	230c      	movs	r3, #12
 8018bd8:	f8ca 3000 	str.w	r3, [sl]
 8018bdc:	89a3      	ldrh	r3, [r4, #12]
 8018bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018be2:	81a3      	strh	r3, [r4, #12]
 8018be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bec:	6921      	ldr	r1, [r4, #16]
 8018bee:	464a      	mov	r2, r9
 8018bf0:	f7fd ff60 	bl	8016ab4 <memcpy>
 8018bf4:	89a3      	ldrh	r3, [r4, #12]
 8018bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bfe:	81a3      	strh	r3, [r4, #12]
 8018c00:	6126      	str	r6, [r4, #16]
 8018c02:	6165      	str	r5, [r4, #20]
 8018c04:	444e      	add	r6, r9
 8018c06:	eba5 0509 	sub.w	r5, r5, r9
 8018c0a:	6026      	str	r6, [r4, #0]
 8018c0c:	60a5      	str	r5, [r4, #8]
 8018c0e:	463e      	mov	r6, r7
 8018c10:	42be      	cmp	r6, r7
 8018c12:	d900      	bls.n	8018c16 <__ssputs_r+0x86>
 8018c14:	463e      	mov	r6, r7
 8018c16:	4632      	mov	r2, r6
 8018c18:	6820      	ldr	r0, [r4, #0]
 8018c1a:	4641      	mov	r1, r8
 8018c1c:	f7fd ff58 	bl	8016ad0 <memmove>
 8018c20:	68a3      	ldr	r3, [r4, #8]
 8018c22:	6822      	ldr	r2, [r4, #0]
 8018c24:	1b9b      	subs	r3, r3, r6
 8018c26:	4432      	add	r2, r6
 8018c28:	60a3      	str	r3, [r4, #8]
 8018c2a:	6022      	str	r2, [r4, #0]
 8018c2c:	2000      	movs	r0, #0
 8018c2e:	e7db      	b.n	8018be8 <__ssputs_r+0x58>
 8018c30:	462a      	mov	r2, r5
 8018c32:	f000 fcf7 	bl	8019624 <_realloc_r>
 8018c36:	4606      	mov	r6, r0
 8018c38:	2800      	cmp	r0, #0
 8018c3a:	d1e1      	bne.n	8018c00 <__ssputs_r+0x70>
 8018c3c:	6921      	ldr	r1, [r4, #16]
 8018c3e:	4650      	mov	r0, sl
 8018c40:	f7ff fefc 	bl	8018a3c <_free_r>
 8018c44:	e7c7      	b.n	8018bd6 <__ssputs_r+0x46>
	...

08018c48 <_svfiprintf_r>:
 8018c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c4c:	4698      	mov	r8, r3
 8018c4e:	898b      	ldrh	r3, [r1, #12]
 8018c50:	061b      	lsls	r3, r3, #24
 8018c52:	b09d      	sub	sp, #116	; 0x74
 8018c54:	4607      	mov	r7, r0
 8018c56:	460d      	mov	r5, r1
 8018c58:	4614      	mov	r4, r2
 8018c5a:	d50e      	bpl.n	8018c7a <_svfiprintf_r+0x32>
 8018c5c:	690b      	ldr	r3, [r1, #16]
 8018c5e:	b963      	cbnz	r3, 8018c7a <_svfiprintf_r+0x32>
 8018c60:	2140      	movs	r1, #64	; 0x40
 8018c62:	f7ff ff3b 	bl	8018adc <_malloc_r>
 8018c66:	6028      	str	r0, [r5, #0]
 8018c68:	6128      	str	r0, [r5, #16]
 8018c6a:	b920      	cbnz	r0, 8018c76 <_svfiprintf_r+0x2e>
 8018c6c:	230c      	movs	r3, #12
 8018c6e:	603b      	str	r3, [r7, #0]
 8018c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c74:	e0d1      	b.n	8018e1a <_svfiprintf_r+0x1d2>
 8018c76:	2340      	movs	r3, #64	; 0x40
 8018c78:	616b      	str	r3, [r5, #20]
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8018c7e:	2320      	movs	r3, #32
 8018c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c88:	2330      	movs	r3, #48	; 0x30
 8018c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018e34 <_svfiprintf_r+0x1ec>
 8018c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c92:	f04f 0901 	mov.w	r9, #1
 8018c96:	4623      	mov	r3, r4
 8018c98:	469a      	mov	sl, r3
 8018c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c9e:	b10a      	cbz	r2, 8018ca4 <_svfiprintf_r+0x5c>
 8018ca0:	2a25      	cmp	r2, #37	; 0x25
 8018ca2:	d1f9      	bne.n	8018c98 <_svfiprintf_r+0x50>
 8018ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8018ca8:	d00b      	beq.n	8018cc2 <_svfiprintf_r+0x7a>
 8018caa:	465b      	mov	r3, fp
 8018cac:	4622      	mov	r2, r4
 8018cae:	4629      	mov	r1, r5
 8018cb0:	4638      	mov	r0, r7
 8018cb2:	f7ff ff6d 	bl	8018b90 <__ssputs_r>
 8018cb6:	3001      	adds	r0, #1
 8018cb8:	f000 80aa 	beq.w	8018e10 <_svfiprintf_r+0x1c8>
 8018cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018cbe:	445a      	add	r2, fp
 8018cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8018cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	f000 80a2 	beq.w	8018e10 <_svfiprintf_r+0x1c8>
 8018ccc:	2300      	movs	r3, #0
 8018cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018cd6:	f10a 0a01 	add.w	sl, sl, #1
 8018cda:	9304      	str	r3, [sp, #16]
 8018cdc:	9307      	str	r3, [sp, #28]
 8018cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8018ce4:	4654      	mov	r4, sl
 8018ce6:	2205      	movs	r2, #5
 8018ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cec:	4851      	ldr	r0, [pc, #324]	; (8018e34 <_svfiprintf_r+0x1ec>)
 8018cee:	f7e7 faaf 	bl	8000250 <memchr>
 8018cf2:	9a04      	ldr	r2, [sp, #16]
 8018cf4:	b9d8      	cbnz	r0, 8018d2e <_svfiprintf_r+0xe6>
 8018cf6:	06d0      	lsls	r0, r2, #27
 8018cf8:	bf44      	itt	mi
 8018cfa:	2320      	movmi	r3, #32
 8018cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d00:	0711      	lsls	r1, r2, #28
 8018d02:	bf44      	itt	mi
 8018d04:	232b      	movmi	r3, #43	; 0x2b
 8018d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8018d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8018d10:	d015      	beq.n	8018d3e <_svfiprintf_r+0xf6>
 8018d12:	9a07      	ldr	r2, [sp, #28]
 8018d14:	4654      	mov	r4, sl
 8018d16:	2000      	movs	r0, #0
 8018d18:	f04f 0c0a 	mov.w	ip, #10
 8018d1c:	4621      	mov	r1, r4
 8018d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d22:	3b30      	subs	r3, #48	; 0x30
 8018d24:	2b09      	cmp	r3, #9
 8018d26:	d94e      	bls.n	8018dc6 <_svfiprintf_r+0x17e>
 8018d28:	b1b0      	cbz	r0, 8018d58 <_svfiprintf_r+0x110>
 8018d2a:	9207      	str	r2, [sp, #28]
 8018d2c:	e014      	b.n	8018d58 <_svfiprintf_r+0x110>
 8018d2e:	eba0 0308 	sub.w	r3, r0, r8
 8018d32:	fa09 f303 	lsl.w	r3, r9, r3
 8018d36:	4313      	orrs	r3, r2
 8018d38:	9304      	str	r3, [sp, #16]
 8018d3a:	46a2      	mov	sl, r4
 8018d3c:	e7d2      	b.n	8018ce4 <_svfiprintf_r+0x9c>
 8018d3e:	9b03      	ldr	r3, [sp, #12]
 8018d40:	1d19      	adds	r1, r3, #4
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	9103      	str	r1, [sp, #12]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	bfbb      	ittet	lt
 8018d4a:	425b      	neglt	r3, r3
 8018d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8018d50:	9307      	strge	r3, [sp, #28]
 8018d52:	9307      	strlt	r3, [sp, #28]
 8018d54:	bfb8      	it	lt
 8018d56:	9204      	strlt	r2, [sp, #16]
 8018d58:	7823      	ldrb	r3, [r4, #0]
 8018d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8018d5c:	d10c      	bne.n	8018d78 <_svfiprintf_r+0x130>
 8018d5e:	7863      	ldrb	r3, [r4, #1]
 8018d60:	2b2a      	cmp	r3, #42	; 0x2a
 8018d62:	d135      	bne.n	8018dd0 <_svfiprintf_r+0x188>
 8018d64:	9b03      	ldr	r3, [sp, #12]
 8018d66:	1d1a      	adds	r2, r3, #4
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	9203      	str	r2, [sp, #12]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	bfb8      	it	lt
 8018d70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018d74:	3402      	adds	r4, #2
 8018d76:	9305      	str	r3, [sp, #20]
 8018d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018e44 <_svfiprintf_r+0x1fc>
 8018d7c:	7821      	ldrb	r1, [r4, #0]
 8018d7e:	2203      	movs	r2, #3
 8018d80:	4650      	mov	r0, sl
 8018d82:	f7e7 fa65 	bl	8000250 <memchr>
 8018d86:	b140      	cbz	r0, 8018d9a <_svfiprintf_r+0x152>
 8018d88:	2340      	movs	r3, #64	; 0x40
 8018d8a:	eba0 000a 	sub.w	r0, r0, sl
 8018d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8018d92:	9b04      	ldr	r3, [sp, #16]
 8018d94:	4303      	orrs	r3, r0
 8018d96:	3401      	adds	r4, #1
 8018d98:	9304      	str	r3, [sp, #16]
 8018d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d9e:	4826      	ldr	r0, [pc, #152]	; (8018e38 <_svfiprintf_r+0x1f0>)
 8018da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018da4:	2206      	movs	r2, #6
 8018da6:	f7e7 fa53 	bl	8000250 <memchr>
 8018daa:	2800      	cmp	r0, #0
 8018dac:	d038      	beq.n	8018e20 <_svfiprintf_r+0x1d8>
 8018dae:	4b23      	ldr	r3, [pc, #140]	; (8018e3c <_svfiprintf_r+0x1f4>)
 8018db0:	bb1b      	cbnz	r3, 8018dfa <_svfiprintf_r+0x1b2>
 8018db2:	9b03      	ldr	r3, [sp, #12]
 8018db4:	3307      	adds	r3, #7
 8018db6:	f023 0307 	bic.w	r3, r3, #7
 8018dba:	3308      	adds	r3, #8
 8018dbc:	9303      	str	r3, [sp, #12]
 8018dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dc0:	4433      	add	r3, r6
 8018dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8018dc4:	e767      	b.n	8018c96 <_svfiprintf_r+0x4e>
 8018dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018dca:	460c      	mov	r4, r1
 8018dcc:	2001      	movs	r0, #1
 8018dce:	e7a5      	b.n	8018d1c <_svfiprintf_r+0xd4>
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	3401      	adds	r4, #1
 8018dd4:	9305      	str	r3, [sp, #20]
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	f04f 0c0a 	mov.w	ip, #10
 8018ddc:	4620      	mov	r0, r4
 8018dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018de2:	3a30      	subs	r2, #48	; 0x30
 8018de4:	2a09      	cmp	r2, #9
 8018de6:	d903      	bls.n	8018df0 <_svfiprintf_r+0x1a8>
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d0c5      	beq.n	8018d78 <_svfiprintf_r+0x130>
 8018dec:	9105      	str	r1, [sp, #20]
 8018dee:	e7c3      	b.n	8018d78 <_svfiprintf_r+0x130>
 8018df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018df4:	4604      	mov	r4, r0
 8018df6:	2301      	movs	r3, #1
 8018df8:	e7f0      	b.n	8018ddc <_svfiprintf_r+0x194>
 8018dfa:	ab03      	add	r3, sp, #12
 8018dfc:	9300      	str	r3, [sp, #0]
 8018dfe:	462a      	mov	r2, r5
 8018e00:	4b0f      	ldr	r3, [pc, #60]	; (8018e40 <_svfiprintf_r+0x1f8>)
 8018e02:	a904      	add	r1, sp, #16
 8018e04:	4638      	mov	r0, r7
 8018e06:	f7fd ff17 	bl	8016c38 <_printf_float>
 8018e0a:	1c42      	adds	r2, r0, #1
 8018e0c:	4606      	mov	r6, r0
 8018e0e:	d1d6      	bne.n	8018dbe <_svfiprintf_r+0x176>
 8018e10:	89ab      	ldrh	r3, [r5, #12]
 8018e12:	065b      	lsls	r3, r3, #25
 8018e14:	f53f af2c 	bmi.w	8018c70 <_svfiprintf_r+0x28>
 8018e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e1a:	b01d      	add	sp, #116	; 0x74
 8018e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e20:	ab03      	add	r3, sp, #12
 8018e22:	9300      	str	r3, [sp, #0]
 8018e24:	462a      	mov	r2, r5
 8018e26:	4b06      	ldr	r3, [pc, #24]	; (8018e40 <_svfiprintf_r+0x1f8>)
 8018e28:	a904      	add	r1, sp, #16
 8018e2a:	4638      	mov	r0, r7
 8018e2c:	f7fe f990 	bl	8017150 <_printf_i>
 8018e30:	e7eb      	b.n	8018e0a <_svfiprintf_r+0x1c2>
 8018e32:	bf00      	nop
 8018e34:	0801ccfc 	.word	0x0801ccfc
 8018e38:	0801cd06 	.word	0x0801cd06
 8018e3c:	08016c39 	.word	0x08016c39
 8018e40:	08018b91 	.word	0x08018b91
 8018e44:	0801cd02 	.word	0x0801cd02

08018e48 <__sfputc_r>:
 8018e48:	6893      	ldr	r3, [r2, #8]
 8018e4a:	3b01      	subs	r3, #1
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	b410      	push	{r4}
 8018e50:	6093      	str	r3, [r2, #8]
 8018e52:	da08      	bge.n	8018e66 <__sfputc_r+0x1e>
 8018e54:	6994      	ldr	r4, [r2, #24]
 8018e56:	42a3      	cmp	r3, r4
 8018e58:	db01      	blt.n	8018e5e <__sfputc_r+0x16>
 8018e5a:	290a      	cmp	r1, #10
 8018e5c:	d103      	bne.n	8018e66 <__sfputc_r+0x1e>
 8018e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e62:	f000 b99f 	b.w	80191a4 <__swbuf_r>
 8018e66:	6813      	ldr	r3, [r2, #0]
 8018e68:	1c58      	adds	r0, r3, #1
 8018e6a:	6010      	str	r0, [r2, #0]
 8018e6c:	7019      	strb	r1, [r3, #0]
 8018e6e:	4608      	mov	r0, r1
 8018e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e74:	4770      	bx	lr

08018e76 <__sfputs_r>:
 8018e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e78:	4606      	mov	r6, r0
 8018e7a:	460f      	mov	r7, r1
 8018e7c:	4614      	mov	r4, r2
 8018e7e:	18d5      	adds	r5, r2, r3
 8018e80:	42ac      	cmp	r4, r5
 8018e82:	d101      	bne.n	8018e88 <__sfputs_r+0x12>
 8018e84:	2000      	movs	r0, #0
 8018e86:	e007      	b.n	8018e98 <__sfputs_r+0x22>
 8018e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e8c:	463a      	mov	r2, r7
 8018e8e:	4630      	mov	r0, r6
 8018e90:	f7ff ffda 	bl	8018e48 <__sfputc_r>
 8018e94:	1c43      	adds	r3, r0, #1
 8018e96:	d1f3      	bne.n	8018e80 <__sfputs_r+0xa>
 8018e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e9c <_vfiprintf_r>:
 8018e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	460d      	mov	r5, r1
 8018ea2:	b09d      	sub	sp, #116	; 0x74
 8018ea4:	4614      	mov	r4, r2
 8018ea6:	4698      	mov	r8, r3
 8018ea8:	4606      	mov	r6, r0
 8018eaa:	b118      	cbz	r0, 8018eb4 <_vfiprintf_r+0x18>
 8018eac:	6983      	ldr	r3, [r0, #24]
 8018eae:	b90b      	cbnz	r3, 8018eb4 <_vfiprintf_r+0x18>
 8018eb0:	f7ff f976 	bl	80181a0 <__sinit>
 8018eb4:	4b89      	ldr	r3, [pc, #548]	; (80190dc <_vfiprintf_r+0x240>)
 8018eb6:	429d      	cmp	r5, r3
 8018eb8:	d11b      	bne.n	8018ef2 <_vfiprintf_r+0x56>
 8018eba:	6875      	ldr	r5, [r6, #4]
 8018ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ebe:	07d9      	lsls	r1, r3, #31
 8018ec0:	d405      	bmi.n	8018ece <_vfiprintf_r+0x32>
 8018ec2:	89ab      	ldrh	r3, [r5, #12]
 8018ec4:	059a      	lsls	r2, r3, #22
 8018ec6:	d402      	bmi.n	8018ece <_vfiprintf_r+0x32>
 8018ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018eca:	f7ff fa1e 	bl	801830a <__retarget_lock_acquire_recursive>
 8018ece:	89ab      	ldrh	r3, [r5, #12]
 8018ed0:	071b      	lsls	r3, r3, #28
 8018ed2:	d501      	bpl.n	8018ed8 <_vfiprintf_r+0x3c>
 8018ed4:	692b      	ldr	r3, [r5, #16]
 8018ed6:	b9eb      	cbnz	r3, 8018f14 <_vfiprintf_r+0x78>
 8018ed8:	4629      	mov	r1, r5
 8018eda:	4630      	mov	r0, r6
 8018edc:	f000 f9c6 	bl	801926c <__swsetup_r>
 8018ee0:	b1c0      	cbz	r0, 8018f14 <_vfiprintf_r+0x78>
 8018ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ee4:	07dc      	lsls	r4, r3, #31
 8018ee6:	d50e      	bpl.n	8018f06 <_vfiprintf_r+0x6a>
 8018ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018eec:	b01d      	add	sp, #116	; 0x74
 8018eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ef2:	4b7b      	ldr	r3, [pc, #492]	; (80190e0 <_vfiprintf_r+0x244>)
 8018ef4:	429d      	cmp	r5, r3
 8018ef6:	d101      	bne.n	8018efc <_vfiprintf_r+0x60>
 8018ef8:	68b5      	ldr	r5, [r6, #8]
 8018efa:	e7df      	b.n	8018ebc <_vfiprintf_r+0x20>
 8018efc:	4b79      	ldr	r3, [pc, #484]	; (80190e4 <_vfiprintf_r+0x248>)
 8018efe:	429d      	cmp	r5, r3
 8018f00:	bf08      	it	eq
 8018f02:	68f5      	ldreq	r5, [r6, #12]
 8018f04:	e7da      	b.n	8018ebc <_vfiprintf_r+0x20>
 8018f06:	89ab      	ldrh	r3, [r5, #12]
 8018f08:	0598      	lsls	r0, r3, #22
 8018f0a:	d4ed      	bmi.n	8018ee8 <_vfiprintf_r+0x4c>
 8018f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f0e:	f7ff f9fd 	bl	801830c <__retarget_lock_release_recursive>
 8018f12:	e7e9      	b.n	8018ee8 <_vfiprintf_r+0x4c>
 8018f14:	2300      	movs	r3, #0
 8018f16:	9309      	str	r3, [sp, #36]	; 0x24
 8018f18:	2320      	movs	r3, #32
 8018f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f22:	2330      	movs	r3, #48	; 0x30
 8018f24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80190e8 <_vfiprintf_r+0x24c>
 8018f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f2c:	f04f 0901 	mov.w	r9, #1
 8018f30:	4623      	mov	r3, r4
 8018f32:	469a      	mov	sl, r3
 8018f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f38:	b10a      	cbz	r2, 8018f3e <_vfiprintf_r+0xa2>
 8018f3a:	2a25      	cmp	r2, #37	; 0x25
 8018f3c:	d1f9      	bne.n	8018f32 <_vfiprintf_r+0x96>
 8018f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8018f42:	d00b      	beq.n	8018f5c <_vfiprintf_r+0xc0>
 8018f44:	465b      	mov	r3, fp
 8018f46:	4622      	mov	r2, r4
 8018f48:	4629      	mov	r1, r5
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	f7ff ff93 	bl	8018e76 <__sfputs_r>
 8018f50:	3001      	adds	r0, #1
 8018f52:	f000 80aa 	beq.w	80190aa <_vfiprintf_r+0x20e>
 8018f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f58:	445a      	add	r2, fp
 8018f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8018f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	f000 80a2 	beq.w	80190aa <_vfiprintf_r+0x20e>
 8018f66:	2300      	movs	r3, #0
 8018f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f70:	f10a 0a01 	add.w	sl, sl, #1
 8018f74:	9304      	str	r3, [sp, #16]
 8018f76:	9307      	str	r3, [sp, #28]
 8018f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8018f7e:	4654      	mov	r4, sl
 8018f80:	2205      	movs	r2, #5
 8018f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f86:	4858      	ldr	r0, [pc, #352]	; (80190e8 <_vfiprintf_r+0x24c>)
 8018f88:	f7e7 f962 	bl	8000250 <memchr>
 8018f8c:	9a04      	ldr	r2, [sp, #16]
 8018f8e:	b9d8      	cbnz	r0, 8018fc8 <_vfiprintf_r+0x12c>
 8018f90:	06d1      	lsls	r1, r2, #27
 8018f92:	bf44      	itt	mi
 8018f94:	2320      	movmi	r3, #32
 8018f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f9a:	0713      	lsls	r3, r2, #28
 8018f9c:	bf44      	itt	mi
 8018f9e:	232b      	movmi	r3, #43	; 0x2b
 8018fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8018fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8018faa:	d015      	beq.n	8018fd8 <_vfiprintf_r+0x13c>
 8018fac:	9a07      	ldr	r2, [sp, #28]
 8018fae:	4654      	mov	r4, sl
 8018fb0:	2000      	movs	r0, #0
 8018fb2:	f04f 0c0a 	mov.w	ip, #10
 8018fb6:	4621      	mov	r1, r4
 8018fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018fbc:	3b30      	subs	r3, #48	; 0x30
 8018fbe:	2b09      	cmp	r3, #9
 8018fc0:	d94e      	bls.n	8019060 <_vfiprintf_r+0x1c4>
 8018fc2:	b1b0      	cbz	r0, 8018ff2 <_vfiprintf_r+0x156>
 8018fc4:	9207      	str	r2, [sp, #28]
 8018fc6:	e014      	b.n	8018ff2 <_vfiprintf_r+0x156>
 8018fc8:	eba0 0308 	sub.w	r3, r0, r8
 8018fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8018fd0:	4313      	orrs	r3, r2
 8018fd2:	9304      	str	r3, [sp, #16]
 8018fd4:	46a2      	mov	sl, r4
 8018fd6:	e7d2      	b.n	8018f7e <_vfiprintf_r+0xe2>
 8018fd8:	9b03      	ldr	r3, [sp, #12]
 8018fda:	1d19      	adds	r1, r3, #4
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	9103      	str	r1, [sp, #12]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	bfbb      	ittet	lt
 8018fe4:	425b      	neglt	r3, r3
 8018fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8018fea:	9307      	strge	r3, [sp, #28]
 8018fec:	9307      	strlt	r3, [sp, #28]
 8018fee:	bfb8      	it	lt
 8018ff0:	9204      	strlt	r2, [sp, #16]
 8018ff2:	7823      	ldrb	r3, [r4, #0]
 8018ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8018ff6:	d10c      	bne.n	8019012 <_vfiprintf_r+0x176>
 8018ff8:	7863      	ldrb	r3, [r4, #1]
 8018ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8018ffc:	d135      	bne.n	801906a <_vfiprintf_r+0x1ce>
 8018ffe:	9b03      	ldr	r3, [sp, #12]
 8019000:	1d1a      	adds	r2, r3, #4
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	9203      	str	r2, [sp, #12]
 8019006:	2b00      	cmp	r3, #0
 8019008:	bfb8      	it	lt
 801900a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801900e:	3402      	adds	r4, #2
 8019010:	9305      	str	r3, [sp, #20]
 8019012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80190f8 <_vfiprintf_r+0x25c>
 8019016:	7821      	ldrb	r1, [r4, #0]
 8019018:	2203      	movs	r2, #3
 801901a:	4650      	mov	r0, sl
 801901c:	f7e7 f918 	bl	8000250 <memchr>
 8019020:	b140      	cbz	r0, 8019034 <_vfiprintf_r+0x198>
 8019022:	2340      	movs	r3, #64	; 0x40
 8019024:	eba0 000a 	sub.w	r0, r0, sl
 8019028:	fa03 f000 	lsl.w	r0, r3, r0
 801902c:	9b04      	ldr	r3, [sp, #16]
 801902e:	4303      	orrs	r3, r0
 8019030:	3401      	adds	r4, #1
 8019032:	9304      	str	r3, [sp, #16]
 8019034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019038:	482c      	ldr	r0, [pc, #176]	; (80190ec <_vfiprintf_r+0x250>)
 801903a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801903e:	2206      	movs	r2, #6
 8019040:	f7e7 f906 	bl	8000250 <memchr>
 8019044:	2800      	cmp	r0, #0
 8019046:	d03f      	beq.n	80190c8 <_vfiprintf_r+0x22c>
 8019048:	4b29      	ldr	r3, [pc, #164]	; (80190f0 <_vfiprintf_r+0x254>)
 801904a:	bb1b      	cbnz	r3, 8019094 <_vfiprintf_r+0x1f8>
 801904c:	9b03      	ldr	r3, [sp, #12]
 801904e:	3307      	adds	r3, #7
 8019050:	f023 0307 	bic.w	r3, r3, #7
 8019054:	3308      	adds	r3, #8
 8019056:	9303      	str	r3, [sp, #12]
 8019058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801905a:	443b      	add	r3, r7
 801905c:	9309      	str	r3, [sp, #36]	; 0x24
 801905e:	e767      	b.n	8018f30 <_vfiprintf_r+0x94>
 8019060:	fb0c 3202 	mla	r2, ip, r2, r3
 8019064:	460c      	mov	r4, r1
 8019066:	2001      	movs	r0, #1
 8019068:	e7a5      	b.n	8018fb6 <_vfiprintf_r+0x11a>
 801906a:	2300      	movs	r3, #0
 801906c:	3401      	adds	r4, #1
 801906e:	9305      	str	r3, [sp, #20]
 8019070:	4619      	mov	r1, r3
 8019072:	f04f 0c0a 	mov.w	ip, #10
 8019076:	4620      	mov	r0, r4
 8019078:	f810 2b01 	ldrb.w	r2, [r0], #1
 801907c:	3a30      	subs	r2, #48	; 0x30
 801907e:	2a09      	cmp	r2, #9
 8019080:	d903      	bls.n	801908a <_vfiprintf_r+0x1ee>
 8019082:	2b00      	cmp	r3, #0
 8019084:	d0c5      	beq.n	8019012 <_vfiprintf_r+0x176>
 8019086:	9105      	str	r1, [sp, #20]
 8019088:	e7c3      	b.n	8019012 <_vfiprintf_r+0x176>
 801908a:	fb0c 2101 	mla	r1, ip, r1, r2
 801908e:	4604      	mov	r4, r0
 8019090:	2301      	movs	r3, #1
 8019092:	e7f0      	b.n	8019076 <_vfiprintf_r+0x1da>
 8019094:	ab03      	add	r3, sp, #12
 8019096:	9300      	str	r3, [sp, #0]
 8019098:	462a      	mov	r2, r5
 801909a:	4b16      	ldr	r3, [pc, #88]	; (80190f4 <_vfiprintf_r+0x258>)
 801909c:	a904      	add	r1, sp, #16
 801909e:	4630      	mov	r0, r6
 80190a0:	f7fd fdca 	bl	8016c38 <_printf_float>
 80190a4:	4607      	mov	r7, r0
 80190a6:	1c78      	adds	r0, r7, #1
 80190a8:	d1d6      	bne.n	8019058 <_vfiprintf_r+0x1bc>
 80190aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190ac:	07d9      	lsls	r1, r3, #31
 80190ae:	d405      	bmi.n	80190bc <_vfiprintf_r+0x220>
 80190b0:	89ab      	ldrh	r3, [r5, #12]
 80190b2:	059a      	lsls	r2, r3, #22
 80190b4:	d402      	bmi.n	80190bc <_vfiprintf_r+0x220>
 80190b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190b8:	f7ff f928 	bl	801830c <__retarget_lock_release_recursive>
 80190bc:	89ab      	ldrh	r3, [r5, #12]
 80190be:	065b      	lsls	r3, r3, #25
 80190c0:	f53f af12 	bmi.w	8018ee8 <_vfiprintf_r+0x4c>
 80190c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80190c6:	e711      	b.n	8018eec <_vfiprintf_r+0x50>
 80190c8:	ab03      	add	r3, sp, #12
 80190ca:	9300      	str	r3, [sp, #0]
 80190cc:	462a      	mov	r2, r5
 80190ce:	4b09      	ldr	r3, [pc, #36]	; (80190f4 <_vfiprintf_r+0x258>)
 80190d0:	a904      	add	r1, sp, #16
 80190d2:	4630      	mov	r0, r6
 80190d4:	f7fe f83c 	bl	8017150 <_printf_i>
 80190d8:	e7e4      	b.n	80190a4 <_vfiprintf_r+0x208>
 80190da:	bf00      	nop
 80190dc:	0801cb60 	.word	0x0801cb60
 80190e0:	0801cb80 	.word	0x0801cb80
 80190e4:	0801cb40 	.word	0x0801cb40
 80190e8:	0801ccfc 	.word	0x0801ccfc
 80190ec:	0801cd06 	.word	0x0801cd06
 80190f0:	08016c39 	.word	0x08016c39
 80190f4:	08018e77 	.word	0x08018e77
 80190f8:	0801cd02 	.word	0x0801cd02

080190fc <_sbrk_r>:
 80190fc:	b538      	push	{r3, r4, r5, lr}
 80190fe:	4d06      	ldr	r5, [pc, #24]	; (8019118 <_sbrk_r+0x1c>)
 8019100:	2300      	movs	r3, #0
 8019102:	4604      	mov	r4, r0
 8019104:	4608      	mov	r0, r1
 8019106:	602b      	str	r3, [r5, #0]
 8019108:	f7e7 fe30 	bl	8000d6c <_sbrk>
 801910c:	1c43      	adds	r3, r0, #1
 801910e:	d102      	bne.n	8019116 <_sbrk_r+0x1a>
 8019110:	682b      	ldr	r3, [r5, #0]
 8019112:	b103      	cbz	r3, 8019116 <_sbrk_r+0x1a>
 8019114:	6023      	str	r3, [r4, #0]
 8019116:	bd38      	pop	{r3, r4, r5, pc}
 8019118:	20012cf8 	.word	0x20012cf8

0801911c <__sread>:
 801911c:	b510      	push	{r4, lr}
 801911e:	460c      	mov	r4, r1
 8019120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019124:	f000 faa4 	bl	8019670 <_read_r>
 8019128:	2800      	cmp	r0, #0
 801912a:	bfab      	itete	ge
 801912c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801912e:	89a3      	ldrhlt	r3, [r4, #12]
 8019130:	181b      	addge	r3, r3, r0
 8019132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019136:	bfac      	ite	ge
 8019138:	6563      	strge	r3, [r4, #84]	; 0x54
 801913a:	81a3      	strhlt	r3, [r4, #12]
 801913c:	bd10      	pop	{r4, pc}

0801913e <__swrite>:
 801913e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019142:	461f      	mov	r7, r3
 8019144:	898b      	ldrh	r3, [r1, #12]
 8019146:	05db      	lsls	r3, r3, #23
 8019148:	4605      	mov	r5, r0
 801914a:	460c      	mov	r4, r1
 801914c:	4616      	mov	r6, r2
 801914e:	d505      	bpl.n	801915c <__swrite+0x1e>
 8019150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019154:	2302      	movs	r3, #2
 8019156:	2200      	movs	r2, #0
 8019158:	f000 f9d0 	bl	80194fc <_lseek_r>
 801915c:	89a3      	ldrh	r3, [r4, #12]
 801915e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019166:	81a3      	strh	r3, [r4, #12]
 8019168:	4632      	mov	r2, r6
 801916a:	463b      	mov	r3, r7
 801916c:	4628      	mov	r0, r5
 801916e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019172:	f000 b869 	b.w	8019248 <_write_r>

08019176 <__sseek>:
 8019176:	b510      	push	{r4, lr}
 8019178:	460c      	mov	r4, r1
 801917a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801917e:	f000 f9bd 	bl	80194fc <_lseek_r>
 8019182:	1c43      	adds	r3, r0, #1
 8019184:	89a3      	ldrh	r3, [r4, #12]
 8019186:	bf15      	itete	ne
 8019188:	6560      	strne	r0, [r4, #84]	; 0x54
 801918a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801918e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019192:	81a3      	strheq	r3, [r4, #12]
 8019194:	bf18      	it	ne
 8019196:	81a3      	strhne	r3, [r4, #12]
 8019198:	bd10      	pop	{r4, pc}

0801919a <__sclose>:
 801919a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801919e:	f000 b8db 	b.w	8019358 <_close_r>
	...

080191a4 <__swbuf_r>:
 80191a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191a6:	460e      	mov	r6, r1
 80191a8:	4614      	mov	r4, r2
 80191aa:	4605      	mov	r5, r0
 80191ac:	b118      	cbz	r0, 80191b6 <__swbuf_r+0x12>
 80191ae:	6983      	ldr	r3, [r0, #24]
 80191b0:	b90b      	cbnz	r3, 80191b6 <__swbuf_r+0x12>
 80191b2:	f7fe fff5 	bl	80181a0 <__sinit>
 80191b6:	4b21      	ldr	r3, [pc, #132]	; (801923c <__swbuf_r+0x98>)
 80191b8:	429c      	cmp	r4, r3
 80191ba:	d12b      	bne.n	8019214 <__swbuf_r+0x70>
 80191bc:	686c      	ldr	r4, [r5, #4]
 80191be:	69a3      	ldr	r3, [r4, #24]
 80191c0:	60a3      	str	r3, [r4, #8]
 80191c2:	89a3      	ldrh	r3, [r4, #12]
 80191c4:	071a      	lsls	r2, r3, #28
 80191c6:	d52f      	bpl.n	8019228 <__swbuf_r+0x84>
 80191c8:	6923      	ldr	r3, [r4, #16]
 80191ca:	b36b      	cbz	r3, 8019228 <__swbuf_r+0x84>
 80191cc:	6923      	ldr	r3, [r4, #16]
 80191ce:	6820      	ldr	r0, [r4, #0]
 80191d0:	1ac0      	subs	r0, r0, r3
 80191d2:	6963      	ldr	r3, [r4, #20]
 80191d4:	b2f6      	uxtb	r6, r6
 80191d6:	4283      	cmp	r3, r0
 80191d8:	4637      	mov	r7, r6
 80191da:	dc04      	bgt.n	80191e6 <__swbuf_r+0x42>
 80191dc:	4621      	mov	r1, r4
 80191de:	4628      	mov	r0, r5
 80191e0:	f000 f950 	bl	8019484 <_fflush_r>
 80191e4:	bb30      	cbnz	r0, 8019234 <__swbuf_r+0x90>
 80191e6:	68a3      	ldr	r3, [r4, #8]
 80191e8:	3b01      	subs	r3, #1
 80191ea:	60a3      	str	r3, [r4, #8]
 80191ec:	6823      	ldr	r3, [r4, #0]
 80191ee:	1c5a      	adds	r2, r3, #1
 80191f0:	6022      	str	r2, [r4, #0]
 80191f2:	701e      	strb	r6, [r3, #0]
 80191f4:	6963      	ldr	r3, [r4, #20]
 80191f6:	3001      	adds	r0, #1
 80191f8:	4283      	cmp	r3, r0
 80191fa:	d004      	beq.n	8019206 <__swbuf_r+0x62>
 80191fc:	89a3      	ldrh	r3, [r4, #12]
 80191fe:	07db      	lsls	r3, r3, #31
 8019200:	d506      	bpl.n	8019210 <__swbuf_r+0x6c>
 8019202:	2e0a      	cmp	r6, #10
 8019204:	d104      	bne.n	8019210 <__swbuf_r+0x6c>
 8019206:	4621      	mov	r1, r4
 8019208:	4628      	mov	r0, r5
 801920a:	f000 f93b 	bl	8019484 <_fflush_r>
 801920e:	b988      	cbnz	r0, 8019234 <__swbuf_r+0x90>
 8019210:	4638      	mov	r0, r7
 8019212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019214:	4b0a      	ldr	r3, [pc, #40]	; (8019240 <__swbuf_r+0x9c>)
 8019216:	429c      	cmp	r4, r3
 8019218:	d101      	bne.n	801921e <__swbuf_r+0x7a>
 801921a:	68ac      	ldr	r4, [r5, #8]
 801921c:	e7cf      	b.n	80191be <__swbuf_r+0x1a>
 801921e:	4b09      	ldr	r3, [pc, #36]	; (8019244 <__swbuf_r+0xa0>)
 8019220:	429c      	cmp	r4, r3
 8019222:	bf08      	it	eq
 8019224:	68ec      	ldreq	r4, [r5, #12]
 8019226:	e7ca      	b.n	80191be <__swbuf_r+0x1a>
 8019228:	4621      	mov	r1, r4
 801922a:	4628      	mov	r0, r5
 801922c:	f000 f81e 	bl	801926c <__swsetup_r>
 8019230:	2800      	cmp	r0, #0
 8019232:	d0cb      	beq.n	80191cc <__swbuf_r+0x28>
 8019234:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019238:	e7ea      	b.n	8019210 <__swbuf_r+0x6c>
 801923a:	bf00      	nop
 801923c:	0801cb60 	.word	0x0801cb60
 8019240:	0801cb80 	.word	0x0801cb80
 8019244:	0801cb40 	.word	0x0801cb40

08019248 <_write_r>:
 8019248:	b538      	push	{r3, r4, r5, lr}
 801924a:	4d07      	ldr	r5, [pc, #28]	; (8019268 <_write_r+0x20>)
 801924c:	4604      	mov	r4, r0
 801924e:	4608      	mov	r0, r1
 8019250:	4611      	mov	r1, r2
 8019252:	2200      	movs	r2, #0
 8019254:	602a      	str	r2, [r5, #0]
 8019256:	461a      	mov	r2, r3
 8019258:	f7e7 fd37 	bl	8000cca <_write>
 801925c:	1c43      	adds	r3, r0, #1
 801925e:	d102      	bne.n	8019266 <_write_r+0x1e>
 8019260:	682b      	ldr	r3, [r5, #0]
 8019262:	b103      	cbz	r3, 8019266 <_write_r+0x1e>
 8019264:	6023      	str	r3, [r4, #0]
 8019266:	bd38      	pop	{r3, r4, r5, pc}
 8019268:	20012cf8 	.word	0x20012cf8

0801926c <__swsetup_r>:
 801926c:	4b32      	ldr	r3, [pc, #200]	; (8019338 <__swsetup_r+0xcc>)
 801926e:	b570      	push	{r4, r5, r6, lr}
 8019270:	681d      	ldr	r5, [r3, #0]
 8019272:	4606      	mov	r6, r0
 8019274:	460c      	mov	r4, r1
 8019276:	b125      	cbz	r5, 8019282 <__swsetup_r+0x16>
 8019278:	69ab      	ldr	r3, [r5, #24]
 801927a:	b913      	cbnz	r3, 8019282 <__swsetup_r+0x16>
 801927c:	4628      	mov	r0, r5
 801927e:	f7fe ff8f 	bl	80181a0 <__sinit>
 8019282:	4b2e      	ldr	r3, [pc, #184]	; (801933c <__swsetup_r+0xd0>)
 8019284:	429c      	cmp	r4, r3
 8019286:	d10f      	bne.n	80192a8 <__swsetup_r+0x3c>
 8019288:	686c      	ldr	r4, [r5, #4]
 801928a:	89a3      	ldrh	r3, [r4, #12]
 801928c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019290:	0719      	lsls	r1, r3, #28
 8019292:	d42c      	bmi.n	80192ee <__swsetup_r+0x82>
 8019294:	06dd      	lsls	r5, r3, #27
 8019296:	d411      	bmi.n	80192bc <__swsetup_r+0x50>
 8019298:	2309      	movs	r3, #9
 801929a:	6033      	str	r3, [r6, #0]
 801929c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80192a0:	81a3      	strh	r3, [r4, #12]
 80192a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192a6:	e03e      	b.n	8019326 <__swsetup_r+0xba>
 80192a8:	4b25      	ldr	r3, [pc, #148]	; (8019340 <__swsetup_r+0xd4>)
 80192aa:	429c      	cmp	r4, r3
 80192ac:	d101      	bne.n	80192b2 <__swsetup_r+0x46>
 80192ae:	68ac      	ldr	r4, [r5, #8]
 80192b0:	e7eb      	b.n	801928a <__swsetup_r+0x1e>
 80192b2:	4b24      	ldr	r3, [pc, #144]	; (8019344 <__swsetup_r+0xd8>)
 80192b4:	429c      	cmp	r4, r3
 80192b6:	bf08      	it	eq
 80192b8:	68ec      	ldreq	r4, [r5, #12]
 80192ba:	e7e6      	b.n	801928a <__swsetup_r+0x1e>
 80192bc:	0758      	lsls	r0, r3, #29
 80192be:	d512      	bpl.n	80192e6 <__swsetup_r+0x7a>
 80192c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80192c2:	b141      	cbz	r1, 80192d6 <__swsetup_r+0x6a>
 80192c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192c8:	4299      	cmp	r1, r3
 80192ca:	d002      	beq.n	80192d2 <__swsetup_r+0x66>
 80192cc:	4630      	mov	r0, r6
 80192ce:	f7ff fbb5 	bl	8018a3c <_free_r>
 80192d2:	2300      	movs	r3, #0
 80192d4:	6363      	str	r3, [r4, #52]	; 0x34
 80192d6:	89a3      	ldrh	r3, [r4, #12]
 80192d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80192dc:	81a3      	strh	r3, [r4, #12]
 80192de:	2300      	movs	r3, #0
 80192e0:	6063      	str	r3, [r4, #4]
 80192e2:	6923      	ldr	r3, [r4, #16]
 80192e4:	6023      	str	r3, [r4, #0]
 80192e6:	89a3      	ldrh	r3, [r4, #12]
 80192e8:	f043 0308 	orr.w	r3, r3, #8
 80192ec:	81a3      	strh	r3, [r4, #12]
 80192ee:	6923      	ldr	r3, [r4, #16]
 80192f0:	b94b      	cbnz	r3, 8019306 <__swsetup_r+0x9a>
 80192f2:	89a3      	ldrh	r3, [r4, #12]
 80192f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80192f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192fc:	d003      	beq.n	8019306 <__swsetup_r+0x9a>
 80192fe:	4621      	mov	r1, r4
 8019300:	4630      	mov	r0, r6
 8019302:	f000 f931 	bl	8019568 <__smakebuf_r>
 8019306:	89a0      	ldrh	r0, [r4, #12]
 8019308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801930c:	f010 0301 	ands.w	r3, r0, #1
 8019310:	d00a      	beq.n	8019328 <__swsetup_r+0xbc>
 8019312:	2300      	movs	r3, #0
 8019314:	60a3      	str	r3, [r4, #8]
 8019316:	6963      	ldr	r3, [r4, #20]
 8019318:	425b      	negs	r3, r3
 801931a:	61a3      	str	r3, [r4, #24]
 801931c:	6923      	ldr	r3, [r4, #16]
 801931e:	b943      	cbnz	r3, 8019332 <__swsetup_r+0xc6>
 8019320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019324:	d1ba      	bne.n	801929c <__swsetup_r+0x30>
 8019326:	bd70      	pop	{r4, r5, r6, pc}
 8019328:	0781      	lsls	r1, r0, #30
 801932a:	bf58      	it	pl
 801932c:	6963      	ldrpl	r3, [r4, #20]
 801932e:	60a3      	str	r3, [r4, #8]
 8019330:	e7f4      	b.n	801931c <__swsetup_r+0xb0>
 8019332:	2000      	movs	r0, #0
 8019334:	e7f7      	b.n	8019326 <__swsetup_r+0xba>
 8019336:	bf00      	nop
 8019338:	20000020 	.word	0x20000020
 801933c:	0801cb60 	.word	0x0801cb60
 8019340:	0801cb80 	.word	0x0801cb80
 8019344:	0801cb40 	.word	0x0801cb40

08019348 <abort>:
 8019348:	b508      	push	{r3, lr}
 801934a:	2006      	movs	r0, #6
 801934c:	f000 f9ca 	bl	80196e4 <raise>
 8019350:	2001      	movs	r0, #1
 8019352:	f7e7 fc93 	bl	8000c7c <_exit>
	...

08019358 <_close_r>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4d06      	ldr	r5, [pc, #24]	; (8019374 <_close_r+0x1c>)
 801935c:	2300      	movs	r3, #0
 801935e:	4604      	mov	r4, r0
 8019360:	4608      	mov	r0, r1
 8019362:	602b      	str	r3, [r5, #0]
 8019364:	f7e7 fccd 	bl	8000d02 <_close>
 8019368:	1c43      	adds	r3, r0, #1
 801936a:	d102      	bne.n	8019372 <_close_r+0x1a>
 801936c:	682b      	ldr	r3, [r5, #0]
 801936e:	b103      	cbz	r3, 8019372 <_close_r+0x1a>
 8019370:	6023      	str	r3, [r4, #0]
 8019372:	bd38      	pop	{r3, r4, r5, pc}
 8019374:	20012cf8 	.word	0x20012cf8

08019378 <__sflush_r>:
 8019378:	898a      	ldrh	r2, [r1, #12]
 801937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801937e:	4605      	mov	r5, r0
 8019380:	0710      	lsls	r0, r2, #28
 8019382:	460c      	mov	r4, r1
 8019384:	d458      	bmi.n	8019438 <__sflush_r+0xc0>
 8019386:	684b      	ldr	r3, [r1, #4]
 8019388:	2b00      	cmp	r3, #0
 801938a:	dc05      	bgt.n	8019398 <__sflush_r+0x20>
 801938c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801938e:	2b00      	cmp	r3, #0
 8019390:	dc02      	bgt.n	8019398 <__sflush_r+0x20>
 8019392:	2000      	movs	r0, #0
 8019394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019398:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801939a:	2e00      	cmp	r6, #0
 801939c:	d0f9      	beq.n	8019392 <__sflush_r+0x1a>
 801939e:	2300      	movs	r3, #0
 80193a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80193a4:	682f      	ldr	r7, [r5, #0]
 80193a6:	602b      	str	r3, [r5, #0]
 80193a8:	d032      	beq.n	8019410 <__sflush_r+0x98>
 80193aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80193ac:	89a3      	ldrh	r3, [r4, #12]
 80193ae:	075a      	lsls	r2, r3, #29
 80193b0:	d505      	bpl.n	80193be <__sflush_r+0x46>
 80193b2:	6863      	ldr	r3, [r4, #4]
 80193b4:	1ac0      	subs	r0, r0, r3
 80193b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193b8:	b10b      	cbz	r3, 80193be <__sflush_r+0x46>
 80193ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193bc:	1ac0      	subs	r0, r0, r3
 80193be:	2300      	movs	r3, #0
 80193c0:	4602      	mov	r2, r0
 80193c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193c4:	6a21      	ldr	r1, [r4, #32]
 80193c6:	4628      	mov	r0, r5
 80193c8:	47b0      	blx	r6
 80193ca:	1c43      	adds	r3, r0, #1
 80193cc:	89a3      	ldrh	r3, [r4, #12]
 80193ce:	d106      	bne.n	80193de <__sflush_r+0x66>
 80193d0:	6829      	ldr	r1, [r5, #0]
 80193d2:	291d      	cmp	r1, #29
 80193d4:	d82c      	bhi.n	8019430 <__sflush_r+0xb8>
 80193d6:	4a2a      	ldr	r2, [pc, #168]	; (8019480 <__sflush_r+0x108>)
 80193d8:	40ca      	lsrs	r2, r1
 80193da:	07d6      	lsls	r6, r2, #31
 80193dc:	d528      	bpl.n	8019430 <__sflush_r+0xb8>
 80193de:	2200      	movs	r2, #0
 80193e0:	6062      	str	r2, [r4, #4]
 80193e2:	04d9      	lsls	r1, r3, #19
 80193e4:	6922      	ldr	r2, [r4, #16]
 80193e6:	6022      	str	r2, [r4, #0]
 80193e8:	d504      	bpl.n	80193f4 <__sflush_r+0x7c>
 80193ea:	1c42      	adds	r2, r0, #1
 80193ec:	d101      	bne.n	80193f2 <__sflush_r+0x7a>
 80193ee:	682b      	ldr	r3, [r5, #0]
 80193f0:	b903      	cbnz	r3, 80193f4 <__sflush_r+0x7c>
 80193f2:	6560      	str	r0, [r4, #84]	; 0x54
 80193f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193f6:	602f      	str	r7, [r5, #0]
 80193f8:	2900      	cmp	r1, #0
 80193fa:	d0ca      	beq.n	8019392 <__sflush_r+0x1a>
 80193fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019400:	4299      	cmp	r1, r3
 8019402:	d002      	beq.n	801940a <__sflush_r+0x92>
 8019404:	4628      	mov	r0, r5
 8019406:	f7ff fb19 	bl	8018a3c <_free_r>
 801940a:	2000      	movs	r0, #0
 801940c:	6360      	str	r0, [r4, #52]	; 0x34
 801940e:	e7c1      	b.n	8019394 <__sflush_r+0x1c>
 8019410:	6a21      	ldr	r1, [r4, #32]
 8019412:	2301      	movs	r3, #1
 8019414:	4628      	mov	r0, r5
 8019416:	47b0      	blx	r6
 8019418:	1c41      	adds	r1, r0, #1
 801941a:	d1c7      	bne.n	80193ac <__sflush_r+0x34>
 801941c:	682b      	ldr	r3, [r5, #0]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d0c4      	beq.n	80193ac <__sflush_r+0x34>
 8019422:	2b1d      	cmp	r3, #29
 8019424:	d001      	beq.n	801942a <__sflush_r+0xb2>
 8019426:	2b16      	cmp	r3, #22
 8019428:	d101      	bne.n	801942e <__sflush_r+0xb6>
 801942a:	602f      	str	r7, [r5, #0]
 801942c:	e7b1      	b.n	8019392 <__sflush_r+0x1a>
 801942e:	89a3      	ldrh	r3, [r4, #12]
 8019430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019434:	81a3      	strh	r3, [r4, #12]
 8019436:	e7ad      	b.n	8019394 <__sflush_r+0x1c>
 8019438:	690f      	ldr	r7, [r1, #16]
 801943a:	2f00      	cmp	r7, #0
 801943c:	d0a9      	beq.n	8019392 <__sflush_r+0x1a>
 801943e:	0793      	lsls	r3, r2, #30
 8019440:	680e      	ldr	r6, [r1, #0]
 8019442:	bf08      	it	eq
 8019444:	694b      	ldreq	r3, [r1, #20]
 8019446:	600f      	str	r7, [r1, #0]
 8019448:	bf18      	it	ne
 801944a:	2300      	movne	r3, #0
 801944c:	eba6 0807 	sub.w	r8, r6, r7
 8019450:	608b      	str	r3, [r1, #8]
 8019452:	f1b8 0f00 	cmp.w	r8, #0
 8019456:	dd9c      	ble.n	8019392 <__sflush_r+0x1a>
 8019458:	6a21      	ldr	r1, [r4, #32]
 801945a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801945c:	4643      	mov	r3, r8
 801945e:	463a      	mov	r2, r7
 8019460:	4628      	mov	r0, r5
 8019462:	47b0      	blx	r6
 8019464:	2800      	cmp	r0, #0
 8019466:	dc06      	bgt.n	8019476 <__sflush_r+0xfe>
 8019468:	89a3      	ldrh	r3, [r4, #12]
 801946a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801946e:	81a3      	strh	r3, [r4, #12]
 8019470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019474:	e78e      	b.n	8019394 <__sflush_r+0x1c>
 8019476:	4407      	add	r7, r0
 8019478:	eba8 0800 	sub.w	r8, r8, r0
 801947c:	e7e9      	b.n	8019452 <__sflush_r+0xda>
 801947e:	bf00      	nop
 8019480:	20400001 	.word	0x20400001

08019484 <_fflush_r>:
 8019484:	b538      	push	{r3, r4, r5, lr}
 8019486:	690b      	ldr	r3, [r1, #16]
 8019488:	4605      	mov	r5, r0
 801948a:	460c      	mov	r4, r1
 801948c:	b913      	cbnz	r3, 8019494 <_fflush_r+0x10>
 801948e:	2500      	movs	r5, #0
 8019490:	4628      	mov	r0, r5
 8019492:	bd38      	pop	{r3, r4, r5, pc}
 8019494:	b118      	cbz	r0, 801949e <_fflush_r+0x1a>
 8019496:	6983      	ldr	r3, [r0, #24]
 8019498:	b90b      	cbnz	r3, 801949e <_fflush_r+0x1a>
 801949a:	f7fe fe81 	bl	80181a0 <__sinit>
 801949e:	4b14      	ldr	r3, [pc, #80]	; (80194f0 <_fflush_r+0x6c>)
 80194a0:	429c      	cmp	r4, r3
 80194a2:	d11b      	bne.n	80194dc <_fflush_r+0x58>
 80194a4:	686c      	ldr	r4, [r5, #4]
 80194a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d0ef      	beq.n	801948e <_fflush_r+0xa>
 80194ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80194b0:	07d0      	lsls	r0, r2, #31
 80194b2:	d404      	bmi.n	80194be <_fflush_r+0x3a>
 80194b4:	0599      	lsls	r1, r3, #22
 80194b6:	d402      	bmi.n	80194be <_fflush_r+0x3a>
 80194b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194ba:	f7fe ff26 	bl	801830a <__retarget_lock_acquire_recursive>
 80194be:	4628      	mov	r0, r5
 80194c0:	4621      	mov	r1, r4
 80194c2:	f7ff ff59 	bl	8019378 <__sflush_r>
 80194c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194c8:	07da      	lsls	r2, r3, #31
 80194ca:	4605      	mov	r5, r0
 80194cc:	d4e0      	bmi.n	8019490 <_fflush_r+0xc>
 80194ce:	89a3      	ldrh	r3, [r4, #12]
 80194d0:	059b      	lsls	r3, r3, #22
 80194d2:	d4dd      	bmi.n	8019490 <_fflush_r+0xc>
 80194d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194d6:	f7fe ff19 	bl	801830c <__retarget_lock_release_recursive>
 80194da:	e7d9      	b.n	8019490 <_fflush_r+0xc>
 80194dc:	4b05      	ldr	r3, [pc, #20]	; (80194f4 <_fflush_r+0x70>)
 80194de:	429c      	cmp	r4, r3
 80194e0:	d101      	bne.n	80194e6 <_fflush_r+0x62>
 80194e2:	68ac      	ldr	r4, [r5, #8]
 80194e4:	e7df      	b.n	80194a6 <_fflush_r+0x22>
 80194e6:	4b04      	ldr	r3, [pc, #16]	; (80194f8 <_fflush_r+0x74>)
 80194e8:	429c      	cmp	r4, r3
 80194ea:	bf08      	it	eq
 80194ec:	68ec      	ldreq	r4, [r5, #12]
 80194ee:	e7da      	b.n	80194a6 <_fflush_r+0x22>
 80194f0:	0801cb60 	.word	0x0801cb60
 80194f4:	0801cb80 	.word	0x0801cb80
 80194f8:	0801cb40 	.word	0x0801cb40

080194fc <_lseek_r>:
 80194fc:	b538      	push	{r3, r4, r5, lr}
 80194fe:	4d07      	ldr	r5, [pc, #28]	; (801951c <_lseek_r+0x20>)
 8019500:	4604      	mov	r4, r0
 8019502:	4608      	mov	r0, r1
 8019504:	4611      	mov	r1, r2
 8019506:	2200      	movs	r2, #0
 8019508:	602a      	str	r2, [r5, #0]
 801950a:	461a      	mov	r2, r3
 801950c:	f7e7 fc20 	bl	8000d50 <_lseek>
 8019510:	1c43      	adds	r3, r0, #1
 8019512:	d102      	bne.n	801951a <_lseek_r+0x1e>
 8019514:	682b      	ldr	r3, [r5, #0]
 8019516:	b103      	cbz	r3, 801951a <_lseek_r+0x1e>
 8019518:	6023      	str	r3, [r4, #0]
 801951a:	bd38      	pop	{r3, r4, r5, pc}
 801951c:	20012cf8 	.word	0x20012cf8

08019520 <__swhatbuf_r>:
 8019520:	b570      	push	{r4, r5, r6, lr}
 8019522:	460e      	mov	r6, r1
 8019524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019528:	2900      	cmp	r1, #0
 801952a:	b096      	sub	sp, #88	; 0x58
 801952c:	4614      	mov	r4, r2
 801952e:	461d      	mov	r5, r3
 8019530:	da07      	bge.n	8019542 <__swhatbuf_r+0x22>
 8019532:	2300      	movs	r3, #0
 8019534:	602b      	str	r3, [r5, #0]
 8019536:	89b3      	ldrh	r3, [r6, #12]
 8019538:	061a      	lsls	r2, r3, #24
 801953a:	d410      	bmi.n	801955e <__swhatbuf_r+0x3e>
 801953c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019540:	e00e      	b.n	8019560 <__swhatbuf_r+0x40>
 8019542:	466a      	mov	r2, sp
 8019544:	f000 f8f8 	bl	8019738 <_fstat_r>
 8019548:	2800      	cmp	r0, #0
 801954a:	dbf2      	blt.n	8019532 <__swhatbuf_r+0x12>
 801954c:	9a01      	ldr	r2, [sp, #4]
 801954e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019552:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019556:	425a      	negs	r2, r3
 8019558:	415a      	adcs	r2, r3
 801955a:	602a      	str	r2, [r5, #0]
 801955c:	e7ee      	b.n	801953c <__swhatbuf_r+0x1c>
 801955e:	2340      	movs	r3, #64	; 0x40
 8019560:	2000      	movs	r0, #0
 8019562:	6023      	str	r3, [r4, #0]
 8019564:	b016      	add	sp, #88	; 0x58
 8019566:	bd70      	pop	{r4, r5, r6, pc}

08019568 <__smakebuf_r>:
 8019568:	898b      	ldrh	r3, [r1, #12]
 801956a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801956c:	079d      	lsls	r5, r3, #30
 801956e:	4606      	mov	r6, r0
 8019570:	460c      	mov	r4, r1
 8019572:	d507      	bpl.n	8019584 <__smakebuf_r+0x1c>
 8019574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019578:	6023      	str	r3, [r4, #0]
 801957a:	6123      	str	r3, [r4, #16]
 801957c:	2301      	movs	r3, #1
 801957e:	6163      	str	r3, [r4, #20]
 8019580:	b002      	add	sp, #8
 8019582:	bd70      	pop	{r4, r5, r6, pc}
 8019584:	ab01      	add	r3, sp, #4
 8019586:	466a      	mov	r2, sp
 8019588:	f7ff ffca 	bl	8019520 <__swhatbuf_r>
 801958c:	9900      	ldr	r1, [sp, #0]
 801958e:	4605      	mov	r5, r0
 8019590:	4630      	mov	r0, r6
 8019592:	f7ff faa3 	bl	8018adc <_malloc_r>
 8019596:	b948      	cbnz	r0, 80195ac <__smakebuf_r+0x44>
 8019598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801959c:	059a      	lsls	r2, r3, #22
 801959e:	d4ef      	bmi.n	8019580 <__smakebuf_r+0x18>
 80195a0:	f023 0303 	bic.w	r3, r3, #3
 80195a4:	f043 0302 	orr.w	r3, r3, #2
 80195a8:	81a3      	strh	r3, [r4, #12]
 80195aa:	e7e3      	b.n	8019574 <__smakebuf_r+0xc>
 80195ac:	4b0d      	ldr	r3, [pc, #52]	; (80195e4 <__smakebuf_r+0x7c>)
 80195ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80195b0:	89a3      	ldrh	r3, [r4, #12]
 80195b2:	6020      	str	r0, [r4, #0]
 80195b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195b8:	81a3      	strh	r3, [r4, #12]
 80195ba:	9b00      	ldr	r3, [sp, #0]
 80195bc:	6163      	str	r3, [r4, #20]
 80195be:	9b01      	ldr	r3, [sp, #4]
 80195c0:	6120      	str	r0, [r4, #16]
 80195c2:	b15b      	cbz	r3, 80195dc <__smakebuf_r+0x74>
 80195c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195c8:	4630      	mov	r0, r6
 80195ca:	f000 f8c7 	bl	801975c <_isatty_r>
 80195ce:	b128      	cbz	r0, 80195dc <__smakebuf_r+0x74>
 80195d0:	89a3      	ldrh	r3, [r4, #12]
 80195d2:	f023 0303 	bic.w	r3, r3, #3
 80195d6:	f043 0301 	orr.w	r3, r3, #1
 80195da:	81a3      	strh	r3, [r4, #12]
 80195dc:	89a0      	ldrh	r0, [r4, #12]
 80195de:	4305      	orrs	r5, r0
 80195e0:	81a5      	strh	r5, [r4, #12]
 80195e2:	e7cd      	b.n	8019580 <__smakebuf_r+0x18>
 80195e4:	08018139 	.word	0x08018139

080195e8 <__ascii_mbtowc>:
 80195e8:	b082      	sub	sp, #8
 80195ea:	b901      	cbnz	r1, 80195ee <__ascii_mbtowc+0x6>
 80195ec:	a901      	add	r1, sp, #4
 80195ee:	b142      	cbz	r2, 8019602 <__ascii_mbtowc+0x1a>
 80195f0:	b14b      	cbz	r3, 8019606 <__ascii_mbtowc+0x1e>
 80195f2:	7813      	ldrb	r3, [r2, #0]
 80195f4:	600b      	str	r3, [r1, #0]
 80195f6:	7812      	ldrb	r2, [r2, #0]
 80195f8:	1e10      	subs	r0, r2, #0
 80195fa:	bf18      	it	ne
 80195fc:	2001      	movne	r0, #1
 80195fe:	b002      	add	sp, #8
 8019600:	4770      	bx	lr
 8019602:	4610      	mov	r0, r2
 8019604:	e7fb      	b.n	80195fe <__ascii_mbtowc+0x16>
 8019606:	f06f 0001 	mvn.w	r0, #1
 801960a:	e7f8      	b.n	80195fe <__ascii_mbtowc+0x16>

0801960c <__malloc_lock>:
 801960c:	4801      	ldr	r0, [pc, #4]	; (8019614 <__malloc_lock+0x8>)
 801960e:	f7fe be7c 	b.w	801830a <__retarget_lock_acquire_recursive>
 8019612:	bf00      	nop
 8019614:	20012d04 	.word	0x20012d04

08019618 <__malloc_unlock>:
 8019618:	4801      	ldr	r0, [pc, #4]	; (8019620 <__malloc_unlock+0x8>)
 801961a:	f7fe be77 	b.w	801830c <__retarget_lock_release_recursive>
 801961e:	bf00      	nop
 8019620:	20012d04 	.word	0x20012d04

08019624 <_realloc_r>:
 8019624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019626:	4607      	mov	r7, r0
 8019628:	4614      	mov	r4, r2
 801962a:	460e      	mov	r6, r1
 801962c:	b921      	cbnz	r1, 8019638 <_realloc_r+0x14>
 801962e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019632:	4611      	mov	r1, r2
 8019634:	f7ff ba52 	b.w	8018adc <_malloc_r>
 8019638:	b922      	cbnz	r2, 8019644 <_realloc_r+0x20>
 801963a:	f7ff f9ff 	bl	8018a3c <_free_r>
 801963e:	4625      	mov	r5, r4
 8019640:	4628      	mov	r0, r5
 8019642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019644:	f000 f89a 	bl	801977c <_malloc_usable_size_r>
 8019648:	42a0      	cmp	r0, r4
 801964a:	d20f      	bcs.n	801966c <_realloc_r+0x48>
 801964c:	4621      	mov	r1, r4
 801964e:	4638      	mov	r0, r7
 8019650:	f7ff fa44 	bl	8018adc <_malloc_r>
 8019654:	4605      	mov	r5, r0
 8019656:	2800      	cmp	r0, #0
 8019658:	d0f2      	beq.n	8019640 <_realloc_r+0x1c>
 801965a:	4631      	mov	r1, r6
 801965c:	4622      	mov	r2, r4
 801965e:	f7fd fa29 	bl	8016ab4 <memcpy>
 8019662:	4631      	mov	r1, r6
 8019664:	4638      	mov	r0, r7
 8019666:	f7ff f9e9 	bl	8018a3c <_free_r>
 801966a:	e7e9      	b.n	8019640 <_realloc_r+0x1c>
 801966c:	4635      	mov	r5, r6
 801966e:	e7e7      	b.n	8019640 <_realloc_r+0x1c>

08019670 <_read_r>:
 8019670:	b538      	push	{r3, r4, r5, lr}
 8019672:	4d07      	ldr	r5, [pc, #28]	; (8019690 <_read_r+0x20>)
 8019674:	4604      	mov	r4, r0
 8019676:	4608      	mov	r0, r1
 8019678:	4611      	mov	r1, r2
 801967a:	2200      	movs	r2, #0
 801967c:	602a      	str	r2, [r5, #0]
 801967e:	461a      	mov	r2, r3
 8019680:	f7e7 fb06 	bl	8000c90 <_read>
 8019684:	1c43      	adds	r3, r0, #1
 8019686:	d102      	bne.n	801968e <_read_r+0x1e>
 8019688:	682b      	ldr	r3, [r5, #0]
 801968a:	b103      	cbz	r3, 801968e <_read_r+0x1e>
 801968c:	6023      	str	r3, [r4, #0]
 801968e:	bd38      	pop	{r3, r4, r5, pc}
 8019690:	20012cf8 	.word	0x20012cf8

08019694 <_raise_r>:
 8019694:	291f      	cmp	r1, #31
 8019696:	b538      	push	{r3, r4, r5, lr}
 8019698:	4604      	mov	r4, r0
 801969a:	460d      	mov	r5, r1
 801969c:	d904      	bls.n	80196a8 <_raise_r+0x14>
 801969e:	2316      	movs	r3, #22
 80196a0:	6003      	str	r3, [r0, #0]
 80196a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196a6:	bd38      	pop	{r3, r4, r5, pc}
 80196a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80196aa:	b112      	cbz	r2, 80196b2 <_raise_r+0x1e>
 80196ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196b0:	b94b      	cbnz	r3, 80196c6 <_raise_r+0x32>
 80196b2:	4620      	mov	r0, r4
 80196b4:	f000 f830 	bl	8019718 <_getpid_r>
 80196b8:	462a      	mov	r2, r5
 80196ba:	4601      	mov	r1, r0
 80196bc:	4620      	mov	r0, r4
 80196be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196c2:	f000 b817 	b.w	80196f4 <_kill_r>
 80196c6:	2b01      	cmp	r3, #1
 80196c8:	d00a      	beq.n	80196e0 <_raise_r+0x4c>
 80196ca:	1c59      	adds	r1, r3, #1
 80196cc:	d103      	bne.n	80196d6 <_raise_r+0x42>
 80196ce:	2316      	movs	r3, #22
 80196d0:	6003      	str	r3, [r0, #0]
 80196d2:	2001      	movs	r0, #1
 80196d4:	e7e7      	b.n	80196a6 <_raise_r+0x12>
 80196d6:	2400      	movs	r4, #0
 80196d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80196dc:	4628      	mov	r0, r5
 80196de:	4798      	blx	r3
 80196e0:	2000      	movs	r0, #0
 80196e2:	e7e0      	b.n	80196a6 <_raise_r+0x12>

080196e4 <raise>:
 80196e4:	4b02      	ldr	r3, [pc, #8]	; (80196f0 <raise+0xc>)
 80196e6:	4601      	mov	r1, r0
 80196e8:	6818      	ldr	r0, [r3, #0]
 80196ea:	f7ff bfd3 	b.w	8019694 <_raise_r>
 80196ee:	bf00      	nop
 80196f0:	20000020 	.word	0x20000020

080196f4 <_kill_r>:
 80196f4:	b538      	push	{r3, r4, r5, lr}
 80196f6:	4d07      	ldr	r5, [pc, #28]	; (8019714 <_kill_r+0x20>)
 80196f8:	2300      	movs	r3, #0
 80196fa:	4604      	mov	r4, r0
 80196fc:	4608      	mov	r0, r1
 80196fe:	4611      	mov	r1, r2
 8019700:	602b      	str	r3, [r5, #0]
 8019702:	f7e7 faa9 	bl	8000c58 <_kill>
 8019706:	1c43      	adds	r3, r0, #1
 8019708:	d102      	bne.n	8019710 <_kill_r+0x1c>
 801970a:	682b      	ldr	r3, [r5, #0]
 801970c:	b103      	cbz	r3, 8019710 <_kill_r+0x1c>
 801970e:	6023      	str	r3, [r4, #0]
 8019710:	bd38      	pop	{r3, r4, r5, pc}
 8019712:	bf00      	nop
 8019714:	20012cf8 	.word	0x20012cf8

08019718 <_getpid_r>:
 8019718:	f7e7 ba96 	b.w	8000c48 <_getpid>

0801971c <__ascii_wctomb>:
 801971c:	b149      	cbz	r1, 8019732 <__ascii_wctomb+0x16>
 801971e:	2aff      	cmp	r2, #255	; 0xff
 8019720:	bf85      	ittet	hi
 8019722:	238a      	movhi	r3, #138	; 0x8a
 8019724:	6003      	strhi	r3, [r0, #0]
 8019726:	700a      	strbls	r2, [r1, #0]
 8019728:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801972c:	bf98      	it	ls
 801972e:	2001      	movls	r0, #1
 8019730:	4770      	bx	lr
 8019732:	4608      	mov	r0, r1
 8019734:	4770      	bx	lr
	...

08019738 <_fstat_r>:
 8019738:	b538      	push	{r3, r4, r5, lr}
 801973a:	4d07      	ldr	r5, [pc, #28]	; (8019758 <_fstat_r+0x20>)
 801973c:	2300      	movs	r3, #0
 801973e:	4604      	mov	r4, r0
 8019740:	4608      	mov	r0, r1
 8019742:	4611      	mov	r1, r2
 8019744:	602b      	str	r3, [r5, #0]
 8019746:	f7e7 fae8 	bl	8000d1a <_fstat>
 801974a:	1c43      	adds	r3, r0, #1
 801974c:	d102      	bne.n	8019754 <_fstat_r+0x1c>
 801974e:	682b      	ldr	r3, [r5, #0]
 8019750:	b103      	cbz	r3, 8019754 <_fstat_r+0x1c>
 8019752:	6023      	str	r3, [r4, #0]
 8019754:	bd38      	pop	{r3, r4, r5, pc}
 8019756:	bf00      	nop
 8019758:	20012cf8 	.word	0x20012cf8

0801975c <_isatty_r>:
 801975c:	b538      	push	{r3, r4, r5, lr}
 801975e:	4d06      	ldr	r5, [pc, #24]	; (8019778 <_isatty_r+0x1c>)
 8019760:	2300      	movs	r3, #0
 8019762:	4604      	mov	r4, r0
 8019764:	4608      	mov	r0, r1
 8019766:	602b      	str	r3, [r5, #0]
 8019768:	f7e7 fae7 	bl	8000d3a <_isatty>
 801976c:	1c43      	adds	r3, r0, #1
 801976e:	d102      	bne.n	8019776 <_isatty_r+0x1a>
 8019770:	682b      	ldr	r3, [r5, #0]
 8019772:	b103      	cbz	r3, 8019776 <_isatty_r+0x1a>
 8019774:	6023      	str	r3, [r4, #0]
 8019776:	bd38      	pop	{r3, r4, r5, pc}
 8019778:	20012cf8 	.word	0x20012cf8

0801977c <_malloc_usable_size_r>:
 801977c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019780:	1f18      	subs	r0, r3, #4
 8019782:	2b00      	cmp	r3, #0
 8019784:	bfbc      	itt	lt
 8019786:	580b      	ldrlt	r3, [r1, r0]
 8019788:	18c0      	addlt	r0, r0, r3
 801978a:	4770      	bx	lr
 801978c:	0000      	movs	r0, r0
	...

08019790 <sqrt>:
 8019790:	b508      	push	{r3, lr}
 8019792:	ed2d 8b04 	vpush	{d8-d9}
 8019796:	eeb0 8b40 	vmov.f64	d8, d0
 801979a:	f000 f823 	bl	80197e4 <__ieee754_sqrt>
 801979e:	4b10      	ldr	r3, [pc, #64]	; (80197e0 <sqrt+0x50>)
 80197a0:	f993 3000 	ldrsb.w	r3, [r3]
 80197a4:	3301      	adds	r3, #1
 80197a6:	d011      	beq.n	80197cc <sqrt+0x3c>
 80197a8:	eeb4 8b48 	vcmp.f64	d8, d8
 80197ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b0:	d60c      	bvs.n	80197cc <sqrt+0x3c>
 80197b2:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80197d8 <sqrt+0x48>
 80197b6:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80197ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197be:	d505      	bpl.n	80197cc <sqrt+0x3c>
 80197c0:	f7fe fc90 	bl	80180e4 <__errno>
 80197c4:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80197c8:	2321      	movs	r3, #33	; 0x21
 80197ca:	6003      	str	r3, [r0, #0]
 80197cc:	ecbd 8b04 	vpop	{d8-d9}
 80197d0:	bd08      	pop	{r3, pc}
 80197d2:	bf00      	nop
 80197d4:	f3af 8000 	nop.w
	...
 80197e0:	200001f0 	.word	0x200001f0

080197e4 <__ieee754_sqrt>:
 80197e4:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80197e8:	4770      	bx	lr
	...

080197ec <_init>:
 80197ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ee:	bf00      	nop
 80197f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197f2:	bc08      	pop	{r3}
 80197f4:	469e      	mov	lr, r3
 80197f6:	4770      	bx	lr

080197f8 <_fini>:
 80197f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197fa:	bf00      	nop
 80197fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197fe:	bc08      	pop	{r3}
 8019800:	469e      	mov	lr, r3
 8019802:	4770      	bx	lr
